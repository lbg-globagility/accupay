-- --------------------------------------------------------
-- Host:                         127.0.0.1
-- Server version:               10.3.12-MariaDB - mariadb.org binary distribution
-- Server OS:                    Win64
-- HeidiSQL Version:             10.1.0.5464
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- Dumping structure for table accupaydb_cinema2k.dates
DROP TABLE IF EXISTS `dates`;
CREATE TABLE IF NOT EXISTS `dates` (
  `DateValue` date DEFAULT NULL,
  UNIQUE KEY `DateValue` (`DateValue`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- Dumping data for table accupaydb_cinema2k.dates: ~14,975 rows (approximately)
DELETE FROM `dates`;
/*!40000 ALTER TABLE `dates` DISABLE KEYS */;
INSERT INTO `dates` (`DateValue`) VALUES
	('2010-01-01'),
	('2010-01-02'),
	('2010-01-03'),
	('2010-01-04'),
	('2010-01-05'),
	('2010-01-06'),
	('2010-01-07'),
	('2010-01-08'),
	('2010-01-09'),
	('2010-01-10'),
	('2010-01-11'),
	('2010-01-12'),
	('2010-01-13'),
	('2010-01-14'),
	('2010-01-15'),
	('2010-01-16'),
	('2010-01-17'),
	('2010-01-18'),
	('2010-01-19'),
	('2010-01-20'),
	('2010-01-21'),
	('2010-01-22'),
	('2010-01-23'),
	('2010-01-24'),
	('2010-01-25'),
	('2010-01-26'),
	('2010-01-27'),
	('2010-01-28'),
	('2010-01-29'),
	('2010-01-30'),
	('2010-01-31'),
	('2010-02-01'),
	('2010-02-02'),
	('2010-02-03'),
	('2010-02-04'),
	('2010-02-05'),
	('2010-02-06'),
	('2010-02-07'),
	('2010-02-08'),
	('2010-02-09'),
	('2010-02-10'),
	('2010-02-11'),
	('2010-02-12'),
	('2010-02-13'),
	('2010-02-14'),
	('2010-02-15'),
	('2010-02-16'),
	('2010-02-17'),
	('2010-02-18'),
	('2010-02-19'),
	('2010-02-20'),
	('2010-02-21'),
	('2010-02-22'),
	('2010-02-23'),
	('2010-02-24'),
	('2010-02-25'),
	('2010-02-26'),
	('2010-02-27'),
	('2010-02-28'),
	('2010-03-01'),
	('2010-03-02'),
	('2010-03-03'),
	('2010-03-04'),
	('2010-03-05'),
	('2010-03-06'),
	('2010-03-07'),
	('2010-03-08'),
	('2010-03-09'),
	('2010-03-10'),
	('2010-03-11'),
	('2010-03-12'),
	('2010-03-13'),
	('2010-03-14'),
	('2010-03-15'),
	('2010-03-16'),
	('2010-03-17'),
	('2010-03-18'),
	('2010-03-19'),
	('2010-03-20'),
	('2010-03-21'),
	('2010-03-22'),
	('2010-03-23'),
	('2010-03-24'),
	('2010-03-25'),
	('2010-03-26'),
	('2010-03-27'),
	('2010-03-28'),
	('2010-03-29'),
	('2010-03-30'),
	('2010-03-31'),
	('2010-04-01'),
	('2010-04-02'),
	('2010-04-03'),
	('2010-04-04'),
	('2010-04-05'),
	('2010-04-06'),
	('2010-04-07'),
	('2010-04-08'),
	('2010-04-09'),
	('2010-04-10'),
	('2010-04-11'),
	('2010-04-12'),
	('2010-04-13'),
	('2010-04-14'),
	('2010-04-15'),
	('2010-04-16'),
	('2010-04-17'),
	('2010-04-18'),
	('2010-04-19'),
	('2010-04-20'),
	('2010-04-21'),
	('2010-04-22'),
	('2010-04-23'),
	('2010-04-24'),
	('2010-04-25'),
	('2010-04-26'),
	('2010-04-27'),
	('2010-04-28'),
	('2010-04-29'),
	('2010-04-30'),
	('2010-05-01'),
	('2010-05-02'),
	('2010-05-03'),
	('2010-05-04'),
	('2010-05-05'),
	('2010-05-06'),
	('2010-05-07'),
	('2010-05-08'),
	('2010-05-09'),
	('2010-05-10'),
	('2010-05-11'),
	('2010-05-12'),
	('2010-05-13'),
	('2010-05-14'),
	('2010-05-15'),
	('2010-05-16'),
	('2010-05-17'),
	('2010-05-18'),
	('2010-05-19'),
	('2010-05-20'),
	('2010-05-21'),
	('2010-05-22'),
	('2010-05-23'),
	('2010-05-24'),
	('2010-05-25'),
	('2010-05-26'),
	('2010-05-27'),
	('2010-05-28'),
	('2010-05-29'),
	('2010-05-30'),
	('2010-05-31'),
	('2010-06-01'),
	('2010-06-02'),
	('2010-06-03'),
	('2010-06-04'),
	('2010-06-05'),
	('2010-06-06'),
	('2010-06-07'),
	('2010-06-08'),
	('2010-06-09'),
	('2010-06-10'),
	('2010-06-11'),
	('2010-06-12'),
	('2010-06-13'),
	('2010-06-14'),
	('2010-06-15'),
	('2010-06-16'),
	('2010-06-17'),
	('2010-06-18'),
	('2010-06-19'),
	('2010-06-20'),
	('2010-06-21'),
	('2010-06-22'),
	('2010-06-23'),
	('2010-06-24'),
	('2010-06-25'),
	('2010-06-26'),
	('2010-06-27'),
	('2010-06-28'),
	('2010-06-29'),
	('2010-06-30'),
	('2010-07-01'),
	('2010-07-02'),
	('2010-07-03'),
	('2010-07-04'),
	('2010-07-05'),
	('2010-07-06'),
	('2010-07-07'),
	('2010-07-08'),
	('2010-07-09'),
	('2010-07-10'),
	('2010-07-11'),
	('2010-07-12'),
	('2010-07-13'),
	('2010-07-14'),
	('2010-07-15'),
	('2010-07-16'),
	('2010-07-17'),
	('2010-07-18'),
	('2010-07-19'),
	('2010-07-20'),
	('2010-07-21'),
	('2010-07-22'),
	('2010-07-23'),
	('2010-07-24'),
	('2010-07-25'),
	('2010-07-26'),
	('2010-07-27'),
	('2010-07-28'),
	('2010-07-29'),
	('2010-07-30'),
	('2010-07-31'),
	('2010-08-01'),
	('2010-08-02'),
	('2010-08-03'),
	('2010-08-04'),
	('2010-08-05'),
	('2010-08-06'),
	('2010-08-07'),
	('2010-08-08'),
	('2010-08-09'),
	('2010-08-10'),
	('2010-08-11'),
	('2010-08-12'),
	('2010-08-13'),
	('2010-08-14'),
	('2010-08-15'),
	('2010-08-16'),
	('2010-08-17'),
	('2010-08-18'),
	('2010-08-19'),
	('2010-08-20'),
	('2010-08-21'),
	('2010-08-22'),
	('2010-08-23'),
	('2010-08-24'),
	('2010-08-25'),
	('2010-08-26'),
	('2010-08-27'),
	('2010-08-28'),
	('2010-08-29'),
	('2010-08-30'),
	('2010-08-31'),
	('2010-09-01'),
	('2010-09-02'),
	('2010-09-03'),
	('2010-09-04'),
	('2010-09-05'),
	('2010-09-06'),
	('2010-09-07'),
	('2010-09-08'),
	('2010-09-09'),
	('2010-09-10'),
	('2010-09-11'),
	('2010-09-12'),
	('2010-09-13'),
	('2010-09-14'),
	('2010-09-15'),
	('2010-09-16'),
	('2010-09-17'),
	('2010-09-18'),
	('2010-09-19'),
	('2010-09-20'),
	('2010-09-21'),
	('2010-09-22'),
	('2010-09-23'),
	('2010-09-24'),
	('2010-09-25'),
	('2010-09-26'),
	('2010-09-27'),
	('2010-09-28'),
	('2010-09-29'),
	('2010-09-30'),
	('2010-10-01'),
	('2010-10-02'),
	('2010-10-03'),
	('2010-10-04'),
	('2010-10-05'),
	('2010-10-06'),
	('2010-10-07'),
	('2010-10-08'),
	('2010-10-09'),
	('2010-10-10'),
	('2010-10-11'),
	('2010-10-12'),
	('2010-10-13'),
	('2010-10-14'),
	('2010-10-15'),
	('2010-10-16'),
	('2010-10-17'),
	('2010-10-18'),
	('2010-10-19'),
	('2010-10-20'),
	('2010-10-21'),
	('2010-10-22'),
	('2010-10-23'),
	('2010-10-24'),
	('2010-10-25'),
	('2010-10-26'),
	('2010-10-27'),
	('2010-10-28'),
	('2010-10-29'),
	('2010-10-30'),
	('2010-10-31'),
	('2010-11-01'),
	('2010-11-02'),
	('2010-11-03'),
	('2010-11-04'),
	('2010-11-05'),
	('2010-11-06'),
	('2010-11-07'),
	('2010-11-08'),
	('2010-11-09'),
	('2010-11-10'),
	('2010-11-11'),
	('2010-11-12'),
	('2010-11-13'),
	('2010-11-14'),
	('2010-11-15'),
	('2010-11-16'),
	('2010-11-17'),
	('2010-11-18'),
	('2010-11-19'),
	('2010-11-20'),
	('2010-11-21'),
	('2010-11-22'),
	('2010-11-23'),
	('2010-11-24'),
	('2010-11-25'),
	('2010-11-26'),
	('2010-11-27'),
	('2010-11-28'),
	('2010-11-29'),
	('2010-11-30'),
	('2010-12-01'),
	('2010-12-02'),
	('2010-12-03'),
	('2010-12-04'),
	('2010-12-05'),
	('2010-12-06'),
	('2010-12-07'),
	('2010-12-08'),
	('2010-12-09'),
	('2010-12-10'),
	('2010-12-11'),
	('2010-12-12'),
	('2010-12-13'),
	('2010-12-14'),
	('2010-12-15'),
	('2010-12-16'),
	('2010-12-17'),
	('2010-12-18'),
	('2010-12-19'),
	('2010-12-20'),
	('2010-12-21'),
	('2010-12-22'),
	('2010-12-23'),
	('2010-12-24'),
	('2010-12-25'),
	('2010-12-26'),
	('2010-12-27'),
	('2010-12-28'),
	('2010-12-29'),
	('2010-12-30'),
	('2010-12-31'),
	('2011-01-01'),
	('2011-01-02'),
	('2011-01-03'),
	('2011-01-04'),
	('2011-01-05'),
	('2011-01-06'),
	('2011-01-07'),
	('2011-01-08'),
	('2011-01-09'),
	('2011-01-10'),
	('2011-01-11'),
	('2011-01-12'),
	('2011-01-13'),
	('2011-01-14'),
	('2011-01-15'),
	('2011-01-16'),
	('2011-01-17'),
	('2011-01-18'),
	('2011-01-19'),
	('2011-01-20'),
	('2011-01-21'),
	('2011-01-22'),
	('2011-01-23'),
	('2011-01-24'),
	('2011-01-25'),
	('2011-01-26'),
	('2011-01-27'),
	('2011-01-28'),
	('2011-01-29'),
	('2011-01-30'),
	('2011-01-31'),
	('2011-02-01'),
	('2011-02-02'),
	('2011-02-03'),
	('2011-02-04'),
	('2011-02-05'),
	('2011-02-06'),
	('2011-02-07'),
	('2011-02-08'),
	('2011-02-09'),
	('2011-02-10'),
	('2011-02-11'),
	('2011-02-12'),
	('2011-02-13'),
	('2011-02-14'),
	('2011-02-15'),
	('2011-02-16'),
	('2011-02-17'),
	('2011-02-18'),
	('2011-02-19'),
	('2011-02-20'),
	('2011-02-21'),
	('2011-02-22'),
	('2011-02-23'),
	('2011-02-24'),
	('2011-02-25'),
	('2011-02-26'),
	('2011-02-27'),
	('2011-02-28'),
	('2011-03-01'),
	('2011-03-02'),
	('2011-03-03'),
	('2011-03-04'),
	('2011-03-05'),
	('2011-03-06'),
	('2011-03-07'),
	('2011-03-08'),
	('2011-03-09'),
	('2011-03-10'),
	('2011-03-11'),
	('2011-03-12'),
	('2011-03-13'),
	('2011-03-14'),
	('2011-03-15'),
	('2011-03-16'),
	('2011-03-17'),
	('2011-03-18'),
	('2011-03-19'),
	('2011-03-20'),
	('2011-03-21'),
	('2011-03-22'),
	('2011-03-23'),
	('2011-03-24'),
	('2011-03-25'),
	('2011-03-26'),
	('2011-03-27'),
	('2011-03-28'),
	('2011-03-29'),
	('2011-03-30'),
	('2011-03-31'),
	('2011-04-01'),
	('2011-04-02'),
	('2011-04-03'),
	('2011-04-04'),
	('2011-04-05'),
	('2011-04-06'),
	('2011-04-07'),
	('2011-04-08'),
	('2011-04-09'),
	('2011-04-10'),
	('2011-04-11'),
	('2011-04-12'),
	('2011-04-13'),
	('2011-04-14'),
	('2011-04-15'),
	('2011-04-16'),
	('2011-04-17'),
	('2011-04-18'),
	('2011-04-19'),
	('2011-04-20'),
	('2011-04-21'),
	('2011-04-22'),
	('2011-04-23'),
	('2011-04-24'),
	('2011-04-25'),
	('2011-04-26'),
	('2011-04-27'),
	('2011-04-28'),
	('2011-04-29'),
	('2011-04-30'),
	('2011-05-01'),
	('2011-05-02'),
	('2011-05-03'),
	('2011-05-04'),
	('2011-05-05'),
	('2011-05-06'),
	('2011-05-07'),
	('2011-05-08'),
	('2011-05-09'),
	('2011-05-10'),
	('2011-05-11'),
	('2011-05-12'),
	('2011-05-13'),
	('2011-05-14'),
	('2011-05-15'),
	('2011-05-16'),
	('2011-05-17'),
	('2011-05-18'),
	('2011-05-19'),
	('2011-05-20'),
	('2011-05-21'),
	('2011-05-22'),
	('2011-05-23'),
	('2011-05-24'),
	('2011-05-25'),
	('2011-05-26'),
	('2011-05-27'),
	('2011-05-28'),
	('2011-05-29'),
	('2011-05-30'),
	('2011-05-31'),
	('2011-06-01'),
	('2011-06-02'),
	('2011-06-03'),
	('2011-06-04'),
	('2011-06-05'),
	('2011-06-06'),
	('2011-06-07'),
	('2011-06-08'),
	('2011-06-09'),
	('2011-06-10'),
	('2011-06-11'),
	('2011-06-12'),
	('2011-06-13'),
	('2011-06-14'),
	('2011-06-15'),
	('2011-06-16'),
	('2011-06-17'),
	('2011-06-18'),
	('2011-06-19'),
	('2011-06-20'),
	('2011-06-21'),
	('2011-06-22'),
	('2011-06-23'),
	('2011-06-24'),
	('2011-06-25'),
	('2011-06-26'),
	('2011-06-27'),
	('2011-06-28'),
	('2011-06-29'),
	('2011-06-30'),
	('2011-07-01'),
	('2011-07-02'),
	('2011-07-03'),
	('2011-07-04'),
	('2011-07-05'),
	('2011-07-06'),
	('2011-07-07'),
	('2011-07-08'),
	('2011-07-09'),
	('2011-07-10'),
	('2011-07-11'),
	('2011-07-12'),
	('2011-07-13'),
	('2011-07-14'),
	('2011-07-15'),
	('2011-07-16'),
	('2011-07-17'),
	('2011-07-18'),
	('2011-07-19'),
	('2011-07-20'),
	('2011-07-21'),
	('2011-07-22'),
	('2011-07-23'),
	('2011-07-24'),
	('2011-07-25'),
	('2011-07-26'),
	('2011-07-27'),
	('2011-07-28'),
	('2011-07-29'),
	('2011-07-30'),
	('2011-07-31'),
	('2011-08-01'),
	('2011-08-02'),
	('2011-08-03'),
	('2011-08-04'),
	('2011-08-05'),
	('2011-08-06'),
	('2011-08-07'),
	('2011-08-08'),
	('2011-08-09'),
	('2011-08-10'),
	('2011-08-11'),
	('2011-08-12'),
	('2011-08-13'),
	('2011-08-14'),
	('2011-08-15'),
	('2011-08-16'),
	('2011-08-17'),
	('2011-08-18'),
	('2011-08-19'),
	('2011-08-20'),
	('2011-08-21'),
	('2011-08-22'),
	('2011-08-23'),
	('2011-08-24'),
	('2011-08-25'),
	('2011-08-26'),
	('2011-08-27'),
	('2011-08-28'),
	('2011-08-29'),
	('2011-08-30'),
	('2011-08-31'),
	('2011-09-01'),
	('2011-09-02'),
	('2011-09-03'),
	('2011-09-04'),
	('2011-09-05'),
	('2011-09-06'),
	('2011-09-07'),
	('2011-09-08'),
	('2011-09-09'),
	('2011-09-10'),
	('2011-09-11'),
	('2011-09-12'),
	('2011-09-13'),
	('2011-09-14'),
	('2011-09-15'),
	('2011-09-16'),
	('2011-09-17'),
	('2011-09-18'),
	('2011-09-19'),
	('2011-09-20'),
	('2011-09-21'),
	('2011-09-22'),
	('2011-09-23'),
	('2011-09-24'),
	('2011-09-25'),
	('2011-09-26'),
	('2011-09-27'),
	('2011-09-28'),
	('2011-09-29'),
	('2011-09-30'),
	('2011-10-01'),
	('2011-10-02'),
	('2011-10-03'),
	('2011-10-04'),
	('2011-10-05'),
	('2011-10-06'),
	('2011-10-07'),
	('2011-10-08'),
	('2011-10-09'),
	('2011-10-10'),
	('2011-10-11'),
	('2011-10-12'),
	('2011-10-13'),
	('2011-10-14'),
	('2011-10-15'),
	('2011-10-16'),
	('2011-10-17'),
	('2011-10-18'),
	('2011-10-19'),
	('2011-10-20'),
	('2011-10-21'),
	('2011-10-22'),
	('2011-10-23'),
	('2011-10-24'),
	('2011-10-25'),
	('2011-10-26'),
	('2011-10-27'),
	('2011-10-28'),
	('2011-10-29'),
	('2011-10-30'),
	('2011-10-31'),
	('2011-11-01'),
	('2011-11-02'),
	('2011-11-03'),
	('2011-11-04'),
	('2011-11-05'),
	('2011-11-06'),
	('2011-11-07'),
	('2011-11-08'),
	('2011-11-09'),
	('2011-11-10'),
	('2011-11-11'),
	('2011-11-12'),
	('2011-11-13'),
	('2011-11-14'),
	('2011-11-15'),
	('2011-11-16'),
	('2011-11-17'),
	('2011-11-18'),
	('2011-11-19'),
	('2011-11-20'),
	('2011-11-21'),
	('2011-11-22'),
	('2011-11-23'),
	('2011-11-24'),
	('2011-11-25'),
	('2011-11-26'),
	('2011-11-27'),
	('2011-11-28'),
	('2011-11-29'),
	('2011-11-30'),
	('2011-12-01'),
	('2011-12-02'),
	('2011-12-03'),
	('2011-12-04'),
	('2011-12-05'),
	('2011-12-06'),
	('2011-12-07'),
	('2011-12-08'),
	('2011-12-09'),
	('2011-12-10'),
	('2011-12-11'),
	('2011-12-12'),
	('2011-12-13'),
	('2011-12-14'),
	('2011-12-15'),
	('2011-12-16'),
	('2011-12-17'),
	('2011-12-18'),
	('2011-12-19'),
	('2011-12-20'),
	('2011-12-21'),
	('2011-12-22'),
	('2011-12-23'),
	('2011-12-24'),
	('2011-12-25'),
	('2011-12-26'),
	('2011-12-27'),
	('2011-12-28'),
	('2011-12-29'),
	('2011-12-30'),
	('2011-12-31'),
	('2012-01-01'),
	('2012-01-02'),
	('2012-01-03'),
	('2012-01-04'),
	('2012-01-05'),
	('2012-01-06'),
	('2012-01-07'),
	('2012-01-08'),
	('2012-01-09'),
	('2012-01-10'),
	('2012-01-11'),
	('2012-01-12'),
	('2012-01-13'),
	('2012-01-14'),
	('2012-01-15'),
	('2012-01-16'),
	('2012-01-17'),
	('2012-01-18'),
	('2012-01-19'),
	('2012-01-20'),
	('2012-01-21'),
	('2012-01-22'),
	('2012-01-23'),
	('2012-01-24'),
	('2012-01-25'),
	('2012-01-26'),
	('2012-01-27'),
	('2012-01-28'),
	('2012-01-29'),
	('2012-01-30'),
	('2012-01-31'),
	('2012-02-01'),
	('2012-02-02'),
	('2012-02-03'),
	('2012-02-04'),
	('2012-02-05'),
	('2012-02-06'),
	('2012-02-07'),
	('2012-02-08'),
	('2012-02-09'),
	('2012-02-10'),
	('2012-02-11'),
	('2012-02-12'),
	('2012-02-13'),
	('2012-02-14'),
	('2012-02-15'),
	('2012-02-16'),
	('2012-02-17'),
	('2012-02-18'),
	('2012-02-19'),
	('2012-02-20'),
	('2012-02-21'),
	('2012-02-22'),
	('2012-02-23'),
	('2012-02-24'),
	('2012-02-25'),
	('2012-02-26'),
	('2012-02-27'),
	('2012-02-28'),
	('2012-02-29'),
	('2012-03-01'),
	('2012-03-02'),
	('2012-03-03'),
	('2012-03-04'),
	('2012-03-05'),
	('2012-03-06'),
	('2012-03-07'),
	('2012-03-08'),
	('2012-03-09'),
	('2012-03-10'),
	('2012-03-11'),
	('2012-03-12'),
	('2012-03-13'),
	('2012-03-14'),
	('2012-03-15'),
	('2012-03-16'),
	('2012-03-17'),
	('2012-03-18'),
	('2012-03-19'),
	('2012-03-20'),
	('2012-03-21'),
	('2012-03-22'),
	('2012-03-23'),
	('2012-03-24'),
	('2012-03-25'),
	('2012-03-26'),
	('2012-03-27'),
	('2012-03-28'),
	('2012-03-29'),
	('2012-03-30'),
	('2012-03-31'),
	('2012-04-01'),
	('2012-04-02'),
	('2012-04-03'),
	('2012-04-04'),
	('2012-04-05'),
	('2012-04-06'),
	('2012-04-07'),
	('2012-04-08'),
	('2012-04-09'),
	('2012-04-10'),
	('2012-04-11'),
	('2012-04-12'),
	('2012-04-13'),
	('2012-04-14'),
	('2012-04-15'),
	('2012-04-16'),
	('2012-04-17'),
	('2012-04-18'),
	('2012-04-19'),
	('2012-04-20'),
	('2012-04-21'),
	('2012-04-22'),
	('2012-04-23'),
	('2012-04-24'),
	('2012-04-25'),
	('2012-04-26'),
	('2012-04-27'),
	('2012-04-28'),
	('2012-04-29'),
	('2012-04-30'),
	('2012-05-01'),
	('2012-05-02'),
	('2012-05-03'),
	('2012-05-04'),
	('2012-05-05'),
	('2012-05-06'),
	('2012-05-07'),
	('2012-05-08'),
	('2012-05-09'),
	('2012-05-10'),
	('2012-05-11'),
	('2012-05-12'),
	('2012-05-13'),
	('2012-05-14'),
	('2012-05-15'),
	('2012-05-16'),
	('2012-05-17'),
	('2012-05-18'),
	('2012-05-19'),
	('2012-05-20'),
	('2012-05-21'),
	('2012-05-22'),
	('2012-05-23'),
	('2012-05-24'),
	('2012-05-25'),
	('2012-05-26'),
	('2012-05-27'),
	('2012-05-28'),
	('2012-05-29'),
	('2012-05-30'),
	('2012-05-31'),
	('2012-06-01'),
	('2012-06-02'),
	('2012-06-03'),
	('2012-06-04'),
	('2012-06-05'),
	('2012-06-06'),
	('2012-06-07'),
	('2012-06-08'),
	('2012-06-09'),
	('2012-06-10'),
	('2012-06-11'),
	('2012-06-12'),
	('2012-06-13'),
	('2012-06-14'),
	('2012-06-15'),
	('2012-06-16'),
	('2012-06-17'),
	('2012-06-18'),
	('2012-06-19'),
	('2012-06-20'),
	('2012-06-21'),
	('2012-06-22'),
	('2012-06-23'),
	('2012-06-24'),
	('2012-06-25'),
	('2012-06-26'),
	('2012-06-27'),
	('2012-06-28'),
	('2012-06-29'),
	('2012-06-30'),
	('2012-07-01'),
	('2012-07-02'),
	('2012-07-03'),
	('2012-07-04'),
	('2012-07-05'),
	('2012-07-06'),
	('2012-07-07'),
	('2012-07-08'),
	('2012-07-09'),
	('2012-07-10'),
	('2012-07-11'),
	('2012-07-12'),
	('2012-07-13'),
	('2012-07-14'),
	('2012-07-15'),
	('2012-07-16'),
	('2012-07-17'),
	('2012-07-18'),
	('2012-07-19'),
	('2012-07-20'),
	('2012-07-21'),
	('2012-07-22'),
	('2012-07-23'),
	('2012-07-24'),
	('2012-07-25'),
	('2012-07-26'),
	('2012-07-27'),
	('2012-07-28'),
	('2012-07-29'),
	('2012-07-30'),
	('2012-07-31'),
	('2012-08-01'),
	('2012-08-02'),
	('2012-08-03'),
	('2012-08-04'),
	('2012-08-05'),
	('2012-08-06'),
	('2012-08-07'),
	('2012-08-08'),
	('2012-08-09'),
	('2012-08-10'),
	('2012-08-11'),
	('2012-08-12'),
	('2012-08-13'),
	('2012-08-14'),
	('2012-08-15'),
	('2012-08-16'),
	('2012-08-17'),
	('2012-08-18'),
	('2012-08-19'),
	('2012-08-20'),
	('2012-08-21'),
	('2012-08-22'),
	('2012-08-23'),
	('2012-08-24'),
	('2012-08-25'),
	('2012-08-26'),
	('2012-08-27'),
	('2012-08-28'),
	('2012-08-29'),
	('2012-08-30'),
	('2012-08-31'),
	('2012-09-01'),
	('2012-09-02'),
	('2012-09-03'),
	('2012-09-04'),
	('2012-09-05'),
	('2012-09-06'),
	('2012-09-07'),
	('2012-09-08'),
	('2012-09-09'),
	('2012-09-10'),
	('2012-09-11'),
	('2012-09-12'),
	('2012-09-13'),
	('2012-09-14'),
	('2012-09-15'),
	('2012-09-16'),
	('2012-09-17'),
	('2012-09-18'),
	('2012-09-19'),
	('2012-09-20'),
	('2012-09-21'),
	('2012-09-22'),
	('2012-09-23'),
	('2012-09-24'),
	('2012-09-25'),
	('2012-09-26'),
	('2012-09-27'),
	('2012-09-28'),
	('2012-09-29'),
	('2012-09-30'),
	('2012-10-01'),
	('2012-10-02'),
	('2012-10-03'),
	('2012-10-04'),
	('2012-10-05'),
	('2012-10-06'),
	('2012-10-07'),
	('2012-10-08'),
	('2012-10-09'),
	('2012-10-10'),
	('2012-10-11'),
	('2012-10-12'),
	('2012-10-13'),
	('2012-10-14'),
	('2012-10-15'),
	('2012-10-16'),
	('2012-10-17'),
	('2012-10-18'),
	('2012-10-19'),
	('2012-10-20'),
	('2012-10-21'),
	('2012-10-22'),
	('2012-10-23'),
	('2012-10-24'),
	('2012-10-25'),
	('2012-10-26'),
	('2012-10-27'),
	('2012-10-28'),
	('2012-10-29'),
	('2012-10-30'),
	('2012-10-31'),
	('2012-11-01'),
	('2012-11-02'),
	('2012-11-03'),
	('2012-11-04'),
	('2012-11-05'),
	('2012-11-06'),
	('2012-11-07'),
	('2012-11-08'),
	('2012-11-09'),
	('2012-11-10'),
	('2012-11-11'),
	('2012-11-12'),
	('2012-11-13'),
	('2012-11-14'),
	('2012-11-15'),
	('2012-11-16'),
	('2012-11-17'),
	('2012-11-18'),
	('2012-11-19'),
	('2012-11-20'),
	('2012-11-21'),
	('2012-11-22'),
	('2012-11-23'),
	('2012-11-24'),
	('2012-11-25'),
	('2012-11-26'),
	('2012-11-27'),
	('2012-11-28'),
	('2012-11-29'),
	('2012-11-30'),
	('2012-12-01'),
	('2012-12-02'),
	('2012-12-03'),
	('2012-12-04'),
	('2012-12-05'),
	('2012-12-06'),
	('2012-12-07'),
	('2012-12-08'),
	('2012-12-09'),
	('2012-12-10'),
	('2012-12-11'),
	('2012-12-12'),
	('2012-12-13'),
	('2012-12-14'),
	('2012-12-15'),
	('2012-12-16'),
	('2012-12-17'),
	('2012-12-18'),
	('2012-12-19'),
	('2012-12-20'),
	('2012-12-21'),
	('2012-12-22'),
	('2012-12-23'),
	('2012-12-24'),
	('2012-12-25'),
	('2012-12-26'),
	('2012-12-27'),
	('2012-12-28'),
	('2012-12-29'),
	('2012-12-30'),
	('2012-12-31'),
	('2013-01-01'),
	('2013-01-02'),
	('2013-01-03'),
	('2013-01-04'),
	('2013-01-05'),
	('2013-01-06'),
	('2013-01-07'),
	('2013-01-08'),
	('2013-01-09'),
	('2013-01-10'),
	('2013-01-11'),
	('2013-01-12'),
	('2013-01-13'),
	('2013-01-14'),
	('2013-01-15'),
	('2013-01-16'),
	('2013-01-17'),
	('2013-01-18'),
	('2013-01-19'),
	('2013-01-20'),
	('2013-01-21'),
	('2013-01-22'),
	('2013-01-23'),
	('2013-01-24'),
	('2013-01-25'),
	('2013-01-26'),
	('2013-01-27'),
	('2013-01-28'),
	('2013-01-29'),
	('2013-01-30'),
	('2013-01-31'),
	('2013-02-01'),
	('2013-02-02'),
	('2013-02-03'),
	('2013-02-04'),
	('2013-02-05'),
	('2013-02-06'),
	('2013-02-07'),
	('2013-02-08'),
	('2013-02-09'),
	('2013-02-10'),
	('2013-02-11'),
	('2013-02-12'),
	('2013-02-13'),
	('2013-02-14'),
	('2013-02-15'),
	('2013-02-16'),
	('2013-02-17'),
	('2013-02-18'),
	('2013-02-19'),
	('2013-02-20'),
	('2013-02-21'),
	('2013-02-22'),
	('2013-02-23'),
	('2013-02-24'),
	('2013-02-25'),
	('2013-02-26'),
	('2013-02-27'),
	('2013-02-28'),
	('2013-03-01'),
	('2013-03-02'),
	('2013-03-03'),
	('2013-03-04'),
	('2013-03-05'),
	('2013-03-06'),
	('2013-03-07'),
	('2013-03-08'),
	('2013-03-09'),
	('2013-03-10'),
	('2013-03-11'),
	('2013-03-12'),
	('2013-03-13'),
	('2013-03-14'),
	('2013-03-15'),
	('2013-03-16'),
	('2013-03-17'),
	('2013-03-18'),
	('2013-03-19'),
	('2013-03-20'),
	('2013-03-21'),
	('2013-03-22'),
	('2013-03-23'),
	('2013-03-24'),
	('2013-03-25'),
	('2013-03-26'),
	('2013-03-27'),
	('2013-03-28'),
	('2013-03-29'),
	('2013-03-30'),
	('2013-03-31'),
	('2013-04-01'),
	('2013-04-02'),
	('2013-04-03'),
	('2013-04-04'),
	('2013-04-05'),
	('2013-04-06'),
	('2013-04-07'),
	('2013-04-08'),
	('2013-04-09'),
	('2013-04-10'),
	('2013-04-11'),
	('2013-04-12'),
	('2013-04-13'),
	('2013-04-14'),
	('2013-04-15'),
	('2013-04-16'),
	('2013-04-17'),
	('2013-04-18'),
	('2013-04-19'),
	('2013-04-20'),
	('2013-04-21'),
	('2013-04-22'),
	('2013-04-23'),
	('2013-04-24'),
	('2013-04-25'),
	('2013-04-26'),
	('2013-04-27'),
	('2013-04-28'),
	('2013-04-29'),
	('2013-04-30'),
	('2013-05-01'),
	('2013-05-02'),
	('2013-05-03'),
	('2013-05-04'),
	('2013-05-05'),
	('2013-05-06'),
	('2013-05-07'),
	('2013-05-08'),
	('2013-05-09'),
	('2013-05-10'),
	('2013-05-11'),
	('2013-05-12'),
	('2013-05-13'),
	('2013-05-14'),
	('2013-05-15'),
	('2013-05-16'),
	('2013-05-17'),
	('2013-05-18'),
	('2013-05-19'),
	('2013-05-20'),
	('2013-05-21'),
	('2013-05-22'),
	('2013-05-23'),
	('2013-05-24'),
	('2013-05-25'),
	('2013-05-26'),
	('2013-05-27'),
	('2013-05-28'),
	('2013-05-29'),
	('2013-05-30'),
	('2013-05-31'),
	('2013-06-01'),
	('2013-06-02'),
	('2013-06-03'),
	('2013-06-04'),
	('2013-06-05'),
	('2013-06-06'),
	('2013-06-07'),
	('2013-06-08'),
	('2013-06-09'),
	('2013-06-10'),
	('2013-06-11'),
	('2013-06-12'),
	('2013-06-13'),
	('2013-06-14'),
	('2013-06-15'),
	('2013-06-16'),
	('2013-06-17'),
	('2013-06-18'),
	('2013-06-19'),
	('2013-06-20'),
	('2013-06-21'),
	('2013-06-22'),
	('2013-06-23'),
	('2013-06-24'),
	('2013-06-25'),
	('2013-06-26'),
	('2013-06-27'),
	('2013-06-28'),
	('2013-06-29'),
	('2013-06-30'),
	('2013-07-01'),
	('2013-07-02'),
	('2013-07-03'),
	('2013-07-04'),
	('2013-07-05'),
	('2013-07-06'),
	('2013-07-07'),
	('2013-07-08'),
	('2013-07-09'),
	('2013-07-10'),
	('2013-07-11'),
	('2013-07-12'),
	('2013-07-13'),
	('2013-07-14'),
	('2013-07-15'),
	('2013-07-16'),
	('2013-07-17'),
	('2013-07-18'),
	('2013-07-19'),
	('2013-07-20'),
	('2013-07-21'),
	('2013-07-22'),
	('2013-07-23'),
	('2013-07-24'),
	('2013-07-25'),
	('2013-07-26'),
	('2013-07-27'),
	('2013-07-28'),
	('2013-07-29'),
	('2013-07-30'),
	('2013-07-31'),
	('2013-08-01'),
	('2013-08-02'),
	('2013-08-03'),
	('2013-08-04'),
	('2013-08-05'),
	('2013-08-06'),
	('2013-08-07'),
	('2013-08-08'),
	('2013-08-09'),
	('2013-08-10'),
	('2013-08-11'),
	('2013-08-12'),
	('2013-08-13'),
	('2013-08-14'),
	('2013-08-15'),
	('2013-08-16'),
	('2013-08-17'),
	('2013-08-18'),
	('2013-08-19'),
	('2013-08-20'),
	('2013-08-21'),
	('2013-08-22'),
	('2013-08-23'),
	('2013-08-24'),
	('2013-08-25'),
	('2013-08-26'),
	('2013-08-27'),
	('2013-08-28'),
	('2013-08-29'),
	('2013-08-30'),
	('2013-08-31'),
	('2013-09-01'),
	('2013-09-02'),
	('2013-09-03'),
	('2013-09-04'),
	('2013-09-05'),
	('2013-09-06'),
	('2013-09-07'),
	('2013-09-08'),
	('2013-09-09'),
	('2013-09-10'),
	('2013-09-11'),
	('2013-09-12'),
	('2013-09-13'),
	('2013-09-14'),
	('2013-09-15'),
	('2013-09-16'),
	('2013-09-17'),
	('2013-09-18'),
	('2013-09-19'),
	('2013-09-20'),
	('2013-09-21'),
	('2013-09-22'),
	('2013-09-23'),
	('2013-09-24'),
	('2013-09-25'),
	('2013-09-26'),
	('2013-09-27'),
	('2013-09-28'),
	('2013-09-29'),
	('2013-09-30'),
	('2013-10-01'),
	('2013-10-02'),
	('2013-10-03'),
	('2013-10-04'),
	('2013-10-05'),
	('2013-10-06'),
	('2013-10-07'),
	('2013-10-08'),
	('2013-10-09'),
	('2013-10-10'),
	('2013-10-11'),
	('2013-10-12'),
	('2013-10-13'),
	('2013-10-14'),
	('2013-10-15'),
	('2013-10-16'),
	('2013-10-17'),
	('2013-10-18'),
	('2013-10-19'),
	('2013-10-20'),
	('2013-10-21'),
	('2013-10-22'),
	('2013-10-23'),
	('2013-10-24'),
	('2013-10-25'),
	('2013-10-26'),
	('2013-10-27'),
	('2013-10-28'),
	('2013-10-29'),
	('2013-10-30'),
	('2013-10-31'),
	('2013-11-01'),
	('2013-11-02'),
	('2013-11-03'),
	('2013-11-04'),
	('2013-11-05'),
	('2013-11-06'),
	('2013-11-07'),
	('2013-11-08'),
	('2013-11-09'),
	('2013-11-10'),
	('2013-11-11'),
	('2013-11-12'),
	('2013-11-13'),
	('2013-11-14'),
	('2013-11-15'),
	('2013-11-16'),
	('2013-11-17'),
	('2013-11-18'),
	('2013-11-19'),
	('2013-11-20'),
	('2013-11-21'),
	('2013-11-22'),
	('2013-11-23'),
	('2013-11-24'),
	('2013-11-25'),
	('2013-11-26'),
	('2013-11-27'),
	('2013-11-28'),
	('2013-11-29'),
	('2013-11-30'),
	('2013-12-01'),
	('2013-12-02'),
	('2013-12-03'),
	('2013-12-04'),
	('2013-12-05'),
	('2013-12-06'),
	('2013-12-07'),
	('2013-12-08'),
	('2013-12-09'),
	('2013-12-10'),
	('2013-12-11'),
	('2013-12-12'),
	('2013-12-13'),
	('2013-12-14'),
	('2013-12-15'),
	('2013-12-16'),
	('2013-12-17'),
	('2013-12-18'),
	('2013-12-19'),
	('2013-12-20'),
	('2013-12-21'),
	('2013-12-22'),
	('2013-12-23'),
	('2013-12-24'),
	('2013-12-25'),
	('2013-12-26'),
	('2013-12-27'),
	('2013-12-28'),
	('2013-12-29'),
	('2013-12-30'),
	('2013-12-31'),
	('2014-01-01'),
	('2014-01-02'),
	('2014-01-03'),
	('2014-01-04'),
	('2014-01-05'),
	('2014-01-06'),
	('2014-01-07'),
	('2014-01-08'),
	('2014-01-09'),
	('2014-01-10'),
	('2014-01-11'),
	('2014-01-12'),
	('2014-01-13'),
	('2014-01-14'),
	('2014-01-15'),
	('2014-01-16'),
	('2014-01-17'),
	('2014-01-18'),
	('2014-01-19'),
	('2014-01-20'),
	('2014-01-21'),
	('2014-01-22'),
	('2014-01-23'),
	('2014-01-24'),
	('2014-01-25'),
	('2014-01-26'),
	('2014-01-27'),
	('2014-01-28'),
	('2014-01-29'),
	('2014-01-30'),
	('2014-01-31'),
	('2014-02-01'),
	('2014-02-02'),
	('2014-02-03'),
	('2014-02-04'),
	('2014-02-05'),
	('2014-02-06'),
	('2014-02-07'),
	('2014-02-08'),
	('2014-02-09'),
	('2014-02-10'),
	('2014-02-11'),
	('2014-02-12'),
	('2014-02-13'),
	('2014-02-14'),
	('2014-02-15'),
	('2014-02-16'),
	('2014-02-17'),
	('2014-02-18'),
	('2014-02-19'),
	('2014-02-20'),
	('2014-02-21'),
	('2014-02-22'),
	('2014-02-23'),
	('2014-02-24'),
	('2014-02-25'),
	('2014-02-26'),
	('2014-02-27'),
	('2014-02-28'),
	('2014-03-01'),
	('2014-03-02'),
	('2014-03-03'),
	('2014-03-04'),
	('2014-03-05'),
	('2014-03-06'),
	('2014-03-07'),
	('2014-03-08'),
	('2014-03-09'),
	('2014-03-10'),
	('2014-03-11'),
	('2014-03-12'),
	('2014-03-13'),
	('2014-03-14'),
	('2014-03-15'),
	('2014-03-16'),
	('2014-03-17'),
	('2014-03-18'),
	('2014-03-19'),
	('2014-03-20'),
	('2014-03-21'),
	('2014-03-22'),
	('2014-03-23'),
	('2014-03-24'),
	('2014-03-25'),
	('2014-03-26'),
	('2014-03-27'),
	('2014-03-28'),
	('2014-03-29'),
	('2014-03-30'),
	('2014-03-31'),
	('2014-04-01'),
	('2014-04-02'),
	('2014-04-03'),
	('2014-04-04'),
	('2014-04-05'),
	('2014-04-06'),
	('2014-04-07'),
	('2014-04-08'),
	('2014-04-09'),
	('2014-04-10'),
	('2014-04-11'),
	('2014-04-12'),
	('2014-04-13'),
	('2014-04-14'),
	('2014-04-15'),
	('2014-04-16'),
	('2014-04-17'),
	('2014-04-18'),
	('2014-04-19'),
	('2014-04-20'),
	('2014-04-21'),
	('2014-04-22'),
	('2014-04-23'),
	('2014-04-24'),
	('2014-04-25'),
	('2014-04-26'),
	('2014-04-27'),
	('2014-04-28'),
	('2014-04-29'),
	('2014-04-30'),
	('2014-05-01'),
	('2014-05-02'),
	('2014-05-03'),
	('2014-05-04'),
	('2014-05-05'),
	('2014-05-06'),
	('2014-05-07'),
	('2014-05-08'),
	('2014-05-09'),
	('2014-05-10'),
	('2014-05-11'),
	('2014-05-12'),
	('2014-05-13'),
	('2014-05-14'),
	('2014-05-15'),
	('2014-05-16'),
	('2014-05-17'),
	('2014-05-18'),
	('2014-05-19'),
	('2014-05-20'),
	('2014-05-21'),
	('2014-05-22'),
	('2014-05-23'),
	('2014-05-24'),
	('2014-05-25'),
	('2014-05-26'),
	('2014-05-27'),
	('2014-05-28'),
	('2014-05-29'),
	('2014-05-30'),
	('2014-05-31'),
	('2014-06-01'),
	('2014-06-02'),
	('2014-06-03'),
	('2014-06-04'),
	('2014-06-05'),
	('2014-06-06'),
	('2014-06-07'),
	('2014-06-08'),
	('2014-06-09'),
	('2014-06-10'),
	('2014-06-11'),
	('2014-06-12'),
	('2014-06-13'),
	('2014-06-14'),
	('2014-06-15'),
	('2014-06-16'),
	('2014-06-17'),
	('2014-06-18'),
	('2014-06-19'),
	('2014-06-20'),
	('2014-06-21'),
	('2014-06-22'),
	('2014-06-23'),
	('2014-06-24'),
	('2014-06-25'),
	('2014-06-26'),
	('2014-06-27'),
	('2014-06-28'),
	('2014-06-29'),
	('2014-06-30'),
	('2014-07-01'),
	('2014-07-02'),
	('2014-07-03'),
	('2014-07-04'),
	('2014-07-05'),
	('2014-07-06'),
	('2014-07-07'),
	('2014-07-08'),
	('2014-07-09'),
	('2014-07-10'),
	('2014-07-11'),
	('2014-07-12'),
	('2014-07-13'),
	('2014-07-14'),
	('2014-07-15'),
	('2014-07-16'),
	('2014-07-17'),
	('2014-07-18'),
	('2014-07-19'),
	('2014-07-20'),
	('2014-07-21'),
	('2014-07-22'),
	('2014-07-23'),
	('2014-07-24'),
	('2014-07-25'),
	('2014-07-26'),
	('2014-07-27'),
	('2014-07-28'),
	('2014-07-29'),
	('2014-07-30'),
	('2014-07-31'),
	('2014-08-01'),
	('2014-08-02'),
	('2014-08-03'),
	('2014-08-04'),
	('2014-08-05'),
	('2014-08-06'),
	('2014-08-07'),
	('2014-08-08'),
	('2014-08-09'),
	('2014-08-10'),
	('2014-08-11'),
	('2014-08-12'),
	('2014-08-13'),
	('2014-08-14'),
	('2014-08-15'),
	('2014-08-16'),
	('2014-08-17'),
	('2014-08-18'),
	('2014-08-19'),
	('2014-08-20'),
	('2014-08-21'),
	('2014-08-22'),
	('2014-08-23'),
	('2014-08-24'),
	('2014-08-25'),
	('2014-08-26'),
	('2014-08-27'),
	('2014-08-28'),
	('2014-08-29'),
	('2014-08-30'),
	('2014-08-31'),
	('2014-09-01'),
	('2014-09-02'),
	('2014-09-03'),
	('2014-09-04'),
	('2014-09-05'),
	('2014-09-06'),
	('2014-09-07'),
	('2014-09-08'),
	('2014-09-09'),
	('2014-09-10'),
	('2014-09-11'),
	('2014-09-12'),
	('2014-09-13'),
	('2014-09-14'),
	('2014-09-15'),
	('2014-09-16'),
	('2014-09-17'),
	('2014-09-18'),
	('2014-09-19'),
	('2014-09-20'),
	('2014-09-21'),
	('2014-09-22'),
	('2014-09-23'),
	('2014-09-24'),
	('2014-09-25'),
	('2014-09-26'),
	('2014-09-27'),
	('2014-09-28'),
	('2014-09-29'),
	('2014-09-30'),
	('2014-10-01'),
	('2014-10-02'),
	('2014-10-03'),
	('2014-10-04'),
	('2014-10-05'),
	('2014-10-06'),
	('2014-10-07'),
	('2014-10-08'),
	('2014-10-09'),
	('2014-10-10'),
	('2014-10-11'),
	('2014-10-12'),
	('2014-10-13'),
	('2014-10-14'),
	('2014-10-15'),
	('2014-10-16'),
	('2014-10-17'),
	('2014-10-18'),
	('2014-10-19'),
	('2014-10-20'),
	('2014-10-21'),
	('2014-10-22'),
	('2014-10-23'),
	('2014-10-24'),
	('2014-10-25'),
	('2014-10-26'),
	('2014-10-27'),
	('2014-10-28'),
	('2014-10-29'),
	('2014-10-30'),
	('2014-10-31'),
	('2014-11-01'),
	('2014-11-02'),
	('2014-11-03'),
	('2014-11-04'),
	('2014-11-05'),
	('2014-11-06'),
	('2014-11-07'),
	('2014-11-08'),
	('2014-11-09'),
	('2014-11-10'),
	('2014-11-11'),
	('2014-11-12'),
	('2014-11-13'),
	('2014-11-14'),
	('2014-11-15'),
	('2014-11-16'),
	('2014-11-17'),
	('2014-11-18'),
	('2014-11-19'),
	('2014-11-20'),
	('2014-11-21'),
	('2014-11-22'),
	('2014-11-23'),
	('2014-11-24'),
	('2014-11-25'),
	('2014-11-26'),
	('2014-11-27'),
	('2014-11-28'),
	('2014-11-29'),
	('2014-11-30'),
	('2014-12-01'),
	('2014-12-02'),
	('2014-12-03'),
	('2014-12-04'),
	('2014-12-05'),
	('2014-12-06'),
	('2014-12-07'),
	('2014-12-08'),
	('2014-12-09'),
	('2014-12-10'),
	('2014-12-11'),
	('2014-12-12'),
	('2014-12-13'),
	('2014-12-14'),
	('2014-12-15'),
	('2014-12-16'),
	('2014-12-17'),
	('2014-12-18'),
	('2014-12-19'),
	('2014-12-20'),
	('2014-12-21'),
	('2014-12-22'),
	('2014-12-23'),
	('2014-12-24'),
	('2014-12-25'),
	('2014-12-26'),
	('2014-12-27'),
	('2014-12-28'),
	('2014-12-29'),
	('2014-12-30'),
	('2014-12-31'),
	('2015-01-01'),
	('2015-01-02'),
	('2015-01-03'),
	('2015-01-04'),
	('2015-01-05'),
	('2015-01-06'),
	('2015-01-07'),
	('2015-01-08'),
	('2015-01-09'),
	('2015-01-10'),
	('2015-01-11'),
	('2015-01-12'),
	('2015-01-13'),
	('2015-01-14'),
	('2015-01-15'),
	('2015-01-16'),
	('2015-01-17'),
	('2015-01-18'),
	('2015-01-19'),
	('2015-01-20'),
	('2015-01-21'),
	('2015-01-22'),
	('2015-01-23'),
	('2015-01-24'),
	('2015-01-25'),
	('2015-01-26'),
	('2015-01-27'),
	('2015-01-28'),
	('2015-01-29'),
	('2015-01-30'),
	('2015-01-31'),
	('2015-02-01'),
	('2015-02-02'),
	('2015-02-03'),
	('2015-02-04'),
	('2015-02-05'),
	('2015-02-06'),
	('2015-02-07'),
	('2015-02-08'),
	('2015-02-09'),
	('2015-02-10'),
	('2015-02-11'),
	('2015-02-12'),
	('2015-02-13'),
	('2015-02-14'),
	('2015-02-15'),
	('2015-02-16'),
	('2015-02-17'),
	('2015-02-18'),
	('2015-02-19'),
	('2015-02-20'),
	('2015-02-21'),
	('2015-02-22'),
	('2015-02-23'),
	('2015-02-24'),
	('2015-02-25'),
	('2015-02-26'),
	('2015-02-27'),
	('2015-02-28'),
	('2015-03-01'),
	('2015-03-02'),
	('2015-03-03'),
	('2015-03-04'),
	('2015-03-05'),
	('2015-03-06'),
	('2015-03-07'),
	('2015-03-08'),
	('2015-03-09'),
	('2015-03-10'),
	('2015-03-11'),
	('2015-03-12'),
	('2015-03-13'),
	('2015-03-14'),
	('2015-03-15'),
	('2015-03-16'),
	('2015-03-17'),
	('2015-03-18'),
	('2015-03-19'),
	('2015-03-20'),
	('2015-03-21'),
	('2015-03-22'),
	('2015-03-23'),
	('2015-03-24'),
	('2015-03-25'),
	('2015-03-26'),
	('2015-03-27'),
	('2015-03-28'),
	('2015-03-29'),
	('2015-03-30'),
	('2015-03-31'),
	('2015-04-01'),
	('2015-04-02'),
	('2015-04-03'),
	('2015-04-04'),
	('2015-04-05'),
	('2015-04-06'),
	('2015-04-07'),
	('2015-04-08'),
	('2015-04-09'),
	('2015-04-10'),
	('2015-04-11'),
	('2015-04-12'),
	('2015-04-13'),
	('2015-04-14'),
	('2015-04-15'),
	('2015-04-16'),
	('2015-04-17'),
	('2015-04-18'),
	('2015-04-19'),
	('2015-04-20'),
	('2015-04-21'),
	('2015-04-22'),
	('2015-04-23'),
	('2015-04-24'),
	('2015-04-25'),
	('2015-04-26'),
	('2015-04-27'),
	('2015-04-28'),
	('2015-04-29'),
	('2015-04-30'),
	('2015-05-01'),
	('2015-05-02'),
	('2015-05-03'),
	('2015-05-04'),
	('2015-05-05'),
	('2015-05-06'),
	('2015-05-07'),
	('2015-05-08'),
	('2015-05-09'),
	('2015-05-10'),
	('2015-05-11'),
	('2015-05-12'),
	('2015-05-13'),
	('2015-05-14'),
	('2015-05-15'),
	('2015-05-16'),
	('2015-05-17'),
	('2015-05-18'),
	('2015-05-19'),
	('2015-05-20'),
	('2015-05-21'),
	('2015-05-22'),
	('2015-05-23'),
	('2015-05-24'),
	('2015-05-25'),
	('2015-05-26'),
	('2015-05-27'),
	('2015-05-28'),
	('2015-05-29'),
	('2015-05-30'),
	('2015-05-31'),
	('2015-06-01'),
	('2015-06-02'),
	('2015-06-03'),
	('2015-06-04'),
	('2015-06-05'),
	('2015-06-06'),
	('2015-06-07'),
	('2015-06-08'),
	('2015-06-09'),
	('2015-06-10'),
	('2015-06-11'),
	('2015-06-12'),
	('2015-06-13'),
	('2015-06-14'),
	('2015-06-15'),
	('2015-06-16'),
	('2015-06-17'),
	('2015-06-18'),
	('2015-06-19'),
	('2015-06-20'),
	('2015-06-21'),
	('2015-06-22'),
	('2015-06-23'),
	('2015-06-24'),
	('2015-06-25'),
	('2015-06-26'),
	('2015-06-27'),
	('2015-06-28'),
	('2015-06-29'),
	('2015-06-30'),
	('2015-07-01'),
	('2015-07-02'),
	('2015-07-03'),
	('2015-07-04'),
	('2015-07-05'),
	('2015-07-06'),
	('2015-07-07'),
	('2015-07-08'),
	('2015-07-09'),
	('2015-07-10'),
	('2015-07-11'),
	('2015-07-12'),
	('2015-07-13'),
	('2015-07-14'),
	('2015-07-15'),
	('2015-07-16'),
	('2015-07-17'),
	('2015-07-18'),
	('2015-07-19'),
	('2015-07-20'),
	('2015-07-21'),
	('2015-07-22'),
	('2015-07-23'),
	('2015-07-24'),
	('2015-07-25'),
	('2015-07-26'),
	('2015-07-27'),
	('2015-07-28'),
	('2015-07-29'),
	('2015-07-30'),
	('2015-07-31'),
	('2015-08-01'),
	('2015-08-02'),
	('2015-08-03'),
	('2015-08-04'),
	('2015-08-05'),
	('2015-08-06'),
	('2015-08-07'),
	('2015-08-08'),
	('2015-08-09'),
	('2015-08-10'),
	('2015-08-11'),
	('2015-08-12'),
	('2015-08-13'),
	('2015-08-14'),
	('2015-08-15'),
	('2015-08-16'),
	('2015-08-17'),
	('2015-08-18'),
	('2015-08-19'),
	('2015-08-20'),
	('2015-08-21'),
	('2015-08-22'),
	('2015-08-23'),
	('2015-08-24'),
	('2015-08-25'),
	('2015-08-26'),
	('2015-08-27'),
	('2015-08-28'),
	('2015-08-29'),
	('2015-08-30'),
	('2015-08-31'),
	('2015-09-01'),
	('2015-09-02'),
	('2015-09-03'),
	('2015-09-04'),
	('2015-09-05'),
	('2015-09-06'),
	('2015-09-07'),
	('2015-09-08'),
	('2015-09-09'),
	('2015-09-10'),
	('2015-09-11'),
	('2015-09-12'),
	('2015-09-13'),
	('2015-09-14'),
	('2015-09-15'),
	('2015-09-16'),
	('2015-09-17'),
	('2015-09-18'),
	('2015-09-19'),
	('2015-09-20'),
	('2015-09-21'),
	('2015-09-22'),
	('2015-09-23'),
	('2015-09-24'),
	('2015-09-25'),
	('2015-09-26'),
	('2015-09-27'),
	('2015-09-28'),
	('2015-09-29'),
	('2015-09-30'),
	('2015-10-01'),
	('2015-10-02'),
	('2015-10-03'),
	('2015-10-04'),
	('2015-10-05'),
	('2015-10-06'),
	('2015-10-07'),
	('2015-10-08'),
	('2015-10-09'),
	('2015-10-10'),
	('2015-10-11'),
	('2015-10-12'),
	('2015-10-13'),
	('2015-10-14'),
	('2015-10-15'),
	('2015-10-16'),
	('2015-10-17'),
	('2015-10-18'),
	('2015-10-19'),
	('2015-10-20'),
	('2015-10-21'),
	('2015-10-22'),
	('2015-10-23'),
	('2015-10-24'),
	('2015-10-25'),
	('2015-10-26'),
	('2015-10-27'),
	('2015-10-28'),
	('2015-10-29'),
	('2015-10-30'),
	('2015-10-31'),
	('2015-11-01'),
	('2015-11-02'),
	('2015-11-03'),
	('2015-11-04'),
	('2015-11-05'),
	('2015-11-06'),
	('2015-11-07'),
	('2015-11-08'),
	('2015-11-09'),
	('2015-11-10'),
	('2015-11-11'),
	('2015-11-12'),
	('2015-11-13'),
	('2015-11-14'),
	('2015-11-15'),
	('2015-11-16'),
	('2015-11-17'),
	('2015-11-18'),
	('2015-11-19'),
	('2015-11-20'),
	('2015-11-21'),
	('2015-11-22'),
	('2015-11-23'),
	('2015-11-24'),
	('2015-11-25'),
	('2015-11-26'),
	('2015-11-27'),
	('2015-11-28'),
	('2015-11-29'),
	('2015-11-30'),
	('2015-12-01'),
	('2015-12-02'),
	('2015-12-03'),
	('2015-12-04'),
	('2015-12-05'),
	('2015-12-06'),
	('2015-12-07'),
	('2015-12-08'),
	('2015-12-09'),
	('2015-12-10'),
	('2015-12-11'),
	('2015-12-12'),
	('2015-12-13'),
	('2015-12-14'),
	('2015-12-15'),
	('2015-12-16'),
	('2015-12-17'),
	('2015-12-18'),
	('2015-12-19'),
	('2015-12-20'),
	('2015-12-21'),
	('2015-12-22'),
	('2015-12-23'),
	('2015-12-24'),
	('2015-12-25'),
	('2015-12-26'),
	('2015-12-27'),
	('2015-12-28'),
	('2015-12-29'),
	('2015-12-30'),
	('2015-12-31'),
	('2016-01-01'),
	('2016-01-02'),
	('2016-01-03'),
	('2016-01-04'),
	('2016-01-05'),
	('2016-01-06'),
	('2016-01-07'),
	('2016-01-08'),
	('2016-01-09'),
	('2016-01-10'),
	('2016-01-11'),
	('2016-01-12'),
	('2016-01-13'),
	('2016-01-14'),
	('2016-01-15'),
	('2016-01-16'),
	('2016-01-17'),
	('2016-01-18'),
	('2016-01-19'),
	('2016-01-20'),
	('2016-01-21'),
	('2016-01-22'),
	('2016-01-23'),
	('2016-01-24'),
	('2016-01-25'),
	('2016-01-26'),
	('2016-01-27'),
	('2016-01-28'),
	('2016-01-29'),
	('2016-01-30'),
	('2016-01-31'),
	('2016-02-01'),
	('2016-02-02'),
	('2016-02-03'),
	('2016-02-04'),
	('2016-02-05'),
	('2016-02-06'),
	('2016-02-07'),
	('2016-02-08'),
	('2016-02-09'),
	('2016-02-10'),
	('2016-02-11'),
	('2016-02-12'),
	('2016-02-13'),
	('2016-02-14'),
	('2016-02-15'),
	('2016-02-16'),
	('2016-02-17'),
	('2016-02-18'),
	('2016-02-19'),
	('2016-02-20'),
	('2016-02-21'),
	('2016-02-22'),
	('2016-02-23'),
	('2016-02-24'),
	('2016-02-25'),
	('2016-02-26'),
	('2016-02-27'),
	('2016-02-28'),
	('2016-02-29'),
	('2016-03-01'),
	('2016-03-02'),
	('2016-03-03'),
	('2016-03-04'),
	('2016-03-05'),
	('2016-03-06'),
	('2016-03-07'),
	('2016-03-08'),
	('2016-03-09'),
	('2016-03-10'),
	('2016-03-11'),
	('2016-03-12'),
	('2016-03-13'),
	('2016-03-14'),
	('2016-03-15'),
	('2016-03-16'),
	('2016-03-17'),
	('2016-03-18'),
	('2016-03-19'),
	('2016-03-20'),
	('2016-03-21'),
	('2016-03-22'),
	('2016-03-23'),
	('2016-03-24'),
	('2016-03-25'),
	('2016-03-26'),
	('2016-03-27'),
	('2016-03-28'),
	('2016-03-29'),
	('2016-03-30'),
	('2016-03-31'),
	('2016-04-01'),
	('2016-04-02'),
	('2016-04-03'),
	('2016-04-04'),
	('2016-04-05'),
	('2016-04-06'),
	('2016-04-07'),
	('2016-04-08'),
	('2016-04-09'),
	('2016-04-10'),
	('2016-04-11'),
	('2016-04-12'),
	('2016-04-13'),
	('2016-04-14'),
	('2016-04-15'),
	('2016-04-16'),
	('2016-04-17'),
	('2016-04-18'),
	('2016-04-19'),
	('2016-04-20'),
	('2016-04-21'),
	('2016-04-22'),
	('2016-04-23'),
	('2016-04-24'),
	('2016-04-25'),
	('2016-04-26'),
	('2016-04-27'),
	('2016-04-28'),
	('2016-04-29'),
	('2016-04-30'),
	('2016-05-01'),
	('2016-05-02'),
	('2016-05-03'),
	('2016-05-04'),
	('2016-05-05'),
	('2016-05-06'),
	('2016-05-07'),
	('2016-05-08'),
	('2016-05-09'),
	('2016-05-10'),
	('2016-05-11'),
	('2016-05-12'),
	('2016-05-13'),
	('2016-05-14'),
	('2016-05-15'),
	('2016-05-16'),
	('2016-05-17'),
	('2016-05-18'),
	('2016-05-19'),
	('2016-05-20'),
	('2016-05-21'),
	('2016-05-22'),
	('2016-05-23'),
	('2016-05-24'),
	('2016-05-25'),
	('2016-05-26'),
	('2016-05-27'),
	('2016-05-28'),
	('2016-05-29'),
	('2016-05-30'),
	('2016-05-31'),
	('2016-06-01'),
	('2016-06-02'),
	('2016-06-03'),
	('2016-06-04'),
	('2016-06-05'),
	('2016-06-06'),
	('2016-06-07'),
	('2016-06-08'),
	('2016-06-09'),
	('2016-06-10'),
	('2016-06-11'),
	('2016-06-12'),
	('2016-06-13'),
	('2016-06-14'),
	('2016-06-15'),
	('2016-06-16'),
	('2016-06-17'),
	('2016-06-18'),
	('2016-06-19'),
	('2016-06-20'),
	('2016-06-21'),
	('2016-06-22'),
	('2016-06-23'),
	('2016-06-24'),
	('2016-06-25'),
	('2016-06-26'),
	('2016-06-27'),
	('2016-06-28'),
	('2016-06-29'),
	('2016-06-30'),
	('2016-07-01'),
	('2016-07-02'),
	('2016-07-03'),
	('2016-07-04'),
	('2016-07-05'),
	('2016-07-06'),
	('2016-07-07'),
	('2016-07-08'),
	('2016-07-09'),
	('2016-07-10'),
	('2016-07-11'),
	('2016-07-12'),
	('2016-07-13'),
	('2016-07-14'),
	('2016-07-15'),
	('2016-07-16'),
	('2016-07-17'),
	('2016-07-18'),
	('2016-07-19'),
	('2016-07-20'),
	('2016-07-21'),
	('2016-07-22'),
	('2016-07-23'),
	('2016-07-24'),
	('2016-07-25'),
	('2016-07-26'),
	('2016-07-27'),
	('2016-07-28'),
	('2016-07-29'),
	('2016-07-30'),
	('2016-07-31'),
	('2016-08-01'),
	('2016-08-02'),
	('2016-08-03'),
	('2016-08-04'),
	('2016-08-05'),
	('2016-08-06'),
	('2016-08-07'),
	('2016-08-08'),
	('2016-08-09'),
	('2016-08-10'),
	('2016-08-11'),
	('2016-08-12'),
	('2016-08-13'),
	('2016-08-14'),
	('2016-08-15'),
	('2016-08-16'),
	('2016-08-17'),
	('2016-08-18'),
	('2016-08-19'),
	('2016-08-20'),
	('2016-08-21'),
	('2016-08-22'),
	('2016-08-23'),
	('2016-08-24'),
	('2016-08-25'),
	('2016-08-26'),
	('2016-08-27'),
	('2016-08-28'),
	('2016-08-29'),
	('2016-08-30'),
	('2016-08-31'),
	('2016-09-01'),
	('2016-09-02'),
	('2016-09-03'),
	('2016-09-04'),
	('2016-09-05'),
	('2016-09-06'),
	('2016-09-07'),
	('2016-09-08'),
	('2016-09-09'),
	('2016-09-10'),
	('2016-09-11'),
	('2016-09-12'),
	('2016-09-13'),
	('2016-09-14'),
	('2016-09-15'),
	('2016-09-16'),
	('2016-09-17'),
	('2016-09-18'),
	('2016-09-19'),
	('2016-09-20'),
	('2016-09-21'),
	('2016-09-22'),
	('2016-09-23'),
	('2016-09-24'),
	('2016-09-25'),
	('2016-09-26'),
	('2016-09-27'),
	('2016-09-28'),
	('2016-09-29'),
	('2016-09-30'),
	('2016-10-01'),
	('2016-10-02'),
	('2016-10-03'),
	('2016-10-04'),
	('2016-10-05'),
	('2016-10-06'),
	('2016-10-07'),
	('2016-10-08'),
	('2016-10-09'),
	('2016-10-10'),
	('2016-10-11'),
	('2016-10-12'),
	('2016-10-13'),
	('2016-10-14'),
	('2016-10-15'),
	('2016-10-16'),
	('2016-10-17'),
	('2016-10-18'),
	('2016-10-19'),
	('2016-10-20'),
	('2016-10-21'),
	('2016-10-22'),
	('2016-10-23'),
	('2016-10-24'),
	('2016-10-25'),
	('2016-10-26'),
	('2016-10-27'),
	('2016-10-28'),
	('2016-10-29'),
	('2016-10-30'),
	('2016-10-31'),
	('2016-11-01'),
	('2016-11-02'),
	('2016-11-03'),
	('2016-11-04'),
	('2016-11-05'),
	('2016-11-06'),
	('2016-11-07'),
	('2016-11-08'),
	('2016-11-09'),
	('2016-11-10'),
	('2016-11-11'),
	('2016-11-12'),
	('2016-11-13'),
	('2016-11-14'),
	('2016-11-15'),
	('2016-11-16'),
	('2016-11-17'),
	('2016-11-18'),
	('2016-11-19'),
	('2016-11-20'),
	('2016-11-21'),
	('2016-11-22'),
	('2016-11-23'),
	('2016-11-24'),
	('2016-11-25'),
	('2016-11-26'),
	('2016-11-27'),
	('2016-11-28'),
	('2016-11-29'),
	('2016-11-30'),
	('2016-12-01'),
	('2016-12-02'),
	('2016-12-03'),
	('2016-12-04'),
	('2016-12-05'),
	('2016-12-06'),
	('2016-12-07'),
	('2016-12-08'),
	('2016-12-09'),
	('2016-12-10'),
	('2016-12-11'),
	('2016-12-12'),
	('2016-12-13'),
	('2016-12-14'),
	('2016-12-15'),
	('2016-12-16'),
	('2016-12-17'),
	('2016-12-18'),
	('2016-12-19'),
	('2016-12-20'),
	('2016-12-21'),
	('2016-12-22'),
	('2016-12-23'),
	('2016-12-24'),
	('2016-12-25'),
	('2016-12-26'),
	('2016-12-27'),
	('2016-12-28'),
	('2016-12-29'),
	('2016-12-30'),
	('2016-12-31'),
	('2017-01-01'),
	('2017-01-02'),
	('2017-01-03'),
	('2017-01-04'),
	('2017-01-05'),
	('2017-01-06'),
	('2017-01-07'),
	('2017-01-08'),
	('2017-01-09'),
	('2017-01-10'),
	('2017-01-11'),
	('2017-01-12'),
	('2017-01-13'),
	('2017-01-14'),
	('2017-01-15'),
	('2017-01-16'),
	('2017-01-17'),
	('2017-01-18'),
	('2017-01-19'),
	('2017-01-20'),
	('2017-01-21'),
	('2017-01-22'),
	('2017-01-23'),
	('2017-01-24'),
	('2017-01-25'),
	('2017-01-26'),
	('2017-01-27'),
	('2017-01-28'),
	('2017-01-29'),
	('2017-01-30'),
	('2017-01-31'),
	('2017-02-01'),
	('2017-02-02'),
	('2017-02-03'),
	('2017-02-04'),
	('2017-02-05'),
	('2017-02-06'),
	('2017-02-07'),
	('2017-02-08'),
	('2017-02-09'),
	('2017-02-10'),
	('2017-02-11'),
	('2017-02-12'),
	('2017-02-13'),
	('2017-02-14'),
	('2017-02-15'),
	('2017-02-16'),
	('2017-02-17'),
	('2017-02-18'),
	('2017-02-19'),
	('2017-02-20'),
	('2017-02-21'),
	('2017-02-22'),
	('2017-02-23'),
	('2017-02-24'),
	('2017-02-25'),
	('2017-02-26'),
	('2017-02-27'),
	('2017-02-28'),
	('2017-03-01'),
	('2017-03-02'),
	('2017-03-03'),
	('2017-03-04'),
	('2017-03-05'),
	('2017-03-06'),
	('2017-03-07'),
	('2017-03-08'),
	('2017-03-09'),
	('2017-03-10'),
	('2017-03-11'),
	('2017-03-12'),
	('2017-03-13'),
	('2017-03-14'),
	('2017-03-15'),
	('2017-03-16'),
	('2017-03-17'),
	('2017-03-18'),
	('2017-03-19'),
	('2017-03-20'),
	('2017-03-21'),
	('2017-03-22'),
	('2017-03-23'),
	('2017-03-24'),
	('2017-03-25'),
	('2017-03-26'),
	('2017-03-27'),
	('2017-03-28'),
	('2017-03-29'),
	('2017-03-30'),
	('2017-03-31'),
	('2017-04-01'),
	('2017-04-02'),
	('2017-04-03'),
	('2017-04-04'),
	('2017-04-05'),
	('2017-04-06'),
	('2017-04-07'),
	('2017-04-08'),
	('2017-04-09'),
	('2017-04-10'),
	('2017-04-11'),
	('2017-04-12'),
	('2017-04-13'),
	('2017-04-14'),
	('2017-04-15'),
	('2017-04-16'),
	('2017-04-17'),
	('2017-04-18'),
	('2017-04-19'),
	('2017-04-20'),
	('2017-04-21'),
	('2017-04-22'),
	('2017-04-23'),
	('2017-04-24'),
	('2017-04-25'),
	('2017-04-26'),
	('2017-04-27'),
	('2017-04-28'),
	('2017-04-29'),
	('2017-04-30'),
	('2017-05-01'),
	('2017-05-02'),
	('2017-05-03'),
	('2017-05-04'),
	('2017-05-05'),
	('2017-05-06'),
	('2017-05-07'),
	('2017-05-08'),
	('2017-05-09'),
	('2017-05-10'),
	('2017-05-11'),
	('2017-05-12'),
	('2017-05-13'),
	('2017-05-14'),
	('2017-05-15'),
	('2017-05-16'),
	('2017-05-17'),
	('2017-05-18'),
	('2017-05-19'),
	('2017-05-20'),
	('2017-05-21'),
	('2017-05-22'),
	('2017-05-23'),
	('2017-05-24'),
	('2017-05-25'),
	('2017-05-26'),
	('2017-05-27'),
	('2017-05-28'),
	('2017-05-29'),
	('2017-05-30'),
	('2017-05-31'),
	('2017-06-01'),
	('2017-06-02'),
	('2017-06-03'),
	('2017-06-04'),
	('2017-06-05'),
	('2017-06-06'),
	('2017-06-07'),
	('2017-06-08'),
	('2017-06-09'),
	('2017-06-10'),
	('2017-06-11'),
	('2017-06-12'),
	('2017-06-13'),
	('2017-06-14'),
	('2017-06-15'),
	('2017-06-16'),
	('2017-06-17'),
	('2017-06-18'),
	('2017-06-19'),
	('2017-06-20'),
	('2017-06-21'),
	('2017-06-22'),
	('2017-06-23'),
	('2017-06-24'),
	('2017-06-25'),
	('2017-06-26'),
	('2017-06-27'),
	('2017-06-28'),
	('2017-06-29'),
	('2017-06-30'),
	('2017-07-01'),
	('2017-07-02'),
	('2017-07-03'),
	('2017-07-04'),
	('2017-07-05'),
	('2017-07-06'),
	('2017-07-07'),
	('2017-07-08'),
	('2017-07-09'),
	('2017-07-10'),
	('2017-07-11'),
	('2017-07-12'),
	('2017-07-13'),
	('2017-07-14'),
	('2017-07-15'),
	('2017-07-16'),
	('2017-07-17'),
	('2017-07-18'),
	('2017-07-19'),
	('2017-07-20'),
	('2017-07-21'),
	('2017-07-22'),
	('2017-07-23'),
	('2017-07-24'),
	('2017-07-25'),
	('2017-07-26'),
	('2017-07-27'),
	('2017-07-28'),
	('2017-07-29'),
	('2017-07-30'),
	('2017-07-31'),
	('2017-08-01'),
	('2017-08-02'),
	('2017-08-03'),
	('2017-08-04'),
	('2017-08-05'),
	('2017-08-06'),
	('2017-08-07'),
	('2017-08-08'),
	('2017-08-09'),
	('2017-08-10'),
	('2017-08-11'),
	('2017-08-12'),
	('2017-08-13'),
	('2017-08-14'),
	('2017-08-15'),
	('2017-08-16'),
	('2017-08-17'),
	('2017-08-18'),
	('2017-08-19'),
	('2017-08-20'),
	('2017-08-21'),
	('2017-08-22'),
	('2017-08-23'),
	('2017-08-24'),
	('2017-08-25'),
	('2017-08-26'),
	('2017-08-27'),
	('2017-08-28'),
	('2017-08-29'),
	('2017-08-30'),
	('2017-08-31'),
	('2017-09-01'),
	('2017-09-02'),
	('2017-09-03'),
	('2017-09-04'),
	('2017-09-05'),
	('2017-09-06'),
	('2017-09-07'),
	('2017-09-08'),
	('2017-09-09'),
	('2017-09-10'),
	('2017-09-11'),
	('2017-09-12'),
	('2017-09-13'),
	('2017-09-14'),
	('2017-09-15'),
	('2017-09-16'),
	('2017-09-17'),
	('2017-09-18'),
	('2017-09-19'),
	('2017-09-20'),
	('2017-09-21'),
	('2017-09-22'),
	('2017-09-23'),
	('2017-09-24'),
	('2017-09-25'),
	('2017-09-26'),
	('2017-09-27'),
	('2017-09-28'),
	('2017-09-29'),
	('2017-09-30'),
	('2017-10-01'),
	('2017-10-02'),
	('2017-10-03'),
	('2017-10-04'),
	('2017-10-05'),
	('2017-10-06'),
	('2017-10-07'),
	('2017-10-08'),
	('2017-10-09'),
	('2017-10-10'),
	('2017-10-11'),
	('2017-10-12'),
	('2017-10-13'),
	('2017-10-14'),
	('2017-10-15'),
	('2017-10-16'),
	('2017-10-17'),
	('2017-10-18'),
	('2017-10-19'),
	('2017-10-20'),
	('2017-10-21'),
	('2017-10-22'),
	('2017-10-23'),
	('2017-10-24'),
	('2017-10-25'),
	('2017-10-26'),
	('2017-10-27'),
	('2017-10-28'),
	('2017-10-29'),
	('2017-10-30'),
	('2017-10-31'),
	('2017-11-01'),
	('2017-11-02'),
	('2017-11-03'),
	('2017-11-04'),
	('2017-11-05'),
	('2017-11-06'),
	('2017-11-07'),
	('2017-11-08'),
	('2017-11-09'),
	('2017-11-10'),
	('2017-11-11'),
	('2017-11-12'),
	('2017-11-13'),
	('2017-11-14'),
	('2017-11-15'),
	('2017-11-16'),
	('2017-11-17'),
	('2017-11-18'),
	('2017-11-19'),
	('2017-11-20'),
	('2017-11-21'),
	('2017-11-22'),
	('2017-11-23'),
	('2017-11-24'),
	('2017-11-25'),
	('2017-11-26'),
	('2017-11-27'),
	('2017-11-28'),
	('2017-11-29'),
	('2017-11-30'),
	('2017-12-01'),
	('2017-12-02'),
	('2017-12-03'),
	('2017-12-04'),
	('2017-12-05'),
	('2017-12-06'),
	('2017-12-07'),
	('2017-12-08'),
	('2017-12-09'),
	('2017-12-10'),
	('2017-12-11'),
	('2017-12-12'),
	('2017-12-13'),
	('2017-12-14'),
	('2017-12-15'),
	('2017-12-16'),
	('2017-12-17'),
	('2017-12-18'),
	('2017-12-19'),
	('2017-12-20'),
	('2017-12-21'),
	('2017-12-22'),
	('2017-12-23'),
	('2017-12-24'),
	('2017-12-25'),
	('2017-12-26'),
	('2017-12-27'),
	('2017-12-28'),
	('2017-12-29'),
	('2017-12-30'),
	('2017-12-31'),
	('2018-01-01'),
	('2018-01-02'),
	('2018-01-03'),
	('2018-01-04'),
	('2018-01-05'),
	('2018-01-06'),
	('2018-01-07'),
	('2018-01-08'),
	('2018-01-09'),
	('2018-01-10'),
	('2018-01-11'),
	('2018-01-12'),
	('2018-01-13'),
	('2018-01-14'),
	('2018-01-15'),
	('2018-01-16'),
	('2018-01-17'),
	('2018-01-18'),
	('2018-01-19'),
	('2018-01-20'),
	('2018-01-21'),
	('2018-01-22'),
	('2018-01-23'),
	('2018-01-24'),
	('2018-01-25'),
	('2018-01-26'),
	('2018-01-27'),
	('2018-01-28'),
	('2018-01-29'),
	('2018-01-30'),
	('2018-01-31'),
	('2018-02-01'),
	('2018-02-02'),
	('2018-02-03'),
	('2018-02-04'),
	('2018-02-05'),
	('2018-02-06'),
	('2018-02-07'),
	('2018-02-08'),
	('2018-02-09'),
	('2018-02-10'),
	('2018-02-11'),
	('2018-02-12'),
	('2018-02-13'),
	('2018-02-14'),
	('2018-02-15'),
	('2018-02-16'),
	('2018-02-17'),
	('2018-02-18'),
	('2018-02-19'),
	('2018-02-20'),
	('2018-02-21'),
	('2018-02-22'),
	('2018-02-23'),
	('2018-02-24'),
	('2018-02-25'),
	('2018-02-26'),
	('2018-02-27'),
	('2018-02-28'),
	('2018-03-01'),
	('2018-03-02'),
	('2018-03-03'),
	('2018-03-04'),
	('2018-03-05'),
	('2018-03-06'),
	('2018-03-07'),
	('2018-03-08'),
	('2018-03-09'),
	('2018-03-10'),
	('2018-03-11'),
	('2018-03-12'),
	('2018-03-13'),
	('2018-03-14'),
	('2018-03-15'),
	('2018-03-16'),
	('2018-03-17'),
	('2018-03-18'),
	('2018-03-19'),
	('2018-03-20'),
	('2018-03-21'),
	('2018-03-22'),
	('2018-03-23'),
	('2018-03-24'),
	('2018-03-25'),
	('2018-03-26'),
	('2018-03-27'),
	('2018-03-28'),
	('2018-03-29'),
	('2018-03-30'),
	('2018-03-31'),
	('2018-04-01'),
	('2018-04-02'),
	('2018-04-03'),
	('2018-04-04'),
	('2018-04-05'),
	('2018-04-06'),
	('2018-04-07'),
	('2018-04-08'),
	('2018-04-09'),
	('2018-04-10'),
	('2018-04-11'),
	('2018-04-12'),
	('2018-04-13'),
	('2018-04-14'),
	('2018-04-15'),
	('2018-04-16'),
	('2018-04-17'),
	('2018-04-18'),
	('2018-04-19'),
	('2018-04-20'),
	('2018-04-21'),
	('2018-04-22'),
	('2018-04-23'),
	('2018-04-24'),
	('2018-04-25'),
	('2018-04-26'),
	('2018-04-27'),
	('2018-04-28'),
	('2018-04-29'),
	('2018-04-30'),
	('2018-05-01'),
	('2018-05-02'),
	('2018-05-03'),
	('2018-05-04'),
	('2018-05-05'),
	('2018-05-06'),
	('2018-05-07'),
	('2018-05-08'),
	('2018-05-09'),
	('2018-05-10'),
	('2018-05-11'),
	('2018-05-12'),
	('2018-05-13'),
	('2018-05-14'),
	('2018-05-15'),
	('2018-05-16'),
	('2018-05-17'),
	('2018-05-18'),
	('2018-05-19'),
	('2018-05-20'),
	('2018-05-21'),
	('2018-05-22'),
	('2018-05-23'),
	('2018-05-24'),
	('2018-05-25'),
	('2018-05-26'),
	('2018-05-27'),
	('2018-05-28'),
	('2018-05-29'),
	('2018-05-30'),
	('2018-05-31'),
	('2018-06-01'),
	('2018-06-02'),
	('2018-06-03'),
	('2018-06-04'),
	('2018-06-05'),
	('2018-06-06'),
	('2018-06-07'),
	('2018-06-08'),
	('2018-06-09'),
	('2018-06-10'),
	('2018-06-11'),
	('2018-06-12'),
	('2018-06-13'),
	('2018-06-14'),
	('2018-06-15'),
	('2018-06-16'),
	('2018-06-17'),
	('2018-06-18'),
	('2018-06-19'),
	('2018-06-20'),
	('2018-06-21'),
	('2018-06-22'),
	('2018-06-23'),
	('2018-06-24'),
	('2018-06-25'),
	('2018-06-26'),
	('2018-06-27'),
	('2018-06-28'),
	('2018-06-29'),
	('2018-06-30'),
	('2018-07-01'),
	('2018-07-02'),
	('2018-07-03'),
	('2018-07-04'),
	('2018-07-05'),
	('2018-07-06'),
	('2018-07-07'),
	('2018-07-08'),
	('2018-07-09'),
	('2018-07-10'),
	('2018-07-11'),
	('2018-07-12'),
	('2018-07-13'),
	('2018-07-14'),
	('2018-07-15'),
	('2018-07-16'),
	('2018-07-17'),
	('2018-07-18'),
	('2018-07-19'),
	('2018-07-20'),
	('2018-07-21'),
	('2018-07-22'),
	('2018-07-23'),
	('2018-07-24'),
	('2018-07-25'),
	('2018-07-26'),
	('2018-07-27'),
	('2018-07-28'),
	('2018-07-29'),
	('2018-07-30'),
	('2018-07-31'),
	('2018-08-01'),
	('2018-08-02'),
	('2018-08-03'),
	('2018-08-04'),
	('2018-08-05'),
	('2018-08-06'),
	('2018-08-07'),
	('2018-08-08'),
	('2018-08-09'),
	('2018-08-10'),
	('2018-08-11'),
	('2018-08-12'),
	('2018-08-13'),
	('2018-08-14'),
	('2018-08-15'),
	('2018-08-16'),
	('2018-08-17'),
	('2018-08-18'),
	('2018-08-19'),
	('2018-08-20'),
	('2018-08-21'),
	('2018-08-22'),
	('2018-08-23'),
	('2018-08-24'),
	('2018-08-25'),
	('2018-08-26'),
	('2018-08-27'),
	('2018-08-28'),
	('2018-08-29'),
	('2018-08-30'),
	('2018-08-31'),
	('2018-09-01'),
	('2018-09-02'),
	('2018-09-03'),
	('2018-09-04'),
	('2018-09-05'),
	('2018-09-06'),
	('2018-09-07'),
	('2018-09-08'),
	('2018-09-09'),
	('2018-09-10'),
	('2018-09-11'),
	('2018-09-12'),
	('2018-09-13'),
	('2018-09-14'),
	('2018-09-15'),
	('2018-09-16'),
	('2018-09-17'),
	('2018-09-18'),
	('2018-09-19'),
	('2018-09-20'),
	('2018-09-21'),
	('2018-09-22'),
	('2018-09-23'),
	('2018-09-24'),
	('2018-09-25'),
	('2018-09-26'),
	('2018-09-27'),
	('2018-09-28'),
	('2018-09-29'),
	('2018-09-30'),
	('2018-10-01'),
	('2018-10-02'),
	('2018-10-03'),
	('2018-10-04'),
	('2018-10-05'),
	('2018-10-06'),
	('2018-10-07'),
	('2018-10-08'),
	('2018-10-09'),
	('2018-10-10'),
	('2018-10-11'),
	('2018-10-12'),
	('2018-10-13'),
	('2018-10-14'),
	('2018-10-15'),
	('2018-10-16'),
	('2018-10-17'),
	('2018-10-18'),
	('2018-10-19'),
	('2018-10-20'),
	('2018-10-21'),
	('2018-10-22'),
	('2018-10-23'),
	('2018-10-24'),
	('2018-10-25'),
	('2018-10-26'),
	('2018-10-27'),
	('2018-10-28'),
	('2018-10-29'),
	('2018-10-30'),
	('2018-10-31'),
	('2018-11-01'),
	('2018-11-02'),
	('2018-11-03'),
	('2018-11-04'),
	('2018-11-05'),
	('2018-11-06'),
	('2018-11-07'),
	('2018-11-08'),
	('2018-11-09'),
	('2018-11-10'),
	('2018-11-11'),
	('2018-11-12'),
	('2018-11-13'),
	('2018-11-14'),
	('2018-11-15'),
	('2018-11-16'),
	('2018-11-17'),
	('2018-11-18'),
	('2018-11-19'),
	('2018-11-20'),
	('2018-11-21'),
	('2018-11-22'),
	('2018-11-23'),
	('2018-11-24'),
	('2018-11-25'),
	('2018-11-26'),
	('2018-11-27'),
	('2018-11-28'),
	('2018-11-29'),
	('2018-11-30'),
	('2018-12-01'),
	('2018-12-02'),
	('2018-12-03'),
	('2018-12-04'),
	('2018-12-05'),
	('2018-12-06'),
	('2018-12-07'),
	('2018-12-08'),
	('2018-12-09'),
	('2018-12-10'),
	('2018-12-11'),
	('2018-12-12'),
	('2018-12-13'),
	('2018-12-14'),
	('2018-12-15'),
	('2018-12-16'),
	('2018-12-17'),
	('2018-12-18'),
	('2018-12-19'),
	('2018-12-20'),
	('2018-12-21'),
	('2018-12-22'),
	('2018-12-23'),
	('2018-12-24'),
	('2018-12-25'),
	('2018-12-26'),
	('2018-12-27'),
	('2018-12-28'),
	('2018-12-29'),
	('2018-12-30'),
	('2018-12-31'),
	('2019-01-01'),
	('2019-01-02'),
	('2019-01-03'),
	('2019-01-04'),
	('2019-01-05'),
	('2019-01-06'),
	('2019-01-07'),
	('2019-01-08'),
	('2019-01-09'),
	('2019-01-10'),
	('2019-01-11'),
	('2019-01-12'),
	('2019-01-13'),
	('2019-01-14'),
	('2019-01-15'),
	('2019-01-16'),
	('2019-01-17'),
	('2019-01-18'),
	('2019-01-19'),
	('2019-01-20'),
	('2019-01-21'),
	('2019-01-22'),
	('2019-01-23'),
	('2019-01-24'),
	('2019-01-25'),
	('2019-01-26'),
	('2019-01-27'),
	('2019-01-28'),
	('2019-01-29'),
	('2019-01-30'),
	('2019-01-31'),
	('2019-02-01'),
	('2019-02-02'),
	('2019-02-03'),
	('2019-02-04'),
	('2019-02-05'),
	('2019-02-06'),
	('2019-02-07'),
	('2019-02-08'),
	('2019-02-09'),
	('2019-02-10'),
	('2019-02-11'),
	('2019-02-12'),
	('2019-02-13'),
	('2019-02-14'),
	('2019-02-15'),
	('2019-02-16'),
	('2019-02-17'),
	('2019-02-18'),
	('2019-02-19'),
	('2019-02-20'),
	('2019-02-21'),
	('2019-02-22'),
	('2019-02-23'),
	('2019-02-24'),
	('2019-02-25'),
	('2019-02-26'),
	('2019-02-27'),
	('2019-02-28'),
	('2019-03-01'),
	('2019-03-02'),
	('2019-03-03'),
	('2019-03-04'),
	('2019-03-05'),
	('2019-03-06'),
	('2019-03-07'),
	('2019-03-08'),
	('2019-03-09'),
	('2019-03-10'),
	('2019-03-11'),
	('2019-03-12'),
	('2019-03-13'),
	('2019-03-14'),
	('2019-03-15'),
	('2019-03-16'),
	('2019-03-17'),
	('2019-03-18'),
	('2019-03-19'),
	('2019-03-20'),
	('2019-03-21'),
	('2019-03-22'),
	('2019-03-23'),
	('2019-03-24'),
	('2019-03-25'),
	('2019-03-26'),
	('2019-03-27'),
	('2019-03-28'),
	('2019-03-29'),
	('2019-03-30'),
	('2019-03-31'),
	('2019-04-01'),
	('2019-04-02'),
	('2019-04-03'),
	('2019-04-04'),
	('2019-04-05'),
	('2019-04-06'),
	('2019-04-07'),
	('2019-04-08'),
	('2019-04-09'),
	('2019-04-10'),
	('2019-04-11'),
	('2019-04-12'),
	('2019-04-13'),
	('2019-04-14'),
	('2019-04-15'),
	('2019-04-16'),
	('2019-04-17'),
	('2019-04-18'),
	('2019-04-19'),
	('2019-04-20'),
	('2019-04-21'),
	('2019-04-22'),
	('2019-04-23'),
	('2019-04-24'),
	('2019-04-25'),
	('2019-04-26'),
	('2019-04-27'),
	('2019-04-28'),
	('2019-04-29'),
	('2019-04-30'),
	('2019-05-01'),
	('2019-05-02'),
	('2019-05-03'),
	('2019-05-04'),
	('2019-05-05'),
	('2019-05-06'),
	('2019-05-07'),
	('2019-05-08'),
	('2019-05-09'),
	('2019-05-10'),
	('2019-05-11'),
	('2019-05-12'),
	('2019-05-13'),
	('2019-05-14'),
	('2019-05-15'),
	('2019-05-16'),
	('2019-05-17'),
	('2019-05-18'),
	('2019-05-19'),
	('2019-05-20'),
	('2019-05-21'),
	('2019-05-22'),
	('2019-05-23'),
	('2019-05-24'),
	('2019-05-25'),
	('2019-05-26'),
	('2019-05-27'),
	('2019-05-28'),
	('2019-05-29'),
	('2019-05-30'),
	('2019-05-31'),
	('2019-06-01'),
	('2019-06-02'),
	('2019-06-03'),
	('2019-06-04'),
	('2019-06-05'),
	('2019-06-06'),
	('2019-06-07'),
	('2019-06-08'),
	('2019-06-09'),
	('2019-06-10'),
	('2019-06-11'),
	('2019-06-12'),
	('2019-06-13'),
	('2019-06-14'),
	('2019-06-15'),
	('2019-06-16'),
	('2019-06-17'),
	('2019-06-18'),
	('2019-06-19'),
	('2019-06-20'),
	('2019-06-21'),
	('2019-06-22'),
	('2019-06-23'),
	('2019-06-24'),
	('2019-06-25'),
	('2019-06-26'),
	('2019-06-27'),
	('2019-06-28'),
	('2019-06-29'),
	('2019-06-30'),
	('2019-07-01'),
	('2019-07-02'),
	('2019-07-03'),
	('2019-07-04'),
	('2019-07-05'),
	('2019-07-06'),
	('2019-07-07'),
	('2019-07-08'),
	('2019-07-09'),
	('2019-07-10'),
	('2019-07-11'),
	('2019-07-12'),
	('2019-07-13'),
	('2019-07-14'),
	('2019-07-15'),
	('2019-07-16'),
	('2019-07-17'),
	('2019-07-18'),
	('2019-07-19'),
	('2019-07-20'),
	('2019-07-21'),
	('2019-07-22'),
	('2019-07-23'),
	('2019-07-24'),
	('2019-07-25'),
	('2019-07-26'),
	('2019-07-27'),
	('2019-07-28'),
	('2019-07-29'),
	('2019-07-30'),
	('2019-07-31'),
	('2019-08-01'),
	('2019-08-02'),
	('2019-08-03'),
	('2019-08-04'),
	('2019-08-05'),
	('2019-08-06'),
	('2019-08-07'),
	('2019-08-08'),
	('2019-08-09'),
	('2019-08-10'),
	('2019-08-11'),
	('2019-08-12'),
	('2019-08-13'),
	('2019-08-14'),
	('2019-08-15'),
	('2019-08-16'),
	('2019-08-17'),
	('2019-08-18'),
	('2019-08-19'),
	('2019-08-20'),
	('2019-08-21'),
	('2019-08-22'),
	('2019-08-23'),
	('2019-08-24'),
	('2019-08-25'),
	('2019-08-26'),
	('2019-08-27'),
	('2019-08-28'),
	('2019-08-29'),
	('2019-08-30'),
	('2019-08-31'),
	('2019-09-01'),
	('2019-09-02'),
	('2019-09-03'),
	('2019-09-04'),
	('2019-09-05'),
	('2019-09-06'),
	('2019-09-07'),
	('2019-09-08'),
	('2019-09-09'),
	('2019-09-10'),
	('2019-09-11'),
	('2019-09-12'),
	('2019-09-13'),
	('2019-09-14'),
	('2019-09-15'),
	('2019-09-16'),
	('2019-09-17'),
	('2019-09-18'),
	('2019-09-19'),
	('2019-09-20'),
	('2019-09-21'),
	('2019-09-22'),
	('2019-09-23'),
	('2019-09-24'),
	('2019-09-25'),
	('2019-09-26'),
	('2019-09-27'),
	('2019-09-28'),
	('2019-09-29'),
	('2019-09-30'),
	('2019-10-01'),
	('2019-10-02'),
	('2019-10-03'),
	('2019-10-04'),
	('2019-10-05'),
	('2019-10-06'),
	('2019-10-07'),
	('2019-10-08'),
	('2019-10-09'),
	('2019-10-10'),
	('2019-10-11'),
	('2019-10-12'),
	('2019-10-13'),
	('2019-10-14'),
	('2019-10-15'),
	('2019-10-16'),
	('2019-10-17'),
	('2019-10-18'),
	('2019-10-19'),
	('2019-10-20'),
	('2019-10-21'),
	('2019-10-22'),
	('2019-10-23'),
	('2019-10-24'),
	('2019-10-25'),
	('2019-10-26'),
	('2019-10-27'),
	('2019-10-28'),
	('2019-10-29'),
	('2019-10-30'),
	('2019-10-31'),
	('2019-11-01'),
	('2019-11-02'),
	('2019-11-03'),
	('2019-11-04'),
	('2019-11-05'),
	('2019-11-06'),
	('2019-11-07'),
	('2019-11-08'),
	('2019-11-09'),
	('2019-11-10'),
	('2019-11-11'),
	('2019-11-12'),
	('2019-11-13'),
	('2019-11-14'),
	('2019-11-15'),
	('2019-11-16'),
	('2019-11-17'),
	('2019-11-18'),
	('2019-11-19'),
	('2019-11-20'),
	('2019-11-21'),
	('2019-11-22'),
	('2019-11-23'),
	('2019-11-24'),
	('2019-11-25'),
	('2019-11-26'),
	('2019-11-27'),
	('2019-11-28'),
	('2019-11-29'),
	('2019-11-30'),
	('2019-12-01'),
	('2019-12-02'),
	('2019-12-03'),
	('2019-12-04'),
	('2019-12-05'),
	('2019-12-06'),
	('2019-12-07'),
	('2019-12-08'),
	('2019-12-09'),
	('2019-12-10'),
	('2019-12-11'),
	('2019-12-12'),
	('2019-12-13'),
	('2019-12-14'),
	('2019-12-15'),
	('2019-12-16'),
	('2019-12-17'),
	('2019-12-18'),
	('2019-12-19'),
	('2019-12-20'),
	('2019-12-21'),
	('2019-12-22'),
	('2019-12-23'),
	('2019-12-24'),
	('2019-12-25'),
	('2019-12-26'),
	('2019-12-27'),
	('2019-12-28'),
	('2019-12-29'),
	('2019-12-30'),
	('2019-12-31'),
	('2020-01-01'),
	('2020-01-02'),
	('2020-01-03'),
	('2020-01-04'),
	('2020-01-05'),
	('2020-01-06'),
	('2020-01-07'),
	('2020-01-08'),
	('2020-01-09'),
	('2020-01-10'),
	('2020-01-11'),
	('2020-01-12'),
	('2020-01-13'),
	('2020-01-14'),
	('2020-01-15'),
	('2020-01-16'),
	('2020-01-17'),
	('2020-01-18'),
	('2020-01-19'),
	('2020-01-20'),
	('2020-01-21'),
	('2020-01-22'),
	('2020-01-23'),
	('2020-01-24'),
	('2020-01-25'),
	('2020-01-26'),
	('2020-01-27'),
	('2020-01-28'),
	('2020-01-29'),
	('2020-01-30'),
	('2020-01-31'),
	('2020-02-01'),
	('2020-02-02'),
	('2020-02-03'),
	('2020-02-04'),
	('2020-02-05'),
	('2020-02-06'),
	('2020-02-07'),
	('2020-02-08'),
	('2020-02-09'),
	('2020-02-10'),
	('2020-02-11'),
	('2020-02-12'),
	('2020-02-13'),
	('2020-02-14'),
	('2020-02-15'),
	('2020-02-16'),
	('2020-02-17'),
	('2020-02-18'),
	('2020-02-19'),
	('2020-02-20'),
	('2020-02-21'),
	('2020-02-22'),
	('2020-02-23'),
	('2020-02-24'),
	('2020-02-25'),
	('2020-02-26'),
	('2020-02-27'),
	('2020-02-28'),
	('2020-02-29'),
	('2020-03-01'),
	('2020-03-02'),
	('2020-03-03'),
	('2020-03-04'),
	('2020-03-05'),
	('2020-03-06'),
	('2020-03-07'),
	('2020-03-08'),
	('2020-03-09'),
	('2020-03-10'),
	('2020-03-11'),
	('2020-03-12'),
	('2020-03-13'),
	('2020-03-14'),
	('2020-03-15'),
	('2020-03-16'),
	('2020-03-17'),
	('2020-03-18'),
	('2020-03-19'),
	('2020-03-20'),
	('2020-03-21'),
	('2020-03-22'),
	('2020-03-23'),
	('2020-03-24'),
	('2020-03-25'),
	('2020-03-26'),
	('2020-03-27'),
	('2020-03-28'),
	('2020-03-29'),
	('2020-03-30'),
	('2020-03-31'),
	('2020-04-01'),
	('2020-04-02'),
	('2020-04-03'),
	('2020-04-04'),
	('2020-04-05'),
	('2020-04-06'),
	('2020-04-07'),
	('2020-04-08'),
	('2020-04-09'),
	('2020-04-10'),
	('2020-04-11'),
	('2020-04-12'),
	('2020-04-13'),
	('2020-04-14'),
	('2020-04-15'),
	('2020-04-16'),
	('2020-04-17'),
	('2020-04-18'),
	('2020-04-19'),
	('2020-04-20'),
	('2020-04-21'),
	('2020-04-22'),
	('2020-04-23'),
	('2020-04-24'),
	('2020-04-25'),
	('2020-04-26'),
	('2020-04-27'),
	('2020-04-28'),
	('2020-04-29'),
	('2020-04-30'),
	('2020-05-01'),
	('2020-05-02'),
	('2020-05-03'),
	('2020-05-04'),
	('2020-05-05'),
	('2020-05-06'),
	('2020-05-07'),
	('2020-05-08'),
	('2020-05-09'),
	('2020-05-10'),
	('2020-05-11'),
	('2020-05-12'),
	('2020-05-13'),
	('2020-05-14'),
	('2020-05-15'),
	('2020-05-16'),
	('2020-05-17'),
	('2020-05-18'),
	('2020-05-19'),
	('2020-05-20'),
	('2020-05-21'),
	('2020-05-22'),
	('2020-05-23'),
	('2020-05-24'),
	('2020-05-25'),
	('2020-05-26'),
	('2020-05-27'),
	('2020-05-28'),
	('2020-05-29'),
	('2020-05-30'),
	('2020-05-31'),
	('2020-06-01'),
	('2020-06-02'),
	('2020-06-03'),
	('2020-06-04'),
	('2020-06-05'),
	('2020-06-06'),
	('2020-06-07'),
	('2020-06-08'),
	('2020-06-09'),
	('2020-06-10'),
	('2020-06-11'),
	('2020-06-12'),
	('2020-06-13'),
	('2020-06-14'),
	('2020-06-15'),
	('2020-06-16'),
	('2020-06-17'),
	('2020-06-18'),
	('2020-06-19'),
	('2020-06-20'),
	('2020-06-21'),
	('2020-06-22'),
	('2020-06-23'),
	('2020-06-24'),
	('2020-06-25'),
	('2020-06-26'),
	('2020-06-27'),
	('2020-06-28'),
	('2020-06-29'),
	('2020-06-30'),
	('2020-07-01'),
	('2020-07-02'),
	('2020-07-03'),
	('2020-07-04'),
	('2020-07-05'),
	('2020-07-06'),
	('2020-07-07'),
	('2020-07-08'),
	('2020-07-09'),
	('2020-07-10'),
	('2020-07-11'),
	('2020-07-12'),
	('2020-07-13'),
	('2020-07-14'),
	('2020-07-15'),
	('2020-07-16'),
	('2020-07-17'),
	('2020-07-18'),
	('2020-07-19'),
	('2020-07-20'),
	('2020-07-21'),
	('2020-07-22'),
	('2020-07-23'),
	('2020-07-24'),
	('2020-07-25'),
	('2020-07-26'),
	('2020-07-27'),
	('2020-07-28'),
	('2020-07-29'),
	('2020-07-30'),
	('2020-07-31'),
	('2020-08-01'),
	('2020-08-02'),
	('2020-08-03'),
	('2020-08-04'),
	('2020-08-05'),
	('2020-08-06'),
	('2020-08-07'),
	('2020-08-08'),
	('2020-08-09'),
	('2020-08-10'),
	('2020-08-11'),
	('2020-08-12'),
	('2020-08-13'),
	('2020-08-14'),
	('2020-08-15'),
	('2020-08-16'),
	('2020-08-17'),
	('2020-08-18'),
	('2020-08-19'),
	('2020-08-20'),
	('2020-08-21'),
	('2020-08-22'),
	('2020-08-23'),
	('2020-08-24'),
	('2020-08-25'),
	('2020-08-26'),
	('2020-08-27'),
	('2020-08-28'),
	('2020-08-29'),
	('2020-08-30'),
	('2020-08-31'),
	('2020-09-01'),
	('2020-09-02'),
	('2020-09-03'),
	('2020-09-04'),
	('2020-09-05'),
	('2020-09-06'),
	('2020-09-07'),
	('2020-09-08'),
	('2020-09-09'),
	('2020-09-10'),
	('2020-09-11'),
	('2020-09-12'),
	('2020-09-13'),
	('2020-09-14'),
	('2020-09-15'),
	('2020-09-16'),
	('2020-09-17'),
	('2020-09-18'),
	('2020-09-19'),
	('2020-09-20'),
	('2020-09-21'),
	('2020-09-22'),
	('2020-09-23'),
	('2020-09-24'),
	('2020-09-25'),
	('2020-09-26'),
	('2020-09-27'),
	('2020-09-28'),
	('2020-09-29'),
	('2020-09-30'),
	('2020-10-01'),
	('2020-10-02'),
	('2020-10-03'),
	('2020-10-04'),
	('2020-10-05'),
	('2020-10-06'),
	('2020-10-07'),
	('2020-10-08'),
	('2020-10-09'),
	('2020-10-10'),
	('2020-10-11'),
	('2020-10-12'),
	('2020-10-13'),
	('2020-10-14'),
	('2020-10-15'),
	('2020-10-16'),
	('2020-10-17'),
	('2020-10-18'),
	('2020-10-19'),
	('2020-10-20'),
	('2020-10-21'),
	('2020-10-22'),
	('2020-10-23'),
	('2020-10-24'),
	('2020-10-25'),
	('2020-10-26'),
	('2020-10-27'),
	('2020-10-28'),
	('2020-10-29'),
	('2020-10-30'),
	('2020-10-31'),
	('2020-11-01'),
	('2020-11-02'),
	('2020-11-03'),
	('2020-11-04'),
	('2020-11-05'),
	('2020-11-06'),
	('2020-11-07'),
	('2020-11-08'),
	('2020-11-09'),
	('2020-11-10'),
	('2020-11-11'),
	('2020-11-12'),
	('2020-11-13'),
	('2020-11-14'),
	('2020-11-15'),
	('2020-11-16'),
	('2020-11-17'),
	('2020-11-18'),
	('2020-11-19'),
	('2020-11-20'),
	('2020-11-21'),
	('2020-11-22'),
	('2020-11-23'),
	('2020-11-24'),
	('2020-11-25'),
	('2020-11-26'),
	('2020-11-27'),
	('2020-11-28'),
	('2020-11-29'),
	('2020-11-30'),
	('2020-12-01'),
	('2020-12-02'),
	('2020-12-03'),
	('2020-12-04'),
	('2020-12-05'),
	('2020-12-06'),
	('2020-12-07'),
	('2020-12-08'),
	('2020-12-09'),
	('2020-12-10'),
	('2020-12-11'),
	('2020-12-12'),
	('2020-12-13'),
	('2020-12-14'),
	('2020-12-15'),
	('2020-12-16'),
	('2020-12-17'),
	('2020-12-18'),
	('2020-12-19'),
	('2020-12-20'),
	('2020-12-21'),
	('2020-12-22'),
	('2020-12-23'),
	('2020-12-24'),
	('2020-12-25'),
	('2020-12-26'),
	('2020-12-27'),
	('2020-12-28'),
	('2020-12-29'),
	('2020-12-30'),
	('2020-12-31'),
	('2021-01-01'),
	('2021-01-02'),
	('2021-01-03'),
	('2021-01-04'),
	('2021-01-05'),
	('2021-01-06'),
	('2021-01-07'),
	('2021-01-08'),
	('2021-01-09'),
	('2021-01-10'),
	('2021-01-11'),
	('2021-01-12'),
	('2021-01-13'),
	('2021-01-14'),
	('2021-01-15'),
	('2021-01-16'),
	('2021-01-17'),
	('2021-01-18'),
	('2021-01-19'),
	('2021-01-20'),
	('2021-01-21'),
	('2021-01-22'),
	('2021-01-23'),
	('2021-01-24'),
	('2021-01-25'),
	('2021-01-26'),
	('2021-01-27'),
	('2021-01-28'),
	('2021-01-29'),
	('2021-01-30'),
	('2021-01-31'),
	('2021-02-01'),
	('2021-02-02'),
	('2021-02-03'),
	('2021-02-04'),
	('2021-02-05'),
	('2021-02-06'),
	('2021-02-07'),
	('2021-02-08'),
	('2021-02-09'),
	('2021-02-10'),
	('2021-02-11'),
	('2021-02-12'),
	('2021-02-13'),
	('2021-02-14'),
	('2021-02-15'),
	('2021-02-16'),
	('2021-02-17'),
	('2021-02-18'),
	('2021-02-19'),
	('2021-02-20'),
	('2021-02-21'),
	('2021-02-22'),
	('2021-02-23'),
	('2021-02-24'),
	('2021-02-25'),
	('2021-02-26'),
	('2021-02-27'),
	('2021-02-28'),
	('2021-03-01'),
	('2021-03-02'),
	('2021-03-03'),
	('2021-03-04'),
	('2021-03-05'),
	('2021-03-06'),
	('2021-03-07'),
	('2021-03-08'),
	('2021-03-09'),
	('2021-03-10'),
	('2021-03-11'),
	('2021-03-12'),
	('2021-03-13'),
	('2021-03-14'),
	('2021-03-15'),
	('2021-03-16'),
	('2021-03-17'),
	('2021-03-18'),
	('2021-03-19'),
	('2021-03-20'),
	('2021-03-21'),
	('2021-03-22'),
	('2021-03-23'),
	('2021-03-24'),
	('2021-03-25'),
	('2021-03-26'),
	('2021-03-27'),
	('2021-03-28'),
	('2021-03-29'),
	('2021-03-30'),
	('2021-03-31'),
	('2021-04-01'),
	('2021-04-02'),
	('2021-04-03'),
	('2021-04-04'),
	('2021-04-05'),
	('2021-04-06'),
	('2021-04-07'),
	('2021-04-08'),
	('2021-04-09'),
	('2021-04-10'),
	('2021-04-11'),
	('2021-04-12'),
	('2021-04-13'),
	('2021-04-14'),
	('2021-04-15'),
	('2021-04-16'),
	('2021-04-17'),
	('2021-04-18'),
	('2021-04-19'),
	('2021-04-20'),
	('2021-04-21'),
	('2021-04-22'),
	('2021-04-23'),
	('2021-04-24'),
	('2021-04-25'),
	('2021-04-26'),
	('2021-04-27'),
	('2021-04-28'),
	('2021-04-29'),
	('2021-04-30'),
	('2021-05-01'),
	('2021-05-02'),
	('2021-05-03'),
	('2021-05-04'),
	('2021-05-05'),
	('2021-05-06'),
	('2021-05-07'),
	('2021-05-08'),
	('2021-05-09'),
	('2021-05-10'),
	('2021-05-11'),
	('2021-05-12'),
	('2021-05-13'),
	('2021-05-14'),
	('2021-05-15'),
	('2021-05-16'),
	('2021-05-17'),
	('2021-05-18'),
	('2021-05-19'),
	('2021-05-20'),
	('2021-05-21'),
	('2021-05-22'),
	('2021-05-23'),
	('2021-05-24'),
	('2021-05-25'),
	('2021-05-26'),
	('2021-05-27'),
	('2021-05-28'),
	('2021-05-29'),
	('2021-05-30'),
	('2021-05-31'),
	('2021-06-01'),
	('2021-06-02'),
	('2021-06-03'),
	('2021-06-04'),
	('2021-06-05'),
	('2021-06-06'),
	('2021-06-07'),
	('2021-06-08'),
	('2021-06-09'),
	('2021-06-10'),
	('2021-06-11'),
	('2021-06-12'),
	('2021-06-13'),
	('2021-06-14'),
	('2021-06-15'),
	('2021-06-16'),
	('2021-06-17'),
	('2021-06-18'),
	('2021-06-19'),
	('2021-06-20'),
	('2021-06-21'),
	('2021-06-22'),
	('2021-06-23'),
	('2021-06-24'),
	('2021-06-25'),
	('2021-06-26'),
	('2021-06-27'),
	('2021-06-28'),
	('2021-06-29'),
	('2021-06-30'),
	('2021-07-01'),
	('2021-07-02'),
	('2021-07-03'),
	('2021-07-04'),
	('2021-07-05'),
	('2021-07-06'),
	('2021-07-07'),
	('2021-07-08'),
	('2021-07-09'),
	('2021-07-10'),
	('2021-07-11'),
	('2021-07-12'),
	('2021-07-13'),
	('2021-07-14'),
	('2021-07-15'),
	('2021-07-16'),
	('2021-07-17'),
	('2021-07-18'),
	('2021-07-19'),
	('2021-07-20'),
	('2021-07-21'),
	('2021-07-22'),
	('2021-07-23'),
	('2021-07-24'),
	('2021-07-25'),
	('2021-07-26'),
	('2021-07-27'),
	('2021-07-28'),
	('2021-07-29'),
	('2021-07-30'),
	('2021-07-31'),
	('2021-08-01'),
	('2021-08-02'),
	('2021-08-03'),
	('2021-08-04'),
	('2021-08-05'),
	('2021-08-06'),
	('2021-08-07'),
	('2021-08-08'),
	('2021-08-09'),
	('2021-08-10'),
	('2021-08-11'),
	('2021-08-12'),
	('2021-08-13'),
	('2021-08-14'),
	('2021-08-15'),
	('2021-08-16'),
	('2021-08-17'),
	('2021-08-18'),
	('2021-08-19'),
	('2021-08-20'),
	('2021-08-21'),
	('2021-08-22'),
	('2021-08-23'),
	('2021-08-24'),
	('2021-08-25'),
	('2021-08-26'),
	('2021-08-27'),
	('2021-08-28'),
	('2021-08-29'),
	('2021-08-30'),
	('2021-08-31'),
	('2021-09-01'),
	('2021-09-02'),
	('2021-09-03'),
	('2021-09-04'),
	('2021-09-05'),
	('2021-09-06'),
	('2021-09-07'),
	('2021-09-08'),
	('2021-09-09'),
	('2021-09-10'),
	('2021-09-11'),
	('2021-09-12'),
	('2021-09-13'),
	('2021-09-14'),
	('2021-09-15'),
	('2021-09-16'),
	('2021-09-17'),
	('2021-09-18'),
	('2021-09-19'),
	('2021-09-20'),
	('2021-09-21'),
	('2021-09-22'),
	('2021-09-23'),
	('2021-09-24'),
	('2021-09-25'),
	('2021-09-26'),
	('2021-09-27'),
	('2021-09-28'),
	('2021-09-29'),
	('2021-09-30'),
	('2021-10-01'),
	('2021-10-02'),
	('2021-10-03'),
	('2021-10-04'),
	('2021-10-05'),
	('2021-10-06'),
	('2021-10-07'),
	('2021-10-08'),
	('2021-10-09'),
	('2021-10-10'),
	('2021-10-11'),
	('2021-10-12'),
	('2021-10-13'),
	('2021-10-14'),
	('2021-10-15'),
	('2021-10-16'),
	('2021-10-17'),
	('2021-10-18'),
	('2021-10-19'),
	('2021-10-20'),
	('2021-10-21'),
	('2021-10-22'),
	('2021-10-23'),
	('2021-10-24'),
	('2021-10-25'),
	('2021-10-26'),
	('2021-10-27'),
	('2021-10-28'),
	('2021-10-29'),
	('2021-10-30'),
	('2021-10-31'),
	('2021-11-01'),
	('2021-11-02'),
	('2021-11-03'),
	('2021-11-04'),
	('2021-11-05'),
	('2021-11-06'),
	('2021-11-07'),
	('2021-11-08'),
	('2021-11-09'),
	('2021-11-10'),
	('2021-11-11'),
	('2021-11-12'),
	('2021-11-13'),
	('2021-11-14'),
	('2021-11-15'),
	('2021-11-16'),
	('2021-11-17'),
	('2021-11-18'),
	('2021-11-19'),
	('2021-11-20'),
	('2021-11-21'),
	('2021-11-22'),
	('2021-11-23'),
	('2021-11-24'),
	('2021-11-25'),
	('2021-11-26'),
	('2021-11-27'),
	('2021-11-28'),
	('2021-11-29'),
	('2021-11-30'),
	('2021-12-01'),
	('2021-12-02'),
	('2021-12-03'),
	('2021-12-04'),
	('2021-12-05'),
	('2021-12-06'),
	('2021-12-07'),
	('2021-12-08'),
	('2021-12-09'),
	('2021-12-10'),
	('2021-12-11'),
	('2021-12-12'),
	('2021-12-13'),
	('2021-12-14'),
	('2021-12-15'),
	('2021-12-16'),
	('2021-12-17'),
	('2021-12-18'),
	('2021-12-19'),
	('2021-12-20'),
	('2021-12-21'),
	('2021-12-22'),
	('2021-12-23'),
	('2021-12-24'),
	('2021-12-25'),
	('2021-12-26'),
	('2021-12-27'),
	('2021-12-28'),
	('2021-12-29'),
	('2021-12-30'),
	('2021-12-31'),
	('2022-01-01'),
	('2022-01-02'),
	('2022-01-03'),
	('2022-01-04'),
	('2022-01-05'),
	('2022-01-06'),
	('2022-01-07'),
	('2022-01-08'),
	('2022-01-09'),
	('2022-01-10'),
	('2022-01-11'),
	('2022-01-12'),
	('2022-01-13'),
	('2022-01-14'),
	('2022-01-15'),
	('2022-01-16'),
	('2022-01-17'),
	('2022-01-18'),
	('2022-01-19'),
	('2022-01-20'),
	('2022-01-21'),
	('2022-01-22'),
	('2022-01-23'),
	('2022-01-24'),
	('2022-01-25'),
	('2022-01-26'),
	('2022-01-27'),
	('2022-01-28'),
	('2022-01-29'),
	('2022-01-30'),
	('2022-01-31'),
	('2022-02-01'),
	('2022-02-02'),
	('2022-02-03'),
	('2022-02-04'),
	('2022-02-05'),
	('2022-02-06'),
	('2022-02-07'),
	('2022-02-08'),
	('2022-02-09'),
	('2022-02-10'),
	('2022-02-11'),
	('2022-02-12'),
	('2022-02-13'),
	('2022-02-14'),
	('2022-02-15'),
	('2022-02-16'),
	('2022-02-17'),
	('2022-02-18'),
	('2022-02-19'),
	('2022-02-20'),
	('2022-02-21'),
	('2022-02-22'),
	('2022-02-23'),
	('2022-02-24'),
	('2022-02-25'),
	('2022-02-26'),
	('2022-02-27'),
	('2022-02-28'),
	('2022-03-01'),
	('2022-03-02'),
	('2022-03-03'),
	('2022-03-04'),
	('2022-03-05'),
	('2022-03-06'),
	('2022-03-07'),
	('2022-03-08'),
	('2022-03-09'),
	('2022-03-10'),
	('2022-03-11'),
	('2022-03-12'),
	('2022-03-13'),
	('2022-03-14'),
	('2022-03-15'),
	('2022-03-16'),
	('2022-03-17'),
	('2022-03-18'),
	('2022-03-19'),
	('2022-03-20'),
	('2022-03-21'),
	('2022-03-22'),
	('2022-03-23'),
	('2022-03-24'),
	('2022-03-25'),
	('2022-03-26'),
	('2022-03-27'),
	('2022-03-28'),
	('2022-03-29'),
	('2022-03-30'),
	('2022-03-31'),
	('2022-04-01'),
	('2022-04-02'),
	('2022-04-03'),
	('2022-04-04'),
	('2022-04-05'),
	('2022-04-06'),
	('2022-04-07'),
	('2022-04-08'),
	('2022-04-09'),
	('2022-04-10'),
	('2022-04-11'),
	('2022-04-12'),
	('2022-04-13'),
	('2022-04-14'),
	('2022-04-15'),
	('2022-04-16'),
	('2022-04-17'),
	('2022-04-18'),
	('2022-04-19'),
	('2022-04-20'),
	('2022-04-21'),
	('2022-04-22'),
	('2022-04-23'),
	('2022-04-24'),
	('2022-04-25'),
	('2022-04-26'),
	('2022-04-27'),
	('2022-04-28'),
	('2022-04-29'),
	('2022-04-30'),
	('2022-05-01'),
	('2022-05-02'),
	('2022-05-03'),
	('2022-05-04'),
	('2022-05-05'),
	('2022-05-06'),
	('2022-05-07'),
	('2022-05-08'),
	('2022-05-09'),
	('2022-05-10'),
	('2022-05-11'),
	('2022-05-12'),
	('2022-05-13'),
	('2022-05-14'),
	('2022-05-15'),
	('2022-05-16'),
	('2022-05-17'),
	('2022-05-18'),
	('2022-05-19'),
	('2022-05-20'),
	('2022-05-21'),
	('2022-05-22'),
	('2022-05-23'),
	('2022-05-24'),
	('2022-05-25'),
	('2022-05-26'),
	('2022-05-27'),
	('2022-05-28'),
	('2022-05-29'),
	('2022-05-30'),
	('2022-05-31'),
	('2022-06-01'),
	('2022-06-02'),
	('2022-06-03'),
	('2022-06-04'),
	('2022-06-05'),
	('2022-06-06'),
	('2022-06-07'),
	('2022-06-08'),
	('2022-06-09'),
	('2022-06-10'),
	('2022-06-11'),
	('2022-06-12'),
	('2022-06-13'),
	('2022-06-14'),
	('2022-06-15'),
	('2022-06-16'),
	('2022-06-17'),
	('2022-06-18'),
	('2022-06-19'),
	('2022-06-20'),
	('2022-06-21'),
	('2022-06-22'),
	('2022-06-23'),
	('2022-06-24'),
	('2022-06-25'),
	('2022-06-26'),
	('2022-06-27'),
	('2022-06-28'),
	('2022-06-29'),
	('2022-06-30'),
	('2022-07-01'),
	('2022-07-02'),
	('2022-07-03'),
	('2022-07-04'),
	('2022-07-05'),
	('2022-07-06'),
	('2022-07-07'),
	('2022-07-08'),
	('2022-07-09'),
	('2022-07-10'),
	('2022-07-11'),
	('2022-07-12'),
	('2022-07-13'),
	('2022-07-14'),
	('2022-07-15'),
	('2022-07-16'),
	('2022-07-17'),
	('2022-07-18'),
	('2022-07-19'),
	('2022-07-20'),
	('2022-07-21'),
	('2022-07-22'),
	('2022-07-23'),
	('2022-07-24'),
	('2022-07-25'),
	('2022-07-26'),
	('2022-07-27'),
	('2022-07-28'),
	('2022-07-29'),
	('2022-07-30'),
	('2022-07-31'),
	('2022-08-01'),
	('2022-08-02'),
	('2022-08-03'),
	('2022-08-04'),
	('2022-08-05'),
	('2022-08-06'),
	('2022-08-07'),
	('2022-08-08'),
	('2022-08-09'),
	('2022-08-10'),
	('2022-08-11'),
	('2022-08-12'),
	('2022-08-13'),
	('2022-08-14'),
	('2022-08-15'),
	('2022-08-16'),
	('2022-08-17'),
	('2022-08-18'),
	('2022-08-19'),
	('2022-08-20'),
	('2022-08-21'),
	('2022-08-22'),
	('2022-08-23'),
	('2022-08-24'),
	('2022-08-25'),
	('2022-08-26'),
	('2022-08-27'),
	('2022-08-28'),
	('2022-08-29'),
	('2022-08-30'),
	('2022-08-31'),
	('2022-09-01'),
	('2022-09-02'),
	('2022-09-03'),
	('2022-09-04'),
	('2022-09-05'),
	('2022-09-06'),
	('2022-09-07'),
	('2022-09-08'),
	('2022-09-09'),
	('2022-09-10'),
	('2022-09-11'),
	('2022-09-12'),
	('2022-09-13'),
	('2022-09-14'),
	('2022-09-15'),
	('2022-09-16'),
	('2022-09-17'),
	('2022-09-18'),
	('2022-09-19'),
	('2022-09-20'),
	('2022-09-21'),
	('2022-09-22'),
	('2022-09-23'),
	('2022-09-24'),
	('2022-09-25'),
	('2022-09-26'),
	('2022-09-27'),
	('2022-09-28'),
	('2022-09-29'),
	('2022-09-30'),
	('2022-10-01'),
	('2022-10-02'),
	('2022-10-03'),
	('2022-10-04'),
	('2022-10-05'),
	('2022-10-06'),
	('2022-10-07'),
	('2022-10-08'),
	('2022-10-09'),
	('2022-10-10'),
	('2022-10-11'),
	('2022-10-12'),
	('2022-10-13'),
	('2022-10-14'),
	('2022-10-15'),
	('2022-10-16'),
	('2022-10-17'),
	('2022-10-18'),
	('2022-10-19'),
	('2022-10-20'),
	('2022-10-21'),
	('2022-10-22'),
	('2022-10-23'),
	('2022-10-24'),
	('2022-10-25'),
	('2022-10-26'),
	('2022-10-27'),
	('2022-10-28'),
	('2022-10-29'),
	('2022-10-30'),
	('2022-10-31'),
	('2022-11-01'),
	('2022-11-02'),
	('2022-11-03'),
	('2022-11-04'),
	('2022-11-05'),
	('2022-11-06'),
	('2022-11-07'),
	('2022-11-08'),
	('2022-11-09'),
	('2022-11-10'),
	('2022-11-11'),
	('2022-11-12'),
	('2022-11-13'),
	('2022-11-14'),
	('2022-11-15'),
	('2022-11-16'),
	('2022-11-17'),
	('2022-11-18'),
	('2022-11-19'),
	('2022-11-20'),
	('2022-11-21'),
	('2022-11-22'),
	('2022-11-23'),
	('2022-11-24'),
	('2022-11-25'),
	('2022-11-26'),
	('2022-11-27'),
	('2022-11-28'),
	('2022-11-29'),
	('2022-11-30'),
	('2022-12-01'),
	('2022-12-02'),
	('2022-12-03'),
	('2022-12-04'),
	('2022-12-05'),
	('2022-12-06'),
	('2022-12-07'),
	('2022-12-08'),
	('2022-12-09'),
	('2022-12-10'),
	('2022-12-11'),
	('2022-12-12'),
	('2022-12-13'),
	('2022-12-14'),
	('2022-12-15'),
	('2022-12-16'),
	('2022-12-17'),
	('2022-12-18'),
	('2022-12-19'),
	('2022-12-20'),
	('2022-12-21'),
	('2022-12-22'),
	('2022-12-23'),
	('2022-12-24'),
	('2022-12-25'),
	('2022-12-26'),
	('2022-12-27'),
	('2022-12-28'),
	('2022-12-29'),
	('2022-12-30'),
	('2022-12-31'),
	('2023-01-01'),
	('2023-01-02'),
	('2023-01-03'),
	('2023-01-04'),
	('2023-01-05'),
	('2023-01-06'),
	('2023-01-07'),
	('2023-01-08'),
	('2023-01-09'),
	('2023-01-10'),
	('2023-01-11'),
	('2023-01-12'),
	('2023-01-13'),
	('2023-01-14'),
	('2023-01-15'),
	('2023-01-16'),
	('2023-01-17'),
	('2023-01-18'),
	('2023-01-19'),
	('2023-01-20'),
	('2023-01-21'),
	('2023-01-22'),
	('2023-01-23'),
	('2023-01-24'),
	('2023-01-25'),
	('2023-01-26'),
	('2023-01-27'),
	('2023-01-28'),
	('2023-01-29'),
	('2023-01-30'),
	('2023-01-31'),
	('2023-02-01'),
	('2023-02-02'),
	('2023-02-03'),
	('2023-02-04'),
	('2023-02-05'),
	('2023-02-06'),
	('2023-02-07'),
	('2023-02-08'),
	('2023-02-09'),
	('2023-02-10'),
	('2023-02-11'),
	('2023-02-12'),
	('2023-02-13'),
	('2023-02-14'),
	('2023-02-15'),
	('2023-02-16'),
	('2023-02-17'),
	('2023-02-18'),
	('2023-02-19'),
	('2023-02-20'),
	('2023-02-21'),
	('2023-02-22'),
	('2023-02-23'),
	('2023-02-24'),
	('2023-02-25'),
	('2023-02-26'),
	('2023-02-27'),
	('2023-02-28'),
	('2023-03-01'),
	('2023-03-02'),
	('2023-03-03'),
	('2023-03-04'),
	('2023-03-05'),
	('2023-03-06'),
	('2023-03-07'),
	('2023-03-08'),
	('2023-03-09'),
	('2023-03-10'),
	('2023-03-11'),
	('2023-03-12'),
	('2023-03-13'),
	('2023-03-14'),
	('2023-03-15'),
	('2023-03-16'),
	('2023-03-17'),
	('2023-03-18'),
	('2023-03-19'),
	('2023-03-20'),
	('2023-03-21'),
	('2023-03-22'),
	('2023-03-23'),
	('2023-03-24'),
	('2023-03-25'),
	('2023-03-26'),
	('2023-03-27'),
	('2023-03-28'),
	('2023-03-29'),
	('2023-03-30'),
	('2023-03-31'),
	('2023-04-01'),
	('2023-04-02'),
	('2023-04-03'),
	('2023-04-04'),
	('2023-04-05'),
	('2023-04-06'),
	('2023-04-07'),
	('2023-04-08'),
	('2023-04-09'),
	('2023-04-10'),
	('2023-04-11'),
	('2023-04-12'),
	('2023-04-13'),
	('2023-04-14'),
	('2023-04-15'),
	('2023-04-16'),
	('2023-04-17'),
	('2023-04-18'),
	('2023-04-19'),
	('2023-04-20'),
	('2023-04-21'),
	('2023-04-22'),
	('2023-04-23'),
	('2023-04-24'),
	('2023-04-25'),
	('2023-04-26'),
	('2023-04-27'),
	('2023-04-28'),
	('2023-04-29'),
	('2023-04-30'),
	('2023-05-01'),
	('2023-05-02'),
	('2023-05-03'),
	('2023-05-04'),
	('2023-05-05'),
	('2023-05-06'),
	('2023-05-07'),
	('2023-05-08'),
	('2023-05-09'),
	('2023-05-10'),
	('2023-05-11'),
	('2023-05-12'),
	('2023-05-13'),
	('2023-05-14'),
	('2023-05-15'),
	('2023-05-16'),
	('2023-05-17'),
	('2023-05-18'),
	('2023-05-19'),
	('2023-05-20'),
	('2023-05-21'),
	('2023-05-22'),
	('2023-05-23'),
	('2023-05-24'),
	('2023-05-25'),
	('2023-05-26'),
	('2023-05-27'),
	('2023-05-28'),
	('2023-05-29'),
	('2023-05-30'),
	('2023-05-31'),
	('2023-06-01'),
	('2023-06-02'),
	('2023-06-03'),
	('2023-06-04'),
	('2023-06-05'),
	('2023-06-06'),
	('2023-06-07'),
	('2023-06-08'),
	('2023-06-09'),
	('2023-06-10'),
	('2023-06-11'),
	('2023-06-12'),
	('2023-06-13'),
	('2023-06-14'),
	('2023-06-15'),
	('2023-06-16'),
	('2023-06-17'),
	('2023-06-18'),
	('2023-06-19'),
	('2023-06-20'),
	('2023-06-21'),
	('2023-06-22'),
	('2023-06-23'),
	('2023-06-24'),
	('2023-06-25'),
	('2023-06-26'),
	('2023-06-27'),
	('2023-06-28'),
	('2023-06-29'),
	('2023-06-30'),
	('2023-07-01'),
	('2023-07-02'),
	('2023-07-03'),
	('2023-07-04'),
	('2023-07-05'),
	('2023-07-06'),
	('2023-07-07'),
	('2023-07-08'),
	('2023-07-09'),
	('2023-07-10'),
	('2023-07-11'),
	('2023-07-12'),
	('2023-07-13'),
	('2023-07-14'),
	('2023-07-15'),
	('2023-07-16'),
	('2023-07-17'),
	('2023-07-18'),
	('2023-07-19'),
	('2023-07-20'),
	('2023-07-21'),
	('2023-07-22'),
	('2023-07-23'),
	('2023-07-24'),
	('2023-07-25'),
	('2023-07-26'),
	('2023-07-27'),
	('2023-07-28'),
	('2023-07-29'),
	('2023-07-30'),
	('2023-07-31'),
	('2023-08-01'),
	('2023-08-02'),
	('2023-08-03'),
	('2023-08-04'),
	('2023-08-05'),
	('2023-08-06'),
	('2023-08-07'),
	('2023-08-08'),
	('2023-08-09'),
	('2023-08-10'),
	('2023-08-11'),
	('2023-08-12'),
	('2023-08-13'),
	('2023-08-14'),
	('2023-08-15'),
	('2023-08-16'),
	('2023-08-17'),
	('2023-08-18'),
	('2023-08-19'),
	('2023-08-20'),
	('2023-08-21'),
	('2023-08-22'),
	('2023-08-23'),
	('2023-08-24'),
	('2023-08-25'),
	('2023-08-26'),
	('2023-08-27'),
	('2023-08-28'),
	('2023-08-29'),
	('2023-08-30'),
	('2023-08-31'),
	('2023-09-01'),
	('2023-09-02'),
	('2023-09-03'),
	('2023-09-04'),
	('2023-09-05'),
	('2023-09-06'),
	('2023-09-07'),
	('2023-09-08'),
	('2023-09-09'),
	('2023-09-10'),
	('2023-09-11'),
	('2023-09-12'),
	('2023-09-13'),
	('2023-09-14'),
	('2023-09-15'),
	('2023-09-16'),
	('2023-09-17'),
	('2023-09-18'),
	('2023-09-19'),
	('2023-09-20'),
	('2023-09-21'),
	('2023-09-22'),
	('2023-09-23'),
	('2023-09-24'),
	('2023-09-25'),
	('2023-09-26'),
	('2023-09-27'),
	('2023-09-28'),
	('2023-09-29'),
	('2023-09-30'),
	('2023-10-01'),
	('2023-10-02'),
	('2023-10-03'),
	('2023-10-04'),
	('2023-10-05'),
	('2023-10-06'),
	('2023-10-07'),
	('2023-10-08'),
	('2023-10-09'),
	('2023-10-10'),
	('2023-10-11'),
	('2023-10-12'),
	('2023-10-13'),
	('2023-10-14'),
	('2023-10-15'),
	('2023-10-16'),
	('2023-10-17'),
	('2023-10-18'),
	('2023-10-19'),
	('2023-10-20'),
	('2023-10-21'),
	('2023-10-22'),
	('2023-10-23'),
	('2023-10-24'),
	('2023-10-25'),
	('2023-10-26'),
	('2023-10-27'),
	('2023-10-28'),
	('2023-10-29'),
	('2023-10-30'),
	('2023-10-31'),
	('2023-11-01'),
	('2023-11-02'),
	('2023-11-03'),
	('2023-11-04'),
	('2023-11-05'),
	('2023-11-06'),
	('2023-11-07'),
	('2023-11-08'),
	('2023-11-09'),
	('2023-11-10'),
	('2023-11-11'),
	('2023-11-12'),
	('2023-11-13'),
	('2023-11-14'),
	('2023-11-15'),
	('2023-11-16'),
	('2023-11-17'),
	('2023-11-18'),
	('2023-11-19'),
	('2023-11-20'),
	('2023-11-21'),
	('2023-11-22'),
	('2023-11-23'),
	('2023-11-24'),
	('2023-11-25'),
	('2023-11-26'),
	('2023-11-27'),
	('2023-11-28'),
	('2023-11-29'),
	('2023-11-30'),
	('2023-12-01'),
	('2023-12-02'),
	('2023-12-03'),
	('2023-12-04'),
	('2023-12-05'),
	('2023-12-06'),
	('2023-12-07'),
	('2023-12-08'),
	('2023-12-09'),
	('2023-12-10'),
	('2023-12-11'),
	('2023-12-12'),
	('2023-12-13'),
	('2023-12-14'),
	('2023-12-15'),
	('2023-12-16'),
	('2023-12-17'),
	('2023-12-18'),
	('2023-12-19'),
	('2023-12-20'),
	('2023-12-21'),
	('2023-12-22'),
	('2023-12-23'),
	('2023-12-24'),
	('2023-12-25'),
	('2023-12-26'),
	('2023-12-27'),
	('2023-12-28'),
	('2023-12-29'),
	('2023-12-30'),
	('2023-12-31'),
	('2024-01-01'),
	('2024-01-02'),
	('2024-01-03'),
	('2024-01-04'),
	('2024-01-05'),
	('2024-01-06'),
	('2024-01-07'),
	('2024-01-08'),
	('2024-01-09'),
	('2024-01-10'),
	('2024-01-11'),
	('2024-01-12'),
	('2024-01-13'),
	('2024-01-14'),
	('2024-01-15'),
	('2024-01-16'),
	('2024-01-17'),
	('2024-01-18'),
	('2024-01-19'),
	('2024-01-20'),
	('2024-01-21'),
	('2024-01-22'),
	('2024-01-23'),
	('2024-01-24'),
	('2024-01-25'),
	('2024-01-26'),
	('2024-01-27'),
	('2024-01-28'),
	('2024-01-29'),
	('2024-01-30'),
	('2024-01-31'),
	('2024-02-01'),
	('2024-02-02'),
	('2024-02-03'),
	('2024-02-04'),
	('2024-02-05'),
	('2024-02-06'),
	('2024-02-07'),
	('2024-02-08'),
	('2024-02-09'),
	('2024-02-10'),
	('2024-02-11'),
	('2024-02-12'),
	('2024-02-13'),
	('2024-02-14'),
	('2024-02-15'),
	('2024-02-16'),
	('2024-02-17'),
	('2024-02-18'),
	('2024-02-19'),
	('2024-02-20'),
	('2024-02-21'),
	('2024-02-22'),
	('2024-02-23'),
	('2024-02-24'),
	('2024-02-25'),
	('2024-02-26'),
	('2024-02-27'),
	('2024-02-28'),
	('2024-02-29'),
	('2024-03-01'),
	('2024-03-02'),
	('2024-03-03'),
	('2024-03-04'),
	('2024-03-05'),
	('2024-03-06'),
	('2024-03-07'),
	('2024-03-08'),
	('2024-03-09'),
	('2024-03-10'),
	('2024-03-11'),
	('2024-03-12'),
	('2024-03-13'),
	('2024-03-14'),
	('2024-03-15'),
	('2024-03-16'),
	('2024-03-17'),
	('2024-03-18'),
	('2024-03-19'),
	('2024-03-20'),
	('2024-03-21'),
	('2024-03-22'),
	('2024-03-23'),
	('2024-03-24'),
	('2024-03-25'),
	('2024-03-26'),
	('2024-03-27'),
	('2024-03-28'),
	('2024-03-29'),
	('2024-03-30'),
	('2024-03-31'),
	('2024-04-01'),
	('2024-04-02'),
	('2024-04-03'),
	('2024-04-04'),
	('2024-04-05'),
	('2024-04-06'),
	('2024-04-07'),
	('2024-04-08'),
	('2024-04-09'),
	('2024-04-10'),
	('2024-04-11'),
	('2024-04-12'),
	('2024-04-13'),
	('2024-04-14'),
	('2024-04-15'),
	('2024-04-16'),
	('2024-04-17'),
	('2024-04-18'),
	('2024-04-19'),
	('2024-04-20'),
	('2024-04-21'),
	('2024-04-22'),
	('2024-04-23'),
	('2024-04-24'),
	('2024-04-25'),
	('2024-04-26'),
	('2024-04-27'),
	('2024-04-28'),
	('2024-04-29'),
	('2024-04-30'),
	('2024-05-01'),
	('2024-05-02'),
	('2024-05-03'),
	('2024-05-04'),
	('2024-05-05'),
	('2024-05-06'),
	('2024-05-07'),
	('2024-05-08'),
	('2024-05-09'),
	('2024-05-10'),
	('2024-05-11'),
	('2024-05-12'),
	('2024-05-13'),
	('2024-05-14'),
	('2024-05-15'),
	('2024-05-16'),
	('2024-05-17'),
	('2024-05-18'),
	('2024-05-19'),
	('2024-05-20'),
	('2024-05-21'),
	('2024-05-22'),
	('2024-05-23'),
	('2024-05-24'),
	('2024-05-25'),
	('2024-05-26'),
	('2024-05-27'),
	('2024-05-28'),
	('2024-05-29'),
	('2024-05-30'),
	('2024-05-31'),
	('2024-06-01'),
	('2024-06-02'),
	('2024-06-03'),
	('2024-06-04'),
	('2024-06-05'),
	('2024-06-06'),
	('2024-06-07'),
	('2024-06-08'),
	('2024-06-09'),
	('2024-06-10'),
	('2024-06-11'),
	('2024-06-12'),
	('2024-06-13'),
	('2024-06-14'),
	('2024-06-15'),
	('2024-06-16'),
	('2024-06-17'),
	('2024-06-18'),
	('2024-06-19'),
	('2024-06-20'),
	('2024-06-21'),
	('2024-06-22'),
	('2024-06-23'),
	('2024-06-24'),
	('2024-06-25'),
	('2024-06-26'),
	('2024-06-27'),
	('2024-06-28'),
	('2024-06-29'),
	('2024-06-30'),
	('2024-07-01'),
	('2024-07-02'),
	('2024-07-03'),
	('2024-07-04'),
	('2024-07-05'),
	('2024-07-06'),
	('2024-07-07'),
	('2024-07-08'),
	('2024-07-09'),
	('2024-07-10'),
	('2024-07-11'),
	('2024-07-12'),
	('2024-07-13'),
	('2024-07-14'),
	('2024-07-15'),
	('2024-07-16'),
	('2024-07-17'),
	('2024-07-18'),
	('2024-07-19'),
	('2024-07-20'),
	('2024-07-21'),
	('2024-07-22'),
	('2024-07-23'),
	('2024-07-24'),
	('2024-07-25'),
	('2024-07-26'),
	('2024-07-27'),
	('2024-07-28'),
	('2024-07-29'),
	('2024-07-30'),
	('2024-07-31'),
	('2024-08-01'),
	('2024-08-02'),
	('2024-08-03'),
	('2024-08-04'),
	('2024-08-05'),
	('2024-08-06'),
	('2024-08-07'),
	('2024-08-08'),
	('2024-08-09'),
	('2024-08-10'),
	('2024-08-11'),
	('2024-08-12'),
	('2024-08-13'),
	('2024-08-14'),
	('2024-08-15'),
	('2024-08-16'),
	('2024-08-17'),
	('2024-08-18'),
	('2024-08-19'),
	('2024-08-20'),
	('2024-08-21'),
	('2024-08-22'),
	('2024-08-23'),
	('2024-08-24'),
	('2024-08-25'),
	('2024-08-26'),
	('2024-08-27'),
	('2024-08-28'),
	('2024-08-29'),
	('2024-08-30'),
	('2024-08-31'),
	('2024-09-01'),
	('2024-09-02'),
	('2024-09-03'),
	('2024-09-04'),
	('2024-09-05'),
	('2024-09-06'),
	('2024-09-07'),
	('2024-09-08'),
	('2024-09-09'),
	('2024-09-10'),
	('2024-09-11'),
	('2024-09-12'),
	('2024-09-13'),
	('2024-09-14'),
	('2024-09-15'),
	('2024-09-16'),
	('2024-09-17'),
	('2024-09-18'),
	('2024-09-19'),
	('2024-09-20'),
	('2024-09-21'),
	('2024-09-22'),
	('2024-09-23'),
	('2024-09-24'),
	('2024-09-25'),
	('2024-09-26'),
	('2024-09-27'),
	('2024-09-28'),
	('2024-09-29'),
	('2024-09-30'),
	('2024-10-01'),
	('2024-10-02'),
	('2024-10-03'),
	('2024-10-04'),
	('2024-10-05'),
	('2024-10-06'),
	('2024-10-07'),
	('2024-10-08'),
	('2024-10-09'),
	('2024-10-10'),
	('2024-10-11'),
	('2024-10-12'),
	('2024-10-13'),
	('2024-10-14'),
	('2024-10-15'),
	('2024-10-16'),
	('2024-10-17'),
	('2024-10-18'),
	('2024-10-19'),
	('2024-10-20'),
	('2024-10-21'),
	('2024-10-22'),
	('2024-10-23'),
	('2024-10-24'),
	('2024-10-25'),
	('2024-10-26'),
	('2024-10-27'),
	('2024-10-28'),
	('2024-10-29'),
	('2024-10-30'),
	('2024-10-31'),
	('2024-11-01'),
	('2024-11-02'),
	('2024-11-03'),
	('2024-11-04'),
	('2024-11-05'),
	('2024-11-06'),
	('2024-11-07'),
	('2024-11-08'),
	('2024-11-09'),
	('2024-11-10'),
	('2024-11-11'),
	('2024-11-12'),
	('2024-11-13'),
	('2024-11-14'),
	('2024-11-15'),
	('2024-11-16'),
	('2024-11-17'),
	('2024-11-18'),
	('2024-11-19'),
	('2024-11-20'),
	('2024-11-21'),
	('2024-11-22'),
	('2024-11-23'),
	('2024-11-24'),
	('2024-11-25'),
	('2024-11-26'),
	('2024-11-27'),
	('2024-11-28'),
	('2024-11-29'),
	('2024-11-30'),
	('2024-12-01'),
	('2024-12-02'),
	('2024-12-03'),
	('2024-12-04'),
	('2024-12-05'),
	('2024-12-06'),
	('2024-12-07'),
	('2024-12-08'),
	('2024-12-09'),
	('2024-12-10'),
	('2024-12-11'),
	('2024-12-12'),
	('2024-12-13'),
	('2024-12-14'),
	('2024-12-15'),
	('2024-12-16'),
	('2024-12-17'),
	('2024-12-18'),
	('2024-12-19'),
	('2024-12-20'),
	('2024-12-21'),
	('2024-12-22'),
	('2024-12-23'),
	('2024-12-24'),
	('2024-12-25'),
	('2024-12-26'),
	('2024-12-27'),
	('2024-12-28'),
	('2024-12-29'),
	('2024-12-30'),
	('2024-12-31'),
	('2025-01-01'),
	('2025-01-02'),
	('2025-01-03'),
	('2025-01-04'),
	('2025-01-05'),
	('2025-01-06'),
	('2025-01-07'),
	('2025-01-08'),
	('2025-01-09'),
	('2025-01-10'),
	('2025-01-11'),
	('2025-01-12'),
	('2025-01-13'),
	('2025-01-14'),
	('2025-01-15'),
	('2025-01-16'),
	('2025-01-17'),
	('2025-01-18'),
	('2025-01-19'),
	('2025-01-20'),
	('2025-01-21'),
	('2025-01-22'),
	('2025-01-23'),
	('2025-01-24'),
	('2025-01-25'),
	('2025-01-26'),
	('2025-01-27'),
	('2025-01-28'),
	('2025-01-29'),
	('2025-01-30'),
	('2025-01-31'),
	('2025-02-01'),
	('2025-02-02'),
	('2025-02-03'),
	('2025-02-04'),
	('2025-02-05'),
	('2025-02-06'),
	('2025-02-07'),
	('2025-02-08'),
	('2025-02-09'),
	('2025-02-10'),
	('2025-02-11'),
	('2025-02-12'),
	('2025-02-13'),
	('2025-02-14'),
	('2025-02-15'),
	('2025-02-16'),
	('2025-02-17'),
	('2025-02-18'),
	('2025-02-19'),
	('2025-02-20'),
	('2025-02-21'),
	('2025-02-22'),
	('2025-02-23'),
	('2025-02-24'),
	('2025-02-25'),
	('2025-02-26'),
	('2025-02-27'),
	('2025-02-28'),
	('2025-03-01'),
	('2025-03-02'),
	('2025-03-03'),
	('2025-03-04'),
	('2025-03-05'),
	('2025-03-06'),
	('2025-03-07'),
	('2025-03-08'),
	('2025-03-09'),
	('2025-03-10'),
	('2025-03-11'),
	('2025-03-12'),
	('2025-03-13'),
	('2025-03-14'),
	('2025-03-15'),
	('2025-03-16'),
	('2025-03-17'),
	('2025-03-18'),
	('2025-03-19'),
	('2025-03-20'),
	('2025-03-21'),
	('2025-03-22'),
	('2025-03-23'),
	('2025-03-24'),
	('2025-03-25'),
	('2025-03-26'),
	('2025-03-27'),
	('2025-03-28'),
	('2025-03-29'),
	('2025-03-30'),
	('2025-03-31'),
	('2025-04-01'),
	('2025-04-02'),
	('2025-04-03'),
	('2025-04-04'),
	('2025-04-05'),
	('2025-04-06'),
	('2025-04-07'),
	('2025-04-08'),
	('2025-04-09'),
	('2025-04-10'),
	('2025-04-11'),
	('2025-04-12'),
	('2025-04-13'),
	('2025-04-14'),
	('2025-04-15'),
	('2025-04-16'),
	('2025-04-17'),
	('2025-04-18'),
	('2025-04-19'),
	('2025-04-20'),
	('2025-04-21'),
	('2025-04-22'),
	('2025-04-23'),
	('2025-04-24'),
	('2025-04-25'),
	('2025-04-26'),
	('2025-04-27'),
	('2025-04-28'),
	('2025-04-29'),
	('2025-04-30'),
	('2025-05-01'),
	('2025-05-02'),
	('2025-05-03'),
	('2025-05-04'),
	('2025-05-05'),
	('2025-05-06'),
	('2025-05-07'),
	('2025-05-08'),
	('2025-05-09'),
	('2025-05-10'),
	('2025-05-11'),
	('2025-05-12'),
	('2025-05-13'),
	('2025-05-14'),
	('2025-05-15'),
	('2025-05-16'),
	('2025-05-17'),
	('2025-05-18'),
	('2025-05-19'),
	('2025-05-20'),
	('2025-05-21'),
	('2025-05-22'),
	('2025-05-23'),
	('2025-05-24'),
	('2025-05-25'),
	('2025-05-26'),
	('2025-05-27'),
	('2025-05-28'),
	('2025-05-29'),
	('2025-05-30'),
	('2025-05-31'),
	('2025-06-01'),
	('2025-06-02'),
	('2025-06-03'),
	('2025-06-04'),
	('2025-06-05'),
	('2025-06-06'),
	('2025-06-07'),
	('2025-06-08'),
	('2025-06-09'),
	('2025-06-10'),
	('2025-06-11'),
	('2025-06-12'),
	('2025-06-13'),
	('2025-06-14'),
	('2025-06-15'),
	('2025-06-16'),
	('2025-06-17'),
	('2025-06-18'),
	('2025-06-19'),
	('2025-06-20'),
	('2025-06-21'),
	('2025-06-22'),
	('2025-06-23'),
	('2025-06-24'),
	('2025-06-25'),
	('2025-06-26'),
	('2025-06-27'),
	('2025-06-28'),
	('2025-06-29'),
	('2025-06-30'),
	('2025-07-01'),
	('2025-07-02'),
	('2025-07-03'),
	('2025-07-04'),
	('2025-07-05'),
	('2025-07-06'),
	('2025-07-07'),
	('2025-07-08'),
	('2025-07-09'),
	('2025-07-10'),
	('2025-07-11'),
	('2025-07-12'),
	('2025-07-13'),
	('2025-07-14'),
	('2025-07-15'),
	('2025-07-16'),
	('2025-07-17'),
	('2025-07-18'),
	('2025-07-19'),
	('2025-07-20'),
	('2025-07-21'),
	('2025-07-22'),
	('2025-07-23'),
	('2025-07-24'),
	('2025-07-25'),
	('2025-07-26'),
	('2025-07-27'),
	('2025-07-28'),
	('2025-07-29'),
	('2025-07-30'),
	('2025-07-31'),
	('2025-08-01'),
	('2025-08-02'),
	('2025-08-03'),
	('2025-08-04'),
	('2025-08-05'),
	('2025-08-06'),
	('2025-08-07'),
	('2025-08-08'),
	('2025-08-09'),
	('2025-08-10'),
	('2025-08-11'),
	('2025-08-12'),
	('2025-08-13'),
	('2025-08-14'),
	('2025-08-15'),
	('2025-08-16'),
	('2025-08-17'),
	('2025-08-18'),
	('2025-08-19'),
	('2025-08-20'),
	('2025-08-21'),
	('2025-08-22'),
	('2025-08-23'),
	('2025-08-24'),
	('2025-08-25'),
	('2025-08-26'),
	('2025-08-27'),
	('2025-08-28'),
	('2025-08-29'),
	('2025-08-30'),
	('2025-08-31'),
	('2025-09-01'),
	('2025-09-02'),
	('2025-09-03'),
	('2025-09-04'),
	('2025-09-05'),
	('2025-09-06'),
	('2025-09-07'),
	('2025-09-08'),
	('2025-09-09'),
	('2025-09-10'),
	('2025-09-11'),
	('2025-09-12'),
	('2025-09-13'),
	('2025-09-14'),
	('2025-09-15'),
	('2025-09-16'),
	('2025-09-17'),
	('2025-09-18'),
	('2025-09-19'),
	('2025-09-20'),
	('2025-09-21'),
	('2025-09-22'),
	('2025-09-23'),
	('2025-09-24'),
	('2025-09-25'),
	('2025-09-26'),
	('2025-09-27'),
	('2025-09-28'),
	('2025-09-29'),
	('2025-09-30'),
	('2025-10-01'),
	('2025-10-02'),
	('2025-10-03'),
	('2025-10-04'),
	('2025-10-05'),
	('2025-10-06'),
	('2025-10-07'),
	('2025-10-08'),
	('2025-10-09'),
	('2025-10-10'),
	('2025-10-11'),
	('2025-10-12'),
	('2025-10-13'),
	('2025-10-14'),
	('2025-10-15'),
	('2025-10-16'),
	('2025-10-17'),
	('2025-10-18'),
	('2025-10-19'),
	('2025-10-20'),
	('2025-10-21'),
	('2025-10-22'),
	('2025-10-23'),
	('2025-10-24'),
	('2025-10-25'),
	('2025-10-26'),
	('2025-10-27'),
	('2025-10-28'),
	('2025-10-29'),
	('2025-10-30'),
	('2025-10-31'),
	('2025-11-01'),
	('2025-11-02'),
	('2025-11-03'),
	('2025-11-04'),
	('2025-11-05'),
	('2025-11-06'),
	('2025-11-07'),
	('2025-11-08'),
	('2025-11-09'),
	('2025-11-10'),
	('2025-11-11'),
	('2025-11-12'),
	('2025-11-13'),
	('2025-11-14'),
	('2025-11-15'),
	('2025-11-16'),
	('2025-11-17'),
	('2025-11-18'),
	('2025-11-19'),
	('2025-11-20'),
	('2025-11-21'),
	('2025-11-22'),
	('2025-11-23'),
	('2025-11-24'),
	('2025-11-25'),
	('2025-11-26'),
	('2025-11-27'),
	('2025-11-28'),
	('2025-11-29'),
	('2025-11-30'),
	('2025-12-01'),
	('2025-12-02'),
	('2025-12-03'),
	('2025-12-04'),
	('2025-12-05'),
	('2025-12-06'),
	('2025-12-07'),
	('2025-12-08'),
	('2025-12-09'),
	('2025-12-10'),
	('2025-12-11'),
	('2025-12-12'),
	('2025-12-13'),
	('2025-12-14'),
	('2025-12-15'),
	('2025-12-16'),
	('2025-12-17'),
	('2025-12-18'),
	('2025-12-19'),
	('2025-12-20'),
	('2025-12-21'),
	('2025-12-22'),
	('2025-12-23'),
	('2025-12-24'),
	('2025-12-25'),
	('2025-12-26'),
	('2025-12-27'),
	('2025-12-28'),
	('2025-12-29'),
	('2025-12-30'),
	('2025-12-31'),
	('2026-01-01'),
	('2026-01-02'),
	('2026-01-03'),
	('2026-01-04'),
	('2026-01-05'),
	('2026-01-06'),
	('2026-01-07'),
	('2026-01-08'),
	('2026-01-09'),
	('2026-01-10'),
	('2026-01-11'),
	('2026-01-12'),
	('2026-01-13'),
	('2026-01-14'),
	('2026-01-15'),
	('2026-01-16'),
	('2026-01-17'),
	('2026-01-18'),
	('2026-01-19'),
	('2026-01-20'),
	('2026-01-21'),
	('2026-01-22'),
	('2026-01-23'),
	('2026-01-24'),
	('2026-01-25'),
	('2026-01-26'),
	('2026-01-27'),
	('2026-01-28'),
	('2026-01-29'),
	('2026-01-30'),
	('2026-01-31'),
	('2026-02-01'),
	('2026-02-02'),
	('2026-02-03'),
	('2026-02-04'),
	('2026-02-05'),
	('2026-02-06'),
	('2026-02-07'),
	('2026-02-08'),
	('2026-02-09'),
	('2026-02-10'),
	('2026-02-11'),
	('2026-02-12'),
	('2026-02-13'),
	('2026-02-14'),
	('2026-02-15'),
	('2026-02-16'),
	('2026-02-17'),
	('2026-02-18'),
	('2026-02-19'),
	('2026-02-20'),
	('2026-02-21'),
	('2026-02-22'),
	('2026-02-23'),
	('2026-02-24'),
	('2026-02-25'),
	('2026-02-26'),
	('2026-02-27'),
	('2026-02-28'),
	('2026-03-01'),
	('2026-03-02'),
	('2026-03-03'),
	('2026-03-04'),
	('2026-03-05'),
	('2026-03-06'),
	('2026-03-07'),
	('2026-03-08'),
	('2026-03-09'),
	('2026-03-10'),
	('2026-03-11'),
	('2026-03-12'),
	('2026-03-13'),
	('2026-03-14'),
	('2026-03-15'),
	('2026-03-16'),
	('2026-03-17'),
	('2026-03-18'),
	('2026-03-19'),
	('2026-03-20'),
	('2026-03-21'),
	('2026-03-22'),
	('2026-03-23'),
	('2026-03-24'),
	('2026-03-25'),
	('2026-03-26'),
	('2026-03-27'),
	('2026-03-28'),
	('2026-03-29'),
	('2026-03-30'),
	('2026-03-31'),
	('2026-04-01'),
	('2026-04-02'),
	('2026-04-03'),
	('2026-04-04'),
	('2026-04-05'),
	('2026-04-06'),
	('2026-04-07'),
	('2026-04-08'),
	('2026-04-09'),
	('2026-04-10'),
	('2026-04-11'),
	('2026-04-12'),
	('2026-04-13'),
	('2026-04-14'),
	('2026-04-15'),
	('2026-04-16'),
	('2026-04-17'),
	('2026-04-18'),
	('2026-04-19'),
	('2026-04-20'),
	('2026-04-21'),
	('2026-04-22'),
	('2026-04-23'),
	('2026-04-24'),
	('2026-04-25'),
	('2026-04-26'),
	('2026-04-27'),
	('2026-04-28'),
	('2026-04-29'),
	('2026-04-30'),
	('2026-05-01'),
	('2026-05-02'),
	('2026-05-03'),
	('2026-05-04'),
	('2026-05-05'),
	('2026-05-06'),
	('2026-05-07'),
	('2026-05-08'),
	('2026-05-09'),
	('2026-05-10'),
	('2026-05-11'),
	('2026-05-12'),
	('2026-05-13'),
	('2026-05-14'),
	('2026-05-15'),
	('2026-05-16'),
	('2026-05-17'),
	('2026-05-18'),
	('2026-05-19'),
	('2026-05-20'),
	('2026-05-21'),
	('2026-05-22'),
	('2026-05-23'),
	('2026-05-24'),
	('2026-05-25'),
	('2026-05-26'),
	('2026-05-27'),
	('2026-05-28'),
	('2026-05-29'),
	('2026-05-30'),
	('2026-05-31'),
	('2026-06-01'),
	('2026-06-02'),
	('2026-06-03'),
	('2026-06-04'),
	('2026-06-05'),
	('2026-06-06'),
	('2026-06-07'),
	('2026-06-08'),
	('2026-06-09'),
	('2026-06-10'),
	('2026-06-11'),
	('2026-06-12'),
	('2026-06-13'),
	('2026-06-14'),
	('2026-06-15'),
	('2026-06-16'),
	('2026-06-17'),
	('2026-06-18'),
	('2026-06-19'),
	('2026-06-20'),
	('2026-06-21'),
	('2026-06-22'),
	('2026-06-23'),
	('2026-06-24'),
	('2026-06-25'),
	('2026-06-26'),
	('2026-06-27'),
	('2026-06-28'),
	('2026-06-29'),
	('2026-06-30'),
	('2026-07-01'),
	('2026-07-02'),
	('2026-07-03'),
	('2026-07-04'),
	('2026-07-05'),
	('2026-07-06'),
	('2026-07-07'),
	('2026-07-08'),
	('2026-07-09'),
	('2026-07-10'),
	('2026-07-11'),
	('2026-07-12'),
	('2026-07-13'),
	('2026-07-14'),
	('2026-07-15'),
	('2026-07-16'),
	('2026-07-17'),
	('2026-07-18'),
	('2026-07-19'),
	('2026-07-20'),
	('2026-07-21'),
	('2026-07-22'),
	('2026-07-23'),
	('2026-07-24'),
	('2026-07-25'),
	('2026-07-26'),
	('2026-07-27'),
	('2026-07-28'),
	('2026-07-29'),
	('2026-07-30'),
	('2026-07-31'),
	('2026-08-01'),
	('2026-08-02'),
	('2026-08-03'),
	('2026-08-04'),
	('2026-08-05'),
	('2026-08-06'),
	('2026-08-07'),
	('2026-08-08'),
	('2026-08-09'),
	('2026-08-10'),
	('2026-08-11'),
	('2026-08-12'),
	('2026-08-13'),
	('2026-08-14'),
	('2026-08-15'),
	('2026-08-16'),
	('2026-08-17'),
	('2026-08-18'),
	('2026-08-19'),
	('2026-08-20'),
	('2026-08-21'),
	('2026-08-22'),
	('2026-08-23'),
	('2026-08-24'),
	('2026-08-25'),
	('2026-08-26'),
	('2026-08-27'),
	('2026-08-28'),
	('2026-08-29'),
	('2026-08-30'),
	('2026-08-31'),
	('2026-09-01'),
	('2026-09-02'),
	('2026-09-03'),
	('2026-09-04'),
	('2026-09-05'),
	('2026-09-06'),
	('2026-09-07'),
	('2026-09-08'),
	('2026-09-09'),
	('2026-09-10'),
	('2026-09-11'),
	('2026-09-12'),
	('2026-09-13'),
	('2026-09-14'),
	('2026-09-15'),
	('2026-09-16'),
	('2026-09-17'),
	('2026-09-18'),
	('2026-09-19'),
	('2026-09-20'),
	('2026-09-21'),
	('2026-09-22'),
	('2026-09-23'),
	('2026-09-24'),
	('2026-09-25'),
	('2026-09-26'),
	('2026-09-27'),
	('2026-09-28'),
	('2026-09-29'),
	('2026-09-30'),
	('2026-10-01'),
	('2026-10-02'),
	('2026-10-03'),
	('2026-10-04'),
	('2026-10-05'),
	('2026-10-06'),
	('2026-10-07'),
	('2026-10-08'),
	('2026-10-09'),
	('2026-10-10'),
	('2026-10-11'),
	('2026-10-12'),
	('2026-10-13'),
	('2026-10-14'),
	('2026-10-15'),
	('2026-10-16'),
	('2026-10-17'),
	('2026-10-18'),
	('2026-10-19'),
	('2026-10-20'),
	('2026-10-21'),
	('2026-10-22'),
	('2026-10-23'),
	('2026-10-24'),
	('2026-10-25'),
	('2026-10-26'),
	('2026-10-27'),
	('2026-10-28'),
	('2026-10-29'),
	('2026-10-30'),
	('2026-10-31'),
	('2026-11-01'),
	('2026-11-02'),
	('2026-11-03'),
	('2026-11-04'),
	('2026-11-05'),
	('2026-11-06'),
	('2026-11-07'),
	('2026-11-08'),
	('2026-11-09'),
	('2026-11-10'),
	('2026-11-11'),
	('2026-11-12'),
	('2026-11-13'),
	('2026-11-14'),
	('2026-11-15'),
	('2026-11-16'),
	('2026-11-17'),
	('2026-11-18'),
	('2026-11-19'),
	('2026-11-20'),
	('2026-11-21'),
	('2026-11-22'),
	('2026-11-23'),
	('2026-11-24'),
	('2026-11-25'),
	('2026-11-26'),
	('2026-11-27'),
	('2026-11-28'),
	('2026-11-29'),
	('2026-11-30'),
	('2026-12-01'),
	('2026-12-02'),
	('2026-12-03'),
	('2026-12-04'),
	('2026-12-05'),
	('2026-12-06'),
	('2026-12-07'),
	('2026-12-08'),
	('2026-12-09'),
	('2026-12-10'),
	('2026-12-11'),
	('2026-12-12'),
	('2026-12-13'),
	('2026-12-14'),
	('2026-12-15'),
	('2026-12-16'),
	('2026-12-17'),
	('2026-12-18'),
	('2026-12-19'),
	('2026-12-20'),
	('2026-12-21'),
	('2026-12-22'),
	('2026-12-23'),
	('2026-12-24'),
	('2026-12-25'),
	('2026-12-26'),
	('2026-12-27'),
	('2026-12-28'),
	('2026-12-29'),
	('2026-12-30'),
	('2026-12-31'),
	('2027-01-01'),
	('2027-01-02'),
	('2027-01-03'),
	('2027-01-04'),
	('2027-01-05'),
	('2027-01-06'),
	('2027-01-07'),
	('2027-01-08'),
	('2027-01-09'),
	('2027-01-10'),
	('2027-01-11'),
	('2027-01-12'),
	('2027-01-13'),
	('2027-01-14'),
	('2027-01-15'),
	('2027-01-16'),
	('2027-01-17'),
	('2027-01-18'),
	('2027-01-19'),
	('2027-01-20'),
	('2027-01-21'),
	('2027-01-22'),
	('2027-01-23'),
	('2027-01-24'),
	('2027-01-25'),
	('2027-01-26'),
	('2027-01-27'),
	('2027-01-28'),
	('2027-01-29'),
	('2027-01-30'),
	('2027-01-31'),
	('2027-02-01'),
	('2027-02-02'),
	('2027-02-03'),
	('2027-02-04'),
	('2027-02-05'),
	('2027-02-06'),
	('2027-02-07'),
	('2027-02-08'),
	('2027-02-09'),
	('2027-02-10'),
	('2027-02-11'),
	('2027-02-12'),
	('2027-02-13'),
	('2027-02-14'),
	('2027-02-15'),
	('2027-02-16'),
	('2027-02-17'),
	('2027-02-18'),
	('2027-02-19'),
	('2027-02-20'),
	('2027-02-21'),
	('2027-02-22'),
	('2027-02-23'),
	('2027-02-24'),
	('2027-02-25'),
	('2027-02-26'),
	('2027-02-27'),
	('2027-02-28'),
	('2027-03-01'),
	('2027-03-02'),
	('2027-03-03'),
	('2027-03-04'),
	('2027-03-05'),
	('2027-03-06'),
	('2027-03-07'),
	('2027-03-08'),
	('2027-03-09'),
	('2027-03-10'),
	('2027-03-11'),
	('2027-03-12'),
	('2027-03-13'),
	('2027-03-14'),
	('2027-03-15'),
	('2027-03-16'),
	('2027-03-17'),
	('2027-03-18'),
	('2027-03-19'),
	('2027-03-20'),
	('2027-03-21'),
	('2027-03-22'),
	('2027-03-23'),
	('2027-03-24'),
	('2027-03-25'),
	('2027-03-26'),
	('2027-03-27'),
	('2027-03-28'),
	('2027-03-29'),
	('2027-03-30'),
	('2027-03-31'),
	('2027-04-01'),
	('2027-04-02'),
	('2027-04-03'),
	('2027-04-04'),
	('2027-04-05'),
	('2027-04-06'),
	('2027-04-07'),
	('2027-04-08'),
	('2027-04-09'),
	('2027-04-10'),
	('2027-04-11'),
	('2027-04-12'),
	('2027-04-13'),
	('2027-04-14'),
	('2027-04-15'),
	('2027-04-16'),
	('2027-04-17'),
	('2027-04-18'),
	('2027-04-19'),
	('2027-04-20'),
	('2027-04-21'),
	('2027-04-22'),
	('2027-04-23'),
	('2027-04-24'),
	('2027-04-25'),
	('2027-04-26'),
	('2027-04-27'),
	('2027-04-28'),
	('2027-04-29'),
	('2027-04-30'),
	('2027-05-01'),
	('2027-05-02'),
	('2027-05-03'),
	('2027-05-04'),
	('2027-05-05'),
	('2027-05-06'),
	('2027-05-07'),
	('2027-05-08'),
	('2027-05-09'),
	('2027-05-10'),
	('2027-05-11'),
	('2027-05-12'),
	('2027-05-13'),
	('2027-05-14'),
	('2027-05-15'),
	('2027-05-16'),
	('2027-05-17'),
	('2027-05-18'),
	('2027-05-19'),
	('2027-05-20'),
	('2027-05-21'),
	('2027-05-22'),
	('2027-05-23'),
	('2027-05-24'),
	('2027-05-25'),
	('2027-05-26'),
	('2027-05-27'),
	('2027-05-28'),
	('2027-05-29'),
	('2027-05-30'),
	('2027-05-31'),
	('2027-06-01'),
	('2027-06-02'),
	('2027-06-03'),
	('2027-06-04'),
	('2027-06-05'),
	('2027-06-06'),
	('2027-06-07'),
	('2027-06-08'),
	('2027-06-09'),
	('2027-06-10'),
	('2027-06-11'),
	('2027-06-12'),
	('2027-06-13'),
	('2027-06-14'),
	('2027-06-15'),
	('2027-06-16'),
	('2027-06-17'),
	('2027-06-18'),
	('2027-06-19'),
	('2027-06-20'),
	('2027-06-21'),
	('2027-06-22'),
	('2027-06-23'),
	('2027-06-24'),
	('2027-06-25'),
	('2027-06-26'),
	('2027-06-27'),
	('2027-06-28'),
	('2027-06-29'),
	('2027-06-30'),
	('2027-07-01'),
	('2027-07-02'),
	('2027-07-03'),
	('2027-07-04'),
	('2027-07-05'),
	('2027-07-06'),
	('2027-07-07'),
	('2027-07-08'),
	('2027-07-09'),
	('2027-07-10'),
	('2027-07-11'),
	('2027-07-12'),
	('2027-07-13'),
	('2027-07-14'),
	('2027-07-15'),
	('2027-07-16'),
	('2027-07-17'),
	('2027-07-18'),
	('2027-07-19'),
	('2027-07-20'),
	('2027-07-21'),
	('2027-07-22'),
	('2027-07-23'),
	('2027-07-24'),
	('2027-07-25'),
	('2027-07-26'),
	('2027-07-27'),
	('2027-07-28'),
	('2027-07-29'),
	('2027-07-30'),
	('2027-07-31'),
	('2027-08-01'),
	('2027-08-02'),
	('2027-08-03'),
	('2027-08-04'),
	('2027-08-05'),
	('2027-08-06'),
	('2027-08-07'),
	('2027-08-08'),
	('2027-08-09'),
	('2027-08-10'),
	('2027-08-11'),
	('2027-08-12'),
	('2027-08-13'),
	('2027-08-14'),
	('2027-08-15'),
	('2027-08-16'),
	('2027-08-17'),
	('2027-08-18'),
	('2027-08-19'),
	('2027-08-20'),
	('2027-08-21'),
	('2027-08-22'),
	('2027-08-23'),
	('2027-08-24'),
	('2027-08-25'),
	('2027-08-26'),
	('2027-08-27'),
	('2027-08-28'),
	('2027-08-29'),
	('2027-08-30'),
	('2027-08-31'),
	('2027-09-01'),
	('2027-09-02'),
	('2027-09-03'),
	('2027-09-04'),
	('2027-09-05'),
	('2027-09-06'),
	('2027-09-07'),
	('2027-09-08'),
	('2027-09-09'),
	('2027-09-10'),
	('2027-09-11'),
	('2027-09-12'),
	('2027-09-13'),
	('2027-09-14'),
	('2027-09-15'),
	('2027-09-16'),
	('2027-09-17'),
	('2027-09-18'),
	('2027-09-19'),
	('2027-09-20'),
	('2027-09-21'),
	('2027-09-22'),
	('2027-09-23'),
	('2027-09-24'),
	('2027-09-25'),
	('2027-09-26'),
	('2027-09-27'),
	('2027-09-28'),
	('2027-09-29'),
	('2027-09-30'),
	('2027-10-01'),
	('2027-10-02'),
	('2027-10-03'),
	('2027-10-04'),
	('2027-10-05'),
	('2027-10-06'),
	('2027-10-07'),
	('2027-10-08'),
	('2027-10-09'),
	('2027-10-10'),
	('2027-10-11'),
	('2027-10-12'),
	('2027-10-13'),
	('2027-10-14'),
	('2027-10-15'),
	('2027-10-16'),
	('2027-10-17'),
	('2027-10-18'),
	('2027-10-19'),
	('2027-10-20'),
	('2027-10-21'),
	('2027-10-22'),
	('2027-10-23'),
	('2027-10-24'),
	('2027-10-25'),
	('2027-10-26'),
	('2027-10-27'),
	('2027-10-28'),
	('2027-10-29'),
	('2027-10-30'),
	('2027-10-31'),
	('2027-11-01'),
	('2027-11-02'),
	('2027-11-03'),
	('2027-11-04'),
	('2027-11-05'),
	('2027-11-06'),
	('2027-11-07'),
	('2027-11-08'),
	('2027-11-09'),
	('2027-11-10'),
	('2027-11-11'),
	('2027-11-12'),
	('2027-11-13'),
	('2027-11-14'),
	('2027-11-15'),
	('2027-11-16'),
	('2027-11-17'),
	('2027-11-18'),
	('2027-11-19'),
	('2027-11-20'),
	('2027-11-21'),
	('2027-11-22'),
	('2027-11-23'),
	('2027-11-24'),
	('2027-11-25'),
	('2027-11-26'),
	('2027-11-27'),
	('2027-11-28'),
	('2027-11-29'),
	('2027-11-30'),
	('2027-12-01'),
	('2027-12-02'),
	('2027-12-03'),
	('2027-12-04'),
	('2027-12-05'),
	('2027-12-06'),
	('2027-12-07'),
	('2027-12-08'),
	('2027-12-09'),
	('2027-12-10'),
	('2027-12-11'),
	('2027-12-12'),
	('2027-12-13'),
	('2027-12-14'),
	('2027-12-15'),
	('2027-12-16'),
	('2027-12-17'),
	('2027-12-18'),
	('2027-12-19'),
	('2027-12-20'),
	('2027-12-21'),
	('2027-12-22'),
	('2027-12-23'),
	('2027-12-24'),
	('2027-12-25'),
	('2027-12-26'),
	('2027-12-27'),
	('2027-12-28'),
	('2027-12-29'),
	('2027-12-30'),
	('2027-12-31'),
	('2028-01-01'),
	('2028-01-02'),
	('2028-01-03'),
	('2028-01-04'),
	('2028-01-05'),
	('2028-01-06'),
	('2028-01-07'),
	('2028-01-08'),
	('2028-01-09'),
	('2028-01-10'),
	('2028-01-11'),
	('2028-01-12'),
	('2028-01-13'),
	('2028-01-14'),
	('2028-01-15'),
	('2028-01-16'),
	('2028-01-17'),
	('2028-01-18'),
	('2028-01-19'),
	('2028-01-20'),
	('2028-01-21'),
	('2028-01-22'),
	('2028-01-23'),
	('2028-01-24'),
	('2028-01-25'),
	('2028-01-26'),
	('2028-01-27'),
	('2028-01-28'),
	('2028-01-29'),
	('2028-01-30'),
	('2028-01-31'),
	('2028-02-01'),
	('2028-02-02'),
	('2028-02-03'),
	('2028-02-04'),
	('2028-02-05'),
	('2028-02-06'),
	('2028-02-07'),
	('2028-02-08'),
	('2028-02-09'),
	('2028-02-10'),
	('2028-02-11'),
	('2028-02-12'),
	('2028-02-13'),
	('2028-02-14'),
	('2028-02-15'),
	('2028-02-16'),
	('2028-02-17'),
	('2028-02-18'),
	('2028-02-19'),
	('2028-02-20'),
	('2028-02-21'),
	('2028-02-22'),
	('2028-02-23'),
	('2028-02-24'),
	('2028-02-25'),
	('2028-02-26'),
	('2028-02-27'),
	('2028-02-28'),
	('2028-02-29'),
	('2028-03-01'),
	('2028-03-02'),
	('2028-03-03'),
	('2028-03-04'),
	('2028-03-05'),
	('2028-03-06'),
	('2028-03-07'),
	('2028-03-08'),
	('2028-03-09'),
	('2028-03-10'),
	('2028-03-11'),
	('2028-03-12'),
	('2028-03-13'),
	('2028-03-14'),
	('2028-03-15'),
	('2028-03-16'),
	('2028-03-17'),
	('2028-03-18'),
	('2028-03-19'),
	('2028-03-20'),
	('2028-03-21'),
	('2028-03-22'),
	('2028-03-23'),
	('2028-03-24'),
	('2028-03-25'),
	('2028-03-26'),
	('2028-03-27'),
	('2028-03-28'),
	('2028-03-29'),
	('2028-03-30'),
	('2028-03-31'),
	('2028-04-01'),
	('2028-04-02'),
	('2028-04-03'),
	('2028-04-04'),
	('2028-04-05'),
	('2028-04-06'),
	('2028-04-07'),
	('2028-04-08'),
	('2028-04-09'),
	('2028-04-10'),
	('2028-04-11'),
	('2028-04-12'),
	('2028-04-13'),
	('2028-04-14'),
	('2028-04-15'),
	('2028-04-16'),
	('2028-04-17'),
	('2028-04-18'),
	('2028-04-19'),
	('2028-04-20'),
	('2028-04-21'),
	('2028-04-22'),
	('2028-04-23'),
	('2028-04-24'),
	('2028-04-25'),
	('2028-04-26'),
	('2028-04-27'),
	('2028-04-28'),
	('2028-04-29'),
	('2028-04-30'),
	('2028-05-01'),
	('2028-05-02'),
	('2028-05-03'),
	('2028-05-04'),
	('2028-05-05'),
	('2028-05-06'),
	('2028-05-07'),
	('2028-05-08'),
	('2028-05-09'),
	('2028-05-10'),
	('2028-05-11'),
	('2028-05-12'),
	('2028-05-13'),
	('2028-05-14'),
	('2028-05-15'),
	('2028-05-16'),
	('2028-05-17'),
	('2028-05-18'),
	('2028-05-19'),
	('2028-05-20'),
	('2028-05-21'),
	('2028-05-22'),
	('2028-05-23'),
	('2028-05-24'),
	('2028-05-25'),
	('2028-05-26'),
	('2028-05-27'),
	('2028-05-28'),
	('2028-05-29'),
	('2028-05-30'),
	('2028-05-31'),
	('2028-06-01'),
	('2028-06-02'),
	('2028-06-03'),
	('2028-06-04'),
	('2028-06-05'),
	('2028-06-06'),
	('2028-06-07'),
	('2028-06-08'),
	('2028-06-09'),
	('2028-06-10'),
	('2028-06-11'),
	('2028-06-12'),
	('2028-06-13'),
	('2028-06-14'),
	('2028-06-15'),
	('2028-06-16'),
	('2028-06-17'),
	('2028-06-18'),
	('2028-06-19'),
	('2028-06-20'),
	('2028-06-21'),
	('2028-06-22'),
	('2028-06-23'),
	('2028-06-24'),
	('2028-06-25'),
	('2028-06-26'),
	('2028-06-27'),
	('2028-06-28'),
	('2028-06-29'),
	('2028-06-30'),
	('2028-07-01'),
	('2028-07-02'),
	('2028-07-03'),
	('2028-07-04'),
	('2028-07-05'),
	('2028-07-06'),
	('2028-07-07'),
	('2028-07-08'),
	('2028-07-09'),
	('2028-07-10'),
	('2028-07-11'),
	('2028-07-12'),
	('2028-07-13'),
	('2028-07-14'),
	('2028-07-15'),
	('2028-07-16'),
	('2028-07-17'),
	('2028-07-18'),
	('2028-07-19'),
	('2028-07-20'),
	('2028-07-21'),
	('2028-07-22'),
	('2028-07-23'),
	('2028-07-24'),
	('2028-07-25'),
	('2028-07-26'),
	('2028-07-27'),
	('2028-07-28'),
	('2028-07-29'),
	('2028-07-30'),
	('2028-07-31'),
	('2028-08-01'),
	('2028-08-02'),
	('2028-08-03'),
	('2028-08-04'),
	('2028-08-05'),
	('2028-08-06'),
	('2028-08-07'),
	('2028-08-08'),
	('2028-08-09'),
	('2028-08-10'),
	('2028-08-11'),
	('2028-08-12'),
	('2028-08-13'),
	('2028-08-14'),
	('2028-08-15'),
	('2028-08-16'),
	('2028-08-17'),
	('2028-08-18'),
	('2028-08-19'),
	('2028-08-20'),
	('2028-08-21'),
	('2028-08-22'),
	('2028-08-23'),
	('2028-08-24'),
	('2028-08-25'),
	('2028-08-26'),
	('2028-08-27'),
	('2028-08-28'),
	('2028-08-29'),
	('2028-08-30'),
	('2028-08-31'),
	('2028-09-01'),
	('2028-09-02'),
	('2028-09-03'),
	('2028-09-04'),
	('2028-09-05'),
	('2028-09-06'),
	('2028-09-07'),
	('2028-09-08'),
	('2028-09-09'),
	('2028-09-10'),
	('2028-09-11'),
	('2028-09-12'),
	('2028-09-13'),
	('2028-09-14'),
	('2028-09-15'),
	('2028-09-16'),
	('2028-09-17'),
	('2028-09-18'),
	('2028-09-19'),
	('2028-09-20'),
	('2028-09-21'),
	('2028-09-22'),
	('2028-09-23'),
	('2028-09-24'),
	('2028-09-25'),
	('2028-09-26'),
	('2028-09-27'),
	('2028-09-28'),
	('2028-09-29'),
	('2028-09-30'),
	('2028-10-01'),
	('2028-10-02'),
	('2028-10-03'),
	('2028-10-04'),
	('2028-10-05'),
	('2028-10-06'),
	('2028-10-07'),
	('2028-10-08'),
	('2028-10-09'),
	('2028-10-10'),
	('2028-10-11'),
	('2028-10-12'),
	('2028-10-13'),
	('2028-10-14'),
	('2028-10-15'),
	('2028-10-16'),
	('2028-10-17'),
	('2028-10-18'),
	('2028-10-19'),
	('2028-10-20'),
	('2028-10-21'),
	('2028-10-22'),
	('2028-10-23'),
	('2028-10-24'),
	('2028-10-25'),
	('2028-10-26'),
	('2028-10-27'),
	('2028-10-28'),
	('2028-10-29'),
	('2028-10-30'),
	('2028-10-31'),
	('2028-11-01'),
	('2028-11-02'),
	('2028-11-03'),
	('2028-11-04'),
	('2028-11-05'),
	('2028-11-06'),
	('2028-11-07'),
	('2028-11-08'),
	('2028-11-09'),
	('2028-11-10'),
	('2028-11-11'),
	('2028-11-12'),
	('2028-11-13'),
	('2028-11-14'),
	('2028-11-15'),
	('2028-11-16'),
	('2028-11-17'),
	('2028-11-18'),
	('2028-11-19'),
	('2028-11-20'),
	('2028-11-21'),
	('2028-11-22'),
	('2028-11-23'),
	('2028-11-24'),
	('2028-11-25'),
	('2028-11-26'),
	('2028-11-27'),
	('2028-11-28'),
	('2028-11-29'),
	('2028-11-30'),
	('2028-12-01'),
	('2028-12-02'),
	('2028-12-03'),
	('2028-12-04'),
	('2028-12-05'),
	('2028-12-06'),
	('2028-12-07'),
	('2028-12-08'),
	('2028-12-09'),
	('2028-12-10'),
	('2028-12-11'),
	('2028-12-12'),
	('2028-12-13'),
	('2028-12-14'),
	('2028-12-15'),
	('2028-12-16'),
	('2028-12-17'),
	('2028-12-18'),
	('2028-12-19'),
	('2028-12-20'),
	('2028-12-21'),
	('2028-12-22'),
	('2028-12-23'),
	('2028-12-24'),
	('2028-12-25'),
	('2028-12-26'),
	('2028-12-27'),
	('2028-12-28'),
	('2028-12-29'),
	('2028-12-30'),
	('2028-12-31'),
	('2029-01-01'),
	('2029-01-02'),
	('2029-01-03'),
	('2029-01-04'),
	('2029-01-05'),
	('2029-01-06'),
	('2029-01-07'),
	('2029-01-08'),
	('2029-01-09'),
	('2029-01-10'),
	('2029-01-11'),
	('2029-01-12'),
	('2029-01-13'),
	('2029-01-14'),
	('2029-01-15'),
	('2029-01-16'),
	('2029-01-17'),
	('2029-01-18'),
	('2029-01-19'),
	('2029-01-20'),
	('2029-01-21'),
	('2029-01-22'),
	('2029-01-23'),
	('2029-01-24'),
	('2029-01-25'),
	('2029-01-26'),
	('2029-01-27'),
	('2029-01-28'),
	('2029-01-29'),
	('2029-01-30'),
	('2029-01-31'),
	('2029-02-01'),
	('2029-02-02'),
	('2029-02-03'),
	('2029-02-04'),
	('2029-02-05'),
	('2029-02-06'),
	('2029-02-07'),
	('2029-02-08'),
	('2029-02-09'),
	('2029-02-10'),
	('2029-02-11'),
	('2029-02-12'),
	('2029-02-13'),
	('2029-02-14'),
	('2029-02-15'),
	('2029-02-16'),
	('2029-02-17'),
	('2029-02-18'),
	('2029-02-19'),
	('2029-02-20'),
	('2029-02-21'),
	('2029-02-22'),
	('2029-02-23'),
	('2029-02-24'),
	('2029-02-25'),
	('2029-02-26'),
	('2029-02-27'),
	('2029-02-28'),
	('2029-03-01'),
	('2029-03-02'),
	('2029-03-03'),
	('2029-03-04'),
	('2029-03-05'),
	('2029-03-06'),
	('2029-03-07'),
	('2029-03-08'),
	('2029-03-09'),
	('2029-03-10'),
	('2029-03-11'),
	('2029-03-12'),
	('2029-03-13'),
	('2029-03-14'),
	('2029-03-15'),
	('2029-03-16'),
	('2029-03-17'),
	('2029-03-18'),
	('2029-03-19'),
	('2029-03-20'),
	('2029-03-21'),
	('2029-03-22'),
	('2029-03-23'),
	('2029-03-24'),
	('2029-03-25'),
	('2029-03-26'),
	('2029-03-27'),
	('2029-03-28'),
	('2029-03-29'),
	('2029-03-30'),
	('2029-03-31'),
	('2029-04-01'),
	('2029-04-02'),
	('2029-04-03'),
	('2029-04-04'),
	('2029-04-05'),
	('2029-04-06'),
	('2029-04-07'),
	('2029-04-08'),
	('2029-04-09'),
	('2029-04-10'),
	('2029-04-11'),
	('2029-04-12'),
	('2029-04-13'),
	('2029-04-14'),
	('2029-04-15'),
	('2029-04-16'),
	('2029-04-17'),
	('2029-04-18'),
	('2029-04-19'),
	('2029-04-20'),
	('2029-04-21'),
	('2029-04-22'),
	('2029-04-23'),
	('2029-04-24'),
	('2029-04-25'),
	('2029-04-26'),
	('2029-04-27'),
	('2029-04-28'),
	('2029-04-29'),
	('2029-04-30'),
	('2029-05-01'),
	('2029-05-02'),
	('2029-05-03'),
	('2029-05-04'),
	('2029-05-05'),
	('2029-05-06'),
	('2029-05-07'),
	('2029-05-08'),
	('2029-05-09'),
	('2029-05-10'),
	('2029-05-11'),
	('2029-05-12'),
	('2029-05-13'),
	('2029-05-14'),
	('2029-05-15'),
	('2029-05-16'),
	('2029-05-17'),
	('2029-05-18'),
	('2029-05-19'),
	('2029-05-20'),
	('2029-05-21'),
	('2029-05-22'),
	('2029-05-23'),
	('2029-05-24'),
	('2029-05-25'),
	('2029-05-26'),
	('2029-05-27'),
	('2029-05-28'),
	('2029-05-29'),
	('2029-05-30'),
	('2029-05-31'),
	('2029-06-01'),
	('2029-06-02'),
	('2029-06-03'),
	('2029-06-04'),
	('2029-06-05'),
	('2029-06-06'),
	('2029-06-07'),
	('2029-06-08'),
	('2029-06-09'),
	('2029-06-10'),
	('2029-06-11'),
	('2029-06-12'),
	('2029-06-13'),
	('2029-06-14'),
	('2029-06-15'),
	('2029-06-16'),
	('2029-06-17'),
	('2029-06-18'),
	('2029-06-19'),
	('2029-06-20'),
	('2029-06-21'),
	('2029-06-22'),
	('2029-06-23'),
	('2029-06-24'),
	('2029-06-25'),
	('2029-06-26'),
	('2029-06-27'),
	('2029-06-28'),
	('2029-06-29'),
	('2029-06-30'),
	('2029-07-01'),
	('2029-07-02'),
	('2029-07-03'),
	('2029-07-04'),
	('2029-07-05'),
	('2029-07-06'),
	('2029-07-07'),
	('2029-07-08'),
	('2029-07-09'),
	('2029-07-10'),
	('2029-07-11'),
	('2029-07-12'),
	('2029-07-13'),
	('2029-07-14'),
	('2029-07-15'),
	('2029-07-16'),
	('2029-07-17'),
	('2029-07-18'),
	('2029-07-19'),
	('2029-07-20'),
	('2029-07-21'),
	('2029-07-22'),
	('2029-07-23'),
	('2029-07-24'),
	('2029-07-25'),
	('2029-07-26'),
	('2029-07-27'),
	('2029-07-28'),
	('2029-07-29'),
	('2029-07-30'),
	('2029-07-31'),
	('2029-08-01'),
	('2029-08-02'),
	('2029-08-03'),
	('2029-08-04'),
	('2029-08-05'),
	('2029-08-06'),
	('2029-08-07'),
	('2029-08-08'),
	('2029-08-09'),
	('2029-08-10'),
	('2029-08-11'),
	('2029-08-12'),
	('2029-08-13'),
	('2029-08-14'),
	('2029-08-15'),
	('2029-08-16'),
	('2029-08-17'),
	('2029-08-18'),
	('2029-08-19'),
	('2029-08-20'),
	('2029-08-21'),
	('2029-08-22'),
	('2029-08-23'),
	('2029-08-24'),
	('2029-08-25'),
	('2029-08-26'),
	('2029-08-27'),
	('2029-08-28'),
	('2029-08-29'),
	('2029-08-30'),
	('2029-08-31'),
	('2029-09-01'),
	('2029-09-02'),
	('2029-09-03'),
	('2029-09-04'),
	('2029-09-05'),
	('2029-09-06'),
	('2029-09-07'),
	('2029-09-08'),
	('2029-09-09'),
	('2029-09-10'),
	('2029-09-11'),
	('2029-09-12'),
	('2029-09-13'),
	('2029-09-14'),
	('2029-09-15'),
	('2029-09-16'),
	('2029-09-17'),
	('2029-09-18'),
	('2029-09-19'),
	('2029-09-20'),
	('2029-09-21'),
	('2029-09-22'),
	('2029-09-23'),
	('2029-09-24'),
	('2029-09-25'),
	('2029-09-26'),
	('2029-09-27'),
	('2029-09-28'),
	('2029-09-29'),
	('2029-09-30'),
	('2029-10-01'),
	('2029-10-02'),
	('2029-10-03'),
	('2029-10-04'),
	('2029-10-05'),
	('2029-10-06'),
	('2029-10-07'),
	('2029-10-08'),
	('2029-10-09'),
	('2029-10-10'),
	('2029-10-11'),
	('2029-10-12'),
	('2029-10-13'),
	('2029-10-14'),
	('2029-10-15'),
	('2029-10-16'),
	('2029-10-17'),
	('2029-10-18'),
	('2029-10-19'),
	('2029-10-20'),
	('2029-10-21'),
	('2029-10-22'),
	('2029-10-23'),
	('2029-10-24'),
	('2029-10-25'),
	('2029-10-26'),
	('2029-10-27'),
	('2029-10-28'),
	('2029-10-29'),
	('2029-10-30'),
	('2029-10-31'),
	('2029-11-01'),
	('2029-11-02'),
	('2029-11-03'),
	('2029-11-04'),
	('2029-11-05'),
	('2029-11-06'),
	('2029-11-07'),
	('2029-11-08'),
	('2029-11-09'),
	('2029-11-10'),
	('2029-11-11'),
	('2029-11-12'),
	('2029-11-13'),
	('2029-11-14'),
	('2029-11-15'),
	('2029-11-16'),
	('2029-11-17'),
	('2029-11-18'),
	('2029-11-19'),
	('2029-11-20'),
	('2029-11-21'),
	('2029-11-22'),
	('2029-11-23'),
	('2029-11-24'),
	('2029-11-25'),
	('2029-11-26'),
	('2029-11-27'),
	('2029-11-28'),
	('2029-11-29'),
	('2029-11-30'),
	('2029-12-01'),
	('2029-12-02'),
	('2029-12-03'),
	('2029-12-04'),
	('2029-12-05'),
	('2029-12-06'),
	('2029-12-07'),
	('2029-12-08'),
	('2029-12-09'),
	('2029-12-10'),
	('2029-12-11'),
	('2029-12-12'),
	('2029-12-13'),
	('2029-12-14'),
	('2029-12-15'),
	('2029-12-16'),
	('2029-12-17'),
	('2029-12-18'),
	('2029-12-19'),
	('2029-12-20'),
	('2029-12-21'),
	('2029-12-22'),
	('2029-12-23'),
	('2029-12-24'),
	('2029-12-25'),
	('2029-12-26'),
	('2029-12-27'),
	('2029-12-28'),
	('2029-12-29'),
	('2029-12-30'),
	('2029-12-31'),
	('2030-01-01'),
	('2030-01-02'),
	('2030-01-03'),
	('2030-01-04'),
	('2030-01-05'),
	('2030-01-06'),
	('2030-01-07'),
	('2030-01-08'),
	('2030-01-09'),
	('2030-01-10'),
	('2030-01-11'),
	('2030-01-12'),
	('2030-01-13'),
	('2030-01-14'),
	('2030-01-15'),
	('2030-01-16'),
	('2030-01-17'),
	('2030-01-18'),
	('2030-01-19'),
	('2030-01-20'),
	('2030-01-21'),
	('2030-01-22'),
	('2030-01-23'),
	('2030-01-24'),
	('2030-01-25'),
	('2030-01-26'),
	('2030-01-27'),
	('2030-01-28'),
	('2030-01-29'),
	('2030-01-30'),
	('2030-01-31'),
	('2030-02-01'),
	('2030-02-02'),
	('2030-02-03'),
	('2030-02-04'),
	('2030-02-05'),
	('2030-02-06'),
	('2030-02-07'),
	('2030-02-08'),
	('2030-02-09'),
	('2030-02-10'),
	('2030-02-11'),
	('2030-02-12'),
	('2030-02-13'),
	('2030-02-14'),
	('2030-02-15'),
	('2030-02-16'),
	('2030-02-17'),
	('2030-02-18'),
	('2030-02-19'),
	('2030-02-20'),
	('2030-02-21'),
	('2030-02-22'),
	('2030-02-23'),
	('2030-02-24'),
	('2030-02-25'),
	('2030-02-26'),
	('2030-02-27'),
	('2030-02-28'),
	('2030-03-01'),
	('2030-03-02'),
	('2030-03-03'),
	('2030-03-04'),
	('2030-03-05'),
	('2030-03-06'),
	('2030-03-07'),
	('2030-03-08'),
	('2030-03-09'),
	('2030-03-10'),
	('2030-03-11'),
	('2030-03-12'),
	('2030-03-13'),
	('2030-03-14'),
	('2030-03-15'),
	('2030-03-16'),
	('2030-03-17'),
	('2030-03-18'),
	('2030-03-19'),
	('2030-03-20'),
	('2030-03-21'),
	('2030-03-22'),
	('2030-03-23'),
	('2030-03-24'),
	('2030-03-25'),
	('2030-03-26'),
	('2030-03-27'),
	('2030-03-28'),
	('2030-03-29'),
	('2030-03-30'),
	('2030-03-31'),
	('2030-04-01'),
	('2030-04-02'),
	('2030-04-03'),
	('2030-04-04'),
	('2030-04-05'),
	('2030-04-06'),
	('2030-04-07'),
	('2030-04-08'),
	('2030-04-09'),
	('2030-04-10'),
	('2030-04-11'),
	('2030-04-12'),
	('2030-04-13'),
	('2030-04-14'),
	('2030-04-15'),
	('2030-04-16'),
	('2030-04-17'),
	('2030-04-18'),
	('2030-04-19'),
	('2030-04-20'),
	('2030-04-21'),
	('2030-04-22'),
	('2030-04-23'),
	('2030-04-24'),
	('2030-04-25'),
	('2030-04-26'),
	('2030-04-27'),
	('2030-04-28'),
	('2030-04-29'),
	('2030-04-30'),
	('2030-05-01'),
	('2030-05-02'),
	('2030-05-03'),
	('2030-05-04'),
	('2030-05-05'),
	('2030-05-06'),
	('2030-05-07'),
	('2030-05-08'),
	('2030-05-09'),
	('2030-05-10'),
	('2030-05-11'),
	('2030-05-12'),
	('2030-05-13'),
	('2030-05-14'),
	('2030-05-15'),
	('2030-05-16'),
	('2030-05-17'),
	('2030-05-18'),
	('2030-05-19'),
	('2030-05-20'),
	('2030-05-21'),
	('2030-05-22'),
	('2030-05-23'),
	('2030-05-24'),
	('2030-05-25'),
	('2030-05-26'),
	('2030-05-27'),
	('2030-05-28'),
	('2030-05-29'),
	('2030-05-30'),
	('2030-05-31'),
	('2030-06-01'),
	('2030-06-02'),
	('2030-06-03'),
	('2030-06-04'),
	('2030-06-05'),
	('2030-06-06'),
	('2030-06-07'),
	('2030-06-08'),
	('2030-06-09'),
	('2030-06-10'),
	('2030-06-11'),
	('2030-06-12'),
	('2030-06-13'),
	('2030-06-14'),
	('2030-06-15'),
	('2030-06-16'),
	('2030-06-17'),
	('2030-06-18'),
	('2030-06-19'),
	('2030-06-20'),
	('2030-06-21'),
	('2030-06-22'),
	('2030-06-23'),
	('2030-06-24'),
	('2030-06-25'),
	('2030-06-26'),
	('2030-06-27'),
	('2030-06-28'),
	('2030-06-29'),
	('2030-06-30'),
	('2030-07-01'),
	('2030-07-02'),
	('2030-07-03'),
	('2030-07-04'),
	('2030-07-05'),
	('2030-07-06'),
	('2030-07-07'),
	('2030-07-08'),
	('2030-07-09'),
	('2030-07-10'),
	('2030-07-11'),
	('2030-07-12'),
	('2030-07-13'),
	('2030-07-14'),
	('2030-07-15'),
	('2030-07-16'),
	('2030-07-17'),
	('2030-07-18'),
	('2030-07-19'),
	('2030-07-20'),
	('2030-07-21'),
	('2030-07-22'),
	('2030-07-23'),
	('2030-07-24'),
	('2030-07-25'),
	('2030-07-26'),
	('2030-07-27'),
	('2030-07-28'),
	('2030-07-29'),
	('2030-07-30'),
	('2030-07-31'),
	('2030-08-01'),
	('2030-08-02'),
	('2030-08-03'),
	('2030-08-04'),
	('2030-08-05'),
	('2030-08-06'),
	('2030-08-07'),
	('2030-08-08'),
	('2030-08-09'),
	('2030-08-10'),
	('2030-08-11'),
	('2030-08-12'),
	('2030-08-13'),
	('2030-08-14'),
	('2030-08-15'),
	('2030-08-16'),
	('2030-08-17'),
	('2030-08-18'),
	('2030-08-19'),
	('2030-08-20'),
	('2030-08-21'),
	('2030-08-22'),
	('2030-08-23'),
	('2030-08-24'),
	('2030-08-25'),
	('2030-08-26'),
	('2030-08-27'),
	('2030-08-28'),
	('2030-08-29'),
	('2030-08-30'),
	('2030-08-31'),
	('2030-09-01'),
	('2030-09-02'),
	('2030-09-03'),
	('2030-09-04'),
	('2030-09-05'),
	('2030-09-06'),
	('2030-09-07'),
	('2030-09-08'),
	('2030-09-09'),
	('2030-09-10'),
	('2030-09-11'),
	('2030-09-12'),
	('2030-09-13'),
	('2030-09-14'),
	('2030-09-15'),
	('2030-09-16'),
	('2030-09-17'),
	('2030-09-18'),
	('2030-09-19'),
	('2030-09-20'),
	('2030-09-21'),
	('2030-09-22'),
	('2030-09-23'),
	('2030-09-24'),
	('2030-09-25'),
	('2030-09-26'),
	('2030-09-27'),
	('2030-09-28'),
	('2030-09-29'),
	('2030-09-30'),
	('2030-10-01'),
	('2030-10-02'),
	('2030-10-03'),
	('2030-10-04'),
	('2030-10-05'),
	('2030-10-06'),
	('2030-10-07'),
	('2030-10-08'),
	('2030-10-09'),
	('2030-10-10'),
	('2030-10-11'),
	('2030-10-12'),
	('2030-10-13'),
	('2030-10-14'),
	('2030-10-15'),
	('2030-10-16'),
	('2030-10-17'),
	('2030-10-18'),
	('2030-10-19'),
	('2030-10-20'),
	('2030-10-21'),
	('2030-10-22'),
	('2030-10-23'),
	('2030-10-24'),
	('2030-10-25'),
	('2030-10-26'),
	('2030-10-27'),
	('2030-10-28'),
	('2030-10-29'),
	('2030-10-30'),
	('2030-10-31'),
	('2030-11-01'),
	('2030-11-02'),
	('2030-11-03'),
	('2030-11-04'),
	('2030-11-05'),
	('2030-11-06'),
	('2030-11-07'),
	('2030-11-08'),
	('2030-11-09'),
	('2030-11-10'),
	('2030-11-11'),
	('2030-11-12'),
	('2030-11-13'),
	('2030-11-14'),
	('2030-11-15'),
	('2030-11-16'),
	('2030-11-17'),
	('2030-11-18'),
	('2030-11-19'),
	('2030-11-20'),
	('2030-11-21'),
	('2030-11-22'),
	('2030-11-23'),
	('2030-11-24'),
	('2030-11-25'),
	('2030-11-26'),
	('2030-11-27'),
	('2030-11-28'),
	('2030-11-29'),
	('2030-11-30'),
	('2030-12-01'),
	('2030-12-02'),
	('2030-12-03'),
	('2030-12-04'),
	('2030-12-05'),
	('2030-12-06'),
	('2030-12-07'),
	('2030-12-08'),
	('2030-12-09'),
	('2030-12-10'),
	('2030-12-11'),
	('2030-12-12'),
	('2030-12-13'),
	('2030-12-14'),
	('2030-12-15'),
	('2030-12-16'),
	('2030-12-17'),
	('2030-12-18'),
	('2030-12-19'),
	('2030-12-20'),
	('2030-12-21'),
	('2030-12-22'),
	('2030-12-23'),
	('2030-12-24'),
	('2030-12-25'),
	('2030-12-26'),
	('2030-12-27'),
	('2030-12-28'),
	('2030-12-29'),
	('2030-12-30'),
	('2030-12-31'),
	('2031-01-01'),
	('2031-01-02'),
	('2031-01-03'),
	('2031-01-04'),
	('2031-01-05'),
	('2031-01-06'),
	('2031-01-07'),
	('2031-01-08'),
	('2031-01-09'),
	('2031-01-10'),
	('2031-01-11'),
	('2031-01-12'),
	('2031-01-13'),
	('2031-01-14'),
	('2031-01-15'),
	('2031-01-16'),
	('2031-01-17'),
	('2031-01-18'),
	('2031-01-19'),
	('2031-01-20'),
	('2031-01-21'),
	('2031-01-22'),
	('2031-01-23'),
	('2031-01-24'),
	('2031-01-25'),
	('2031-01-26'),
	('2031-01-27'),
	('2031-01-28'),
	('2031-01-29'),
	('2031-01-30'),
	('2031-01-31'),
	('2031-02-01'),
	('2031-02-02'),
	('2031-02-03'),
	('2031-02-04'),
	('2031-02-05'),
	('2031-02-06'),
	('2031-02-07'),
	('2031-02-08'),
	('2031-02-09'),
	('2031-02-10'),
	('2031-02-11'),
	('2031-02-12'),
	('2031-02-13'),
	('2031-02-14'),
	('2031-02-15'),
	('2031-02-16'),
	('2031-02-17'),
	('2031-02-18'),
	('2031-02-19'),
	('2031-02-20'),
	('2031-02-21'),
	('2031-02-22'),
	('2031-02-23'),
	('2031-02-24'),
	('2031-02-25'),
	('2031-02-26'),
	('2031-02-27'),
	('2031-02-28'),
	('2031-03-01'),
	('2031-03-02'),
	('2031-03-03'),
	('2031-03-04'),
	('2031-03-05'),
	('2031-03-06'),
	('2031-03-07'),
	('2031-03-08'),
	('2031-03-09'),
	('2031-03-10'),
	('2031-03-11'),
	('2031-03-12'),
	('2031-03-13'),
	('2031-03-14'),
	('2031-03-15'),
	('2031-03-16'),
	('2031-03-17'),
	('2031-03-18'),
	('2031-03-19'),
	('2031-03-20'),
	('2031-03-21'),
	('2031-03-22'),
	('2031-03-23'),
	('2031-03-24'),
	('2031-03-25'),
	('2031-03-26'),
	('2031-03-27'),
	('2031-03-28'),
	('2031-03-29'),
	('2031-03-30'),
	('2031-03-31'),
	('2031-04-01'),
	('2031-04-02'),
	('2031-04-03'),
	('2031-04-04'),
	('2031-04-05'),
	('2031-04-06'),
	('2031-04-07'),
	('2031-04-08'),
	('2031-04-09'),
	('2031-04-10'),
	('2031-04-11'),
	('2031-04-12'),
	('2031-04-13'),
	('2031-04-14'),
	('2031-04-15'),
	('2031-04-16'),
	('2031-04-17'),
	('2031-04-18'),
	('2031-04-19'),
	('2031-04-20'),
	('2031-04-21'),
	('2031-04-22'),
	('2031-04-23'),
	('2031-04-24'),
	('2031-04-25'),
	('2031-04-26'),
	('2031-04-27'),
	('2031-04-28'),
	('2031-04-29'),
	('2031-04-30'),
	('2031-05-01'),
	('2031-05-02'),
	('2031-05-03'),
	('2031-05-04'),
	('2031-05-05'),
	('2031-05-06'),
	('2031-05-07'),
	('2031-05-08'),
	('2031-05-09'),
	('2031-05-10'),
	('2031-05-11'),
	('2031-05-12'),
	('2031-05-13'),
	('2031-05-14'),
	('2031-05-15'),
	('2031-05-16'),
	('2031-05-17'),
	('2031-05-18'),
	('2031-05-19'),
	('2031-05-20'),
	('2031-05-21'),
	('2031-05-22'),
	('2031-05-23'),
	('2031-05-24'),
	('2031-05-25'),
	('2031-05-26'),
	('2031-05-27'),
	('2031-05-28'),
	('2031-05-29'),
	('2031-05-30'),
	('2031-05-31'),
	('2031-06-01'),
	('2031-06-02'),
	('2031-06-03'),
	('2031-06-04'),
	('2031-06-05'),
	('2031-06-06'),
	('2031-06-07'),
	('2031-06-08'),
	('2031-06-09'),
	('2031-06-10'),
	('2031-06-11'),
	('2031-06-12'),
	('2031-06-13'),
	('2031-06-14'),
	('2031-06-15'),
	('2031-06-16'),
	('2031-06-17'),
	('2031-06-18'),
	('2031-06-19'),
	('2031-06-20'),
	('2031-06-21'),
	('2031-06-22'),
	('2031-06-23'),
	('2031-06-24'),
	('2031-06-25'),
	('2031-06-26'),
	('2031-06-27'),
	('2031-06-28'),
	('2031-06-29'),
	('2031-06-30'),
	('2031-07-01'),
	('2031-07-02'),
	('2031-07-03'),
	('2031-07-04'),
	('2031-07-05'),
	('2031-07-06'),
	('2031-07-07'),
	('2031-07-08'),
	('2031-07-09'),
	('2031-07-10'),
	('2031-07-11'),
	('2031-07-12'),
	('2031-07-13'),
	('2031-07-14'),
	('2031-07-15'),
	('2031-07-16'),
	('2031-07-17'),
	('2031-07-18'),
	('2031-07-19'),
	('2031-07-20'),
	('2031-07-21'),
	('2031-07-22'),
	('2031-07-23'),
	('2031-07-24'),
	('2031-07-25'),
	('2031-07-26'),
	('2031-07-27'),
	('2031-07-28'),
	('2031-07-29'),
	('2031-07-30'),
	('2031-07-31'),
	('2031-08-01'),
	('2031-08-02'),
	('2031-08-03'),
	('2031-08-04'),
	('2031-08-05'),
	('2031-08-06'),
	('2031-08-07'),
	('2031-08-08'),
	('2031-08-09'),
	('2031-08-10'),
	('2031-08-11'),
	('2031-08-12'),
	('2031-08-13'),
	('2031-08-14'),
	('2031-08-15'),
	('2031-08-16'),
	('2031-08-17'),
	('2031-08-18'),
	('2031-08-19'),
	('2031-08-20'),
	('2031-08-21'),
	('2031-08-22'),
	('2031-08-23'),
	('2031-08-24'),
	('2031-08-25'),
	('2031-08-26'),
	('2031-08-27'),
	('2031-08-28'),
	('2031-08-29'),
	('2031-08-30'),
	('2031-08-31'),
	('2031-09-01'),
	('2031-09-02'),
	('2031-09-03'),
	('2031-09-04'),
	('2031-09-05'),
	('2031-09-06'),
	('2031-09-07'),
	('2031-09-08'),
	('2031-09-09'),
	('2031-09-10'),
	('2031-09-11'),
	('2031-09-12'),
	('2031-09-13'),
	('2031-09-14'),
	('2031-09-15'),
	('2031-09-16'),
	('2031-09-17'),
	('2031-09-18'),
	('2031-09-19'),
	('2031-09-20'),
	('2031-09-21'),
	('2031-09-22'),
	('2031-09-23'),
	('2031-09-24'),
	('2031-09-25'),
	('2031-09-26'),
	('2031-09-27'),
	('2031-09-28'),
	('2031-09-29'),
	('2031-09-30'),
	('2031-10-01'),
	('2031-10-02'),
	('2031-10-03'),
	('2031-10-04'),
	('2031-10-05'),
	('2031-10-06'),
	('2031-10-07'),
	('2031-10-08'),
	('2031-10-09'),
	('2031-10-10'),
	('2031-10-11'),
	('2031-10-12'),
	('2031-10-13'),
	('2031-10-14'),
	('2031-10-15'),
	('2031-10-16'),
	('2031-10-17'),
	('2031-10-18'),
	('2031-10-19'),
	('2031-10-20'),
	('2031-10-21'),
	('2031-10-22'),
	('2031-10-23'),
	('2031-10-24'),
	('2031-10-25'),
	('2031-10-26'),
	('2031-10-27'),
	('2031-10-28'),
	('2031-10-29'),
	('2031-10-30'),
	('2031-10-31'),
	('2031-11-01'),
	('2031-11-02'),
	('2031-11-03'),
	('2031-11-04'),
	('2031-11-05'),
	('2031-11-06'),
	('2031-11-07'),
	('2031-11-08'),
	('2031-11-09'),
	('2031-11-10'),
	('2031-11-11'),
	('2031-11-12'),
	('2031-11-13'),
	('2031-11-14'),
	('2031-11-15'),
	('2031-11-16'),
	('2031-11-17'),
	('2031-11-18'),
	('2031-11-19'),
	('2031-11-20'),
	('2031-11-21'),
	('2031-11-22'),
	('2031-11-23'),
	('2031-11-24'),
	('2031-11-25'),
	('2031-11-26'),
	('2031-11-27'),
	('2031-11-28'),
	('2031-11-29'),
	('2031-11-30'),
	('2031-12-01'),
	('2031-12-02'),
	('2031-12-03'),
	('2031-12-04'),
	('2031-12-05'),
	('2031-12-06'),
	('2031-12-07'),
	('2031-12-08'),
	('2031-12-09'),
	('2031-12-10'),
	('2031-12-11'),
	('2031-12-12'),
	('2031-12-13'),
	('2031-12-14'),
	('2031-12-15'),
	('2031-12-16'),
	('2031-12-17'),
	('2031-12-18'),
	('2031-12-19'),
	('2031-12-20'),
	('2031-12-21'),
	('2031-12-22'),
	('2031-12-23'),
	('2031-12-24'),
	('2031-12-25'),
	('2031-12-26'),
	('2031-12-27'),
	('2031-12-28'),
	('2031-12-29'),
	('2031-12-30'),
	('2031-12-31'),
	('2032-01-01'),
	('2032-01-02'),
	('2032-01-03'),
	('2032-01-04'),
	('2032-01-05'),
	('2032-01-06'),
	('2032-01-07'),
	('2032-01-08'),
	('2032-01-09'),
	('2032-01-10'),
	('2032-01-11'),
	('2032-01-12'),
	('2032-01-13'),
	('2032-01-14'),
	('2032-01-15'),
	('2032-01-16'),
	('2032-01-17'),
	('2032-01-18'),
	('2032-01-19'),
	('2032-01-20'),
	('2032-01-21'),
	('2032-01-22'),
	('2032-01-23'),
	('2032-01-24'),
	('2032-01-25'),
	('2032-01-26'),
	('2032-01-27'),
	('2032-01-28'),
	('2032-01-29'),
	('2032-01-30'),
	('2032-01-31'),
	('2032-02-01'),
	('2032-02-02'),
	('2032-02-03'),
	('2032-02-04'),
	('2032-02-05'),
	('2032-02-06'),
	('2032-02-07'),
	('2032-02-08'),
	('2032-02-09'),
	('2032-02-10'),
	('2032-02-11'),
	('2032-02-12'),
	('2032-02-13'),
	('2032-02-14'),
	('2032-02-15'),
	('2032-02-16'),
	('2032-02-17'),
	('2032-02-18'),
	('2032-02-19'),
	('2032-02-20'),
	('2032-02-21'),
	('2032-02-22'),
	('2032-02-23'),
	('2032-02-24'),
	('2032-02-25'),
	('2032-02-26'),
	('2032-02-27'),
	('2032-02-28'),
	('2032-02-29'),
	('2032-03-01'),
	('2032-03-02'),
	('2032-03-03'),
	('2032-03-04'),
	('2032-03-05'),
	('2032-03-06'),
	('2032-03-07'),
	('2032-03-08'),
	('2032-03-09'),
	('2032-03-10'),
	('2032-03-11'),
	('2032-03-12'),
	('2032-03-13'),
	('2032-03-14'),
	('2032-03-15'),
	('2032-03-16'),
	('2032-03-17'),
	('2032-03-18'),
	('2032-03-19'),
	('2032-03-20'),
	('2032-03-21'),
	('2032-03-22'),
	('2032-03-23'),
	('2032-03-24'),
	('2032-03-25'),
	('2032-03-26'),
	('2032-03-27'),
	('2032-03-28'),
	('2032-03-29'),
	('2032-03-30'),
	('2032-03-31'),
	('2032-04-01'),
	('2032-04-02'),
	('2032-04-03'),
	('2032-04-04'),
	('2032-04-05'),
	('2032-04-06'),
	('2032-04-07'),
	('2032-04-08'),
	('2032-04-09'),
	('2032-04-10'),
	('2032-04-11'),
	('2032-04-12'),
	('2032-04-13'),
	('2032-04-14'),
	('2032-04-15'),
	('2032-04-16'),
	('2032-04-17'),
	('2032-04-18'),
	('2032-04-19'),
	('2032-04-20'),
	('2032-04-21'),
	('2032-04-22'),
	('2032-04-23'),
	('2032-04-24'),
	('2032-04-25'),
	('2032-04-26'),
	('2032-04-27'),
	('2032-04-28'),
	('2032-04-29'),
	('2032-04-30'),
	('2032-05-01'),
	('2032-05-02'),
	('2032-05-03'),
	('2032-05-04'),
	('2032-05-05'),
	('2032-05-06'),
	('2032-05-07'),
	('2032-05-08'),
	('2032-05-09'),
	('2032-05-10'),
	('2032-05-11'),
	('2032-05-12'),
	('2032-05-13'),
	('2032-05-14'),
	('2032-05-15'),
	('2032-05-16'),
	('2032-05-17'),
	('2032-05-18'),
	('2032-05-19'),
	('2032-05-20'),
	('2032-05-21'),
	('2032-05-22'),
	('2032-05-23'),
	('2032-05-24'),
	('2032-05-25'),
	('2032-05-26'),
	('2032-05-27'),
	('2032-05-28'),
	('2032-05-29'),
	('2032-05-30'),
	('2032-05-31'),
	('2032-06-01'),
	('2032-06-02'),
	('2032-06-03'),
	('2032-06-04'),
	('2032-06-05'),
	('2032-06-06'),
	('2032-06-07'),
	('2032-06-08'),
	('2032-06-09'),
	('2032-06-10'),
	('2032-06-11'),
	('2032-06-12'),
	('2032-06-13'),
	('2032-06-14'),
	('2032-06-15'),
	('2032-06-16'),
	('2032-06-17'),
	('2032-06-18'),
	('2032-06-19'),
	('2032-06-20'),
	('2032-06-21'),
	('2032-06-22'),
	('2032-06-23'),
	('2032-06-24'),
	('2032-06-25'),
	('2032-06-26'),
	('2032-06-27'),
	('2032-06-28'),
	('2032-06-29'),
	('2032-06-30'),
	('2032-07-01'),
	('2032-07-02'),
	('2032-07-03'),
	('2032-07-04'),
	('2032-07-05'),
	('2032-07-06'),
	('2032-07-07'),
	('2032-07-08'),
	('2032-07-09'),
	('2032-07-10'),
	('2032-07-11'),
	('2032-07-12'),
	('2032-07-13'),
	('2032-07-14'),
	('2032-07-15'),
	('2032-07-16'),
	('2032-07-17'),
	('2032-07-18'),
	('2032-07-19'),
	('2032-07-20'),
	('2032-07-21'),
	('2032-07-22'),
	('2032-07-23'),
	('2032-07-24'),
	('2032-07-25'),
	('2032-07-26'),
	('2032-07-27'),
	('2032-07-28'),
	('2032-07-29'),
	('2032-07-30'),
	('2032-07-31'),
	('2032-08-01'),
	('2032-08-02'),
	('2032-08-03'),
	('2032-08-04'),
	('2032-08-05'),
	('2032-08-06'),
	('2032-08-07'),
	('2032-08-08'),
	('2032-08-09'),
	('2032-08-10'),
	('2032-08-11'),
	('2032-08-12'),
	('2032-08-13'),
	('2032-08-14'),
	('2032-08-15'),
	('2032-08-16'),
	('2032-08-17'),
	('2032-08-18'),
	('2032-08-19'),
	('2032-08-20'),
	('2032-08-21'),
	('2032-08-22'),
	('2032-08-23'),
	('2032-08-24'),
	('2032-08-25'),
	('2032-08-26'),
	('2032-08-27'),
	('2032-08-28'),
	('2032-08-29'),
	('2032-08-30'),
	('2032-08-31'),
	('2032-09-01'),
	('2032-09-02'),
	('2032-09-03'),
	('2032-09-04'),
	('2032-09-05'),
	('2032-09-06'),
	('2032-09-07'),
	('2032-09-08'),
	('2032-09-09'),
	('2032-09-10'),
	('2032-09-11'),
	('2032-09-12'),
	('2032-09-13'),
	('2032-09-14'),
	('2032-09-15'),
	('2032-09-16'),
	('2032-09-17'),
	('2032-09-18'),
	('2032-09-19'),
	('2032-09-20'),
	('2032-09-21'),
	('2032-09-22'),
	('2032-09-23'),
	('2032-09-24'),
	('2032-09-25'),
	('2032-09-26'),
	('2032-09-27'),
	('2032-09-28'),
	('2032-09-29'),
	('2032-09-30'),
	('2032-10-01'),
	('2032-10-02'),
	('2032-10-03'),
	('2032-10-04'),
	('2032-10-05'),
	('2032-10-06'),
	('2032-10-07'),
	('2032-10-08'),
	('2032-10-09'),
	('2032-10-10'),
	('2032-10-11'),
	('2032-10-12'),
	('2032-10-13'),
	('2032-10-14'),
	('2032-10-15'),
	('2032-10-16'),
	('2032-10-17'),
	('2032-10-18'),
	('2032-10-19'),
	('2032-10-20'),
	('2032-10-21'),
	('2032-10-22'),
	('2032-10-23'),
	('2032-10-24'),
	('2032-10-25'),
	('2032-10-26'),
	('2032-10-27'),
	('2032-10-28'),
	('2032-10-29'),
	('2032-10-30'),
	('2032-10-31'),
	('2032-11-01'),
	('2032-11-02'),
	('2032-11-03'),
	('2032-11-04'),
	('2032-11-05'),
	('2032-11-06'),
	('2032-11-07'),
	('2032-11-08'),
	('2032-11-09'),
	('2032-11-10'),
	('2032-11-11'),
	('2032-11-12'),
	('2032-11-13'),
	('2032-11-14'),
	('2032-11-15'),
	('2032-11-16'),
	('2032-11-17'),
	('2032-11-18'),
	('2032-11-19'),
	('2032-11-20'),
	('2032-11-21'),
	('2032-11-22'),
	('2032-11-23'),
	('2032-11-24'),
	('2032-11-25'),
	('2032-11-26'),
	('2032-11-27'),
	('2032-11-28'),
	('2032-11-29'),
	('2032-11-30'),
	('2032-12-01'),
	('2032-12-02'),
	('2032-12-03'),
	('2032-12-04'),
	('2032-12-05'),
	('2032-12-06'),
	('2032-12-07'),
	('2032-12-08'),
	('2032-12-09'),
	('2032-12-10'),
	('2032-12-11'),
	('2032-12-12'),
	('2032-12-13'),
	('2032-12-14'),
	('2032-12-15'),
	('2032-12-16'),
	('2032-12-17'),
	('2032-12-18'),
	('2032-12-19'),
	('2032-12-20'),
	('2032-12-21'),
	('2032-12-22'),
	('2032-12-23'),
	('2032-12-24'),
	('2032-12-25'),
	('2032-12-26'),
	('2032-12-27'),
	('2032-12-28'),
	('2032-12-29'),
	('2032-12-30'),
	('2032-12-31'),
	('2033-01-01'),
	('2033-01-02'),
	('2033-01-03'),
	('2033-01-04'),
	('2033-01-05'),
	('2033-01-06'),
	('2033-01-07'),
	('2033-01-08'),
	('2033-01-09'),
	('2033-01-10'),
	('2033-01-11'),
	('2033-01-12'),
	('2033-01-13'),
	('2033-01-14'),
	('2033-01-15'),
	('2033-01-16'),
	('2033-01-17'),
	('2033-01-18'),
	('2033-01-19'),
	('2033-01-20'),
	('2033-01-21'),
	('2033-01-22'),
	('2033-01-23'),
	('2033-01-24'),
	('2033-01-25'),
	('2033-01-26'),
	('2033-01-27'),
	('2033-01-28'),
	('2033-01-29'),
	('2033-01-30'),
	('2033-01-31'),
	('2033-02-01'),
	('2033-02-02'),
	('2033-02-03'),
	('2033-02-04'),
	('2033-02-05'),
	('2033-02-06'),
	('2033-02-07'),
	('2033-02-08'),
	('2033-02-09'),
	('2033-02-10'),
	('2033-02-11'),
	('2033-02-12'),
	('2033-02-13'),
	('2033-02-14'),
	('2033-02-15'),
	('2033-02-16'),
	('2033-02-17'),
	('2033-02-18'),
	('2033-02-19'),
	('2033-02-20'),
	('2033-02-21'),
	('2033-02-22'),
	('2033-02-23'),
	('2033-02-24'),
	('2033-02-25'),
	('2033-02-26'),
	('2033-02-27'),
	('2033-02-28'),
	('2033-03-01'),
	('2033-03-02'),
	('2033-03-03'),
	('2033-03-04'),
	('2033-03-05'),
	('2033-03-06'),
	('2033-03-07'),
	('2033-03-08'),
	('2033-03-09'),
	('2033-03-10'),
	('2033-03-11'),
	('2033-03-12'),
	('2033-03-13'),
	('2033-03-14'),
	('2033-03-15'),
	('2033-03-16'),
	('2033-03-17'),
	('2033-03-18'),
	('2033-03-19'),
	('2033-03-20'),
	('2033-03-21'),
	('2033-03-22'),
	('2033-03-23'),
	('2033-03-24'),
	('2033-03-25'),
	('2033-03-26'),
	('2033-03-27'),
	('2033-03-28'),
	('2033-03-29'),
	('2033-03-30'),
	('2033-03-31'),
	('2033-04-01'),
	('2033-04-02'),
	('2033-04-03'),
	('2033-04-04'),
	('2033-04-05'),
	('2033-04-06'),
	('2033-04-07'),
	('2033-04-08'),
	('2033-04-09'),
	('2033-04-10'),
	('2033-04-11'),
	('2033-04-12'),
	('2033-04-13'),
	('2033-04-14'),
	('2033-04-15'),
	('2033-04-16'),
	('2033-04-17'),
	('2033-04-18'),
	('2033-04-19'),
	('2033-04-20'),
	('2033-04-21'),
	('2033-04-22'),
	('2033-04-23'),
	('2033-04-24'),
	('2033-04-25'),
	('2033-04-26'),
	('2033-04-27'),
	('2033-04-28'),
	('2033-04-29'),
	('2033-04-30'),
	('2033-05-01'),
	('2033-05-02'),
	('2033-05-03'),
	('2033-05-04'),
	('2033-05-05'),
	('2033-05-06'),
	('2033-05-07'),
	('2033-05-08'),
	('2033-05-09'),
	('2033-05-10'),
	('2033-05-11'),
	('2033-05-12'),
	('2033-05-13'),
	('2033-05-14'),
	('2033-05-15'),
	('2033-05-16'),
	('2033-05-17'),
	('2033-05-18'),
	('2033-05-19'),
	('2033-05-20'),
	('2033-05-21'),
	('2033-05-22'),
	('2033-05-23'),
	('2033-05-24'),
	('2033-05-25'),
	('2033-05-26'),
	('2033-05-27'),
	('2033-05-28'),
	('2033-05-29'),
	('2033-05-30'),
	('2033-05-31'),
	('2033-06-01'),
	('2033-06-02'),
	('2033-06-03'),
	('2033-06-04'),
	('2033-06-05'),
	('2033-06-06'),
	('2033-06-07'),
	('2033-06-08'),
	('2033-06-09'),
	('2033-06-10'),
	('2033-06-11'),
	('2033-06-12'),
	('2033-06-13'),
	('2033-06-14'),
	('2033-06-15'),
	('2033-06-16'),
	('2033-06-17'),
	('2033-06-18'),
	('2033-06-19'),
	('2033-06-20'),
	('2033-06-21'),
	('2033-06-22'),
	('2033-06-23'),
	('2033-06-24'),
	('2033-06-25'),
	('2033-06-26'),
	('2033-06-27'),
	('2033-06-28'),
	('2033-06-29'),
	('2033-06-30'),
	('2033-07-01'),
	('2033-07-02'),
	('2033-07-03'),
	('2033-07-04'),
	('2033-07-05'),
	('2033-07-06'),
	('2033-07-07'),
	('2033-07-08'),
	('2033-07-09'),
	('2033-07-10'),
	('2033-07-11'),
	('2033-07-12'),
	('2033-07-13'),
	('2033-07-14'),
	('2033-07-15'),
	('2033-07-16'),
	('2033-07-17'),
	('2033-07-18'),
	('2033-07-19'),
	('2033-07-20'),
	('2033-07-21'),
	('2033-07-22'),
	('2033-07-23'),
	('2033-07-24'),
	('2033-07-25'),
	('2033-07-26'),
	('2033-07-27'),
	('2033-07-28'),
	('2033-07-29'),
	('2033-07-30'),
	('2033-07-31'),
	('2033-08-01'),
	('2033-08-02'),
	('2033-08-03'),
	('2033-08-04'),
	('2033-08-05'),
	('2033-08-06'),
	('2033-08-07'),
	('2033-08-08'),
	('2033-08-09'),
	('2033-08-10'),
	('2033-08-11'),
	('2033-08-12'),
	('2033-08-13'),
	('2033-08-14'),
	('2033-08-15'),
	('2033-08-16'),
	('2033-08-17'),
	('2033-08-18'),
	('2033-08-19'),
	('2033-08-20'),
	('2033-08-21'),
	('2033-08-22'),
	('2033-08-23'),
	('2033-08-24'),
	('2033-08-25'),
	('2033-08-26'),
	('2033-08-27'),
	('2033-08-28'),
	('2033-08-29'),
	('2033-08-30'),
	('2033-08-31'),
	('2033-09-01'),
	('2033-09-02'),
	('2033-09-03'),
	('2033-09-04'),
	('2033-09-05'),
	('2033-09-06'),
	('2033-09-07'),
	('2033-09-08'),
	('2033-09-09'),
	('2033-09-10'),
	('2033-09-11'),
	('2033-09-12'),
	('2033-09-13'),
	('2033-09-14'),
	('2033-09-15'),
	('2033-09-16'),
	('2033-09-17'),
	('2033-09-18'),
	('2033-09-19'),
	('2033-09-20'),
	('2033-09-21'),
	('2033-09-22'),
	('2033-09-23'),
	('2033-09-24'),
	('2033-09-25'),
	('2033-09-26'),
	('2033-09-27'),
	('2033-09-28'),
	('2033-09-29'),
	('2033-09-30'),
	('2033-10-01'),
	('2033-10-02'),
	('2033-10-03'),
	('2033-10-04'),
	('2033-10-05'),
	('2033-10-06'),
	('2033-10-07'),
	('2033-10-08'),
	('2033-10-09'),
	('2033-10-10'),
	('2033-10-11'),
	('2033-10-12'),
	('2033-10-13'),
	('2033-10-14'),
	('2033-10-15'),
	('2033-10-16'),
	('2033-10-17'),
	('2033-10-18'),
	('2033-10-19'),
	('2033-10-20'),
	('2033-10-21'),
	('2033-10-22'),
	('2033-10-23'),
	('2033-10-24'),
	('2033-10-25'),
	('2033-10-26'),
	('2033-10-27'),
	('2033-10-28'),
	('2033-10-29'),
	('2033-10-30'),
	('2033-10-31'),
	('2033-11-01'),
	('2033-11-02'),
	('2033-11-03'),
	('2033-11-04'),
	('2033-11-05'),
	('2033-11-06'),
	('2033-11-07'),
	('2033-11-08'),
	('2033-11-09'),
	('2033-11-10'),
	('2033-11-11'),
	('2033-11-12'),
	('2033-11-13'),
	('2033-11-14'),
	('2033-11-15'),
	('2033-11-16'),
	('2033-11-17'),
	('2033-11-18'),
	('2033-11-19'),
	('2033-11-20'),
	('2033-11-21'),
	('2033-11-22'),
	('2033-11-23'),
	('2033-11-24'),
	('2033-11-25'),
	('2033-11-26'),
	('2033-11-27'),
	('2033-11-28'),
	('2033-11-29'),
	('2033-11-30'),
	('2033-12-01'),
	('2033-12-02'),
	('2033-12-03'),
	('2033-12-04'),
	('2033-12-05'),
	('2033-12-06'),
	('2033-12-07'),
	('2033-12-08'),
	('2033-12-09'),
	('2033-12-10'),
	('2033-12-11'),
	('2033-12-12'),
	('2033-12-13'),
	('2033-12-14'),
	('2033-12-15'),
	('2033-12-16'),
	('2033-12-17'),
	('2033-12-18'),
	('2033-12-19'),
	('2033-12-20'),
	('2033-12-21'),
	('2033-12-22'),
	('2033-12-23'),
	('2033-12-24'),
	('2033-12-25'),
	('2033-12-26'),
	('2033-12-27'),
	('2033-12-28'),
	('2033-12-29'),
	('2033-12-30'),
	('2033-12-31'),
	('2034-01-01'),
	('2034-01-02'),
	('2034-01-03'),
	('2034-01-04'),
	('2034-01-05'),
	('2034-01-06'),
	('2034-01-07'),
	('2034-01-08'),
	('2034-01-09'),
	('2034-01-10'),
	('2034-01-11'),
	('2034-01-12'),
	('2034-01-13'),
	('2034-01-14'),
	('2034-01-15'),
	('2034-01-16'),
	('2034-01-17'),
	('2034-01-18'),
	('2034-01-19'),
	('2034-01-20'),
	('2034-01-21'),
	('2034-01-22'),
	('2034-01-23'),
	('2034-01-24'),
	('2034-01-25'),
	('2034-01-26'),
	('2034-01-27'),
	('2034-01-28'),
	('2034-01-29'),
	('2034-01-30'),
	('2034-01-31'),
	('2034-02-01'),
	('2034-02-02'),
	('2034-02-03'),
	('2034-02-04'),
	('2034-02-05'),
	('2034-02-06'),
	('2034-02-07'),
	('2034-02-08'),
	('2034-02-09'),
	('2034-02-10'),
	('2034-02-11'),
	('2034-02-12'),
	('2034-02-13'),
	('2034-02-14'),
	('2034-02-15'),
	('2034-02-16'),
	('2034-02-17'),
	('2034-02-18'),
	('2034-02-19'),
	('2034-02-20'),
	('2034-02-21'),
	('2034-02-22'),
	('2034-02-23'),
	('2034-02-24'),
	('2034-02-25'),
	('2034-02-26'),
	('2034-02-27'),
	('2034-02-28'),
	('2034-03-01'),
	('2034-03-02'),
	('2034-03-03'),
	('2034-03-04'),
	('2034-03-05'),
	('2034-03-06'),
	('2034-03-07'),
	('2034-03-08'),
	('2034-03-09'),
	('2034-03-10'),
	('2034-03-11'),
	('2034-03-12'),
	('2034-03-13'),
	('2034-03-14'),
	('2034-03-15'),
	('2034-03-16'),
	('2034-03-17'),
	('2034-03-18'),
	('2034-03-19'),
	('2034-03-20'),
	('2034-03-21'),
	('2034-03-22'),
	('2034-03-23'),
	('2034-03-24'),
	('2034-03-25'),
	('2034-03-26'),
	('2034-03-27'),
	('2034-03-28'),
	('2034-03-29'),
	('2034-03-30'),
	('2034-03-31'),
	('2034-04-01'),
	('2034-04-02'),
	('2034-04-03'),
	('2034-04-04'),
	('2034-04-05'),
	('2034-04-06'),
	('2034-04-07'),
	('2034-04-08'),
	('2034-04-09'),
	('2034-04-10'),
	('2034-04-11'),
	('2034-04-12'),
	('2034-04-13'),
	('2034-04-14'),
	('2034-04-15'),
	('2034-04-16'),
	('2034-04-17'),
	('2034-04-18'),
	('2034-04-19'),
	('2034-04-20'),
	('2034-04-21'),
	('2034-04-22'),
	('2034-04-23'),
	('2034-04-24'),
	('2034-04-25'),
	('2034-04-26'),
	('2034-04-27'),
	('2034-04-28'),
	('2034-04-29'),
	('2034-04-30'),
	('2034-05-01'),
	('2034-05-02'),
	('2034-05-03'),
	('2034-05-04'),
	('2034-05-05'),
	('2034-05-06'),
	('2034-05-07'),
	('2034-05-08'),
	('2034-05-09'),
	('2034-05-10'),
	('2034-05-11'),
	('2034-05-12'),
	('2034-05-13'),
	('2034-05-14'),
	('2034-05-15'),
	('2034-05-16'),
	('2034-05-17'),
	('2034-05-18'),
	('2034-05-19'),
	('2034-05-20'),
	('2034-05-21'),
	('2034-05-22'),
	('2034-05-23'),
	('2034-05-24'),
	('2034-05-25'),
	('2034-05-26'),
	('2034-05-27'),
	('2034-05-28'),
	('2034-05-29'),
	('2034-05-30'),
	('2034-05-31'),
	('2034-06-01'),
	('2034-06-02'),
	('2034-06-03'),
	('2034-06-04'),
	('2034-06-05'),
	('2034-06-06'),
	('2034-06-07'),
	('2034-06-08'),
	('2034-06-09'),
	('2034-06-10'),
	('2034-06-11'),
	('2034-06-12'),
	('2034-06-13'),
	('2034-06-14'),
	('2034-06-15'),
	('2034-06-16'),
	('2034-06-17'),
	('2034-06-18'),
	('2034-06-19'),
	('2034-06-20'),
	('2034-06-21'),
	('2034-06-22'),
	('2034-06-23'),
	('2034-06-24'),
	('2034-06-25'),
	('2034-06-26'),
	('2034-06-27'),
	('2034-06-28'),
	('2034-06-29'),
	('2034-06-30'),
	('2034-07-01'),
	('2034-07-02'),
	('2034-07-03'),
	('2034-07-04'),
	('2034-07-05'),
	('2034-07-06'),
	('2034-07-07'),
	('2034-07-08'),
	('2034-07-09'),
	('2034-07-10'),
	('2034-07-11'),
	('2034-07-12'),
	('2034-07-13'),
	('2034-07-14'),
	('2034-07-15'),
	('2034-07-16'),
	('2034-07-17'),
	('2034-07-18'),
	('2034-07-19'),
	('2034-07-20'),
	('2034-07-21'),
	('2034-07-22'),
	('2034-07-23'),
	('2034-07-24'),
	('2034-07-25'),
	('2034-07-26'),
	('2034-07-27'),
	('2034-07-28'),
	('2034-07-29'),
	('2034-07-30'),
	('2034-07-31'),
	('2034-08-01'),
	('2034-08-02'),
	('2034-08-03'),
	('2034-08-04'),
	('2034-08-05'),
	('2034-08-06'),
	('2034-08-07'),
	('2034-08-08'),
	('2034-08-09'),
	('2034-08-10'),
	('2034-08-11'),
	('2034-08-12'),
	('2034-08-13'),
	('2034-08-14'),
	('2034-08-15'),
	('2034-08-16'),
	('2034-08-17'),
	('2034-08-18'),
	('2034-08-19'),
	('2034-08-20'),
	('2034-08-21'),
	('2034-08-22'),
	('2034-08-23'),
	('2034-08-24'),
	('2034-08-25'),
	('2034-08-26'),
	('2034-08-27'),
	('2034-08-28'),
	('2034-08-29'),
	('2034-08-30'),
	('2034-08-31'),
	('2034-09-01'),
	('2034-09-02'),
	('2034-09-03'),
	('2034-09-04'),
	('2034-09-05'),
	('2034-09-06'),
	('2034-09-07'),
	('2034-09-08'),
	('2034-09-09'),
	('2034-09-10'),
	('2034-09-11'),
	('2034-09-12'),
	('2034-09-13'),
	('2034-09-14'),
	('2034-09-15'),
	('2034-09-16'),
	('2034-09-17'),
	('2034-09-18'),
	('2034-09-19'),
	('2034-09-20'),
	('2034-09-21'),
	('2034-09-22'),
	('2034-09-23'),
	('2034-09-24'),
	('2034-09-25'),
	('2034-09-26'),
	('2034-09-27'),
	('2034-09-28'),
	('2034-09-29'),
	('2034-09-30'),
	('2034-10-01'),
	('2034-10-02'),
	('2034-10-03'),
	('2034-10-04'),
	('2034-10-05'),
	('2034-10-06'),
	('2034-10-07'),
	('2034-10-08'),
	('2034-10-09'),
	('2034-10-10'),
	('2034-10-11'),
	('2034-10-12'),
	('2034-10-13'),
	('2034-10-14'),
	('2034-10-15'),
	('2034-10-16'),
	('2034-10-17'),
	('2034-10-18'),
	('2034-10-19'),
	('2034-10-20'),
	('2034-10-21'),
	('2034-10-22'),
	('2034-10-23'),
	('2034-10-24'),
	('2034-10-25'),
	('2034-10-26'),
	('2034-10-27'),
	('2034-10-28'),
	('2034-10-29'),
	('2034-10-30'),
	('2034-10-31'),
	('2034-11-01'),
	('2034-11-02'),
	('2034-11-03'),
	('2034-11-04'),
	('2034-11-05'),
	('2034-11-06'),
	('2034-11-07'),
	('2034-11-08'),
	('2034-11-09'),
	('2034-11-10'),
	('2034-11-11'),
	('2034-11-12'),
	('2034-11-13'),
	('2034-11-14'),
	('2034-11-15'),
	('2034-11-16'),
	('2034-11-17'),
	('2034-11-18'),
	('2034-11-19'),
	('2034-11-20'),
	('2034-11-21'),
	('2034-11-22'),
	('2034-11-23'),
	('2034-11-24'),
	('2034-11-25'),
	('2034-11-26'),
	('2034-11-27'),
	('2034-11-28'),
	('2034-11-29'),
	('2034-11-30'),
	('2034-12-01'),
	('2034-12-02'),
	('2034-12-03'),
	('2034-12-04'),
	('2034-12-05'),
	('2034-12-06'),
	('2034-12-07'),
	('2034-12-08'),
	('2034-12-09'),
	('2034-12-10'),
	('2034-12-11'),
	('2034-12-12'),
	('2034-12-13'),
	('2034-12-14'),
	('2034-12-15'),
	('2034-12-16'),
	('2034-12-17'),
	('2034-12-18'),
	('2034-12-19'),
	('2034-12-20'),
	('2034-12-21'),
	('2034-12-22'),
	('2034-12-23'),
	('2034-12-24'),
	('2034-12-25'),
	('2034-12-26'),
	('2034-12-27'),
	('2034-12-28'),
	('2034-12-29'),
	('2034-12-30'),
	('2034-12-31'),
	('2035-01-01'),
	('2035-01-02'),
	('2035-01-03'),
	('2035-01-04'),
	('2035-01-05'),
	('2035-01-06'),
	('2035-01-07'),
	('2035-01-08'),
	('2035-01-09'),
	('2035-01-10'),
	('2035-01-11'),
	('2035-01-12'),
	('2035-01-13'),
	('2035-01-14'),
	('2035-01-15'),
	('2035-01-16'),
	('2035-01-17'),
	('2035-01-18'),
	('2035-01-19'),
	('2035-01-20'),
	('2035-01-21'),
	('2035-01-22'),
	('2035-01-23'),
	('2035-01-24'),
	('2035-01-25'),
	('2035-01-26'),
	('2035-01-27'),
	('2035-01-28'),
	('2035-01-29'),
	('2035-01-30'),
	('2035-01-31'),
	('2035-02-01'),
	('2035-02-02'),
	('2035-02-03'),
	('2035-02-04'),
	('2035-02-05'),
	('2035-02-06'),
	('2035-02-07'),
	('2035-02-08'),
	('2035-02-09'),
	('2035-02-10'),
	('2035-02-11'),
	('2035-02-12'),
	('2035-02-13'),
	('2035-02-14'),
	('2035-02-15'),
	('2035-02-16'),
	('2035-02-17'),
	('2035-02-18'),
	('2035-02-19'),
	('2035-02-20'),
	('2035-02-21'),
	('2035-02-22'),
	('2035-02-23'),
	('2035-02-24'),
	('2035-02-25'),
	('2035-02-26'),
	('2035-02-27'),
	('2035-02-28'),
	('2035-03-01'),
	('2035-03-02'),
	('2035-03-03'),
	('2035-03-04'),
	('2035-03-05'),
	('2035-03-06'),
	('2035-03-07'),
	('2035-03-08'),
	('2035-03-09'),
	('2035-03-10'),
	('2035-03-11'),
	('2035-03-12'),
	('2035-03-13'),
	('2035-03-14'),
	('2035-03-15'),
	('2035-03-16'),
	('2035-03-17'),
	('2035-03-18'),
	('2035-03-19'),
	('2035-03-20'),
	('2035-03-21'),
	('2035-03-22'),
	('2035-03-23'),
	('2035-03-24'),
	('2035-03-25'),
	('2035-03-26'),
	('2035-03-27'),
	('2035-03-28'),
	('2035-03-29'),
	('2035-03-30'),
	('2035-03-31'),
	('2035-04-01'),
	('2035-04-02'),
	('2035-04-03'),
	('2035-04-04'),
	('2035-04-05'),
	('2035-04-06'),
	('2035-04-07'),
	('2035-04-08'),
	('2035-04-09'),
	('2035-04-10'),
	('2035-04-11'),
	('2035-04-12'),
	('2035-04-13'),
	('2035-04-14'),
	('2035-04-15'),
	('2035-04-16'),
	('2035-04-17'),
	('2035-04-18'),
	('2035-04-19'),
	('2035-04-20'),
	('2035-04-21'),
	('2035-04-22'),
	('2035-04-23'),
	('2035-04-24'),
	('2035-04-25'),
	('2035-04-26'),
	('2035-04-27'),
	('2035-04-28'),
	('2035-04-29'),
	('2035-04-30'),
	('2035-05-01'),
	('2035-05-02'),
	('2035-05-03'),
	('2035-05-04'),
	('2035-05-05'),
	('2035-05-06'),
	('2035-05-07'),
	('2035-05-08'),
	('2035-05-09'),
	('2035-05-10'),
	('2035-05-11'),
	('2035-05-12'),
	('2035-05-13'),
	('2035-05-14'),
	('2035-05-15'),
	('2035-05-16'),
	('2035-05-17'),
	('2035-05-18'),
	('2035-05-19'),
	('2035-05-20'),
	('2035-05-21'),
	('2035-05-22'),
	('2035-05-23'),
	('2035-05-24'),
	('2035-05-25'),
	('2035-05-26'),
	('2035-05-27'),
	('2035-05-28'),
	('2035-05-29'),
	('2035-05-30'),
	('2035-05-31'),
	('2035-06-01'),
	('2035-06-02'),
	('2035-06-03'),
	('2035-06-04'),
	('2035-06-05'),
	('2035-06-06'),
	('2035-06-07'),
	('2035-06-08'),
	('2035-06-09'),
	('2035-06-10'),
	('2035-06-11'),
	('2035-06-12'),
	('2035-06-13'),
	('2035-06-14'),
	('2035-06-15'),
	('2035-06-16'),
	('2035-06-17'),
	('2035-06-18'),
	('2035-06-19'),
	('2035-06-20'),
	('2035-06-21'),
	('2035-06-22'),
	('2035-06-23'),
	('2035-06-24'),
	('2035-06-25'),
	('2035-06-26'),
	('2035-06-27'),
	('2035-06-28'),
	('2035-06-29'),
	('2035-06-30'),
	('2035-07-01'),
	('2035-07-02'),
	('2035-07-03'),
	('2035-07-04'),
	('2035-07-05'),
	('2035-07-06'),
	('2035-07-07'),
	('2035-07-08'),
	('2035-07-09'),
	('2035-07-10'),
	('2035-07-11'),
	('2035-07-12'),
	('2035-07-13'),
	('2035-07-14'),
	('2035-07-15'),
	('2035-07-16'),
	('2035-07-17'),
	('2035-07-18'),
	('2035-07-19'),
	('2035-07-20'),
	('2035-07-21'),
	('2035-07-22'),
	('2035-07-23'),
	('2035-07-24'),
	('2035-07-25'),
	('2035-07-26'),
	('2035-07-27'),
	('2035-07-28'),
	('2035-07-29'),
	('2035-07-30'),
	('2035-07-31'),
	('2035-08-01'),
	('2035-08-02'),
	('2035-08-03'),
	('2035-08-04'),
	('2035-08-05'),
	('2035-08-06'),
	('2035-08-07'),
	('2035-08-08'),
	('2035-08-09'),
	('2035-08-10'),
	('2035-08-11'),
	('2035-08-12'),
	('2035-08-13'),
	('2035-08-14'),
	('2035-08-15'),
	('2035-08-16'),
	('2035-08-17'),
	('2035-08-18'),
	('2035-08-19'),
	('2035-08-20'),
	('2035-08-21'),
	('2035-08-22'),
	('2035-08-23'),
	('2035-08-24'),
	('2035-08-25'),
	('2035-08-26'),
	('2035-08-27'),
	('2035-08-28'),
	('2035-08-29'),
	('2035-08-30'),
	('2035-08-31'),
	('2035-09-01'),
	('2035-09-02'),
	('2035-09-03'),
	('2035-09-04'),
	('2035-09-05'),
	('2035-09-06'),
	('2035-09-07'),
	('2035-09-08'),
	('2035-09-09'),
	('2035-09-10'),
	('2035-09-11'),
	('2035-09-12'),
	('2035-09-13'),
	('2035-09-14'),
	('2035-09-15'),
	('2035-09-16'),
	('2035-09-17'),
	('2035-09-18'),
	('2035-09-19'),
	('2035-09-20'),
	('2035-09-21'),
	('2035-09-22'),
	('2035-09-23'),
	('2035-09-24'),
	('2035-09-25'),
	('2035-09-26'),
	('2035-09-27'),
	('2035-09-28'),
	('2035-09-29'),
	('2035-09-30'),
	('2035-10-01'),
	('2035-10-02'),
	('2035-10-03'),
	('2035-10-04'),
	('2035-10-05'),
	('2035-10-06'),
	('2035-10-07'),
	('2035-10-08'),
	('2035-10-09'),
	('2035-10-10'),
	('2035-10-11'),
	('2035-10-12'),
	('2035-10-13'),
	('2035-10-14'),
	('2035-10-15'),
	('2035-10-16'),
	('2035-10-17'),
	('2035-10-18'),
	('2035-10-19'),
	('2035-10-20'),
	('2035-10-21'),
	('2035-10-22'),
	('2035-10-23'),
	('2035-10-24'),
	('2035-10-25'),
	('2035-10-26'),
	('2035-10-27'),
	('2035-10-28'),
	('2035-10-29'),
	('2035-10-30'),
	('2035-10-31'),
	('2035-11-01'),
	('2035-11-02'),
	('2035-11-03'),
	('2035-11-04'),
	('2035-11-05'),
	('2035-11-06'),
	('2035-11-07'),
	('2035-11-08'),
	('2035-11-09'),
	('2035-11-10'),
	('2035-11-11'),
	('2035-11-12'),
	('2035-11-13'),
	('2035-11-14'),
	('2035-11-15'),
	('2035-11-16'),
	('2035-11-17'),
	('2035-11-18'),
	('2035-11-19'),
	('2035-11-20'),
	('2035-11-21'),
	('2035-11-22'),
	('2035-11-23'),
	('2035-11-24'),
	('2035-11-25'),
	('2035-11-26'),
	('2035-11-27'),
	('2035-11-28'),
	('2035-11-29'),
	('2035-11-30'),
	('2035-12-01'),
	('2035-12-02'),
	('2035-12-03'),
	('2035-12-04'),
	('2035-12-05'),
	('2035-12-06'),
	('2035-12-07'),
	('2035-12-08'),
	('2035-12-09'),
	('2035-12-10'),
	('2035-12-11'),
	('2035-12-12'),
	('2035-12-13'),
	('2035-12-14'),
	('2035-12-15'),
	('2035-12-16'),
	('2035-12-17'),
	('2035-12-18'),
	('2035-12-19'),
	('2035-12-20'),
	('2035-12-21'),
	('2035-12-22'),
	('2035-12-23'),
	('2035-12-24'),
	('2035-12-25'),
	('2035-12-26'),
	('2035-12-27'),
	('2035-12-28'),
	('2035-12-29'),
	('2035-12-30'),
	('2035-12-31'),
	('2036-01-01'),
	('2036-01-02'),
	('2036-01-03'),
	('2036-01-04'),
	('2036-01-05'),
	('2036-01-06'),
	('2036-01-07'),
	('2036-01-08'),
	('2036-01-09'),
	('2036-01-10'),
	('2036-01-11'),
	('2036-01-12'),
	('2036-01-13'),
	('2036-01-14'),
	('2036-01-15'),
	('2036-01-16'),
	('2036-01-17'),
	('2036-01-18'),
	('2036-01-19'),
	('2036-01-20'),
	('2036-01-21'),
	('2036-01-22'),
	('2036-01-23'),
	('2036-01-24'),
	('2036-01-25'),
	('2036-01-26'),
	('2036-01-27'),
	('2036-01-28'),
	('2036-01-29'),
	('2036-01-30'),
	('2036-01-31'),
	('2036-02-01'),
	('2036-02-02'),
	('2036-02-03'),
	('2036-02-04'),
	('2036-02-05'),
	('2036-02-06'),
	('2036-02-07'),
	('2036-02-08'),
	('2036-02-09'),
	('2036-02-10'),
	('2036-02-11'),
	('2036-02-12'),
	('2036-02-13'),
	('2036-02-14'),
	('2036-02-15'),
	('2036-02-16'),
	('2036-02-17'),
	('2036-02-18'),
	('2036-02-19'),
	('2036-02-20'),
	('2036-02-21'),
	('2036-02-22'),
	('2036-02-23'),
	('2036-02-24'),
	('2036-02-25'),
	('2036-02-26'),
	('2036-02-27'),
	('2036-02-28'),
	('2036-02-29'),
	('2036-03-01'),
	('2036-03-02'),
	('2036-03-03'),
	('2036-03-04'),
	('2036-03-05'),
	('2036-03-06'),
	('2036-03-07'),
	('2036-03-08'),
	('2036-03-09'),
	('2036-03-10'),
	('2036-03-11'),
	('2036-03-12'),
	('2036-03-13'),
	('2036-03-14'),
	('2036-03-15'),
	('2036-03-16'),
	('2036-03-17'),
	('2036-03-18'),
	('2036-03-19'),
	('2036-03-20'),
	('2036-03-21'),
	('2036-03-22'),
	('2036-03-23'),
	('2036-03-24'),
	('2036-03-25'),
	('2036-03-26'),
	('2036-03-27'),
	('2036-03-28'),
	('2036-03-29'),
	('2036-03-30'),
	('2036-03-31'),
	('2036-04-01'),
	('2036-04-02'),
	('2036-04-03'),
	('2036-04-04'),
	('2036-04-05'),
	('2036-04-06'),
	('2036-04-07'),
	('2036-04-08'),
	('2036-04-09'),
	('2036-04-10'),
	('2036-04-11'),
	('2036-04-12'),
	('2036-04-13'),
	('2036-04-14'),
	('2036-04-15'),
	('2036-04-16'),
	('2036-04-17'),
	('2036-04-18'),
	('2036-04-19'),
	('2036-04-20'),
	('2036-04-21'),
	('2036-04-22'),
	('2036-04-23'),
	('2036-04-24'),
	('2036-04-25'),
	('2036-04-26'),
	('2036-04-27'),
	('2036-04-28'),
	('2036-04-29'),
	('2036-04-30'),
	('2036-05-01'),
	('2036-05-02'),
	('2036-05-03'),
	('2036-05-04'),
	('2036-05-05'),
	('2036-05-06'),
	('2036-05-07'),
	('2036-05-08'),
	('2036-05-09'),
	('2036-05-10'),
	('2036-05-11'),
	('2036-05-12'),
	('2036-05-13'),
	('2036-05-14'),
	('2036-05-15'),
	('2036-05-16'),
	('2036-05-17'),
	('2036-05-18'),
	('2036-05-19'),
	('2036-05-20'),
	('2036-05-21'),
	('2036-05-22'),
	('2036-05-23'),
	('2036-05-24'),
	('2036-05-25'),
	('2036-05-26'),
	('2036-05-27'),
	('2036-05-28'),
	('2036-05-29'),
	('2036-05-30'),
	('2036-05-31'),
	('2036-06-01'),
	('2036-06-02'),
	('2036-06-03'),
	('2036-06-04'),
	('2036-06-05'),
	('2036-06-06'),
	('2036-06-07'),
	('2036-06-08'),
	('2036-06-09'),
	('2036-06-10'),
	('2036-06-11'),
	('2036-06-12'),
	('2036-06-13'),
	('2036-06-14'),
	('2036-06-15'),
	('2036-06-16'),
	('2036-06-17'),
	('2036-06-18'),
	('2036-06-19'),
	('2036-06-20'),
	('2036-06-21'),
	('2036-06-22'),
	('2036-06-23'),
	('2036-06-24'),
	('2036-06-25'),
	('2036-06-26'),
	('2036-06-27'),
	('2036-06-28'),
	('2036-06-29'),
	('2036-06-30'),
	('2036-07-01'),
	('2036-07-02'),
	('2036-07-03'),
	('2036-07-04'),
	('2036-07-05'),
	('2036-07-06'),
	('2036-07-07'),
	('2036-07-08'),
	('2036-07-09'),
	('2036-07-10'),
	('2036-07-11'),
	('2036-07-12'),
	('2036-07-13'),
	('2036-07-14'),
	('2036-07-15'),
	('2036-07-16'),
	('2036-07-17'),
	('2036-07-18'),
	('2036-07-19'),
	('2036-07-20'),
	('2036-07-21'),
	('2036-07-22'),
	('2036-07-23'),
	('2036-07-24'),
	('2036-07-25'),
	('2036-07-26'),
	('2036-07-27'),
	('2036-07-28'),
	('2036-07-29'),
	('2036-07-30'),
	('2036-07-31'),
	('2036-08-01'),
	('2036-08-02'),
	('2036-08-03'),
	('2036-08-04'),
	('2036-08-05'),
	('2036-08-06'),
	('2036-08-07'),
	('2036-08-08'),
	('2036-08-09'),
	('2036-08-10'),
	('2036-08-11'),
	('2036-08-12'),
	('2036-08-13'),
	('2036-08-14'),
	('2036-08-15'),
	('2036-08-16'),
	('2036-08-17'),
	('2036-08-18'),
	('2036-08-19'),
	('2036-08-20'),
	('2036-08-21'),
	('2036-08-22'),
	('2036-08-23'),
	('2036-08-24'),
	('2036-08-25'),
	('2036-08-26'),
	('2036-08-27'),
	('2036-08-28'),
	('2036-08-29'),
	('2036-08-30'),
	('2036-08-31'),
	('2036-09-01'),
	('2036-09-02'),
	('2036-09-03'),
	('2036-09-04'),
	('2036-09-05'),
	('2036-09-06'),
	('2036-09-07'),
	('2036-09-08'),
	('2036-09-09'),
	('2036-09-10'),
	('2036-09-11'),
	('2036-09-12'),
	('2036-09-13'),
	('2036-09-14'),
	('2036-09-15'),
	('2036-09-16'),
	('2036-09-17'),
	('2036-09-18'),
	('2036-09-19'),
	('2036-09-20'),
	('2036-09-21'),
	('2036-09-22'),
	('2036-09-23'),
	('2036-09-24'),
	('2036-09-25'),
	('2036-09-26'),
	('2036-09-27'),
	('2036-09-28'),
	('2036-09-29'),
	('2036-09-30'),
	('2036-10-01'),
	('2036-10-02'),
	('2036-10-03'),
	('2036-10-04'),
	('2036-10-05'),
	('2036-10-06'),
	('2036-10-07'),
	('2036-10-08'),
	('2036-10-09'),
	('2036-10-10'),
	('2036-10-11'),
	('2036-10-12'),
	('2036-10-13'),
	('2036-10-14'),
	('2036-10-15'),
	('2036-10-16'),
	('2036-10-17'),
	('2036-10-18'),
	('2036-10-19'),
	('2036-10-20'),
	('2036-10-21'),
	('2036-10-22'),
	('2036-10-23'),
	('2036-10-24'),
	('2036-10-25'),
	('2036-10-26'),
	('2036-10-27'),
	('2036-10-28'),
	('2036-10-29'),
	('2036-10-30'),
	('2036-10-31'),
	('2036-11-01'),
	('2036-11-02'),
	('2036-11-03'),
	('2036-11-04'),
	('2036-11-05'),
	('2036-11-06'),
	('2036-11-07'),
	('2036-11-08'),
	('2036-11-09'),
	('2036-11-10'),
	('2036-11-11'),
	('2036-11-12'),
	('2036-11-13'),
	('2036-11-14'),
	('2036-11-15'),
	('2036-11-16'),
	('2036-11-17'),
	('2036-11-18'),
	('2036-11-19'),
	('2036-11-20'),
	('2036-11-21'),
	('2036-11-22'),
	('2036-11-23'),
	('2036-11-24'),
	('2036-11-25'),
	('2036-11-26'),
	('2036-11-27'),
	('2036-11-28'),
	('2036-11-29'),
	('2036-11-30'),
	('2036-12-01'),
	('2036-12-02'),
	('2036-12-03'),
	('2036-12-04'),
	('2036-12-05'),
	('2036-12-06'),
	('2036-12-07'),
	('2036-12-08'),
	('2036-12-09'),
	('2036-12-10'),
	('2036-12-11'),
	('2036-12-12'),
	('2036-12-13'),
	('2036-12-14'),
	('2036-12-15'),
	('2036-12-16'),
	('2036-12-17'),
	('2036-12-18'),
	('2036-12-19'),
	('2036-12-20'),
	('2036-12-21'),
	('2036-12-22'),
	('2036-12-23'),
	('2036-12-24'),
	('2036-12-25'),
	('2036-12-26'),
	('2036-12-27'),
	('2036-12-28'),
	('2036-12-29'),
	('2036-12-30'),
	('2036-12-31'),
	('2037-01-01'),
	('2037-01-02'),
	('2037-01-03'),
	('2037-01-04'),
	('2037-01-05'),
	('2037-01-06'),
	('2037-01-07'),
	('2037-01-08'),
	('2037-01-09'),
	('2037-01-10'),
	('2037-01-11'),
	('2037-01-12'),
	('2037-01-13'),
	('2037-01-14'),
	('2037-01-15'),
	('2037-01-16'),
	('2037-01-17'),
	('2037-01-18'),
	('2037-01-19'),
	('2037-01-20'),
	('2037-01-21'),
	('2037-01-22'),
	('2037-01-23'),
	('2037-01-24'),
	('2037-01-25'),
	('2037-01-26'),
	('2037-01-27'),
	('2037-01-28'),
	('2037-01-29'),
	('2037-01-30'),
	('2037-01-31'),
	('2037-02-01'),
	('2037-02-02'),
	('2037-02-03'),
	('2037-02-04'),
	('2037-02-05'),
	('2037-02-06'),
	('2037-02-07'),
	('2037-02-08'),
	('2037-02-09'),
	('2037-02-10'),
	('2037-02-11'),
	('2037-02-12'),
	('2037-02-13'),
	('2037-02-14'),
	('2037-02-15'),
	('2037-02-16'),
	('2037-02-17'),
	('2037-02-18'),
	('2037-02-19'),
	('2037-02-20'),
	('2037-02-21'),
	('2037-02-22'),
	('2037-02-23'),
	('2037-02-24'),
	('2037-02-25'),
	('2037-02-26'),
	('2037-02-27'),
	('2037-02-28'),
	('2037-03-01'),
	('2037-03-02'),
	('2037-03-03'),
	('2037-03-04'),
	('2037-03-05'),
	('2037-03-06'),
	('2037-03-07'),
	('2037-03-08'),
	('2037-03-09'),
	('2037-03-10'),
	('2037-03-11'),
	('2037-03-12'),
	('2037-03-13'),
	('2037-03-14'),
	('2037-03-15'),
	('2037-03-16'),
	('2037-03-17'),
	('2037-03-18'),
	('2037-03-19'),
	('2037-03-20'),
	('2037-03-21'),
	('2037-03-22'),
	('2037-03-23'),
	('2037-03-24'),
	('2037-03-25'),
	('2037-03-26'),
	('2037-03-27'),
	('2037-03-28'),
	('2037-03-29'),
	('2037-03-30'),
	('2037-03-31'),
	('2037-04-01'),
	('2037-04-02'),
	('2037-04-03'),
	('2037-04-04'),
	('2037-04-05'),
	('2037-04-06'),
	('2037-04-07'),
	('2037-04-08'),
	('2037-04-09'),
	('2037-04-10'),
	('2037-04-11'),
	('2037-04-12'),
	('2037-04-13'),
	('2037-04-14'),
	('2037-04-15'),
	('2037-04-16'),
	('2037-04-17'),
	('2037-04-18'),
	('2037-04-19'),
	('2037-04-20'),
	('2037-04-21'),
	('2037-04-22'),
	('2037-04-23'),
	('2037-04-24'),
	('2037-04-25'),
	('2037-04-26'),
	('2037-04-27'),
	('2037-04-28'),
	('2037-04-29'),
	('2037-04-30'),
	('2037-05-01'),
	('2037-05-02'),
	('2037-05-03'),
	('2037-05-04'),
	('2037-05-05'),
	('2037-05-06'),
	('2037-05-07'),
	('2037-05-08'),
	('2037-05-09'),
	('2037-05-10'),
	('2037-05-11'),
	('2037-05-12'),
	('2037-05-13'),
	('2037-05-14'),
	('2037-05-15'),
	('2037-05-16'),
	('2037-05-17'),
	('2037-05-18'),
	('2037-05-19'),
	('2037-05-20'),
	('2037-05-21'),
	('2037-05-22'),
	('2037-05-23'),
	('2037-05-24'),
	('2037-05-25'),
	('2037-05-26'),
	('2037-05-27'),
	('2037-05-28'),
	('2037-05-29'),
	('2037-05-30'),
	('2037-05-31'),
	('2037-06-01'),
	('2037-06-02'),
	('2037-06-03'),
	('2037-06-04'),
	('2037-06-05'),
	('2037-06-06'),
	('2037-06-07'),
	('2037-06-08'),
	('2037-06-09'),
	('2037-06-10'),
	('2037-06-11'),
	('2037-06-12'),
	('2037-06-13'),
	('2037-06-14'),
	('2037-06-15'),
	('2037-06-16'),
	('2037-06-17'),
	('2037-06-18'),
	('2037-06-19'),
	('2037-06-20'),
	('2037-06-21'),
	('2037-06-22'),
	('2037-06-23'),
	('2037-06-24'),
	('2037-06-25'),
	('2037-06-26'),
	('2037-06-27'),
	('2037-06-28'),
	('2037-06-29'),
	('2037-06-30'),
	('2037-07-01'),
	('2037-07-02'),
	('2037-07-03'),
	('2037-07-04'),
	('2037-07-05'),
	('2037-07-06'),
	('2037-07-07'),
	('2037-07-08'),
	('2037-07-09'),
	('2037-07-10'),
	('2037-07-11'),
	('2037-07-12'),
	('2037-07-13'),
	('2037-07-14'),
	('2037-07-15'),
	('2037-07-16'),
	('2037-07-17'),
	('2037-07-18'),
	('2037-07-19'),
	('2037-07-20'),
	('2037-07-21'),
	('2037-07-22'),
	('2037-07-23'),
	('2037-07-24'),
	('2037-07-25'),
	('2037-07-26'),
	('2037-07-27'),
	('2037-07-28'),
	('2037-07-29'),
	('2037-07-30'),
	('2037-07-31'),
	('2037-08-01'),
	('2037-08-02'),
	('2037-08-03'),
	('2037-08-04'),
	('2037-08-05'),
	('2037-08-06'),
	('2037-08-07'),
	('2037-08-08'),
	('2037-08-09'),
	('2037-08-10'),
	('2037-08-11'),
	('2037-08-12'),
	('2037-08-13'),
	('2037-08-14'),
	('2037-08-15'),
	('2037-08-16'),
	('2037-08-17'),
	('2037-08-18'),
	('2037-08-19'),
	('2037-08-20'),
	('2037-08-21'),
	('2037-08-22'),
	('2037-08-23'),
	('2037-08-24'),
	('2037-08-25'),
	('2037-08-26'),
	('2037-08-27'),
	('2037-08-28'),
	('2037-08-29'),
	('2037-08-30'),
	('2037-08-31'),
	('2037-09-01'),
	('2037-09-02'),
	('2037-09-03'),
	('2037-09-04'),
	('2037-09-05'),
	('2037-09-06'),
	('2037-09-07'),
	('2037-09-08'),
	('2037-09-09'),
	('2037-09-10'),
	('2037-09-11'),
	('2037-09-12'),
	('2037-09-13'),
	('2037-09-14'),
	('2037-09-15'),
	('2037-09-16'),
	('2037-09-17'),
	('2037-09-18'),
	('2037-09-19'),
	('2037-09-20'),
	('2037-09-21'),
	('2037-09-22'),
	('2037-09-23'),
	('2037-09-24'),
	('2037-09-25'),
	('2037-09-26'),
	('2037-09-27'),
	('2037-09-28'),
	('2037-09-29'),
	('2037-09-30'),
	('2037-10-01'),
	('2037-10-02'),
	('2037-10-03'),
	('2037-10-04'),
	('2037-10-05'),
	('2037-10-06'),
	('2037-10-07'),
	('2037-10-08'),
	('2037-10-09'),
	('2037-10-10'),
	('2037-10-11'),
	('2037-10-12'),
	('2037-10-13'),
	('2037-10-14'),
	('2037-10-15'),
	('2037-10-16'),
	('2037-10-17'),
	('2037-10-18'),
	('2037-10-19'),
	('2037-10-20'),
	('2037-10-21'),
	('2037-10-22'),
	('2037-10-23'),
	('2037-10-24'),
	('2037-10-25'),
	('2037-10-26'),
	('2037-10-27'),
	('2037-10-28'),
	('2037-10-29'),
	('2037-10-30'),
	('2037-10-31'),
	('2037-11-01'),
	('2037-11-02'),
	('2037-11-03'),
	('2037-11-04'),
	('2037-11-05'),
	('2037-11-06'),
	('2037-11-07'),
	('2037-11-08'),
	('2037-11-09'),
	('2037-11-10'),
	('2037-11-11'),
	('2037-11-12'),
	('2037-11-13'),
	('2037-11-14'),
	('2037-11-15'),
	('2037-11-16'),
	('2037-11-17'),
	('2037-11-18'),
	('2037-11-19'),
	('2037-11-20'),
	('2037-11-21'),
	('2037-11-22'),
	('2037-11-23'),
	('2037-11-24'),
	('2037-11-25'),
	('2037-11-26'),
	('2037-11-27'),
	('2037-11-28'),
	('2037-11-29'),
	('2037-11-30'),
	('2037-12-01'),
	('2037-12-02'),
	('2037-12-03'),
	('2037-12-04'),
	('2037-12-05'),
	('2037-12-06'),
	('2037-12-07'),
	('2037-12-08'),
	('2037-12-09'),
	('2037-12-10'),
	('2037-12-11'),
	('2037-12-12'),
	('2037-12-13'),
	('2037-12-14'),
	('2037-12-15'),
	('2037-12-16'),
	('2037-12-17'),
	('2037-12-18'),
	('2037-12-19'),
	('2037-12-20'),
	('2037-12-21'),
	('2037-12-22'),
	('2037-12-23'),
	('2037-12-24'),
	('2037-12-25'),
	('2037-12-26'),
	('2037-12-27'),
	('2037-12-28'),
	('2037-12-29'),
	('2037-12-30'),
	('2037-12-31'),
	('2038-01-01'),
	('2038-01-02'),
	('2038-01-03'),
	('2038-01-04'),
	('2038-01-05'),
	('2038-01-06'),
	('2038-01-07'),
	('2038-01-08'),
	('2038-01-09'),
	('2038-01-10'),
	('2038-01-11'),
	('2038-01-12'),
	('2038-01-13'),
	('2038-01-14'),
	('2038-01-15'),
	('2038-01-16'),
	('2038-01-17'),
	('2038-01-18'),
	('2038-01-19'),
	('2038-01-20'),
	('2038-01-21'),
	('2038-01-22'),
	('2038-01-23'),
	('2038-01-24'),
	('2038-01-25'),
	('2038-01-26'),
	('2038-01-27'),
	('2038-01-28'),
	('2038-01-29'),
	('2038-01-30'),
	('2038-01-31'),
	('2038-02-01'),
	('2038-02-02'),
	('2038-02-03'),
	('2038-02-04'),
	('2038-02-05'),
	('2038-02-06'),
	('2038-02-07'),
	('2038-02-08'),
	('2038-02-09'),
	('2038-02-10'),
	('2038-02-11'),
	('2038-02-12'),
	('2038-02-13'),
	('2038-02-14'),
	('2038-02-15'),
	('2038-02-16'),
	('2038-02-17'),
	('2038-02-18'),
	('2038-02-19'),
	('2038-02-20'),
	('2038-02-21'),
	('2038-02-22'),
	('2038-02-23'),
	('2038-02-24'),
	('2038-02-25'),
	('2038-02-26'),
	('2038-02-27'),
	('2038-02-28'),
	('2038-03-01'),
	('2038-03-02'),
	('2038-03-03'),
	('2038-03-04'),
	('2038-03-05'),
	('2038-03-06'),
	('2038-03-07'),
	('2038-03-08'),
	('2038-03-09'),
	('2038-03-10'),
	('2038-03-11'),
	('2038-03-12'),
	('2038-03-13'),
	('2038-03-14'),
	('2038-03-15'),
	('2038-03-16'),
	('2038-03-17'),
	('2038-03-18'),
	('2038-03-19'),
	('2038-03-20'),
	('2038-03-21'),
	('2038-03-22'),
	('2038-03-23'),
	('2038-03-24'),
	('2038-03-25'),
	('2038-03-26'),
	('2038-03-27'),
	('2038-03-28'),
	('2038-03-29'),
	('2038-03-30'),
	('2038-03-31'),
	('2038-04-01'),
	('2038-04-02'),
	('2038-04-03'),
	('2038-04-04'),
	('2038-04-05'),
	('2038-04-06'),
	('2038-04-07'),
	('2038-04-08'),
	('2038-04-09'),
	('2038-04-10'),
	('2038-04-11'),
	('2038-04-12'),
	('2038-04-13'),
	('2038-04-14'),
	('2038-04-15'),
	('2038-04-16'),
	('2038-04-17'),
	('2038-04-18'),
	('2038-04-19'),
	('2038-04-20'),
	('2038-04-21'),
	('2038-04-22'),
	('2038-04-23'),
	('2038-04-24'),
	('2038-04-25'),
	('2038-04-26'),
	('2038-04-27'),
	('2038-04-28'),
	('2038-04-29'),
	('2038-04-30'),
	('2038-05-01'),
	('2038-05-02'),
	('2038-05-03'),
	('2038-05-04'),
	('2038-05-05'),
	('2038-05-06'),
	('2038-05-07'),
	('2038-05-08'),
	('2038-05-09'),
	('2038-05-10'),
	('2038-05-11'),
	('2038-05-12'),
	('2038-05-13'),
	('2038-05-14'),
	('2038-05-15'),
	('2038-05-16'),
	('2038-05-17'),
	('2038-05-18'),
	('2038-05-19'),
	('2038-05-20'),
	('2038-05-21'),
	('2038-05-22'),
	('2038-05-23'),
	('2038-05-24'),
	('2038-05-25'),
	('2038-05-26'),
	('2038-05-27'),
	('2038-05-28'),
	('2038-05-29'),
	('2038-05-30'),
	('2038-05-31'),
	('2038-06-01'),
	('2038-06-02'),
	('2038-06-03'),
	('2038-06-04'),
	('2038-06-05'),
	('2038-06-06'),
	('2038-06-07'),
	('2038-06-08'),
	('2038-06-09'),
	('2038-06-10'),
	('2038-06-11'),
	('2038-06-12'),
	('2038-06-13'),
	('2038-06-14'),
	('2038-06-15'),
	('2038-06-16'),
	('2038-06-17'),
	('2038-06-18'),
	('2038-06-19'),
	('2038-06-20'),
	('2038-06-21'),
	('2038-06-22'),
	('2038-06-23'),
	('2038-06-24'),
	('2038-06-25'),
	('2038-06-26'),
	('2038-06-27'),
	('2038-06-28'),
	('2038-06-29'),
	('2038-06-30'),
	('2038-07-01'),
	('2038-07-02'),
	('2038-07-03'),
	('2038-07-04'),
	('2038-07-05'),
	('2038-07-06'),
	('2038-07-07'),
	('2038-07-08'),
	('2038-07-09'),
	('2038-07-10'),
	('2038-07-11'),
	('2038-07-12'),
	('2038-07-13'),
	('2038-07-14'),
	('2038-07-15'),
	('2038-07-16'),
	('2038-07-17'),
	('2038-07-18'),
	('2038-07-19'),
	('2038-07-20'),
	('2038-07-21'),
	('2038-07-22'),
	('2038-07-23'),
	('2038-07-24'),
	('2038-07-25'),
	('2038-07-26'),
	('2038-07-27'),
	('2038-07-28'),
	('2038-07-29'),
	('2038-07-30'),
	('2038-07-31'),
	('2038-08-01'),
	('2038-08-02'),
	('2038-08-03'),
	('2038-08-04'),
	('2038-08-05'),
	('2038-08-06'),
	('2038-08-07'),
	('2038-08-08'),
	('2038-08-09'),
	('2038-08-10'),
	('2038-08-11'),
	('2038-08-12'),
	('2038-08-13'),
	('2038-08-14'),
	('2038-08-15'),
	('2038-08-16'),
	('2038-08-17'),
	('2038-08-18'),
	('2038-08-19'),
	('2038-08-20'),
	('2038-08-21'),
	('2038-08-22'),
	('2038-08-23'),
	('2038-08-24'),
	('2038-08-25'),
	('2038-08-26'),
	('2038-08-27'),
	('2038-08-28'),
	('2038-08-29'),
	('2038-08-30'),
	('2038-08-31'),
	('2038-09-01'),
	('2038-09-02'),
	('2038-09-03'),
	('2038-09-04'),
	('2038-09-05'),
	('2038-09-06'),
	('2038-09-07'),
	('2038-09-08'),
	('2038-09-09'),
	('2038-09-10'),
	('2038-09-11'),
	('2038-09-12'),
	('2038-09-13'),
	('2038-09-14'),
	('2038-09-15'),
	('2038-09-16'),
	('2038-09-17'),
	('2038-09-18'),
	('2038-09-19'),
	('2038-09-20'),
	('2038-09-21'),
	('2038-09-22'),
	('2038-09-23'),
	('2038-09-24'),
	('2038-09-25'),
	('2038-09-26'),
	('2038-09-27'),
	('2038-09-28'),
	('2038-09-29'),
	('2038-09-30'),
	('2038-10-01'),
	('2038-10-02'),
	('2038-10-03'),
	('2038-10-04'),
	('2038-10-05'),
	('2038-10-06'),
	('2038-10-07'),
	('2038-10-08'),
	('2038-10-09'),
	('2038-10-10'),
	('2038-10-11'),
	('2038-10-12'),
	('2038-10-13'),
	('2038-10-14'),
	('2038-10-15'),
	('2038-10-16'),
	('2038-10-17'),
	('2038-10-18'),
	('2038-10-19'),
	('2038-10-20'),
	('2038-10-21'),
	('2038-10-22'),
	('2038-10-23'),
	('2038-10-24'),
	('2038-10-25'),
	('2038-10-26'),
	('2038-10-27'),
	('2038-10-28'),
	('2038-10-29'),
	('2038-10-30'),
	('2038-10-31'),
	('2038-11-01'),
	('2038-11-02'),
	('2038-11-03'),
	('2038-11-04'),
	('2038-11-05'),
	('2038-11-06'),
	('2038-11-07'),
	('2038-11-08'),
	('2038-11-09'),
	('2038-11-10'),
	('2038-11-11'),
	('2038-11-12'),
	('2038-11-13'),
	('2038-11-14'),
	('2038-11-15'),
	('2038-11-16'),
	('2038-11-17'),
	('2038-11-18'),
	('2038-11-19'),
	('2038-11-20'),
	('2038-11-21'),
	('2038-11-22'),
	('2038-11-23'),
	('2038-11-24'),
	('2038-11-25'),
	('2038-11-26'),
	('2038-11-27'),
	('2038-11-28'),
	('2038-11-29'),
	('2038-11-30'),
	('2038-12-01'),
	('2038-12-02'),
	('2038-12-03'),
	('2038-12-04'),
	('2038-12-05'),
	('2038-12-06'),
	('2038-12-07'),
	('2038-12-08'),
	('2038-12-09'),
	('2038-12-10'),
	('2038-12-11'),
	('2038-12-12'),
	('2038-12-13'),
	('2038-12-14'),
	('2038-12-15'),
	('2038-12-16'),
	('2038-12-17'),
	('2038-12-18'),
	('2038-12-19'),
	('2038-12-20'),
	('2038-12-21'),
	('2038-12-22'),
	('2038-12-23'),
	('2038-12-24'),
	('2038-12-25'),
	('2038-12-26'),
	('2038-12-27'),
	('2038-12-28'),
	('2038-12-29'),
	('2038-12-30'),
	('2038-12-31'),
	('2039-01-01'),
	('2039-01-02'),
	('2039-01-03'),
	('2039-01-04'),
	('2039-01-05'),
	('2039-01-06'),
	('2039-01-07'),
	('2039-01-08'),
	('2039-01-09'),
	('2039-01-10'),
	('2039-01-11'),
	('2039-01-12'),
	('2039-01-13'),
	('2039-01-14'),
	('2039-01-15'),
	('2039-01-16'),
	('2039-01-17'),
	('2039-01-18'),
	('2039-01-19'),
	('2039-01-20'),
	('2039-01-21'),
	('2039-01-22'),
	('2039-01-23'),
	('2039-01-24'),
	('2039-01-25'),
	('2039-01-26'),
	('2039-01-27'),
	('2039-01-28'),
	('2039-01-29'),
	('2039-01-30'),
	('2039-01-31'),
	('2039-02-01'),
	('2039-02-02'),
	('2039-02-03'),
	('2039-02-04'),
	('2039-02-05'),
	('2039-02-06'),
	('2039-02-07'),
	('2039-02-08'),
	('2039-02-09'),
	('2039-02-10'),
	('2039-02-11'),
	('2039-02-12'),
	('2039-02-13'),
	('2039-02-14'),
	('2039-02-15'),
	('2039-02-16'),
	('2039-02-17'),
	('2039-02-18'),
	('2039-02-19'),
	('2039-02-20'),
	('2039-02-21'),
	('2039-02-22'),
	('2039-02-23'),
	('2039-02-24'),
	('2039-02-25'),
	('2039-02-26'),
	('2039-02-27'),
	('2039-02-28'),
	('2039-03-01'),
	('2039-03-02'),
	('2039-03-03'),
	('2039-03-04'),
	('2039-03-05'),
	('2039-03-06'),
	('2039-03-07'),
	('2039-03-08'),
	('2039-03-09'),
	('2039-03-10'),
	('2039-03-11'),
	('2039-03-12'),
	('2039-03-13'),
	('2039-03-14'),
	('2039-03-15'),
	('2039-03-16'),
	('2039-03-17'),
	('2039-03-18'),
	('2039-03-19'),
	('2039-03-20'),
	('2039-03-21'),
	('2039-03-22'),
	('2039-03-23'),
	('2039-03-24'),
	('2039-03-25'),
	('2039-03-26'),
	('2039-03-27'),
	('2039-03-28'),
	('2039-03-29'),
	('2039-03-30'),
	('2039-03-31'),
	('2039-04-01'),
	('2039-04-02'),
	('2039-04-03'),
	('2039-04-04'),
	('2039-04-05'),
	('2039-04-06'),
	('2039-04-07'),
	('2039-04-08'),
	('2039-04-09'),
	('2039-04-10'),
	('2039-04-11'),
	('2039-04-12'),
	('2039-04-13'),
	('2039-04-14'),
	('2039-04-15'),
	('2039-04-16'),
	('2039-04-17'),
	('2039-04-18'),
	('2039-04-19'),
	('2039-04-20'),
	('2039-04-21'),
	('2039-04-22'),
	('2039-04-23'),
	('2039-04-24'),
	('2039-04-25'),
	('2039-04-26'),
	('2039-04-27'),
	('2039-04-28'),
	('2039-04-29'),
	('2039-04-30'),
	('2039-05-01'),
	('2039-05-02'),
	('2039-05-03'),
	('2039-05-04'),
	('2039-05-05'),
	('2039-05-06'),
	('2039-05-07'),
	('2039-05-08'),
	('2039-05-09'),
	('2039-05-10'),
	('2039-05-11'),
	('2039-05-12'),
	('2039-05-13'),
	('2039-05-14'),
	('2039-05-15'),
	('2039-05-16'),
	('2039-05-17'),
	('2039-05-18'),
	('2039-05-19'),
	('2039-05-20'),
	('2039-05-21'),
	('2039-05-22'),
	('2039-05-23'),
	('2039-05-24'),
	('2039-05-25'),
	('2039-05-26'),
	('2039-05-27'),
	('2039-05-28'),
	('2039-05-29'),
	('2039-05-30'),
	('2039-05-31'),
	('2039-06-01'),
	('2039-06-02'),
	('2039-06-03'),
	('2039-06-04'),
	('2039-06-05'),
	('2039-06-06'),
	('2039-06-07'),
	('2039-06-08'),
	('2039-06-09'),
	('2039-06-10'),
	('2039-06-11'),
	('2039-06-12'),
	('2039-06-13'),
	('2039-06-14'),
	('2039-06-15'),
	('2039-06-16'),
	('2039-06-17'),
	('2039-06-18'),
	('2039-06-19'),
	('2039-06-20'),
	('2039-06-21'),
	('2039-06-22'),
	('2039-06-23'),
	('2039-06-24'),
	('2039-06-25'),
	('2039-06-26'),
	('2039-06-27'),
	('2039-06-28'),
	('2039-06-29'),
	('2039-06-30'),
	('2039-07-01'),
	('2039-07-02'),
	('2039-07-03'),
	('2039-07-04'),
	('2039-07-05'),
	('2039-07-06'),
	('2039-07-07'),
	('2039-07-08'),
	('2039-07-09'),
	('2039-07-10'),
	('2039-07-11'),
	('2039-07-12'),
	('2039-07-13'),
	('2039-07-14'),
	('2039-07-15'),
	('2039-07-16'),
	('2039-07-17'),
	('2039-07-18'),
	('2039-07-19'),
	('2039-07-20'),
	('2039-07-21'),
	('2039-07-22'),
	('2039-07-23'),
	('2039-07-24'),
	('2039-07-25'),
	('2039-07-26'),
	('2039-07-27'),
	('2039-07-28'),
	('2039-07-29'),
	('2039-07-30'),
	('2039-07-31'),
	('2039-08-01'),
	('2039-08-02'),
	('2039-08-03'),
	('2039-08-04'),
	('2039-08-05'),
	('2039-08-06'),
	('2039-08-07'),
	('2039-08-08'),
	('2039-08-09'),
	('2039-08-10'),
	('2039-08-11'),
	('2039-08-12'),
	('2039-08-13'),
	('2039-08-14'),
	('2039-08-15'),
	('2039-08-16'),
	('2039-08-17'),
	('2039-08-18'),
	('2039-08-19'),
	('2039-08-20'),
	('2039-08-21'),
	('2039-08-22'),
	('2039-08-23'),
	('2039-08-24'),
	('2039-08-25'),
	('2039-08-26'),
	('2039-08-27'),
	('2039-08-28'),
	('2039-08-29'),
	('2039-08-30'),
	('2039-08-31'),
	('2039-09-01'),
	('2039-09-02'),
	('2039-09-03'),
	('2039-09-04'),
	('2039-09-05'),
	('2039-09-06'),
	('2039-09-07'),
	('2039-09-08'),
	('2039-09-09'),
	('2039-09-10'),
	('2039-09-11'),
	('2039-09-12'),
	('2039-09-13'),
	('2039-09-14'),
	('2039-09-15'),
	('2039-09-16'),
	('2039-09-17'),
	('2039-09-18'),
	('2039-09-19'),
	('2039-09-20'),
	('2039-09-21'),
	('2039-09-22'),
	('2039-09-23'),
	('2039-09-24'),
	('2039-09-25'),
	('2039-09-26'),
	('2039-09-27'),
	('2039-09-28'),
	('2039-09-29'),
	('2039-09-30'),
	('2039-10-01'),
	('2039-10-02'),
	('2039-10-03'),
	('2039-10-04'),
	('2039-10-05'),
	('2039-10-06'),
	('2039-10-07'),
	('2039-10-08'),
	('2039-10-09'),
	('2039-10-10'),
	('2039-10-11'),
	('2039-10-12'),
	('2039-10-13'),
	('2039-10-14'),
	('2039-10-15'),
	('2039-10-16'),
	('2039-10-17'),
	('2039-10-18'),
	('2039-10-19'),
	('2039-10-20'),
	('2039-10-21'),
	('2039-10-22'),
	('2039-10-23'),
	('2039-10-24'),
	('2039-10-25'),
	('2039-10-26'),
	('2039-10-27'),
	('2039-10-28'),
	('2039-10-29'),
	('2039-10-30'),
	('2039-10-31'),
	('2039-11-01'),
	('2039-11-02'),
	('2039-11-03'),
	('2039-11-04'),
	('2039-11-05'),
	('2039-11-06'),
	('2039-11-07'),
	('2039-11-08'),
	('2039-11-09'),
	('2039-11-10'),
	('2039-11-11'),
	('2039-11-12'),
	('2039-11-13'),
	('2039-11-14'),
	('2039-11-15'),
	('2039-11-16'),
	('2039-11-17'),
	('2039-11-18'),
	('2039-11-19'),
	('2039-11-20'),
	('2039-11-21'),
	('2039-11-22'),
	('2039-11-23'),
	('2039-11-24'),
	('2039-11-25'),
	('2039-11-26'),
	('2039-11-27'),
	('2039-11-28'),
	('2039-11-29'),
	('2039-11-30'),
	('2039-12-01'),
	('2039-12-02'),
	('2039-12-03'),
	('2039-12-04'),
	('2039-12-05'),
	('2039-12-06'),
	('2039-12-07'),
	('2039-12-08'),
	('2039-12-09'),
	('2039-12-10'),
	('2039-12-11'),
	('2039-12-12'),
	('2039-12-13'),
	('2039-12-14'),
	('2039-12-15'),
	('2039-12-16'),
	('2039-12-17'),
	('2039-12-18'),
	('2039-12-19'),
	('2039-12-20'),
	('2039-12-21'),
	('2039-12-22'),
	('2039-12-23'),
	('2039-12-24'),
	('2039-12-25'),
	('2039-12-26'),
	('2039-12-27'),
	('2039-12-28'),
	('2039-12-29'),
	('2039-12-30'),
	('2039-12-31'),
	('2040-01-01'),
	('2040-01-02'),
	('2040-01-03'),
	('2040-01-04'),
	('2040-01-05'),
	('2040-01-06'),
	('2040-01-07'),
	('2040-01-08'),
	('2040-01-09'),
	('2040-01-10'),
	('2040-01-11'),
	('2040-01-12'),
	('2040-01-13'),
	('2040-01-14'),
	('2040-01-15'),
	('2040-01-16'),
	('2040-01-17'),
	('2040-01-18'),
	('2040-01-19'),
	('2040-01-20'),
	('2040-01-21'),
	('2040-01-22'),
	('2040-01-23'),
	('2040-01-24'),
	('2040-01-25'),
	('2040-01-26'),
	('2040-01-27'),
	('2040-01-28'),
	('2040-01-29'),
	('2040-01-30'),
	('2040-01-31'),
	('2040-02-01'),
	('2040-02-02'),
	('2040-02-03'),
	('2040-02-04'),
	('2040-02-05'),
	('2040-02-06'),
	('2040-02-07'),
	('2040-02-08'),
	('2040-02-09'),
	('2040-02-10'),
	('2040-02-11'),
	('2040-02-12'),
	('2040-02-13'),
	('2040-02-14'),
	('2040-02-15'),
	('2040-02-16'),
	('2040-02-17'),
	('2040-02-18'),
	('2040-02-19'),
	('2040-02-20'),
	('2040-02-21'),
	('2040-02-22'),
	('2040-02-23'),
	('2040-02-24'),
	('2040-02-25'),
	('2040-02-26'),
	('2040-02-27'),
	('2040-02-28'),
	('2040-02-29'),
	('2040-03-01'),
	('2040-03-02'),
	('2040-03-03'),
	('2040-03-04'),
	('2040-03-05'),
	('2040-03-06'),
	('2040-03-07'),
	('2040-03-08'),
	('2040-03-09'),
	('2040-03-10'),
	('2040-03-11'),
	('2040-03-12'),
	('2040-03-13'),
	('2040-03-14'),
	('2040-03-15'),
	('2040-03-16'),
	('2040-03-17'),
	('2040-03-18'),
	('2040-03-19'),
	('2040-03-20'),
	('2040-03-21'),
	('2040-03-22'),
	('2040-03-23'),
	('2040-03-24'),
	('2040-03-25'),
	('2040-03-26'),
	('2040-03-27'),
	('2040-03-28'),
	('2040-03-29'),
	('2040-03-30'),
	('2040-03-31'),
	('2040-04-01'),
	('2040-04-02'),
	('2040-04-03'),
	('2040-04-04'),
	('2040-04-05'),
	('2040-04-06'),
	('2040-04-07'),
	('2040-04-08'),
	('2040-04-09'),
	('2040-04-10'),
	('2040-04-11'),
	('2040-04-12'),
	('2040-04-13'),
	('2040-04-14'),
	('2040-04-15'),
	('2040-04-16'),
	('2040-04-17'),
	('2040-04-18'),
	('2040-04-19'),
	('2040-04-20'),
	('2040-04-21'),
	('2040-04-22'),
	('2040-04-23'),
	('2040-04-24'),
	('2040-04-25'),
	('2040-04-26'),
	('2040-04-27'),
	('2040-04-28'),
	('2040-04-29'),
	('2040-04-30'),
	('2040-05-01'),
	('2040-05-02'),
	('2040-05-03'),
	('2040-05-04'),
	('2040-05-05'),
	('2040-05-06'),
	('2040-05-07'),
	('2040-05-08'),
	('2040-05-09'),
	('2040-05-10'),
	('2040-05-11'),
	('2040-05-12'),
	('2040-05-13'),
	('2040-05-14'),
	('2040-05-15'),
	('2040-05-16'),
	('2040-05-17'),
	('2040-05-18'),
	('2040-05-19'),
	('2040-05-20'),
	('2040-05-21'),
	('2040-05-22'),
	('2040-05-23'),
	('2040-05-24'),
	('2040-05-25'),
	('2040-05-26'),
	('2040-05-27'),
	('2040-05-28'),
	('2040-05-29'),
	('2040-05-30'),
	('2040-05-31'),
	('2040-06-01'),
	('2040-06-02'),
	('2040-06-03'),
	('2040-06-04'),
	('2040-06-05'),
	('2040-06-06'),
	('2040-06-07'),
	('2040-06-08'),
	('2040-06-09'),
	('2040-06-10'),
	('2040-06-11'),
	('2040-06-12'),
	('2040-06-13'),
	('2040-06-14'),
	('2040-06-15'),
	('2040-06-16'),
	('2040-06-17'),
	('2040-06-18'),
	('2040-06-19'),
	('2040-06-20'),
	('2040-06-21'),
	('2040-06-22'),
	('2040-06-23'),
	('2040-06-24'),
	('2040-06-25'),
	('2040-06-26'),
	('2040-06-27'),
	('2040-06-28'),
	('2040-06-29'),
	('2040-06-30'),
	('2040-07-01'),
	('2040-07-02'),
	('2040-07-03'),
	('2040-07-04'),
	('2040-07-05'),
	('2040-07-06'),
	('2040-07-07'),
	('2040-07-08'),
	('2040-07-09'),
	('2040-07-10'),
	('2040-07-11'),
	('2040-07-12'),
	('2040-07-13'),
	('2040-07-14'),
	('2040-07-15'),
	('2040-07-16'),
	('2040-07-17'),
	('2040-07-18'),
	('2040-07-19'),
	('2040-07-20'),
	('2040-07-21'),
	('2040-07-22'),
	('2040-07-23'),
	('2040-07-24'),
	('2040-07-25'),
	('2040-07-26'),
	('2040-07-27'),
	('2040-07-28'),
	('2040-07-29'),
	('2040-07-30'),
	('2040-07-31'),
	('2040-08-01'),
	('2040-08-02'),
	('2040-08-03'),
	('2040-08-04'),
	('2040-08-05'),
	('2040-08-06'),
	('2040-08-07'),
	('2040-08-08'),
	('2040-08-09'),
	('2040-08-10'),
	('2040-08-11'),
	('2040-08-12'),
	('2040-08-13'),
	('2040-08-14'),
	('2040-08-15'),
	('2040-08-16'),
	('2040-08-17'),
	('2040-08-18'),
	('2040-08-19'),
	('2040-08-20'),
	('2040-08-21'),
	('2040-08-22'),
	('2040-08-23'),
	('2040-08-24'),
	('2040-08-25'),
	('2040-08-26'),
	('2040-08-27'),
	('2040-08-28'),
	('2040-08-29'),
	('2040-08-30'),
	('2040-08-31'),
	('2040-09-01'),
	('2040-09-02'),
	('2040-09-03'),
	('2040-09-04'),
	('2040-09-05'),
	('2040-09-06'),
	('2040-09-07'),
	('2040-09-08'),
	('2040-09-09'),
	('2040-09-10'),
	('2040-09-11'),
	('2040-09-12'),
	('2040-09-13'),
	('2040-09-14'),
	('2040-09-15'),
	('2040-09-16'),
	('2040-09-17'),
	('2040-09-18'),
	('2040-09-19'),
	('2040-09-20'),
	('2040-09-21'),
	('2040-09-22'),
	('2040-09-23'),
	('2040-09-24'),
	('2040-09-25'),
	('2040-09-26'),
	('2040-09-27'),
	('2040-09-28'),
	('2040-09-29'),
	('2040-09-30'),
	('2040-10-01'),
	('2040-10-02'),
	('2040-10-03'),
	('2040-10-04'),
	('2040-10-05'),
	('2040-10-06'),
	('2040-10-07'),
	('2040-10-08'),
	('2040-10-09'),
	('2040-10-10'),
	('2040-10-11'),
	('2040-10-12'),
	('2040-10-13'),
	('2040-10-14'),
	('2040-10-15'),
	('2040-10-16'),
	('2040-10-17'),
	('2040-10-18'),
	('2040-10-19'),
	('2040-10-20'),
	('2040-10-21'),
	('2040-10-22'),
	('2040-10-23'),
	('2040-10-24'),
	('2040-10-25'),
	('2040-10-26'),
	('2040-10-27'),
	('2040-10-28'),
	('2040-10-29'),
	('2040-10-30'),
	('2040-10-31'),
	('2040-11-01'),
	('2040-11-02'),
	('2040-11-03'),
	('2040-11-04'),
	('2040-11-05'),
	('2040-11-06'),
	('2040-11-07'),
	('2040-11-08'),
	('2040-11-09'),
	('2040-11-10'),
	('2040-11-11'),
	('2040-11-12'),
	('2040-11-13'),
	('2040-11-14'),
	('2040-11-15'),
	('2040-11-16'),
	('2040-11-17'),
	('2040-11-18'),
	('2040-11-19'),
	('2040-11-20'),
	('2040-11-21'),
	('2040-11-22'),
	('2040-11-23'),
	('2040-11-24'),
	('2040-11-25'),
	('2040-11-26'),
	('2040-11-27'),
	('2040-11-28'),
	('2040-11-29'),
	('2040-11-30'),
	('2040-12-01'),
	('2040-12-02'),
	('2040-12-03'),
	('2040-12-04'),
	('2040-12-05'),
	('2040-12-06'),
	('2040-12-07'),
	('2040-12-08'),
	('2040-12-09'),
	('2040-12-10'),
	('2040-12-11'),
	('2040-12-12'),
	('2040-12-13'),
	('2040-12-14'),
	('2040-12-15'),
	('2040-12-16'),
	('2040-12-17'),
	('2040-12-18'),
	('2040-12-19'),
	('2040-12-20'),
	('2040-12-21'),
	('2040-12-22'),
	('2040-12-23'),
	('2040-12-24'),
	('2040-12-25'),
	('2040-12-26'),
	('2040-12-27'),
	('2040-12-28'),
	('2040-12-29'),
	('2040-12-30'),
	('2040-12-31'),
	('2041-01-01'),
	('2041-01-02'),
	('2041-01-03'),
	('2041-01-04'),
	('2041-01-05'),
	('2041-01-06'),
	('2041-01-07'),
	('2041-01-08'),
	('2041-01-09'),
	('2041-01-10'),
	('2041-01-11'),
	('2041-01-12'),
	('2041-01-13'),
	('2041-01-14'),
	('2041-01-15'),
	('2041-01-16'),
	('2041-01-17'),
	('2041-01-18'),
	('2041-01-19'),
	('2041-01-20'),
	('2041-01-21'),
	('2041-01-22'),
	('2041-01-23'),
	('2041-01-24'),
	('2041-01-25'),
	('2041-01-26'),
	('2041-01-27'),
	('2041-01-28'),
	('2041-01-29'),
	('2041-01-30'),
	('2041-01-31'),
	('2041-02-01'),
	('2041-02-02'),
	('2041-02-03'),
	('2041-02-04'),
	('2041-02-05'),
	('2041-02-06'),
	('2041-02-07'),
	('2041-02-08'),
	('2041-02-09'),
	('2041-02-10'),
	('2041-02-11'),
	('2041-02-12'),
	('2041-02-13'),
	('2041-02-14'),
	('2041-02-15'),
	('2041-02-16'),
	('2041-02-17'),
	('2041-02-18'),
	('2041-02-19'),
	('2041-02-20'),
	('2041-02-21'),
	('2041-02-22'),
	('2041-02-23'),
	('2041-02-24'),
	('2041-02-25'),
	('2041-02-26'),
	('2041-02-27'),
	('2041-02-28'),
	('2041-03-01'),
	('2041-03-02'),
	('2041-03-03'),
	('2041-03-04'),
	('2041-03-05'),
	('2041-03-06'),
	('2041-03-07'),
	('2041-03-08'),
	('2041-03-09'),
	('2041-03-10'),
	('2041-03-11'),
	('2041-03-12'),
	('2041-03-13'),
	('2041-03-14'),
	('2041-03-15'),
	('2041-03-16'),
	('2041-03-17'),
	('2041-03-18'),
	('2041-03-19'),
	('2041-03-20'),
	('2041-03-21'),
	('2041-03-22'),
	('2041-03-23'),
	('2041-03-24'),
	('2041-03-25'),
	('2041-03-26'),
	('2041-03-27'),
	('2041-03-28'),
	('2041-03-29'),
	('2041-03-30'),
	('2041-03-31'),
	('2041-04-01'),
	('2041-04-02'),
	('2041-04-03'),
	('2041-04-04'),
	('2041-04-05'),
	('2041-04-06'),
	('2041-04-07'),
	('2041-04-08'),
	('2041-04-09'),
	('2041-04-10'),
	('2041-04-11'),
	('2041-04-12'),
	('2041-04-13'),
	('2041-04-14'),
	('2041-04-15'),
	('2041-04-16'),
	('2041-04-17'),
	('2041-04-18'),
	('2041-04-19'),
	('2041-04-20'),
	('2041-04-21'),
	('2041-04-22'),
	('2041-04-23'),
	('2041-04-24'),
	('2041-04-25'),
	('2041-04-26'),
	('2041-04-27'),
	('2041-04-28'),
	('2041-04-29'),
	('2041-04-30'),
	('2041-05-01'),
	('2041-05-02'),
	('2041-05-03'),
	('2041-05-04'),
	('2041-05-05'),
	('2041-05-06'),
	('2041-05-07'),
	('2041-05-08'),
	('2041-05-09'),
	('2041-05-10'),
	('2041-05-11'),
	('2041-05-12'),
	('2041-05-13'),
	('2041-05-14'),
	('2041-05-15'),
	('2041-05-16'),
	('2041-05-17'),
	('2041-05-18'),
	('2041-05-19'),
	('2041-05-20'),
	('2041-05-21'),
	('2041-05-22'),
	('2041-05-23'),
	('2041-05-24'),
	('2041-05-25'),
	('2041-05-26'),
	('2041-05-27'),
	('2041-05-28'),
	('2041-05-29'),
	('2041-05-30'),
	('2041-05-31'),
	('2041-06-01'),
	('2041-06-02'),
	('2041-06-03'),
	('2041-06-04'),
	('2041-06-05'),
	('2041-06-06'),
	('2041-06-07'),
	('2041-06-08'),
	('2041-06-09'),
	('2041-06-10'),
	('2041-06-11'),
	('2041-06-12'),
	('2041-06-13'),
	('2041-06-14'),
	('2041-06-15'),
	('2041-06-16'),
	('2041-06-17'),
	('2041-06-18'),
	('2041-06-19'),
	('2041-06-20'),
	('2041-06-21'),
	('2041-06-22'),
	('2041-06-23'),
	('2041-06-24'),
	('2041-06-25'),
	('2041-06-26'),
	('2041-06-27'),
	('2041-06-28'),
	('2041-06-29'),
	('2041-06-30'),
	('2041-07-01'),
	('2041-07-02'),
	('2041-07-03'),
	('2041-07-04'),
	('2041-07-05'),
	('2041-07-06'),
	('2041-07-07'),
	('2041-07-08'),
	('2041-07-09'),
	('2041-07-10'),
	('2041-07-11'),
	('2041-07-12'),
	('2041-07-13'),
	('2041-07-14'),
	('2041-07-15'),
	('2041-07-16'),
	('2041-07-17'),
	('2041-07-18'),
	('2041-07-19'),
	('2041-07-20'),
	('2041-07-21'),
	('2041-07-22'),
	('2041-07-23'),
	('2041-07-24'),
	('2041-07-25'),
	('2041-07-26'),
	('2041-07-27'),
	('2041-07-28'),
	('2041-07-29'),
	('2041-07-30'),
	('2041-07-31'),
	('2041-08-01'),
	('2041-08-02'),
	('2041-08-03'),
	('2041-08-04'),
	('2041-08-05'),
	('2041-08-06'),
	('2041-08-07'),
	('2041-08-08'),
	('2041-08-09'),
	('2041-08-10'),
	('2041-08-11'),
	('2041-08-12'),
	('2041-08-13'),
	('2041-08-14'),
	('2041-08-15'),
	('2041-08-16'),
	('2041-08-17'),
	('2041-08-18'),
	('2041-08-19'),
	('2041-08-20'),
	('2041-08-21'),
	('2041-08-22'),
	('2041-08-23'),
	('2041-08-24'),
	('2041-08-25'),
	('2041-08-26'),
	('2041-08-27'),
	('2041-08-28'),
	('2041-08-29'),
	('2041-08-30'),
	('2041-08-31'),
	('2041-09-01'),
	('2041-09-02'),
	('2041-09-03'),
	('2041-09-04'),
	('2041-09-05'),
	('2041-09-06'),
	('2041-09-07'),
	('2041-09-08'),
	('2041-09-09'),
	('2041-09-10'),
	('2041-09-11'),
	('2041-09-12'),
	('2041-09-13'),
	('2041-09-14'),
	('2041-09-15'),
	('2041-09-16'),
	('2041-09-17'),
	('2041-09-18'),
	('2041-09-19'),
	('2041-09-20'),
	('2041-09-21'),
	('2041-09-22'),
	('2041-09-23'),
	('2041-09-24'),
	('2041-09-25'),
	('2041-09-26'),
	('2041-09-27'),
	('2041-09-28'),
	('2041-09-29'),
	('2041-09-30'),
	('2041-10-01'),
	('2041-10-02'),
	('2041-10-03'),
	('2041-10-04'),
	('2041-10-05'),
	('2041-10-06'),
	('2041-10-07'),
	('2041-10-08'),
	('2041-10-09'),
	('2041-10-10'),
	('2041-10-11'),
	('2041-10-12'),
	('2041-10-13'),
	('2041-10-14'),
	('2041-10-15'),
	('2041-10-16'),
	('2041-10-17'),
	('2041-10-18'),
	('2041-10-19'),
	('2041-10-20'),
	('2041-10-21'),
	('2041-10-22'),
	('2041-10-23'),
	('2041-10-24'),
	('2041-10-25'),
	('2041-10-26'),
	('2041-10-27'),
	('2041-10-28'),
	('2041-10-29'),
	('2041-10-30'),
	('2041-10-31'),
	('2041-11-01'),
	('2041-11-02'),
	('2041-11-03'),
	('2041-11-04'),
	('2041-11-05'),
	('2041-11-06'),
	('2041-11-07'),
	('2041-11-08'),
	('2041-11-09'),
	('2041-11-10'),
	('2041-11-11'),
	('2041-11-12'),
	('2041-11-13'),
	('2041-11-14'),
	('2041-11-15'),
	('2041-11-16'),
	('2041-11-17'),
	('2041-11-18'),
	('2041-11-19'),
	('2041-11-20'),
	('2041-11-21'),
	('2041-11-22'),
	('2041-11-23'),
	('2041-11-24'),
	('2041-11-25'),
	('2041-11-26'),
	('2041-11-27'),
	('2041-11-28'),
	('2041-11-29'),
	('2041-11-30'),
	('2041-12-01'),
	('2041-12-02'),
	('2041-12-03'),
	('2041-12-04'),
	('2041-12-05'),
	('2041-12-06'),
	('2041-12-07'),
	('2041-12-08'),
	('2041-12-09'),
	('2041-12-10'),
	('2041-12-11'),
	('2041-12-12'),
	('2041-12-13'),
	('2041-12-14'),
	('2041-12-15'),
	('2041-12-16'),
	('2041-12-17'),
	('2041-12-18'),
	('2041-12-19'),
	('2041-12-20'),
	('2041-12-21'),
	('2041-12-22'),
	('2041-12-23'),
	('2041-12-24'),
	('2041-12-25'),
	('2041-12-26'),
	('2041-12-27'),
	('2041-12-28'),
	('2041-12-29'),
	('2041-12-30'),
	('2041-12-31'),
	('2042-01-01'),
	('2042-01-02'),
	('2042-01-03'),
	('2042-01-04'),
	('2042-01-05'),
	('2042-01-06'),
	('2042-01-07'),
	('2042-01-08'),
	('2042-01-09'),
	('2042-01-10'),
	('2042-01-11'),
	('2042-01-12'),
	('2042-01-13'),
	('2042-01-14'),
	('2042-01-15'),
	('2042-01-16'),
	('2042-01-17'),
	('2042-01-18'),
	('2042-01-19'),
	('2042-01-20'),
	('2042-01-21'),
	('2042-01-22'),
	('2042-01-23'),
	('2042-01-24'),
	('2042-01-25'),
	('2042-01-26'),
	('2042-01-27'),
	('2042-01-28'),
	('2042-01-29'),
	('2042-01-30'),
	('2042-01-31'),
	('2042-02-01'),
	('2042-02-02'),
	('2042-02-03'),
	('2042-02-04'),
	('2042-02-05'),
	('2042-02-06'),
	('2042-02-07'),
	('2042-02-08'),
	('2042-02-09'),
	('2042-02-10'),
	('2042-02-11'),
	('2042-02-12'),
	('2042-02-13'),
	('2042-02-14'),
	('2042-02-15'),
	('2042-02-16'),
	('2042-02-17'),
	('2042-02-18'),
	('2042-02-19'),
	('2042-02-20'),
	('2042-02-21'),
	('2042-02-22'),
	('2042-02-23'),
	('2042-02-24'),
	('2042-02-25'),
	('2042-02-26'),
	('2042-02-27'),
	('2042-02-28'),
	('2042-03-01'),
	('2042-03-02'),
	('2042-03-03'),
	('2042-03-04'),
	('2042-03-05'),
	('2042-03-06'),
	('2042-03-07'),
	('2042-03-08'),
	('2042-03-09'),
	('2042-03-10'),
	('2042-03-11'),
	('2042-03-12'),
	('2042-03-13'),
	('2042-03-14'),
	('2042-03-15'),
	('2042-03-16'),
	('2042-03-17'),
	('2042-03-18'),
	('2042-03-19'),
	('2042-03-20'),
	('2042-03-21'),
	('2042-03-22'),
	('2042-03-23'),
	('2042-03-24'),
	('2042-03-25'),
	('2042-03-26'),
	('2042-03-27'),
	('2042-03-28'),
	('2042-03-29'),
	('2042-03-30'),
	('2042-03-31'),
	('2042-04-01'),
	('2042-04-02'),
	('2042-04-03'),
	('2042-04-04'),
	('2042-04-05'),
	('2042-04-06'),
	('2042-04-07'),
	('2042-04-08'),
	('2042-04-09'),
	('2042-04-10'),
	('2042-04-11'),
	('2042-04-12'),
	('2042-04-13'),
	('2042-04-14'),
	('2042-04-15'),
	('2042-04-16'),
	('2042-04-17'),
	('2042-04-18'),
	('2042-04-19'),
	('2042-04-20'),
	('2042-04-21'),
	('2042-04-22'),
	('2042-04-23'),
	('2042-04-24'),
	('2042-04-25'),
	('2042-04-26'),
	('2042-04-27'),
	('2042-04-28'),
	('2042-04-29'),
	('2042-04-30'),
	('2042-05-01'),
	('2042-05-02'),
	('2042-05-03'),
	('2042-05-04'),
	('2042-05-05'),
	('2042-05-06'),
	('2042-05-07'),
	('2042-05-08'),
	('2042-05-09'),
	('2042-05-10'),
	('2042-05-11'),
	('2042-05-12'),
	('2042-05-13'),
	('2042-05-14'),
	('2042-05-15'),
	('2042-05-16'),
	('2042-05-17'),
	('2042-05-18'),
	('2042-05-19'),
	('2042-05-20'),
	('2042-05-21'),
	('2042-05-22'),
	('2042-05-23'),
	('2042-05-24'),
	('2042-05-25'),
	('2042-05-26'),
	('2042-05-27'),
	('2042-05-28'),
	('2042-05-29'),
	('2042-05-30'),
	('2042-05-31'),
	('2042-06-01'),
	('2042-06-02'),
	('2042-06-03'),
	('2042-06-04'),
	('2042-06-05'),
	('2042-06-06'),
	('2042-06-07'),
	('2042-06-08'),
	('2042-06-09'),
	('2042-06-10'),
	('2042-06-11'),
	('2042-06-12'),
	('2042-06-13'),
	('2042-06-14'),
	('2042-06-15'),
	('2042-06-16'),
	('2042-06-17'),
	('2042-06-18'),
	('2042-06-19'),
	('2042-06-20'),
	('2042-06-21'),
	('2042-06-22'),
	('2042-06-23'),
	('2042-06-24'),
	('2042-06-25'),
	('2042-06-26'),
	('2042-06-27'),
	('2042-06-28'),
	('2042-06-29'),
	('2042-06-30'),
	('2042-07-01'),
	('2042-07-02'),
	('2042-07-03'),
	('2042-07-04'),
	('2042-07-05'),
	('2042-07-06'),
	('2042-07-07'),
	('2042-07-08'),
	('2042-07-09'),
	('2042-07-10'),
	('2042-07-11'),
	('2042-07-12'),
	('2042-07-13'),
	('2042-07-14'),
	('2042-07-15'),
	('2042-07-16'),
	('2042-07-17'),
	('2042-07-18'),
	('2042-07-19'),
	('2042-07-20'),
	('2042-07-21'),
	('2042-07-22'),
	('2042-07-23'),
	('2042-07-24'),
	('2042-07-25'),
	('2042-07-26'),
	('2042-07-27'),
	('2042-07-28'),
	('2042-07-29'),
	('2042-07-30'),
	('2042-07-31'),
	('2042-08-01'),
	('2042-08-02'),
	('2042-08-03'),
	('2042-08-04'),
	('2042-08-05'),
	('2042-08-06'),
	('2042-08-07'),
	('2042-08-08'),
	('2042-08-09'),
	('2042-08-10'),
	('2042-08-11'),
	('2042-08-12'),
	('2042-08-13'),
	('2042-08-14'),
	('2042-08-15'),
	('2042-08-16'),
	('2042-08-17'),
	('2042-08-18'),
	('2042-08-19'),
	('2042-08-20'),
	('2042-08-21'),
	('2042-08-22'),
	('2042-08-23'),
	('2042-08-24'),
	('2042-08-25'),
	('2042-08-26'),
	('2042-08-27'),
	('2042-08-28'),
	('2042-08-29'),
	('2042-08-30'),
	('2042-08-31'),
	('2042-09-01'),
	('2042-09-02'),
	('2042-09-03'),
	('2042-09-04'),
	('2042-09-05'),
	('2042-09-06'),
	('2042-09-07'),
	('2042-09-08'),
	('2042-09-09'),
	('2042-09-10'),
	('2042-09-11'),
	('2042-09-12'),
	('2042-09-13'),
	('2042-09-14'),
	('2042-09-15'),
	('2042-09-16'),
	('2042-09-17'),
	('2042-09-18'),
	('2042-09-19'),
	('2042-09-20'),
	('2042-09-21'),
	('2042-09-22'),
	('2042-09-23'),
	('2042-09-24'),
	('2042-09-25'),
	('2042-09-26'),
	('2042-09-27'),
	('2042-09-28'),
	('2042-09-29'),
	('2042-09-30'),
	('2042-10-01'),
	('2042-10-02'),
	('2042-10-03'),
	('2042-10-04'),
	('2042-10-05'),
	('2042-10-06'),
	('2042-10-07'),
	('2042-10-08'),
	('2042-10-09'),
	('2042-10-10'),
	('2042-10-11'),
	('2042-10-12'),
	('2042-10-13'),
	('2042-10-14'),
	('2042-10-15'),
	('2042-10-16'),
	('2042-10-17'),
	('2042-10-18'),
	('2042-10-19'),
	('2042-10-20'),
	('2042-10-21'),
	('2042-10-22'),
	('2042-10-23'),
	('2042-10-24'),
	('2042-10-25'),
	('2042-10-26'),
	('2042-10-27'),
	('2042-10-28'),
	('2042-10-29'),
	('2042-10-30'),
	('2042-10-31'),
	('2042-11-01'),
	('2042-11-02'),
	('2042-11-03'),
	('2042-11-04'),
	('2042-11-05'),
	('2042-11-06'),
	('2042-11-07'),
	('2042-11-08'),
	('2042-11-09'),
	('2042-11-10'),
	('2042-11-11'),
	('2042-11-12'),
	('2042-11-13'),
	('2042-11-14'),
	('2042-11-15'),
	('2042-11-16'),
	('2042-11-17'),
	('2042-11-18'),
	('2042-11-19'),
	('2042-11-20'),
	('2042-11-21'),
	('2042-11-22'),
	('2042-11-23'),
	('2042-11-24'),
	('2042-11-25'),
	('2042-11-26'),
	('2042-11-27'),
	('2042-11-28'),
	('2042-11-29'),
	('2042-11-30'),
	('2042-12-01'),
	('2042-12-02'),
	('2042-12-03'),
	('2042-12-04'),
	('2042-12-05'),
	('2042-12-06'),
	('2042-12-07'),
	('2042-12-08'),
	('2042-12-09'),
	('2042-12-10'),
	('2042-12-11'),
	('2042-12-12'),
	('2042-12-13'),
	('2042-12-14'),
	('2042-12-15'),
	('2042-12-16'),
	('2042-12-17'),
	('2042-12-18'),
	('2042-12-19'),
	('2042-12-20'),
	('2042-12-21'),
	('2042-12-22'),
	('2042-12-23'),
	('2042-12-24'),
	('2042-12-25'),
	('2042-12-26'),
	('2042-12-27'),
	('2042-12-28'),
	('2042-12-29'),
	('2042-12-30'),
	('2042-12-31'),
	('2043-01-01'),
	('2043-01-02'),
	('2043-01-03'),
	('2043-01-04'),
	('2043-01-05'),
	('2043-01-06'),
	('2043-01-07'),
	('2043-01-08'),
	('2043-01-09'),
	('2043-01-10'),
	('2043-01-11'),
	('2043-01-12'),
	('2043-01-13'),
	('2043-01-14'),
	('2043-01-15'),
	('2043-01-16'),
	('2043-01-17'),
	('2043-01-18'),
	('2043-01-19'),
	('2043-01-20'),
	('2043-01-21'),
	('2043-01-22'),
	('2043-01-23'),
	('2043-01-24'),
	('2043-01-25'),
	('2043-01-26'),
	('2043-01-27'),
	('2043-01-28'),
	('2043-01-29'),
	('2043-01-30'),
	('2043-01-31'),
	('2043-02-01'),
	('2043-02-02'),
	('2043-02-03'),
	('2043-02-04'),
	('2043-02-05'),
	('2043-02-06'),
	('2043-02-07'),
	('2043-02-08'),
	('2043-02-09'),
	('2043-02-10'),
	('2043-02-11'),
	('2043-02-12'),
	('2043-02-13'),
	('2043-02-14'),
	('2043-02-15'),
	('2043-02-16'),
	('2043-02-17'),
	('2043-02-18'),
	('2043-02-19'),
	('2043-02-20'),
	('2043-02-21'),
	('2043-02-22'),
	('2043-02-23'),
	('2043-02-24'),
	('2043-02-25'),
	('2043-02-26'),
	('2043-02-27'),
	('2043-02-28'),
	('2043-03-01'),
	('2043-03-02'),
	('2043-03-03'),
	('2043-03-04'),
	('2043-03-05'),
	('2043-03-06'),
	('2043-03-07'),
	('2043-03-08'),
	('2043-03-09'),
	('2043-03-10'),
	('2043-03-11'),
	('2043-03-12'),
	('2043-03-13'),
	('2043-03-14'),
	('2043-03-15'),
	('2043-03-16'),
	('2043-03-17'),
	('2043-03-18'),
	('2043-03-19'),
	('2043-03-20'),
	('2043-03-21'),
	('2043-03-22'),
	('2043-03-23'),
	('2043-03-24'),
	('2043-03-25'),
	('2043-03-26'),
	('2043-03-27'),
	('2043-03-28'),
	('2043-03-29'),
	('2043-03-30'),
	('2043-03-31'),
	('2043-04-01'),
	('2043-04-02'),
	('2043-04-03'),
	('2043-04-04'),
	('2043-04-05'),
	('2043-04-06'),
	('2043-04-07'),
	('2043-04-08'),
	('2043-04-09'),
	('2043-04-10'),
	('2043-04-11'),
	('2043-04-12'),
	('2043-04-13'),
	('2043-04-14'),
	('2043-04-15'),
	('2043-04-16'),
	('2043-04-17'),
	('2043-04-18'),
	('2043-04-19'),
	('2043-04-20'),
	('2043-04-21'),
	('2043-04-22'),
	('2043-04-23'),
	('2043-04-24'),
	('2043-04-25'),
	('2043-04-26'),
	('2043-04-27'),
	('2043-04-28'),
	('2043-04-29'),
	('2043-04-30'),
	('2043-05-01'),
	('2043-05-02'),
	('2043-05-03'),
	('2043-05-04'),
	('2043-05-05'),
	('2043-05-06'),
	('2043-05-07'),
	('2043-05-08'),
	('2043-05-09'),
	('2043-05-10'),
	('2043-05-11'),
	('2043-05-12'),
	('2043-05-13'),
	('2043-05-14'),
	('2043-05-15'),
	('2043-05-16'),
	('2043-05-17'),
	('2043-05-18'),
	('2043-05-19'),
	('2043-05-20'),
	('2043-05-21'),
	('2043-05-22'),
	('2043-05-23'),
	('2043-05-24'),
	('2043-05-25'),
	('2043-05-26'),
	('2043-05-27'),
	('2043-05-28'),
	('2043-05-29'),
	('2043-05-30'),
	('2043-05-31'),
	('2043-06-01'),
	('2043-06-02'),
	('2043-06-03'),
	('2043-06-04'),
	('2043-06-05'),
	('2043-06-06'),
	('2043-06-07'),
	('2043-06-08'),
	('2043-06-09'),
	('2043-06-10'),
	('2043-06-11'),
	('2043-06-12'),
	('2043-06-13'),
	('2043-06-14'),
	('2043-06-15'),
	('2043-06-16'),
	('2043-06-17'),
	('2043-06-18'),
	('2043-06-19'),
	('2043-06-20'),
	('2043-06-21'),
	('2043-06-22'),
	('2043-06-23'),
	('2043-06-24'),
	('2043-06-25'),
	('2043-06-26'),
	('2043-06-27'),
	('2043-06-28'),
	('2043-06-29'),
	('2043-06-30'),
	('2043-07-01'),
	('2043-07-02'),
	('2043-07-03'),
	('2043-07-04'),
	('2043-07-05'),
	('2043-07-06'),
	('2043-07-07'),
	('2043-07-08'),
	('2043-07-09'),
	('2043-07-10'),
	('2043-07-11'),
	('2043-07-12'),
	('2043-07-13'),
	('2043-07-14'),
	('2043-07-15'),
	('2043-07-16'),
	('2043-07-17'),
	('2043-07-18'),
	('2043-07-19'),
	('2043-07-20'),
	('2043-07-21'),
	('2043-07-22'),
	('2043-07-23'),
	('2043-07-24'),
	('2043-07-25'),
	('2043-07-26'),
	('2043-07-27'),
	('2043-07-28'),
	('2043-07-29'),
	('2043-07-30'),
	('2043-07-31'),
	('2043-08-01'),
	('2043-08-02'),
	('2043-08-03'),
	('2043-08-04'),
	('2043-08-05'),
	('2043-08-06'),
	('2043-08-07'),
	('2043-08-08'),
	('2043-08-09'),
	('2043-08-10'),
	('2043-08-11'),
	('2043-08-12'),
	('2043-08-13'),
	('2043-08-14'),
	('2043-08-15'),
	('2043-08-16'),
	('2043-08-17'),
	('2043-08-18'),
	('2043-08-19'),
	('2043-08-20'),
	('2043-08-21'),
	('2043-08-22'),
	('2043-08-23'),
	('2043-08-24'),
	('2043-08-25'),
	('2043-08-26'),
	('2043-08-27'),
	('2043-08-28'),
	('2043-08-29'),
	('2043-08-30'),
	('2043-08-31'),
	('2043-09-01'),
	('2043-09-02'),
	('2043-09-03'),
	('2043-09-04'),
	('2043-09-05'),
	('2043-09-06'),
	('2043-09-07'),
	('2043-09-08'),
	('2043-09-09'),
	('2043-09-10'),
	('2043-09-11'),
	('2043-09-12'),
	('2043-09-13'),
	('2043-09-14'),
	('2043-09-15'),
	('2043-09-16'),
	('2043-09-17'),
	('2043-09-18'),
	('2043-09-19'),
	('2043-09-20'),
	('2043-09-21'),
	('2043-09-22'),
	('2043-09-23'),
	('2043-09-24'),
	('2043-09-25'),
	('2043-09-26'),
	('2043-09-27'),
	('2043-09-28'),
	('2043-09-29'),
	('2043-09-30'),
	('2043-10-01'),
	('2043-10-02'),
	('2043-10-03'),
	('2043-10-04'),
	('2043-10-05'),
	('2043-10-06'),
	('2043-10-07'),
	('2043-10-08'),
	('2043-10-09'),
	('2043-10-10'),
	('2043-10-11'),
	('2043-10-12'),
	('2043-10-13'),
	('2043-10-14'),
	('2043-10-15'),
	('2043-10-16'),
	('2043-10-17'),
	('2043-10-18'),
	('2043-10-19'),
	('2043-10-20'),
	('2043-10-21'),
	('2043-10-22'),
	('2043-10-23'),
	('2043-10-24'),
	('2043-10-25'),
	('2043-10-26'),
	('2043-10-27'),
	('2043-10-28'),
	('2043-10-29'),
	('2043-10-30'),
	('2043-10-31'),
	('2043-11-01'),
	('2043-11-02'),
	('2043-11-03'),
	('2043-11-04'),
	('2043-11-05'),
	('2043-11-06'),
	('2043-11-07'),
	('2043-11-08'),
	('2043-11-09'),
	('2043-11-10'),
	('2043-11-11'),
	('2043-11-12'),
	('2043-11-13'),
	('2043-11-14'),
	('2043-11-15'),
	('2043-11-16'),
	('2043-11-17'),
	('2043-11-18'),
	('2043-11-19'),
	('2043-11-20'),
	('2043-11-21'),
	('2043-11-22'),
	('2043-11-23'),
	('2043-11-24'),
	('2043-11-25'),
	('2043-11-26'),
	('2043-11-27'),
	('2043-11-28'),
	('2043-11-29'),
	('2043-11-30'),
	('2043-12-01'),
	('2043-12-02'),
	('2043-12-03'),
	('2043-12-04'),
	('2043-12-05'),
	('2043-12-06'),
	('2043-12-07'),
	('2043-12-08'),
	('2043-12-09'),
	('2043-12-10'),
	('2043-12-11'),
	('2043-12-12'),
	('2043-12-13'),
	('2043-12-14'),
	('2043-12-15'),
	('2043-12-16'),
	('2043-12-17'),
	('2043-12-18'),
	('2043-12-19'),
	('2043-12-20'),
	('2043-12-21'),
	('2043-12-22'),
	('2043-12-23'),
	('2043-12-24'),
	('2043-12-25'),
	('2043-12-26'),
	('2043-12-27'),
	('2043-12-28'),
	('2043-12-29'),
	('2043-12-30'),
	('2043-12-31'),
	('2044-01-01'),
	('2044-01-02'),
	('2044-01-03'),
	('2044-01-04'),
	('2044-01-05'),
	('2044-01-06'),
	('2044-01-07'),
	('2044-01-08'),
	('2044-01-09'),
	('2044-01-10'),
	('2044-01-11'),
	('2044-01-12'),
	('2044-01-13'),
	('2044-01-14'),
	('2044-01-15'),
	('2044-01-16'),
	('2044-01-17'),
	('2044-01-18'),
	('2044-01-19'),
	('2044-01-20'),
	('2044-01-21'),
	('2044-01-22'),
	('2044-01-23'),
	('2044-01-24'),
	('2044-01-25'),
	('2044-01-26'),
	('2044-01-27'),
	('2044-01-28'),
	('2044-01-29'),
	('2044-01-30'),
	('2044-01-31'),
	('2044-02-01'),
	('2044-02-02'),
	('2044-02-03'),
	('2044-02-04'),
	('2044-02-05'),
	('2044-02-06'),
	('2044-02-07'),
	('2044-02-08'),
	('2044-02-09'),
	('2044-02-10'),
	('2044-02-11'),
	('2044-02-12'),
	('2044-02-13'),
	('2044-02-14'),
	('2044-02-15'),
	('2044-02-16'),
	('2044-02-17'),
	('2044-02-18'),
	('2044-02-19'),
	('2044-02-20'),
	('2044-02-21'),
	('2044-02-22'),
	('2044-02-23'),
	('2044-02-24'),
	('2044-02-25'),
	('2044-02-26'),
	('2044-02-27'),
	('2044-02-28'),
	('2044-02-29'),
	('2044-03-01'),
	('2044-03-02'),
	('2044-03-03'),
	('2044-03-04'),
	('2044-03-05'),
	('2044-03-06'),
	('2044-03-07'),
	('2044-03-08'),
	('2044-03-09'),
	('2044-03-10'),
	('2044-03-11'),
	('2044-03-12'),
	('2044-03-13'),
	('2044-03-14'),
	('2044-03-15'),
	('2044-03-16'),
	('2044-03-17'),
	('2044-03-18'),
	('2044-03-19'),
	('2044-03-20'),
	('2044-03-21'),
	('2044-03-22'),
	('2044-03-23'),
	('2044-03-24'),
	('2044-03-25'),
	('2044-03-26'),
	('2044-03-27'),
	('2044-03-28'),
	('2044-03-29'),
	('2044-03-30'),
	('2044-03-31'),
	('2044-04-01'),
	('2044-04-02'),
	('2044-04-03'),
	('2044-04-04'),
	('2044-04-05'),
	('2044-04-06'),
	('2044-04-07'),
	('2044-04-08'),
	('2044-04-09'),
	('2044-04-10'),
	('2044-04-11'),
	('2044-04-12'),
	('2044-04-13'),
	('2044-04-14'),
	('2044-04-15'),
	('2044-04-16'),
	('2044-04-17'),
	('2044-04-18'),
	('2044-04-19'),
	('2044-04-20'),
	('2044-04-21'),
	('2044-04-22'),
	('2044-04-23'),
	('2044-04-24'),
	('2044-04-25'),
	('2044-04-26'),
	('2044-04-27'),
	('2044-04-28'),
	('2044-04-29'),
	('2044-04-30'),
	('2044-05-01'),
	('2044-05-02'),
	('2044-05-03'),
	('2044-05-04'),
	('2044-05-05'),
	('2044-05-06'),
	('2044-05-07'),
	('2044-05-08'),
	('2044-05-09'),
	('2044-05-10'),
	('2044-05-11'),
	('2044-05-12'),
	('2044-05-13'),
	('2044-05-14'),
	('2044-05-15'),
	('2044-05-16'),
	('2044-05-17'),
	('2044-05-18'),
	('2044-05-19'),
	('2044-05-20'),
	('2044-05-21'),
	('2044-05-22'),
	('2044-05-23'),
	('2044-05-24'),
	('2044-05-25'),
	('2044-05-26'),
	('2044-05-27'),
	('2044-05-28'),
	('2044-05-29'),
	('2044-05-30'),
	('2044-05-31'),
	('2044-06-01'),
	('2044-06-02'),
	('2044-06-03'),
	('2044-06-04'),
	('2044-06-05'),
	('2044-06-06'),
	('2044-06-07'),
	('2044-06-08'),
	('2044-06-09'),
	('2044-06-10'),
	('2044-06-11'),
	('2044-06-12'),
	('2044-06-13'),
	('2044-06-14'),
	('2044-06-15'),
	('2044-06-16'),
	('2044-06-17'),
	('2044-06-18'),
	('2044-06-19'),
	('2044-06-20'),
	('2044-06-21'),
	('2044-06-22'),
	('2044-06-23'),
	('2044-06-24'),
	('2044-06-25'),
	('2044-06-26'),
	('2044-06-27'),
	('2044-06-28'),
	('2044-06-29'),
	('2044-06-30'),
	('2044-07-01'),
	('2044-07-02'),
	('2044-07-03'),
	('2044-07-04'),
	('2044-07-05'),
	('2044-07-06'),
	('2044-07-07'),
	('2044-07-08'),
	('2044-07-09'),
	('2044-07-10'),
	('2044-07-11'),
	('2044-07-12'),
	('2044-07-13'),
	('2044-07-14'),
	('2044-07-15'),
	('2044-07-16'),
	('2044-07-17'),
	('2044-07-18'),
	('2044-07-19'),
	('2044-07-20'),
	('2044-07-21'),
	('2044-07-22'),
	('2044-07-23'),
	('2044-07-24'),
	('2044-07-25'),
	('2044-07-26'),
	('2044-07-27'),
	('2044-07-28'),
	('2044-07-29'),
	('2044-07-30'),
	('2044-07-31'),
	('2044-08-01'),
	('2044-08-02'),
	('2044-08-03'),
	('2044-08-04'),
	('2044-08-05'),
	('2044-08-06'),
	('2044-08-07'),
	('2044-08-08'),
	('2044-08-09'),
	('2044-08-10'),
	('2044-08-11'),
	('2044-08-12'),
	('2044-08-13'),
	('2044-08-14'),
	('2044-08-15'),
	('2044-08-16'),
	('2044-08-17'),
	('2044-08-18'),
	('2044-08-19'),
	('2044-08-20'),
	('2044-08-21'),
	('2044-08-22'),
	('2044-08-23'),
	('2044-08-24'),
	('2044-08-25'),
	('2044-08-26'),
	('2044-08-27'),
	('2044-08-28'),
	('2044-08-29'),
	('2044-08-30'),
	('2044-08-31'),
	('2044-09-01'),
	('2044-09-02'),
	('2044-09-03'),
	('2044-09-04'),
	('2044-09-05'),
	('2044-09-06'),
	('2044-09-07'),
	('2044-09-08'),
	('2044-09-09'),
	('2044-09-10'),
	('2044-09-11'),
	('2044-09-12'),
	('2044-09-13'),
	('2044-09-14'),
	('2044-09-15'),
	('2044-09-16'),
	('2044-09-17'),
	('2044-09-18'),
	('2044-09-19'),
	('2044-09-20'),
	('2044-09-21'),
	('2044-09-22'),
	('2044-09-23'),
	('2044-09-24'),
	('2044-09-25'),
	('2044-09-26'),
	('2044-09-27'),
	('2044-09-28'),
	('2044-09-29'),
	('2044-09-30'),
	('2044-10-01'),
	('2044-10-02'),
	('2044-10-03'),
	('2044-10-04'),
	('2044-10-05'),
	('2044-10-06'),
	('2044-10-07'),
	('2044-10-08'),
	('2044-10-09'),
	('2044-10-10'),
	('2044-10-11'),
	('2044-10-12'),
	('2044-10-13'),
	('2044-10-14'),
	('2044-10-15'),
	('2044-10-16'),
	('2044-10-17'),
	('2044-10-18'),
	('2044-10-19'),
	('2044-10-20'),
	('2044-10-21'),
	('2044-10-22'),
	('2044-10-23'),
	('2044-10-24'),
	('2044-10-25'),
	('2044-10-26'),
	('2044-10-27'),
	('2044-10-28'),
	('2044-10-29'),
	('2044-10-30'),
	('2044-10-31'),
	('2044-11-01'),
	('2044-11-02'),
	('2044-11-03'),
	('2044-11-04'),
	('2044-11-05'),
	('2044-11-06'),
	('2044-11-07'),
	('2044-11-08'),
	('2044-11-09'),
	('2044-11-10'),
	('2044-11-11'),
	('2044-11-12'),
	('2044-11-13'),
	('2044-11-14'),
	('2044-11-15'),
	('2044-11-16'),
	('2044-11-17'),
	('2044-11-18'),
	('2044-11-19'),
	('2044-11-20'),
	('2044-11-21'),
	('2044-11-22'),
	('2044-11-23'),
	('2044-11-24'),
	('2044-11-25'),
	('2044-11-26'),
	('2044-11-27'),
	('2044-11-28'),
	('2044-11-29'),
	('2044-11-30'),
	('2044-12-01'),
	('2044-12-02'),
	('2044-12-03'),
	('2044-12-04'),
	('2044-12-05'),
	('2044-12-06'),
	('2044-12-07'),
	('2044-12-08'),
	('2044-12-09'),
	('2044-12-10'),
	('2044-12-11'),
	('2044-12-12'),
	('2044-12-13'),
	('2044-12-14'),
	('2044-12-15'),
	('2044-12-16'),
	('2044-12-17'),
	('2044-12-18'),
	('2044-12-19'),
	('2044-12-20'),
	('2044-12-21'),
	('2044-12-22'),
	('2044-12-23'),
	('2044-12-24'),
	('2044-12-25'),
	('2044-12-26'),
	('2044-12-27'),
	('2044-12-28'),
	('2044-12-29'),
	('2044-12-30'),
	('2044-12-31'),
	('2045-01-01'),
	('2045-01-02'),
	('2045-01-03'),
	('2045-01-04'),
	('2045-01-05'),
	('2045-01-06'),
	('2045-01-07'),
	('2045-01-08'),
	('2045-01-09'),
	('2045-01-10'),
	('2045-01-11'),
	('2045-01-12'),
	('2045-01-13'),
	('2045-01-14'),
	('2045-01-15'),
	('2045-01-16'),
	('2045-01-17'),
	('2045-01-18'),
	('2045-01-19'),
	('2045-01-20'),
	('2045-01-21'),
	('2045-01-22'),
	('2045-01-23'),
	('2045-01-24'),
	('2045-01-25'),
	('2045-01-26'),
	('2045-01-27'),
	('2045-01-28'),
	('2045-01-29'),
	('2045-01-30'),
	('2045-01-31'),
	('2045-02-01'),
	('2045-02-02'),
	('2045-02-03'),
	('2045-02-04'),
	('2045-02-05'),
	('2045-02-06'),
	('2045-02-07'),
	('2045-02-08'),
	('2045-02-09'),
	('2045-02-10'),
	('2045-02-11'),
	('2045-02-12'),
	('2045-02-13'),
	('2045-02-14'),
	('2045-02-15'),
	('2045-02-16'),
	('2045-02-17'),
	('2045-02-18'),
	('2045-02-19'),
	('2045-02-20'),
	('2045-02-21'),
	('2045-02-22'),
	('2045-02-23'),
	('2045-02-24'),
	('2045-02-25'),
	('2045-02-26'),
	('2045-02-27'),
	('2045-02-28'),
	('2045-03-01'),
	('2045-03-02'),
	('2045-03-03'),
	('2045-03-04'),
	('2045-03-05'),
	('2045-03-06'),
	('2045-03-07'),
	('2045-03-08'),
	('2045-03-09'),
	('2045-03-10'),
	('2045-03-11'),
	('2045-03-12'),
	('2045-03-13'),
	('2045-03-14'),
	('2045-03-15'),
	('2045-03-16'),
	('2045-03-17'),
	('2045-03-18'),
	('2045-03-19'),
	('2045-03-20'),
	('2045-03-21'),
	('2045-03-22'),
	('2045-03-23'),
	('2045-03-24'),
	('2045-03-25'),
	('2045-03-26'),
	('2045-03-27'),
	('2045-03-28'),
	('2045-03-29'),
	('2045-03-30'),
	('2045-03-31'),
	('2045-04-01'),
	('2045-04-02'),
	('2045-04-03'),
	('2045-04-04'),
	('2045-04-05'),
	('2045-04-06'),
	('2045-04-07'),
	('2045-04-08'),
	('2045-04-09'),
	('2045-04-10'),
	('2045-04-11'),
	('2045-04-12'),
	('2045-04-13'),
	('2045-04-14'),
	('2045-04-15'),
	('2045-04-16'),
	('2045-04-17'),
	('2045-04-18'),
	('2045-04-19'),
	('2045-04-20'),
	('2045-04-21'),
	('2045-04-22'),
	('2045-04-23'),
	('2045-04-24'),
	('2045-04-25'),
	('2045-04-26'),
	('2045-04-27'),
	('2045-04-28'),
	('2045-04-29'),
	('2045-04-30'),
	('2045-05-01'),
	('2045-05-02'),
	('2045-05-03'),
	('2045-05-04'),
	('2045-05-05'),
	('2045-05-06'),
	('2045-05-07'),
	('2045-05-08'),
	('2045-05-09'),
	('2045-05-10'),
	('2045-05-11'),
	('2045-05-12'),
	('2045-05-13'),
	('2045-05-14'),
	('2045-05-15'),
	('2045-05-16'),
	('2045-05-17'),
	('2045-05-18'),
	('2045-05-19'),
	('2045-05-20'),
	('2045-05-21'),
	('2045-05-22'),
	('2045-05-23'),
	('2045-05-24'),
	('2045-05-25'),
	('2045-05-26'),
	('2045-05-27'),
	('2045-05-28'),
	('2045-05-29'),
	('2045-05-30'),
	('2045-05-31'),
	('2045-06-01'),
	('2045-06-02'),
	('2045-06-03'),
	('2045-06-04'),
	('2045-06-05'),
	('2045-06-06'),
	('2045-06-07'),
	('2045-06-08'),
	('2045-06-09'),
	('2045-06-10'),
	('2045-06-11'),
	('2045-06-12'),
	('2045-06-13'),
	('2045-06-14'),
	('2045-06-15'),
	('2045-06-16'),
	('2045-06-17'),
	('2045-06-18'),
	('2045-06-19'),
	('2045-06-20'),
	('2045-06-21'),
	('2045-06-22'),
	('2045-06-23'),
	('2045-06-24'),
	('2045-06-25'),
	('2045-06-26'),
	('2045-06-27'),
	('2045-06-28'),
	('2045-06-29'),
	('2045-06-30'),
	('2045-07-01'),
	('2045-07-02'),
	('2045-07-03'),
	('2045-07-04'),
	('2045-07-05'),
	('2045-07-06'),
	('2045-07-07'),
	('2045-07-08'),
	('2045-07-09'),
	('2045-07-10'),
	('2045-07-11'),
	('2045-07-12'),
	('2045-07-13'),
	('2045-07-14'),
	('2045-07-15'),
	('2045-07-16'),
	('2045-07-17'),
	('2045-07-18'),
	('2045-07-19'),
	('2045-07-20'),
	('2045-07-21'),
	('2045-07-22'),
	('2045-07-23'),
	('2045-07-24'),
	('2045-07-25'),
	('2045-07-26'),
	('2045-07-27'),
	('2045-07-28'),
	('2045-07-29'),
	('2045-07-30'),
	('2045-07-31'),
	('2045-08-01'),
	('2045-08-02'),
	('2045-08-03'),
	('2045-08-04'),
	('2045-08-05'),
	('2045-08-06'),
	('2045-08-07'),
	('2045-08-08'),
	('2045-08-09'),
	('2045-08-10'),
	('2045-08-11'),
	('2045-08-12'),
	('2045-08-13'),
	('2045-08-14'),
	('2045-08-15'),
	('2045-08-16'),
	('2045-08-17'),
	('2045-08-18'),
	('2045-08-19'),
	('2045-08-20'),
	('2045-08-21'),
	('2045-08-22'),
	('2045-08-23'),
	('2045-08-24'),
	('2045-08-25'),
	('2045-08-26'),
	('2045-08-27'),
	('2045-08-28'),
	('2045-08-29'),
	('2045-08-30'),
	('2045-08-31'),
	('2045-09-01'),
	('2045-09-02'),
	('2045-09-03'),
	('2045-09-04'),
	('2045-09-05'),
	('2045-09-06'),
	('2045-09-07'),
	('2045-09-08'),
	('2045-09-09'),
	('2045-09-10'),
	('2045-09-11'),
	('2045-09-12'),
	('2045-09-13'),
	('2045-09-14'),
	('2045-09-15'),
	('2045-09-16'),
	('2045-09-17'),
	('2045-09-18'),
	('2045-09-19'),
	('2045-09-20'),
	('2045-09-21'),
	('2045-09-22'),
	('2045-09-23'),
	('2045-09-24'),
	('2045-09-25'),
	('2045-09-26'),
	('2045-09-27'),
	('2045-09-28'),
	('2045-09-29'),
	('2045-09-30'),
	('2045-10-01'),
	('2045-10-02'),
	('2045-10-03'),
	('2045-10-04'),
	('2045-10-05'),
	('2045-10-06'),
	('2045-10-07'),
	('2045-10-08'),
	('2045-10-09'),
	('2045-10-10'),
	('2045-10-11'),
	('2045-10-12'),
	('2045-10-13'),
	('2045-10-14'),
	('2045-10-15'),
	('2045-10-16'),
	('2045-10-17'),
	('2045-10-18'),
	('2045-10-19'),
	('2045-10-20'),
	('2045-10-21'),
	('2045-10-22'),
	('2045-10-23'),
	('2045-10-24'),
	('2045-10-25'),
	('2045-10-26'),
	('2045-10-27'),
	('2045-10-28'),
	('2045-10-29'),
	('2045-10-30'),
	('2045-10-31'),
	('2045-11-01'),
	('2045-11-02'),
	('2045-11-03'),
	('2045-11-04'),
	('2045-11-05'),
	('2045-11-06'),
	('2045-11-07'),
	('2045-11-08'),
	('2045-11-09'),
	('2045-11-10'),
	('2045-11-11'),
	('2045-11-12'),
	('2045-11-13'),
	('2045-11-14'),
	('2045-11-15'),
	('2045-11-16'),
	('2045-11-17'),
	('2045-11-18'),
	('2045-11-19'),
	('2045-11-20'),
	('2045-11-21'),
	('2045-11-22'),
	('2045-11-23'),
	('2045-11-24'),
	('2045-11-25'),
	('2045-11-26'),
	('2045-11-27'),
	('2045-11-28'),
	('2045-11-29'),
	('2045-11-30'),
	('2045-12-01'),
	('2045-12-02'),
	('2045-12-03'),
	('2045-12-04'),
	('2045-12-05'),
	('2045-12-06'),
	('2045-12-07'),
	('2045-12-08'),
	('2045-12-09'),
	('2045-12-10'),
	('2045-12-11'),
	('2045-12-12'),
	('2045-12-13'),
	('2045-12-14'),
	('2045-12-15'),
	('2045-12-16'),
	('2045-12-17'),
	('2045-12-18'),
	('2045-12-19'),
	('2045-12-20'),
	('2045-12-21'),
	('2045-12-22'),
	('2045-12-23'),
	('2045-12-24'),
	('2045-12-25'),
	('2045-12-26'),
	('2045-12-27'),
	('2045-12-28'),
	('2045-12-29'),
	('2045-12-30'),
	('2045-12-31'),
	('2046-01-01'),
	('2046-01-02'),
	('2046-01-03'),
	('2046-01-04'),
	('2046-01-05'),
	('2046-01-06'),
	('2046-01-07'),
	('2046-01-08'),
	('2046-01-09'),
	('2046-01-10'),
	('2046-01-11'),
	('2046-01-12'),
	('2046-01-13'),
	('2046-01-14'),
	('2046-01-15'),
	('2046-01-16'),
	('2046-01-17'),
	('2046-01-18'),
	('2046-01-19'),
	('2046-01-20'),
	('2046-01-21'),
	('2046-01-22'),
	('2046-01-23'),
	('2046-01-24'),
	('2046-01-25'),
	('2046-01-26'),
	('2046-01-27'),
	('2046-01-28'),
	('2046-01-29'),
	('2046-01-30'),
	('2046-01-31'),
	('2046-02-01'),
	('2046-02-02'),
	('2046-02-03'),
	('2046-02-04'),
	('2046-02-05'),
	('2046-02-06'),
	('2046-02-07'),
	('2046-02-08'),
	('2046-02-09'),
	('2046-02-10'),
	('2046-02-11'),
	('2046-02-12'),
	('2046-02-13'),
	('2046-02-14'),
	('2046-02-15'),
	('2046-02-16'),
	('2046-02-17'),
	('2046-02-18'),
	('2046-02-19'),
	('2046-02-20'),
	('2046-02-21'),
	('2046-02-22'),
	('2046-02-23'),
	('2046-02-24'),
	('2046-02-25'),
	('2046-02-26'),
	('2046-02-27'),
	('2046-02-28'),
	('2046-03-01'),
	('2046-03-02'),
	('2046-03-03'),
	('2046-03-04'),
	('2046-03-05'),
	('2046-03-06'),
	('2046-03-07'),
	('2046-03-08'),
	('2046-03-09'),
	('2046-03-10'),
	('2046-03-11'),
	('2046-03-12'),
	('2046-03-13'),
	('2046-03-14'),
	('2046-03-15'),
	('2046-03-16'),
	('2046-03-17'),
	('2046-03-18'),
	('2046-03-19'),
	('2046-03-20'),
	('2046-03-21'),
	('2046-03-22'),
	('2046-03-23'),
	('2046-03-24'),
	('2046-03-25'),
	('2046-03-26'),
	('2046-03-27'),
	('2046-03-28'),
	('2046-03-29'),
	('2046-03-30'),
	('2046-03-31'),
	('2046-04-01'),
	('2046-04-02'),
	('2046-04-03'),
	('2046-04-04'),
	('2046-04-05'),
	('2046-04-06'),
	('2046-04-07'),
	('2046-04-08'),
	('2046-04-09'),
	('2046-04-10'),
	('2046-04-11'),
	('2046-04-12'),
	('2046-04-13'),
	('2046-04-14'),
	('2046-04-15'),
	('2046-04-16'),
	('2046-04-17'),
	('2046-04-18'),
	('2046-04-19'),
	('2046-04-20'),
	('2046-04-21'),
	('2046-04-22'),
	('2046-04-23'),
	('2046-04-24'),
	('2046-04-25'),
	('2046-04-26'),
	('2046-04-27'),
	('2046-04-28'),
	('2046-04-29'),
	('2046-04-30'),
	('2046-05-01'),
	('2046-05-02'),
	('2046-05-03'),
	('2046-05-04'),
	('2046-05-05'),
	('2046-05-06'),
	('2046-05-07'),
	('2046-05-08'),
	('2046-05-09'),
	('2046-05-10'),
	('2046-05-11'),
	('2046-05-12'),
	('2046-05-13'),
	('2046-05-14'),
	('2046-05-15'),
	('2046-05-16'),
	('2046-05-17'),
	('2046-05-18'),
	('2046-05-19'),
	('2046-05-20'),
	('2046-05-21'),
	('2046-05-22'),
	('2046-05-23'),
	('2046-05-24'),
	('2046-05-25'),
	('2046-05-26'),
	('2046-05-27'),
	('2046-05-28'),
	('2046-05-29'),
	('2046-05-30'),
	('2046-05-31'),
	('2046-06-01'),
	('2046-06-02'),
	('2046-06-03'),
	('2046-06-04'),
	('2046-06-05'),
	('2046-06-06'),
	('2046-06-07'),
	('2046-06-08'),
	('2046-06-09'),
	('2046-06-10'),
	('2046-06-11'),
	('2046-06-12'),
	('2046-06-13'),
	('2046-06-14'),
	('2046-06-15'),
	('2046-06-16'),
	('2046-06-17'),
	('2046-06-18'),
	('2046-06-19'),
	('2046-06-20'),
	('2046-06-21'),
	('2046-06-22'),
	('2046-06-23'),
	('2046-06-24'),
	('2046-06-25'),
	('2046-06-26'),
	('2046-06-27'),
	('2046-06-28'),
	('2046-06-29'),
	('2046-06-30'),
	('2046-07-01'),
	('2046-07-02'),
	('2046-07-03'),
	('2046-07-04'),
	('2046-07-05'),
	('2046-07-06'),
	('2046-07-07'),
	('2046-07-08'),
	('2046-07-09'),
	('2046-07-10'),
	('2046-07-11'),
	('2046-07-12'),
	('2046-07-13'),
	('2046-07-14'),
	('2046-07-15'),
	('2046-07-16'),
	('2046-07-17'),
	('2046-07-18'),
	('2046-07-19'),
	('2046-07-20'),
	('2046-07-21'),
	('2046-07-22'),
	('2046-07-23'),
	('2046-07-24'),
	('2046-07-25'),
	('2046-07-26'),
	('2046-07-27'),
	('2046-07-28'),
	('2046-07-29'),
	('2046-07-30'),
	('2046-07-31'),
	('2046-08-01'),
	('2046-08-02'),
	('2046-08-03'),
	('2046-08-04'),
	('2046-08-05'),
	('2046-08-06'),
	('2046-08-07'),
	('2046-08-08'),
	('2046-08-09'),
	('2046-08-10'),
	('2046-08-11'),
	('2046-08-12'),
	('2046-08-13'),
	('2046-08-14'),
	('2046-08-15'),
	('2046-08-16'),
	('2046-08-17'),
	('2046-08-18'),
	('2046-08-19'),
	('2046-08-20'),
	('2046-08-21'),
	('2046-08-22'),
	('2046-08-23'),
	('2046-08-24'),
	('2046-08-25'),
	('2046-08-26'),
	('2046-08-27'),
	('2046-08-28'),
	('2046-08-29'),
	('2046-08-30'),
	('2046-08-31'),
	('2046-09-01'),
	('2046-09-02'),
	('2046-09-03'),
	('2046-09-04'),
	('2046-09-05'),
	('2046-09-06'),
	('2046-09-07'),
	('2046-09-08'),
	('2046-09-09'),
	('2046-09-10'),
	('2046-09-11'),
	('2046-09-12'),
	('2046-09-13'),
	('2046-09-14'),
	('2046-09-15'),
	('2046-09-16'),
	('2046-09-17'),
	('2046-09-18'),
	('2046-09-19'),
	('2046-09-20'),
	('2046-09-21'),
	('2046-09-22'),
	('2046-09-23'),
	('2046-09-24'),
	('2046-09-25'),
	('2046-09-26'),
	('2046-09-27'),
	('2046-09-28'),
	('2046-09-29'),
	('2046-09-30'),
	('2046-10-01'),
	('2046-10-02'),
	('2046-10-03'),
	('2046-10-04'),
	('2046-10-05'),
	('2046-10-06'),
	('2046-10-07'),
	('2046-10-08'),
	('2046-10-09'),
	('2046-10-10'),
	('2046-10-11'),
	('2046-10-12'),
	('2046-10-13'),
	('2046-10-14'),
	('2046-10-15'),
	('2046-10-16'),
	('2046-10-17'),
	('2046-10-18'),
	('2046-10-19'),
	('2046-10-20'),
	('2046-10-21'),
	('2046-10-22'),
	('2046-10-23'),
	('2046-10-24'),
	('2046-10-25'),
	('2046-10-26'),
	('2046-10-27'),
	('2046-10-28'),
	('2046-10-29'),
	('2046-10-30'),
	('2046-10-31'),
	('2046-11-01'),
	('2046-11-02'),
	('2046-11-03'),
	('2046-11-04'),
	('2046-11-05'),
	('2046-11-06'),
	('2046-11-07'),
	('2046-11-08'),
	('2046-11-09'),
	('2046-11-10'),
	('2046-11-11'),
	('2046-11-12'),
	('2046-11-13'),
	('2046-11-14'),
	('2046-11-15'),
	('2046-11-16'),
	('2046-11-17'),
	('2046-11-18'),
	('2046-11-19'),
	('2046-11-20'),
	('2046-11-21'),
	('2046-11-22'),
	('2046-11-23'),
	('2046-11-24'),
	('2046-11-25'),
	('2046-11-26'),
	('2046-11-27'),
	('2046-11-28'),
	('2046-11-29'),
	('2046-11-30'),
	('2046-12-01'),
	('2046-12-02'),
	('2046-12-03'),
	('2046-12-04'),
	('2046-12-05'),
	('2046-12-06'),
	('2046-12-07'),
	('2046-12-08'),
	('2046-12-09'),
	('2046-12-10'),
	('2046-12-11'),
	('2046-12-12'),
	('2046-12-13'),
	('2046-12-14'),
	('2046-12-15'),
	('2046-12-16'),
	('2046-12-17'),
	('2046-12-18'),
	('2046-12-19'),
	('2046-12-20'),
	('2046-12-21'),
	('2046-12-22'),
	('2046-12-23'),
	('2046-12-24'),
	('2046-12-25'),
	('2046-12-26'),
	('2046-12-27'),
	('2046-12-28'),
	('2046-12-29'),
	('2046-12-30'),
	('2046-12-31'),
	('2047-01-01'),
	('2047-01-02'),
	('2047-01-03'),
	('2047-01-04'),
	('2047-01-05'),
	('2047-01-06'),
	('2047-01-07'),
	('2047-01-08'),
	('2047-01-09'),
	('2047-01-10'),
	('2047-01-11'),
	('2047-01-12'),
	('2047-01-13'),
	('2047-01-14'),
	('2047-01-15'),
	('2047-01-16'),
	('2047-01-17'),
	('2047-01-18'),
	('2047-01-19'),
	('2047-01-20'),
	('2047-01-21'),
	('2047-01-22'),
	('2047-01-23'),
	('2047-01-24'),
	('2047-01-25'),
	('2047-01-26'),
	('2047-01-27'),
	('2047-01-28'),
	('2047-01-29'),
	('2047-01-30'),
	('2047-01-31'),
	('2047-02-01'),
	('2047-02-02'),
	('2047-02-03'),
	('2047-02-04'),
	('2047-02-05'),
	('2047-02-06'),
	('2047-02-07'),
	('2047-02-08'),
	('2047-02-09'),
	('2047-02-10'),
	('2047-02-11'),
	('2047-02-12'),
	('2047-02-13'),
	('2047-02-14'),
	('2047-02-15'),
	('2047-02-16'),
	('2047-02-17'),
	('2047-02-18'),
	('2047-02-19'),
	('2047-02-20'),
	('2047-02-21'),
	('2047-02-22'),
	('2047-02-23'),
	('2047-02-24'),
	('2047-02-25'),
	('2047-02-26'),
	('2047-02-27'),
	('2047-02-28'),
	('2047-03-01'),
	('2047-03-02'),
	('2047-03-03'),
	('2047-03-04'),
	('2047-03-05'),
	('2047-03-06'),
	('2047-03-07'),
	('2047-03-08'),
	('2047-03-09'),
	('2047-03-10'),
	('2047-03-11'),
	('2047-03-12'),
	('2047-03-13'),
	('2047-03-14'),
	('2047-03-15'),
	('2047-03-16'),
	('2047-03-17'),
	('2047-03-18'),
	('2047-03-19'),
	('2047-03-20'),
	('2047-03-21'),
	('2047-03-22'),
	('2047-03-23'),
	('2047-03-24'),
	('2047-03-25'),
	('2047-03-26'),
	('2047-03-27'),
	('2047-03-28'),
	('2047-03-29'),
	('2047-03-30'),
	('2047-03-31'),
	('2047-04-01'),
	('2047-04-02'),
	('2047-04-03'),
	('2047-04-04'),
	('2047-04-05'),
	('2047-04-06'),
	('2047-04-07'),
	('2047-04-08'),
	('2047-04-09'),
	('2047-04-10'),
	('2047-04-11'),
	('2047-04-12'),
	('2047-04-13'),
	('2047-04-14'),
	('2047-04-15'),
	('2047-04-16'),
	('2047-04-17'),
	('2047-04-18'),
	('2047-04-19'),
	('2047-04-20'),
	('2047-04-21'),
	('2047-04-22'),
	('2047-04-23'),
	('2047-04-24'),
	('2047-04-25'),
	('2047-04-26'),
	('2047-04-27'),
	('2047-04-28'),
	('2047-04-29'),
	('2047-04-30'),
	('2047-05-01'),
	('2047-05-02'),
	('2047-05-03'),
	('2047-05-04'),
	('2047-05-05'),
	('2047-05-06'),
	('2047-05-07'),
	('2047-05-08'),
	('2047-05-09'),
	('2047-05-10'),
	('2047-05-11'),
	('2047-05-12'),
	('2047-05-13'),
	('2047-05-14'),
	('2047-05-15'),
	('2047-05-16'),
	('2047-05-17'),
	('2047-05-18'),
	('2047-05-19'),
	('2047-05-20'),
	('2047-05-21'),
	('2047-05-22'),
	('2047-05-23'),
	('2047-05-24'),
	('2047-05-25'),
	('2047-05-26'),
	('2047-05-27'),
	('2047-05-28'),
	('2047-05-29'),
	('2047-05-30'),
	('2047-05-31'),
	('2047-06-01'),
	('2047-06-02'),
	('2047-06-03'),
	('2047-06-04'),
	('2047-06-05'),
	('2047-06-06'),
	('2047-06-07'),
	('2047-06-08'),
	('2047-06-09'),
	('2047-06-10'),
	('2047-06-11'),
	('2047-06-12'),
	('2047-06-13'),
	('2047-06-14'),
	('2047-06-15'),
	('2047-06-16'),
	('2047-06-17'),
	('2047-06-18'),
	('2047-06-19'),
	('2047-06-20'),
	('2047-06-21'),
	('2047-06-22'),
	('2047-06-23'),
	('2047-06-24'),
	('2047-06-25'),
	('2047-06-26'),
	('2047-06-27'),
	('2047-06-28'),
	('2047-06-29'),
	('2047-06-30'),
	('2047-07-01'),
	('2047-07-02'),
	('2047-07-03'),
	('2047-07-04'),
	('2047-07-05'),
	('2047-07-06'),
	('2047-07-07'),
	('2047-07-08'),
	('2047-07-09'),
	('2047-07-10'),
	('2047-07-11'),
	('2047-07-12'),
	('2047-07-13'),
	('2047-07-14'),
	('2047-07-15'),
	('2047-07-16'),
	('2047-07-17'),
	('2047-07-18'),
	('2047-07-19'),
	('2047-07-20'),
	('2047-07-21'),
	('2047-07-22'),
	('2047-07-23'),
	('2047-07-24'),
	('2047-07-25'),
	('2047-07-26'),
	('2047-07-27'),
	('2047-07-28'),
	('2047-07-29'),
	('2047-07-30'),
	('2047-07-31'),
	('2047-08-01'),
	('2047-08-02'),
	('2047-08-03'),
	('2047-08-04'),
	('2047-08-05'),
	('2047-08-06'),
	('2047-08-07'),
	('2047-08-08'),
	('2047-08-09'),
	('2047-08-10'),
	('2047-08-11'),
	('2047-08-12'),
	('2047-08-13'),
	('2047-08-14'),
	('2047-08-15'),
	('2047-08-16'),
	('2047-08-17'),
	('2047-08-18'),
	('2047-08-19'),
	('2047-08-20'),
	('2047-08-21'),
	('2047-08-22'),
	('2047-08-23'),
	('2047-08-24'),
	('2047-08-25'),
	('2047-08-26'),
	('2047-08-27'),
	('2047-08-28'),
	('2047-08-29'),
	('2047-08-30'),
	('2047-08-31'),
	('2047-09-01'),
	('2047-09-02'),
	('2047-09-03'),
	('2047-09-04'),
	('2047-09-05'),
	('2047-09-06'),
	('2047-09-07'),
	('2047-09-08'),
	('2047-09-09'),
	('2047-09-10'),
	('2047-09-11'),
	('2047-09-12'),
	('2047-09-13'),
	('2047-09-14'),
	('2047-09-15'),
	('2047-09-16'),
	('2047-09-17'),
	('2047-09-18'),
	('2047-09-19'),
	('2047-09-20'),
	('2047-09-21'),
	('2047-09-22'),
	('2047-09-23'),
	('2047-09-24'),
	('2047-09-25'),
	('2047-09-26'),
	('2047-09-27'),
	('2047-09-28'),
	('2047-09-29'),
	('2047-09-30'),
	('2047-10-01'),
	('2047-10-02'),
	('2047-10-03'),
	('2047-10-04'),
	('2047-10-05'),
	('2047-10-06'),
	('2047-10-07'),
	('2047-10-08'),
	('2047-10-09'),
	('2047-10-10'),
	('2047-10-11'),
	('2047-10-12'),
	('2047-10-13'),
	('2047-10-14'),
	('2047-10-15'),
	('2047-10-16'),
	('2047-10-17'),
	('2047-10-18'),
	('2047-10-19'),
	('2047-10-20'),
	('2047-10-21'),
	('2047-10-22'),
	('2047-10-23'),
	('2047-10-24'),
	('2047-10-25'),
	('2047-10-26'),
	('2047-10-27'),
	('2047-10-28'),
	('2047-10-29'),
	('2047-10-30'),
	('2047-10-31'),
	('2047-11-01'),
	('2047-11-02'),
	('2047-11-03'),
	('2047-11-04'),
	('2047-11-05'),
	('2047-11-06'),
	('2047-11-07'),
	('2047-11-08'),
	('2047-11-09'),
	('2047-11-10'),
	('2047-11-11'),
	('2047-11-12'),
	('2047-11-13'),
	('2047-11-14'),
	('2047-11-15'),
	('2047-11-16'),
	('2047-11-17'),
	('2047-11-18'),
	('2047-11-19'),
	('2047-11-20'),
	('2047-11-21'),
	('2047-11-22'),
	('2047-11-23'),
	('2047-11-24'),
	('2047-11-25'),
	('2047-11-26'),
	('2047-11-27'),
	('2047-11-28'),
	('2047-11-29'),
	('2047-11-30'),
	('2047-12-01'),
	('2047-12-02'),
	('2047-12-03'),
	('2047-12-04'),
	('2047-12-05'),
	('2047-12-06'),
	('2047-12-07'),
	('2047-12-08'),
	('2047-12-09'),
	('2047-12-10'),
	('2047-12-11'),
	('2047-12-12'),
	('2047-12-13'),
	('2047-12-14'),
	('2047-12-15'),
	('2047-12-16'),
	('2047-12-17'),
	('2047-12-18'),
	('2047-12-19'),
	('2047-12-20'),
	('2047-12-21'),
	('2047-12-22'),
	('2047-12-23'),
	('2047-12-24'),
	('2047-12-25'),
	('2047-12-26'),
	('2047-12-27'),
	('2047-12-28'),
	('2047-12-29'),
	('2047-12-30'),
	('2047-12-31'),
	('2048-01-01'),
	('2048-01-02'),
	('2048-01-03'),
	('2048-01-04'),
	('2048-01-05'),
	('2048-01-06'),
	('2048-01-07'),
	('2048-01-08'),
	('2048-01-09'),
	('2048-01-10'),
	('2048-01-11'),
	('2048-01-12'),
	('2048-01-13'),
	('2048-01-14'),
	('2048-01-15'),
	('2048-01-16'),
	('2048-01-17'),
	('2048-01-18'),
	('2048-01-19'),
	('2048-01-20'),
	('2048-01-21'),
	('2048-01-22'),
	('2048-01-23'),
	('2048-01-24'),
	('2048-01-25'),
	('2048-01-26'),
	('2048-01-27'),
	('2048-01-28'),
	('2048-01-29'),
	('2048-01-30'),
	('2048-01-31'),
	('2048-02-01'),
	('2048-02-02'),
	('2048-02-03'),
	('2048-02-04'),
	('2048-02-05'),
	('2048-02-06'),
	('2048-02-07'),
	('2048-02-08'),
	('2048-02-09'),
	('2048-02-10'),
	('2048-02-11'),
	('2048-02-12'),
	('2048-02-13'),
	('2048-02-14'),
	('2048-02-15'),
	('2048-02-16'),
	('2048-02-17'),
	('2048-02-18'),
	('2048-02-19'),
	('2048-02-20'),
	('2048-02-21'),
	('2048-02-22'),
	('2048-02-23'),
	('2048-02-24'),
	('2048-02-25'),
	('2048-02-26'),
	('2048-02-27'),
	('2048-02-28'),
	('2048-02-29'),
	('2048-03-01'),
	('2048-03-02'),
	('2048-03-03'),
	('2048-03-04'),
	('2048-03-05'),
	('2048-03-06'),
	('2048-03-07'),
	('2048-03-08'),
	('2048-03-09'),
	('2048-03-10'),
	('2048-03-11'),
	('2048-03-12'),
	('2048-03-13'),
	('2048-03-14'),
	('2048-03-15'),
	('2048-03-16'),
	('2048-03-17'),
	('2048-03-18'),
	('2048-03-19'),
	('2048-03-20'),
	('2048-03-21'),
	('2048-03-22'),
	('2048-03-23'),
	('2048-03-24'),
	('2048-03-25'),
	('2048-03-26'),
	('2048-03-27'),
	('2048-03-28'),
	('2048-03-29'),
	('2048-03-30'),
	('2048-03-31'),
	('2048-04-01'),
	('2048-04-02'),
	('2048-04-03'),
	('2048-04-04'),
	('2048-04-05'),
	('2048-04-06'),
	('2048-04-07'),
	('2048-04-08'),
	('2048-04-09'),
	('2048-04-10'),
	('2048-04-11'),
	('2048-04-12'),
	('2048-04-13'),
	('2048-04-14'),
	('2048-04-15'),
	('2048-04-16'),
	('2048-04-17'),
	('2048-04-18'),
	('2048-04-19'),
	('2048-04-20'),
	('2048-04-21'),
	('2048-04-22'),
	('2048-04-23'),
	('2048-04-24'),
	('2048-04-25'),
	('2048-04-26'),
	('2048-04-27'),
	('2048-04-28'),
	('2048-04-29'),
	('2048-04-30'),
	('2048-05-01'),
	('2048-05-02'),
	('2048-05-03'),
	('2048-05-04'),
	('2048-05-05'),
	('2048-05-06'),
	('2048-05-07'),
	('2048-05-08'),
	('2048-05-09'),
	('2048-05-10'),
	('2048-05-11'),
	('2048-05-12'),
	('2048-05-13'),
	('2048-05-14'),
	('2048-05-15'),
	('2048-05-16'),
	('2048-05-17'),
	('2048-05-18'),
	('2048-05-19'),
	('2048-05-20'),
	('2048-05-21'),
	('2048-05-22'),
	('2048-05-23'),
	('2048-05-24'),
	('2048-05-25'),
	('2048-05-26'),
	('2048-05-27'),
	('2048-05-28'),
	('2048-05-29'),
	('2048-05-30'),
	('2048-05-31'),
	('2048-06-01'),
	('2048-06-02'),
	('2048-06-03'),
	('2048-06-04'),
	('2048-06-05'),
	('2048-06-06'),
	('2048-06-07'),
	('2048-06-08'),
	('2048-06-09'),
	('2048-06-10'),
	('2048-06-11'),
	('2048-06-12'),
	('2048-06-13'),
	('2048-06-14'),
	('2048-06-15'),
	('2048-06-16'),
	('2048-06-17'),
	('2048-06-18'),
	('2048-06-19'),
	('2048-06-20'),
	('2048-06-21'),
	('2048-06-22'),
	('2048-06-23'),
	('2048-06-24'),
	('2048-06-25'),
	('2048-06-26'),
	('2048-06-27'),
	('2048-06-28'),
	('2048-06-29'),
	('2048-06-30'),
	('2048-07-01'),
	('2048-07-02'),
	('2048-07-03'),
	('2048-07-04'),
	('2048-07-05'),
	('2048-07-06'),
	('2048-07-07'),
	('2048-07-08'),
	('2048-07-09'),
	('2048-07-10'),
	('2048-07-11'),
	('2048-07-12'),
	('2048-07-13'),
	('2048-07-14'),
	('2048-07-15'),
	('2048-07-16'),
	('2048-07-17'),
	('2048-07-18'),
	('2048-07-19'),
	('2048-07-20'),
	('2048-07-21'),
	('2048-07-22'),
	('2048-07-23'),
	('2048-07-24'),
	('2048-07-25'),
	('2048-07-26'),
	('2048-07-27'),
	('2048-07-28'),
	('2048-07-29'),
	('2048-07-30'),
	('2048-07-31'),
	('2048-08-01'),
	('2048-08-02'),
	('2048-08-03'),
	('2048-08-04'),
	('2048-08-05'),
	('2048-08-06'),
	('2048-08-07'),
	('2048-08-08'),
	('2048-08-09'),
	('2048-08-10'),
	('2048-08-11'),
	('2048-08-12'),
	('2048-08-13'),
	('2048-08-14'),
	('2048-08-15'),
	('2048-08-16'),
	('2048-08-17'),
	('2048-08-18'),
	('2048-08-19'),
	('2048-08-20'),
	('2048-08-21'),
	('2048-08-22'),
	('2048-08-23'),
	('2048-08-24'),
	('2048-08-25'),
	('2048-08-26'),
	('2048-08-27'),
	('2048-08-28'),
	('2048-08-29'),
	('2048-08-30'),
	('2048-08-31'),
	('2048-09-01'),
	('2048-09-02'),
	('2048-09-03'),
	('2048-09-04'),
	('2048-09-05'),
	('2048-09-06'),
	('2048-09-07'),
	('2048-09-08'),
	('2048-09-09'),
	('2048-09-10'),
	('2048-09-11'),
	('2048-09-12'),
	('2048-09-13'),
	('2048-09-14'),
	('2048-09-15'),
	('2048-09-16'),
	('2048-09-17'),
	('2048-09-18'),
	('2048-09-19'),
	('2048-09-20'),
	('2048-09-21'),
	('2048-09-22'),
	('2048-09-23'),
	('2048-09-24'),
	('2048-09-25'),
	('2048-09-26'),
	('2048-09-27'),
	('2048-09-28'),
	('2048-09-29'),
	('2048-09-30'),
	('2048-10-01'),
	('2048-10-02'),
	('2048-10-03'),
	('2048-10-04'),
	('2048-10-05'),
	('2048-10-06'),
	('2048-10-07'),
	('2048-10-08'),
	('2048-10-09'),
	('2048-10-10'),
	('2048-10-11'),
	('2048-10-12'),
	('2048-10-13'),
	('2048-10-14'),
	('2048-10-15'),
	('2048-10-16'),
	('2048-10-17'),
	('2048-10-18'),
	('2048-10-19'),
	('2048-10-20'),
	('2048-10-21'),
	('2048-10-22'),
	('2048-10-23'),
	('2048-10-24'),
	('2048-10-25'),
	('2048-10-26'),
	('2048-10-27'),
	('2048-10-28'),
	('2048-10-29'),
	('2048-10-30'),
	('2048-10-31'),
	('2048-11-01'),
	('2048-11-02'),
	('2048-11-03'),
	('2048-11-04'),
	('2048-11-05'),
	('2048-11-06'),
	('2048-11-07'),
	('2048-11-08'),
	('2048-11-09'),
	('2048-11-10'),
	('2048-11-11'),
	('2048-11-12'),
	('2048-11-13'),
	('2048-11-14'),
	('2048-11-15'),
	('2048-11-16'),
	('2048-11-17'),
	('2048-11-18'),
	('2048-11-19'),
	('2048-11-20'),
	('2048-11-21'),
	('2048-11-22'),
	('2048-11-23'),
	('2048-11-24'),
	('2048-11-25'),
	('2048-11-26'),
	('2048-11-27'),
	('2048-11-28'),
	('2048-11-29'),
	('2048-11-30'),
	('2048-12-01'),
	('2048-12-02'),
	('2048-12-03'),
	('2048-12-04'),
	('2048-12-05'),
	('2048-12-06'),
	('2048-12-07'),
	('2048-12-08'),
	('2048-12-09'),
	('2048-12-10'),
	('2048-12-11'),
	('2048-12-12'),
	('2048-12-13'),
	('2048-12-14'),
	('2048-12-15'),
	('2048-12-16'),
	('2048-12-17'),
	('2048-12-18'),
	('2048-12-19'),
	('2048-12-20'),
	('2048-12-21'),
	('2048-12-22'),
	('2048-12-23'),
	('2048-12-24'),
	('2048-12-25'),
	('2048-12-26'),
	('2048-12-27'),
	('2048-12-28'),
	('2048-12-29'),
	('2048-12-30'),
	('2048-12-31'),
	('2049-01-01'),
	('2049-01-02'),
	('2049-01-03'),
	('2049-01-04'),
	('2049-01-05'),
	('2049-01-06'),
	('2049-01-07'),
	('2049-01-08'),
	('2049-01-09'),
	('2049-01-10'),
	('2049-01-11'),
	('2049-01-12'),
	('2049-01-13'),
	('2049-01-14'),
	('2049-01-15'),
	('2049-01-16'),
	('2049-01-17'),
	('2049-01-18'),
	('2049-01-19'),
	('2049-01-20'),
	('2049-01-21'),
	('2049-01-22'),
	('2049-01-23'),
	('2049-01-24'),
	('2049-01-25'),
	('2049-01-26'),
	('2049-01-27'),
	('2049-01-28'),
	('2049-01-29'),
	('2049-01-30'),
	('2049-01-31'),
	('2049-02-01'),
	('2049-02-02'),
	('2049-02-03'),
	('2049-02-04'),
	('2049-02-05'),
	('2049-02-06'),
	('2049-02-07'),
	('2049-02-08'),
	('2049-02-09'),
	('2049-02-10'),
	('2049-02-11'),
	('2049-02-12'),
	('2049-02-13'),
	('2049-02-14'),
	('2049-02-15'),
	('2049-02-16'),
	('2049-02-17'),
	('2049-02-18'),
	('2049-02-19'),
	('2049-02-20'),
	('2049-02-21'),
	('2049-02-22'),
	('2049-02-23'),
	('2049-02-24'),
	('2049-02-25'),
	('2049-02-26'),
	('2049-02-27'),
	('2049-02-28'),
	('2049-03-01'),
	('2049-03-02'),
	('2049-03-03'),
	('2049-03-04'),
	('2049-03-05'),
	('2049-03-06'),
	('2049-03-07'),
	('2049-03-08'),
	('2049-03-09'),
	('2049-03-10'),
	('2049-03-11'),
	('2049-03-12'),
	('2049-03-13'),
	('2049-03-14'),
	('2049-03-15'),
	('2049-03-16'),
	('2049-03-17'),
	('2049-03-18'),
	('2049-03-19'),
	('2049-03-20'),
	('2049-03-21'),
	('2049-03-22'),
	('2049-03-23'),
	('2049-03-24'),
	('2049-03-25'),
	('2049-03-26'),
	('2049-03-27'),
	('2049-03-28'),
	('2049-03-29'),
	('2049-03-30'),
	('2049-03-31'),
	('2049-04-01'),
	('2049-04-02'),
	('2049-04-03'),
	('2049-04-04'),
	('2049-04-05'),
	('2049-04-06'),
	('2049-04-07'),
	('2049-04-08'),
	('2049-04-09'),
	('2049-04-10'),
	('2049-04-11'),
	('2049-04-12'),
	('2049-04-13'),
	('2049-04-14'),
	('2049-04-15'),
	('2049-04-16'),
	('2049-04-17'),
	('2049-04-18'),
	('2049-04-19'),
	('2049-04-20'),
	('2049-04-21'),
	('2049-04-22'),
	('2049-04-23'),
	('2049-04-24'),
	('2049-04-25'),
	('2049-04-26'),
	('2049-04-27'),
	('2049-04-28'),
	('2049-04-29'),
	('2049-04-30'),
	('2049-05-01'),
	('2049-05-02'),
	('2049-05-03'),
	('2049-05-04'),
	('2049-05-05'),
	('2049-05-06'),
	('2049-05-07'),
	('2049-05-08'),
	('2049-05-09'),
	('2049-05-10'),
	('2049-05-11'),
	('2049-05-12'),
	('2049-05-13'),
	('2049-05-14'),
	('2049-05-15'),
	('2049-05-16'),
	('2049-05-17'),
	('2049-05-18'),
	('2049-05-19'),
	('2049-05-20'),
	('2049-05-21'),
	('2049-05-22'),
	('2049-05-23'),
	('2049-05-24'),
	('2049-05-25'),
	('2049-05-26'),
	('2049-05-27'),
	('2049-05-28'),
	('2049-05-29'),
	('2049-05-30'),
	('2049-05-31'),
	('2049-06-01'),
	('2049-06-02'),
	('2049-06-03'),
	('2049-06-04'),
	('2049-06-05'),
	('2049-06-06'),
	('2049-06-07'),
	('2049-06-08'),
	('2049-06-09'),
	('2049-06-10'),
	('2049-06-11'),
	('2049-06-12'),
	('2049-06-13'),
	('2049-06-14'),
	('2049-06-15'),
	('2049-06-16'),
	('2049-06-17'),
	('2049-06-18'),
	('2049-06-19'),
	('2049-06-20'),
	('2049-06-21'),
	('2049-06-22'),
	('2049-06-23'),
	('2049-06-24'),
	('2049-06-25'),
	('2049-06-26'),
	('2049-06-27'),
	('2049-06-28'),
	('2049-06-29'),
	('2049-06-30'),
	('2049-07-01'),
	('2049-07-02'),
	('2049-07-03'),
	('2049-07-04'),
	('2049-07-05'),
	('2049-07-06'),
	('2049-07-07'),
	('2049-07-08'),
	('2049-07-09'),
	('2049-07-10'),
	('2049-07-11'),
	('2049-07-12'),
	('2049-07-13'),
	('2049-07-14'),
	('2049-07-15'),
	('2049-07-16'),
	('2049-07-17'),
	('2049-07-18'),
	('2049-07-19'),
	('2049-07-20'),
	('2049-07-21'),
	('2049-07-22'),
	('2049-07-23'),
	('2049-07-24'),
	('2049-07-25'),
	('2049-07-26'),
	('2049-07-27'),
	('2049-07-28'),
	('2049-07-29'),
	('2049-07-30'),
	('2049-07-31'),
	('2049-08-01'),
	('2049-08-02'),
	('2049-08-03'),
	('2049-08-04'),
	('2049-08-05'),
	('2049-08-06'),
	('2049-08-07'),
	('2049-08-08'),
	('2049-08-09'),
	('2049-08-10'),
	('2049-08-11'),
	('2049-08-12'),
	('2049-08-13'),
	('2049-08-14'),
	('2049-08-15'),
	('2049-08-16'),
	('2049-08-17'),
	('2049-08-18'),
	('2049-08-19'),
	('2049-08-20'),
	('2049-08-21'),
	('2049-08-22'),
	('2049-08-23'),
	('2049-08-24'),
	('2049-08-25'),
	('2049-08-26'),
	('2049-08-27'),
	('2049-08-28'),
	('2049-08-29'),
	('2049-08-30'),
	('2049-08-31'),
	('2049-09-01'),
	('2049-09-02'),
	('2049-09-03'),
	('2049-09-04'),
	('2049-09-05'),
	('2049-09-06'),
	('2049-09-07'),
	('2049-09-08'),
	('2049-09-09'),
	('2049-09-10'),
	('2049-09-11'),
	('2049-09-12'),
	('2049-09-13'),
	('2049-09-14'),
	('2049-09-15'),
	('2049-09-16'),
	('2049-09-17'),
	('2049-09-18'),
	('2049-09-19'),
	('2049-09-20'),
	('2049-09-21'),
	('2049-09-22'),
	('2049-09-23'),
	('2049-09-24'),
	('2049-09-25'),
	('2049-09-26'),
	('2049-09-27'),
	('2049-09-28'),
	('2049-09-29'),
	('2049-09-30'),
	('2049-10-01'),
	('2049-10-02'),
	('2049-10-03'),
	('2049-10-04'),
	('2049-10-05'),
	('2049-10-06'),
	('2049-10-07'),
	('2049-10-08'),
	('2049-10-09'),
	('2049-10-10'),
	('2049-10-11'),
	('2049-10-12'),
	('2049-10-13'),
	('2049-10-14'),
	('2049-10-15'),
	('2049-10-16'),
	('2049-10-17'),
	('2049-10-18'),
	('2049-10-19'),
	('2049-10-20'),
	('2049-10-21'),
	('2049-10-22'),
	('2049-10-23'),
	('2049-10-24'),
	('2049-10-25'),
	('2049-10-26'),
	('2049-10-27'),
	('2049-10-28'),
	('2049-10-29'),
	('2049-10-30'),
	('2049-10-31'),
	('2049-11-01'),
	('2049-11-02'),
	('2049-11-03'),
	('2049-11-04'),
	('2049-11-05'),
	('2049-11-06'),
	('2049-11-07'),
	('2049-11-08'),
	('2049-11-09'),
	('2049-11-10'),
	('2049-11-11'),
	('2049-11-12'),
	('2049-11-13'),
	('2049-11-14'),
	('2049-11-15'),
	('2049-11-16'),
	('2049-11-17'),
	('2049-11-18'),
	('2049-11-19'),
	('2049-11-20'),
	('2049-11-21'),
	('2049-11-22'),
	('2049-11-23'),
	('2049-11-24'),
	('2049-11-25'),
	('2049-11-26'),
	('2049-11-27'),
	('2049-11-28'),
	('2049-11-29'),
	('2049-11-30'),
	('2049-12-01'),
	('2049-12-02'),
	('2049-12-03'),
	('2049-12-04'),
	('2049-12-05'),
	('2049-12-06'),
	('2049-12-07'),
	('2049-12-08'),
	('2049-12-09'),
	('2049-12-10'),
	('2049-12-11'),
	('2049-12-12'),
	('2049-12-13'),
	('2049-12-14'),
	('2049-12-15'),
	('2049-12-16'),
	('2049-12-17'),
	('2049-12-18'),
	('2049-12-19'),
	('2049-12-20'),
	('2049-12-21'),
	('2049-12-22'),
	('2049-12-23'),
	('2049-12-24'),
	('2049-12-25'),
	('2049-12-26'),
	('2049-12-27'),
	('2049-12-28'),
	('2049-12-29'),
	('2049-12-30'),
	('2049-12-31'),
	('2050-01-01'),
	('2050-01-02'),
	('2050-01-03'),
	('2050-01-04'),
	('2050-01-05'),
	('2050-01-06'),
	('2050-01-07'),
	('2050-01-08'),
	('2050-01-09'),
	('2050-01-10'),
	('2050-01-11'),
	('2050-01-12'),
	('2050-01-13'),
	('2050-01-14'),
	('2050-01-15'),
	('2050-01-16'),
	('2050-01-17'),
	('2050-01-18'),
	('2050-01-19'),
	('2050-01-20'),
	('2050-01-21'),
	('2050-01-22'),
	('2050-01-23'),
	('2050-01-24'),
	('2050-01-25'),
	('2050-01-26'),
	('2050-01-27'),
	('2050-01-28'),
	('2050-01-29'),
	('2050-01-30'),
	('2050-01-31'),
	('2050-02-01'),
	('2050-02-02'),
	('2050-02-03'),
	('2050-02-04'),
	('2050-02-05'),
	('2050-02-06'),
	('2050-02-07'),
	('2050-02-08'),
	('2050-02-09'),
	('2050-02-10'),
	('2050-02-11'),
	('2050-02-12'),
	('2050-02-13'),
	('2050-02-14'),
	('2050-02-15'),
	('2050-02-16'),
	('2050-02-17'),
	('2050-02-18'),
	('2050-02-19'),
	('2050-02-20'),
	('2050-02-21'),
	('2050-02-22'),
	('2050-02-23'),
	('2050-02-24'),
	('2050-02-25'),
	('2050-02-26'),
	('2050-02-27'),
	('2050-02-28'),
	('2050-03-01'),
	('2050-03-02'),
	('2050-03-03'),
	('2050-03-04'),
	('2050-03-05'),
	('2050-03-06'),
	('2050-03-07'),
	('2050-03-08'),
	('2050-03-09'),
	('2050-03-10'),
	('2050-03-11'),
	('2050-03-12'),
	('2050-03-13'),
	('2050-03-14'),
	('2050-03-15'),
	('2050-03-16'),
	('2050-03-17'),
	('2050-03-18'),
	('2050-03-19'),
	('2050-03-20'),
	('2050-03-21'),
	('2050-03-22'),
	('2050-03-23'),
	('2050-03-24'),
	('2050-03-25'),
	('2050-03-26'),
	('2050-03-27'),
	('2050-03-28'),
	('2050-03-29'),
	('2050-03-30'),
	('2050-03-31'),
	('2050-04-01'),
	('2050-04-02'),
	('2050-04-03'),
	('2050-04-04'),
	('2050-04-05'),
	('2050-04-06'),
	('2050-04-07'),
	('2050-04-08'),
	('2050-04-09'),
	('2050-04-10'),
	('2050-04-11'),
	('2050-04-12'),
	('2050-04-13'),
	('2050-04-14'),
	('2050-04-15'),
	('2050-04-16'),
	('2050-04-17'),
	('2050-04-18'),
	('2050-04-19'),
	('2050-04-20'),
	('2050-04-21'),
	('2050-04-22'),
	('2050-04-23'),
	('2050-04-24'),
	('2050-04-25'),
	('2050-04-26'),
	('2050-04-27'),
	('2050-04-28'),
	('2050-04-29'),
	('2050-04-30'),
	('2050-05-01'),
	('2050-05-02'),
	('2050-05-03'),
	('2050-05-04'),
	('2050-05-05'),
	('2050-05-06'),
	('2050-05-07'),
	('2050-05-08'),
	('2050-05-09'),
	('2050-05-10'),
	('2050-05-11'),
	('2050-05-12'),
	('2050-05-13'),
	('2050-05-14'),
	('2050-05-15'),
	('2050-05-16'),
	('2050-05-17'),
	('2050-05-18'),
	('2050-05-19'),
	('2050-05-20'),
	('2050-05-21'),
	('2050-05-22'),
	('2050-05-23'),
	('2050-05-24'),
	('2050-05-25'),
	('2050-05-26'),
	('2050-05-27'),
	('2050-05-28'),
	('2050-05-29'),
	('2050-05-30'),
	('2050-05-31'),
	('2050-06-01'),
	('2050-06-02'),
	('2050-06-03'),
	('2050-06-04'),
	('2050-06-05'),
	('2050-06-06'),
	('2050-06-07'),
	('2050-06-08'),
	('2050-06-09'),
	('2050-06-10'),
	('2050-06-11'),
	('2050-06-12'),
	('2050-06-13'),
	('2050-06-14'),
	('2050-06-15'),
	('2050-06-16'),
	('2050-06-17'),
	('2050-06-18'),
	('2050-06-19'),
	('2050-06-20'),
	('2050-06-21'),
	('2050-06-22'),
	('2050-06-23'),
	('2050-06-24'),
	('2050-06-25'),
	('2050-06-26'),
	('2050-06-27'),
	('2050-06-28'),
	('2050-06-29'),
	('2050-06-30'),
	('2050-07-01'),
	('2050-07-02'),
	('2050-07-03'),
	('2050-07-04'),
	('2050-07-05'),
	('2050-07-06'),
	('2050-07-07'),
	('2050-07-08'),
	('2050-07-09'),
	('2050-07-10'),
	('2050-07-11'),
	('2050-07-12'),
	('2050-07-13'),
	('2050-07-14'),
	('2050-07-15'),
	('2050-07-16'),
	('2050-07-17'),
	('2050-07-18'),
	('2050-07-19'),
	('2050-07-20'),
	('2050-07-21'),
	('2050-07-22'),
	('2050-07-23'),
	('2050-07-24'),
	('2050-07-25'),
	('2050-07-26'),
	('2050-07-27'),
	('2050-07-28'),
	('2050-07-29'),
	('2050-07-30'),
	('2050-07-31'),
	('2050-08-01'),
	('2050-08-02'),
	('2050-08-03'),
	('2050-08-04'),
	('2050-08-05'),
	('2050-08-06'),
	('2050-08-07'),
	('2050-08-08'),
	('2050-08-09'),
	('2050-08-10'),
	('2050-08-11'),
	('2050-08-12'),
	('2050-08-13'),
	('2050-08-14'),
	('2050-08-15'),
	('2050-08-16'),
	('2050-08-17'),
	('2050-08-18'),
	('2050-08-19'),
	('2050-08-20'),
	('2050-08-21'),
	('2050-08-22'),
	('2050-08-23'),
	('2050-08-24'),
	('2050-08-25'),
	('2050-08-26'),
	('2050-08-27'),
	('2050-08-28'),
	('2050-08-29'),
	('2050-08-30'),
	('2050-08-31'),
	('2050-09-01'),
	('2050-09-02'),
	('2050-09-03'),
	('2050-09-04'),
	('2050-09-05'),
	('2050-09-06'),
	('2050-09-07'),
	('2050-09-08'),
	('2050-09-09'),
	('2050-09-10'),
	('2050-09-11'),
	('2050-09-12'),
	('2050-09-13'),
	('2050-09-14'),
	('2050-09-15'),
	('2050-09-16'),
	('2050-09-17'),
	('2050-09-18'),
	('2050-09-19'),
	('2050-09-20'),
	('2050-09-21'),
	('2050-09-22'),
	('2050-09-23'),
	('2050-09-24'),
	('2050-09-25'),
	('2050-09-26'),
	('2050-09-27'),
	('2050-09-28'),
	('2050-09-29'),
	('2050-09-30'),
	('2050-10-01'),
	('2050-10-02'),
	('2050-10-03'),
	('2050-10-04'),
	('2050-10-05'),
	('2050-10-06'),
	('2050-10-07'),
	('2050-10-08'),
	('2050-10-09'),
	('2050-10-10'),
	('2050-10-11'),
	('2050-10-12'),
	('2050-10-13'),
	('2050-10-14'),
	('2050-10-15'),
	('2050-10-16'),
	('2050-10-17'),
	('2050-10-18'),
	('2050-10-19'),
	('2050-10-20'),
	('2050-10-21'),
	('2050-10-22'),
	('2050-10-23'),
	('2050-10-24'),
	('2050-10-25'),
	('2050-10-26'),
	('2050-10-27'),
	('2050-10-28'),
	('2050-10-29'),
	('2050-10-30'),
	('2050-10-31'),
	('2050-11-01'),
	('2050-11-02'),
	('2050-11-03'),
	('2050-11-04'),
	('2050-11-05'),
	('2050-11-06'),
	('2050-11-07'),
	('2050-11-08'),
	('2050-11-09'),
	('2050-11-10'),
	('2050-11-11'),
	('2050-11-12'),
	('2050-11-13'),
	('2050-11-14'),
	('2050-11-15'),
	('2050-11-16'),
	('2050-11-17'),
	('2050-11-18'),
	('2050-11-19'),
	('2050-11-20'),
	('2050-11-21'),
	('2050-11-22'),
	('2050-11-23'),
	('2050-11-24'),
	('2050-11-25'),
	('2050-11-26'),
	('2050-11-27'),
	('2050-11-28'),
	('2050-11-29'),
	('2050-11-30'),
	('2050-12-01'),
	('2050-12-02'),
	('2050-12-03'),
	('2050-12-04'),
	('2050-12-05'),
	('2050-12-06'),
	('2050-12-07'),
	('2050-12-08'),
	('2050-12-09'),
	('2050-12-10'),
	('2050-12-11'),
	('2050-12-12'),
	('2050-12-13'),
	('2050-12-14'),
	('2050-12-15'),
	('2050-12-16'),
	('2050-12-17'),
	('2050-12-18'),
	('2050-12-19'),
	('2050-12-20'),
	('2050-12-21'),
	('2050-12-22'),
	('2050-12-23'),
	('2050-12-24'),
	('2050-12-25'),
	('2050-12-26'),
	('2050-12-27'),
	('2050-12-28'),
	('2050-12-29'),
	('2050-12-30'),
	('2050-12-31');
/*!40000 ALTER TABLE `dates` ENABLE KEYS */;

-- Dumping structure for view accupaydb_cinema2k.employeeidhistory
DROP VIEW IF EXISTS `employeeidhistory`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `employeeidhistory` (
	`RowID` INT(10) NOT NULL,
	`EmployeeRowID` INT(10) NOT NULL,
	`OrganizationID` INT(10) NULL,
	`EmployeeID` VARCHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`LastName` VARCHAR(100) NULL COLLATE 'latin1_swedish_ci',
	`FirstName` VARCHAR(100) NULL COLLATE 'latin1_swedish_ci',
	`MiddleName` VARCHAR(100) NULL COLLATE 'latin1_swedish_ci',
	`PositionName` VARCHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`OldValue` VARCHAR(200) NULL COMMENT 'old value of field' COLLATE 'latin1_swedish_ci',
	`NewValue` VARCHAR(200) NULL COMMENT 'new value of field' COLLATE 'latin1_swedish_ci',
	`ActionPerformed` VARCHAR(50) NOT NULL COMMENT 'New Record, Modify Record, Delete Record' COLLATE 'latin1_swedish_ci',
	`Created` DATETIME NOT NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.employeesalary_withdailyrate
DROP VIEW IF EXISTS `employeesalary_withdailyrate`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `employeesalary_withdailyrate` (
	`RowID` INT(11) NOT NULL,
	`EmployeeID` INT(11) NOT NULL,
	`Created` DATETIME NOT NULL,
	`CreatedBy` INT(11) NOT NULL,
	`LastUpd` DATETIME NULL,
	`LastUpdBy` INT(11) NULL,
	`OrganizationID` INT(11) NOT NULL,
	`FilingStatusID` INT(11) NULL,
	`PaySocialSecurityID` INT(11) NULL,
	`PayPhilhealthID` INT(11) NULL,
	`PhilHealthDeduction` DECIMAL(15,4) NULL,
	`HDMFAmount` DECIMAL(11,2) NULL,
	`TrueSalary` DECIMAL(11,2) NULL,
	`BasicPay` DECIMAL(11,2) NOT NULL,
	`Salary` DECIMAL(11,2) NULL,
	`UndeclaredSalary` DECIMAL(11,2) NULL,
	`BasicDailyPay` DECIMAL(11,2) NULL,
	`BasicHourlyPay` DECIMAL(11,2) NULL,
	`NoofDependents` INT(11) NULL,
	`MaritalStatus` VARCHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`PositionID` INT(11) NULL,
	`EffectiveDateFrom` DATE NULL,
	`EffectiveDateTo` DATE NULL,
	`OverrideDiscardSSSContrib` TINYINT(4) NULL,
	`OverrideDiscardPhilHealthContrib` TINYINT(4) NULL,
	`DailyRate` DECIMAL(23,6) NULL,
	`MonthlySalary` DECIMAL(22,6) NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.employeeshift_withshiftimestamp
DROP VIEW IF EXISTS `employeeshift_withshiftimestamp`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `employeeshift_withshiftimestamp` (
	`RowID` INT(10) NOT NULL,
	`OrganizationID` INT(10) NOT NULL,
	`Created` TIMESTAMP NOT NULL,
	`CreatedBy` INT(10) NULL,
	`LastUpd` DATETIME NULL,
	`LastUpdBy` INT(10) NULL,
	`EmployeeID` INT(10) NULL,
	`ShiftID` INT(10) NULL,
	`EffectiveFrom` DATE NULL,
	`EffectiveTo` DATE NULL,
	`NightShift` TINYINT(1) NOT NULL,
	`RestDay` TINYINT(1) NOT NULL,
	`IsEncodedByDay` CHAR(1) NULL COLLATE 'latin1_swedish_ci',
	`DateValue` DATE NULL,
	`DateTimeFrom` DATETIME NULL,
	`DateTimeTo` DATETIME NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.expectedhours
DROP VIEW IF EXISTS `expectedhours`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `expectedhours` (
	`EmployeeID` INT(10) NULL,
	`OrganizationID` INT(10) NOT NULL,
	`Date` DATE NOT NULL COMMENT 'time entry date',
	`TotalExpectedHours` DECIMAL(13,2) NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.generator_16
DROP VIEW IF EXISTS `generator_16`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `generator_16` (
	`n` INT(2) NOT NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.latestleaveledger
DROP VIEW IF EXISTS `latestleaveledger`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `latestleaveledger` (
	`RowID` INT(10) NOT NULL,
	`OrganizationID` INT(10) NULL,
	`Created` TIMESTAMP NULL,
	`CreatedBy` INT(10) NULL,
	`LastUpd` TIMESTAMP NULL,
	`LastUpdBy` INT(10) NULL,
	`EmployeeID` INT(10) NULL,
	`ProductID` INT(10) NULL,
	`LastTransactionID` INT(10) NULL,
	`LeaveType` VARCHAR(200) NOT NULL COMMENT 'unique part number for this product' COLLATE 'latin1_swedish_ci',
	`ReferenceID` INT(10) NULL,
	`PayPeriodID` INT(10) NULL,
	`LeaveLedgerID` INT(10) NULL,
	`TransactionDate` DATE NULL,
	`Type` VARCHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`Balance` DECIMAL(10,2) NULL,
	`Amount` DECIMAL(10,2) NULL,
	`PayFromDate` DATE NULL,
	`PayToDate` DATE NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.payperiod_totalperiods
DROP VIEW IF EXISTS `payperiod_totalperiods`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `payperiod_totalperiods` (
	`RowID` INT(10) NOT NULL,
	`OrganizationID` INT(10) NULL,
	`Created` TIMESTAMP NOT NULL,
	`CreatedBy` INT(10) NULL,
	`LastUpd` DATETIME NULL,
	`LastUpdBy` INT(10) NULL,
	`PayFromDate` DATE NULL,
	`PayToDate` DATE NULL,
	`TotalGrossSalary` DECIMAL(10,2) NULL,
	`TotalNetSalary` DECIMAL(10,2) NULL,
	`TotalEmpSSS` DECIMAL(10,2) NULL,
	`TotalEmpWithholdingTax` DECIMAL(10,2) NULL,
	`TotalCompSSS` DECIMAL(10,2) NULL,
	`TotalEmpPhilhealth` DECIMAL(10,2) NULL,
	`TotalCompPhilhealth` DECIMAL(10,2) NULL,
	`TotalEmpHDMF` DECIMAL(10,2) NULL,
	`TotalCompHDMF` DECIMAL(10,2) NULL,
	`Month` INT(11) NULL,
	`Year` INT(4) NULL,
	`Half` INT(1) NULL,
	`SSSContribSched` TINYINT(1) NULL COMMENT 'This flag only applies to \'Weekly\' employees,a sched to when the govt contrib be deducted',
	`PhHContribSched` TINYINT(1) NULL COMMENT 'This flag only applies to \'Weekly\' employees,a sched to when the govt contrib be deducted',
	`HDMFContribSched` TINYINT(1) NULL COMMENT 'This flag only applies to \'Weekly\' employees,a sched to when the govt contrib be deducted',
	`SSSWeeklyContribSched` TINYINT(1) NULL,
	`PhHWeeklyContribSched` TINYINT(1) NULL,
	`HDMFWeeklyContribSched` TINYINT(1) NULL,
	`WTaxWeeklyContribSched` TINYINT(1) NULL,
	`SSSWeeklyAgentContribSched` TINYINT(1) NULL,
	`PhHWeeklyAgentContribSched` TINYINT(1) NULL,
	`HDMFWeeklyAgentContribSched` TINYINT(1) NULL,
	`WTaxWeeklyAgentContribSched` TINYINT(1) NULL,
	`OrdinalValue` INT(11) NULL,
	`WeekOrdinalValue` INT(11) NULL,
	`MinWageValue` DECIMAL(10,2) NULL,
	`WeekOridnalValue` INT(11) NULL,
	`IsLastFridayOfMonthFallsHere` TINYINT(1) NULL,
	`ppcount` BIGINT(21) NOT NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.paystubadjustwithproductname
DROP VIEW IF EXISTS `paystubadjustwithproductname`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `paystubadjustwithproductname` (
	`RowID` BIGINT(20) NOT NULL,
	`OrganizationID` INT(11) NOT NULL,
	`Created` DATETIME NOT NULL,
	`CreatedBy` INT(11) NULL,
	`LastUpd` DATETIME NULL,
	`LastUpdBy` INT(11) NULL,
	`PayStubID` INT(11) NULL,
	`ProductID` INT(11) NOT NULL,
	`PayAmount` DECIMAL(14,6) NULL,
	`Comment` VARCHAR(200) NULL COLLATE 'latin1_swedish_ci',
	`IsActual` TINYINT(4) NULL,
	`AdjustmentName` VARCHAR(200) NOT NULL COLLATE 'latin1_swedish_ci',
	`AsActual` INT(1) NOT NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.paystubitem_sum_daily_allowance_group_prodid
DROP VIEW IF EXISTS `paystubitem_sum_daily_allowance_group_prodid`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `paystubitem_sum_daily_allowance_group_prodid` (
	`etRowID` INT(10) NOT NULL,
	`eaRowID` INT(10) NOT NULL,
	`ProductID` INT(10) NULL,
	`EmployeeID` INT(10) NULL,
	`OrganizationID` INT(10) NOT NULL,
	`Date` DATE NOT NULL COMMENT 'time entry date',
	`Column1` INT(1) NOT NULL,
	`TaxableFlag` CHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`TotalAllowanceAmt` DECIMAL(30,8) NULL,
	`Fixed` TINYINT(1) NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.paystubitem_sum_daily_allowance_group_prodid_compress
DROP VIEW IF EXISTS `paystubitem_sum_daily_allowance_group_prodid_compress`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `paystubitem_sum_daily_allowance_group_prodid_compress` (
	`etRowID` INT(10) NOT NULL,
	`eaRowID` INT(10) NOT NULL,
	`ProductID` INT(10) NULL,
	`EmployeeID` INT(10) NULL,
	`OrganizationID` INT(10) NOT NULL,
	`Date` DATE NOT NULL COMMENT 'time entry date',
	`Column1` INT(1) NOT NULL,
	`TaxableFlag` CHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`PayType` VARCHAR(50) NULL COMMENT 'Regular, Holiday, Special Holiday, etc.' COLLATE 'latin1_swedish_ci',
	`TotalAllowanceAmt` DECIMAL(30,8) NULL,
	`Fixed` TINYINT(1) NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.paystubitem_sum_semimon_allowance_group_prodid
DROP VIEW IF EXISTS `paystubitem_sum_semimon_allowance_group_prodid`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `paystubitem_sum_semimon_allowance_group_prodid` (
	`etRowID` INT(11) NOT NULL,
	`eaRowID` INT(11) NOT NULL,
	`ProductID` INT(11) NULL,
	`EmployeeID` INT(11) NULL,
	`OrganizationID` INT(11) NOT NULL,
	`Date` DATE NOT NULL,
	`Column1` INT(1) NOT NULL,
	`HolidayAllowance` DECIMAL(53,16) NULL,
	`TaxableFlag` CHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`HoursToLess` DECIMAL(17,6) NOT NULL,
	`AllowanceAmount` DECIMAL(10,2) NULL,
	`WorkDaysPerYear` DECIMAL(10,4) NULL,
	`Fixed` TINYINT(4) NULL,
	`PAYFREQDIV` INT(11) NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.schedloanpercutoff
DROP VIEW IF EXISTS `schedloanpercutoff`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `schedloanpercutoff` (
	`elsRowId` INT(3) NOT NULL,
	`PayPeriodId` INT(4) NOT NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.schedloanpercutoff2
DROP VIEW IF EXISTS `schedloanpercutoff2`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `schedloanpercutoff2` (
	`RowID` INT(11) NOT NULL,
	`Created` TIMESTAMP NOT NULL,
	`CreatedBy` INT(11) NULL,
	`LastUpd` TIMESTAMP NOT NULL,
	`LastUpdBy` INT(11) NULL,
	`OrganizationID` INT(11) NULL,
	`PayPeriodID` INT(11) NULL,
	`EmployeeID` INT(11) NULL,
	`EmployeeLoanRecordID` INT(11) NULL,
	`LoanPayPeriodLeft` INT(11) NULL,
	`TotalBalanceLeft` DECIMAL(20,6) NULL,
	`DeductionAmount` DECIMAL(20,6) NULL,
	`TotalLoanAmount` DECIMAL(20,6) NULL,
	`PayFromDate` DATE NULL,
	`PayToDate` DATE NULL,
	`OrdinalValue` INT(11) NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.vw_disciplinarymemouserdetails
DROP VIEW IF EXISTS `vw_disciplinarymemouserdetails`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `vw_disciplinarymemouserdetails` (
	`UserID` INT(11) NOT NULL,
	`FirstName` VARCHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`MiddleName` VARCHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`LastName` VARCHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`CompanyName` VARCHAR(100) NULL COLLATE 'latin1_swedish_ci',
	`Image` MEDIUMBLOB NULL,
	`PositionName` VARCHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`FullName` VARCHAR(105) NULL COLLATE 'latin1_swedish_ci'
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.v_employeetimeentry_numbers
DROP VIEW IF EXISTS `v_employeetimeentry_numbers`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_employeetimeentry_numbers` (
	`RowID` INT(11) NOT NULL,
	`OrganizationID` INT(11) NOT NULL,
	`Date` DATE NOT NULL,
	`PayPeriodID` INT(11) NOT NULL,
	`EmployeeID` INT(11) NULL,
	`RegularHoursWorked` DECIMAL(10,2) NOT NULL,
	`DivisorToDailyRate` DECIMAL(10,2) NULL,
	`AttendancePercentage` DECIMAL(16,6) NULL,
	`HoursDeduct` DECIMAL(17,6) NOT NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.v_emptimeenetryholidaypay
DROP VIEW IF EXISTS `v_emptimeenetryholidaypay`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_emptimeenetryholidaypay` (
	`RowID` INT(10) NOT NULL,
	`OrganizationID` INT(10) NOT NULL,
	`Created` TIMESTAMP NOT NULL,
	`CreatedBy` INT(10) NULL,
	`LastUpd` DATETIME NULL,
	`LastUpdBy` INT(10) NULL,
	`Date` DATE NOT NULL COMMENT 'time entry date',
	`EmployeeShiftID` INT(10) NULL,
	`EmployeeID` INT(10) NULL,
	`EmployeeSalaryID` INT(10) NULL,
	`EmployeeFixedSalaryFlag` CHAR(1) NULL COMMENT 'Flag is derived from EmployeeSalary table. flag to indicate if employee is on fixed salary, thus no overtime pay is calculated. TotalDayPay is fixed regardless of hours worked.' COLLATE 'latin1_swedish_ci',
	`ShiftHours` DECIMAL(10,2) NOT NULL,
	`WorkHours` DECIMAL(10,2) NOT NULL,
	`RegularHoursWorked` DECIMAL(10,2) NOT NULL,
	`RegularHoursAmount` DECIMAL(11,6) NOT NULL,
	`TotalHoursWorked` DECIMAL(10,2) NOT NULL,
	`OvertimeHoursWorked` DECIMAL(10,2) NOT NULL,
	`OvertimeHoursAmount` DECIMAL(11,6) NOT NULL,
	`UndertimeHours` DECIMAL(10,2) NOT NULL,
	`UndertimeHoursAmount` DECIMAL(11,6) NOT NULL,
	`NightDifferentialHours` DECIMAL(10,2) NOT NULL,
	`NightDiffHoursAmount` DECIMAL(11,6) NOT NULL,
	`NightDifferentialOTHours` DECIMAL(10,2) NOT NULL,
	`NightDiffOTHoursAmount` DECIMAL(11,6) NOT NULL,
	`HoursLate` DECIMAL(11,2) NOT NULL,
	`HoursLateAmount` DECIMAL(11,6) NOT NULL,
	`LateFlag` VARCHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`PayRateID` INT(11) NULL COMMENT 'Defines if the day is a Holiday, Special Holiday, Regular Day, HolidayType',
	`VacationLeaveHours` DECIMAL(10,2) NOT NULL,
	`SickLeaveHours` DECIMAL(10,2) NOT NULL,
	`MaternityLeaveHours` DECIMAL(10,2) NOT NULL,
	`OtherLeaveHours` DECIMAL(10,2) NOT NULL,
	`TotalDayPay` DECIMAL(11,6) NOT NULL,
	`Absent` DECIMAL(10,2) NOT NULL,
	`ChargeToDivisionID` INT(11) NULL,
	`TaxableDailyAllowance` DECIMAL(11,6) NOT NULL,
	`SpecialHolidayHours` DECIMAL(11,6) NOT NULL,
	`SpecialHolidayPay` DECIMAL(11,6) NOT NULL,
	`SpecialHolidayOTHours` DECIMAL(11,6) NOT NULL,
	`SpecialHolidayOTPay` DECIMAL(11,6) NOT NULL,
	`RegularHolidayHours` DECIMAL(11,6) NOT NULL,
	`RegularHolidayPay` DECIMAL(11,6) NOT NULL,
	`RegularHolidayOTHours` DECIMAL(11,6) NOT NULL,
	`RegularHolidayOTPay` DECIMAL(11,6) NOT NULL,
	`HolidayPayAmount` DECIMAL(11,6) NOT NULL,
	`TaxableDailyBonus` DECIMAL(11,6) NOT NULL,
	`NonTaxableDailyBonus` DECIMAL(11,6) NOT NULL,
	`Leavepayment` DECIMAL(11,6) NOT NULL,
	`BasicDayPay` DECIMAL(11,6) NOT NULL,
	`RestDayHours` DECIMAL(11,6) NOT NULL,
	`RestDayAmount` DECIMAL(11,6) NOT NULL,
	`RestDayOTHours` DECIMAL(11,6) NOT NULL,
	`RestDayOTPay` DECIMAL(11,6) NOT NULL,
	`AbsentHours` DECIMAL(11,6) NOT NULL,
	`PayType` VARCHAR(50) NULL COMMENT 'Regular, Holiday, Special Holiday, etc.' COLLATE 'latin1_swedish_ci',
	`PayRate` DECIMAL(10,4) NULL COMMENT 'payout rate 1.10, 1.20,2.0 (10%, 20%, 100%, etc)',
	`OvertimeRate` DECIMAL(10,4) NULL,
	`NightDifferentialRate` DECIMAL(10,4) NULL,
	`NightDifferentialOTRate` DECIMAL(10,4) NULL,
	`RestDayRate` DECIMAL(10,4) NULL,
	`RestDayOvertimeRate` DECIMAL(10,4) NULL,
	`HolidayPay` DECIMAL(20,10) NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.v_sumpsitaxableallowance
DROP VIEW IF EXISTS `v_sumpsitaxableallowance`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_sumpsitaxableallowance` (
	`psiRowID` INT(10) NOT NULL,
	`PayAmount` DECIMAL(11,2) NULL,
	`OrganizationID` INT(10) NOT NULL,
	`PayStubID` INT(10) NULL,
	`ProductID` INT(10) NULL,
	`Undeclared` CHAR(1) NULL COLLATE 'latin1_swedish_ci',
	`CategoryID` INT(11) NULL,
	`Taxable` VARCHAR(50) NULL COMMENT 'Active, Inactive' COLLATE 'latin1_swedish_ci',
	`PartNo` VARCHAR(200) NOT NULL COMMENT 'unique part number for this product' COLLATE 'latin1_swedish_ci'
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.v_sumthirteenthmonthpay
DROP VIEW IF EXISTS `v_sumthirteenthmonthpay`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_sumthirteenthmonthpay` (
	`RowID` INT(10) NOT NULL,
	`OrganizationID` INT(10) NOT NULL,
	`PaystubID` INT(10) NULL,
	`Amount` DECIMAL(15,4) NULL,
	`PayFromDate` DATE NULL,
	`PayToDate` DATE NULL,
	`EmployeeID` INT(10) NULL,
	`Half` INT(1) NULL,
	`Month` INT(11) NULL,
	`Year` INT(4) NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.v_uni_employeetimeentry
DROP VIEW IF EXISTS `v_uni_employeetimeentry`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_uni_employeetimeentry` (
	`RowID` INT(11) NOT NULL,
	`OrganizationID` INT(11) NULL,
	`Date` DATE NOT NULL,
	`EmployeeShiftID` INT(11) NULL,
	`EmployeeID` INT(11) NULL,
	`EmployeeSalaryID` INT(11) NULL,
	`EmployeeFixedSalaryFlag` CHAR(1) NULL COLLATE 'latin1_swedish_ci',
	`RegularHoursWorked` DECIMAL(10,2) NOT NULL,
	`RegularHoursAmount` DECIMAL(12,6) NOT NULL,
	`TotalHoursWorked` DECIMAL(10,2) NOT NULL,
	`OvertimeHoursWorked` DECIMAL(10,2) NOT NULL,
	`OvertimeHoursAmount` DECIMAL(12,6) NOT NULL,
	`UndertimeHours` DECIMAL(10,2) NOT NULL,
	`UndertimeHoursAmount` DECIMAL(12,6) NOT NULL,
	`NightDifferentialHours` DECIMAL(10,2) NOT NULL,
	`NightDiffHoursAmount` DECIMAL(12,6) NOT NULL,
	`NightDifferentialOTHours` DECIMAL(10,2) NOT NULL,
	`NightDiffOTHoursAmount` DECIMAL(12,6) NOT NULL,
	`HoursLate` DECIMAL(11,2) NOT NULL,
	`HoursLateAmount` DECIMAL(12,6) NOT NULL,
	`LateFlag` VARCHAR(50) NULL COLLATE 'latin1_swedish_ci',
	`PayRateID` INT(11) NULL,
	`VacationLeaveHours` DECIMAL(10,2) NOT NULL,
	`SickLeaveHours` DECIMAL(10,2) NOT NULL,
	`MaternityLeaveHours` DECIMAL(10,2) NOT NULL,
	`OtherLeaveHours` DECIMAL(10,2) NOT NULL,
	`TotalDayPay` DECIMAL(12,6) NOT NULL,
	`Absent` DECIMAL(14,6) NOT NULL,
	`ChargeToDivisionID` INT(11) NULL,
	`HolidayPayAmount` DECIMAL(12,6) NOT NULL,
	`AsActual` INT(1) NOT NULL,
	`RestDayHours` DECIMAL(12,6) NOT NULL,
	`RestDayAmount` DECIMAL(12,6) NOT NULL,
	`RestDayOTHours` DECIMAL(11,6) NOT NULL,
	`RestDayOTPay` DECIMAL(11,6) NOT NULL
) ENGINE=MyISAM;

-- Dumping structure for view accupaydb_cinema2k.v_uni_paystub
DROP VIEW IF EXISTS `v_uni_paystub`;
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_uni_paystub` (
	`RowID` INT(11) NOT NULL,
	`OrganizationID` INT(11) NULL,
	`PayPeriodID` INT(11) NULL,
	`EmployeeID` INT(11) NULL,
	`TimeEntryID` INT(11) NULL,
	`PayFromDate` DATE NULL,
	`PayToDate` DATE NULL,
	`TotalGrossSalary` DECIMAL(15,4) NOT NULL,
	`TotalNetSalary` DECIMAL(15,4) NOT NULL,
	`TotalTaxableSalary` DECIMAL(15,4) NOT NULL,
	`TotalEmpSSS` DECIMAL(15,4) NOT NULL,
	`TotalEmpWithholdingTax` DECIMAL(15,4) NOT NULL,
	`TotalCompSSS` DECIMAL(15,4) NOT NULL,
	`TotalEmpPhilhealth` DECIMAL(15,4) NOT NULL,
	`TotalCompPhilhealth` DECIMAL(15,4) NOT NULL,
	`TotalEmpHDMF` DECIMAL(15,4) NOT NULL,
	`TotalCompHDMF` DECIMAL(15,4) NOT NULL,
	`TotalVacationDaysLeft` DECIMAL(10,2) NOT NULL,
	`TotalLoans` DECIMAL(15,4) NOT NULL,
	`TotalBonus` DECIMAL(15,4) NOT NULL,
	`TotalAllowance` DECIMAL(15,4) NOT NULL,
	`TotalAdjustments` DECIMAL(15,4) NOT NULL,
	`ThirteenthMonthInclusion` TINYINT(4) NULL,
	`FirstTimeSalary` TINYINT(4) NULL,
	`AsActual` INT(1) NOT NULL
) ENGINE=MyISAM;

-- Dumping structure for procedure accupaydb_cinema2k.aftins_paystubbonus_then_aftins_bonusloandeduction
DROP PROCEDURE IF EXISTS `aftins_paystubbonus_then_aftins_bonusloandeduction`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `aftins_paystubbonus_then_aftins_bonusloandeduction`(IN `OrganizID` INT, IN `UserRowID` INT, IN `EmpRowID` INT, IN `psb_PayPeriodID` INT, IN `min_date_ofparamdate` DATE, IN `max_date_ofparamdate` DATE)
    DETERMINISTIC
BEGIN

/* Disable first the functionalities in AFTINS_paystubbonus trigger */

DECLARE IsFirstHalfOfMonth
        ,is_bonus_loan_deduct_exists BOOL;

DECLARE pay_datefrom
        ,pay_dateto DATE;

SELECT EXISTS(SELECT bld.RowID
              FROM bonusloandeduction bld
              INNER JOIN employeeloanschedule els
                      ON els.RowID=bld.LoanSchedID
                         AND els.OrganizationID=bld.OrganizationID
                         AND els.EmployeeID=EmpRowID
              WHERE bld.PayPeriodID=psb_PayPeriodID
              AND bld.OrganizationID=OrganizID
              ) `Result`
INTO is_bonus_loan_deduct_exists;

SELECT (pp.`Half` = 1) `Result`
,pp.PayFromDate
,pp.PayToDate
FROM payperiod pp
WHERE pp.RowID=psb_PayPeriodID
INTO IsFirstHalfOfMonth
     ,pay_datefrom
	  ,pay_dateto;

INSERT INTO bonusloandeduction
(
  OrganizationID
  ,CreatedBy
  ,LoanSchedID
  ,PayPeriodID
  ,DeductionLoanAmount
) SELECT
  OrganizID
  ,UserRowID
  ,i.RowID
  ,psb_PayPeriodID
  ,(@els_deduct_amt := i.`DeductionAmount`)
  
  FROM (SELECT
        els.RowID
        ,IF(els.LoanPayPeriodLeft = 0
		      , ( els.DeductionAmount + (els.TotalLoanAmount - (els.DeductionAmount * els.NoOfPayPeriod)) )
	         , els.DeductionAmount) `DeductionAmount`
        FROM employeeloanschedule els
		  INNER JOIN employeebonus eb
		          ON eb.EmployeeID = EmpRowID
					    AND eb.OrganizationID = OrganizID
						 AND (eb.EffectiveStartDate >= pay_datefrom OR eb.EffectiveEndDate >= pay_datefrom)
						 AND (eb.EffectiveStartDate <= pay_dateto OR eb.EffectiveEndDate <= pay_dateto)
						 AND els.BonusPotentialPaymentForLoan = 0
						 AND eb.RowID = els.BonusID
        WHERE els.EmployeeID=EmpRowID
		  AND els.OrganizationID=OrganizID
		  AND els.`Status` IN ('In progress', 'Complete')
		  AND els.BonusID IS NOT NULL
		  AND (els.DedEffectiveDateFrom >= min_date_ofparamdate OR els.DedEffectiveDateTo >= min_date_ofparamdate)
		  AND (els.DedEffectiveDateFrom <= max_date_ofparamdate OR els.DedEffectiveDateTo <= max_date_ofparamdate)
        
      UNION
        SELECT
        els.RowID
        ,(els.TotalLoanAmount - ((els.NoOfPayPeriod - els.LoanPayPeriodLeftForBonus) * els.DeductionAmount)) `DeductionAmount`
        FROM employeeloanschedule els
		  INNER JOIN employeebonus eb
		          ON eb.EmployeeID = EmpRowID
					    AND eb.OrganizationID = OrganizID
						 AND (eb.EffectiveStartDate >= pay_datefrom OR eb.EffectiveEndDate >= pay_datefrom)
						 AND (eb.EffectiveStartDate <= pay_dateto OR eb.EffectiveEndDate <= pay_dateto)
						 AND els.BonusPotentialPaymentForLoan = 1
						 AND eb.RowID = els.BonusID
        WHERE els.EmployeeID=EmpRowID
		  AND els.OrganizationID=OrganizID
		  AND els.`Status` IN ('In progress', 'Complete')
		  AND els.BonusID IS NOT NULL
		  AND (els.DedEffectiveDateFrom >= min_date_ofparamdate OR els.DedEffectiveDateTo >= min_date_ofparamdate)
		  AND (els.DedEffectiveDateFrom <= max_date_ofparamdate OR els.DedEffectiveDateTo <= max_date_ofparamdate)
        
        ) i
ON
DUPLICATE
KEY
UPDATE
  LastUpd=CURRENT_TIMESTAMP()
  ,LastUpdBy=UserRowID
  ,DeductionLoanAmount=@els_deduct_amt;


# Bonus pays loan deduction amount
UPDATE employeeloanschedule els
INNER JOIN employeebonus eb
        ON eb.EmployeeID = els.EmployeeID
	        AND eb.OrganizationID = els.OrganizationID
			  AND eb.RowID = els.BonusID

INNER JOIN (SELECT bld.RowID
           ,bld.LoanSchedID
           FROM bonusloandeduction bld
           INNER JOIN employeeloanschedule els
                   ON els.RowID=bld.LoanSchedID
                      AND els.OrganizationID=bld.OrganizationID
                      AND els.EmployeeID=EmpRowID
							 # AND els.BonusPotentialPaymentForLoan = 0
           WHERE bld.PayPeriodID=psb_PayPeriodID
           AND bld.OrganizationID=OrganizID
           ) i
       ON i.LoanSchedID != els.RowID

SET els.LoanPayPeriodLeft = IF((els.LoanPayPeriodLeft - 1) < 0, 0, (els.LoanPayPeriodLeft - 1))
,els.TotalBalanceLeft = (els.TotalBalanceLeft - els.DeductionAmount)
,els.LastUpdBy=UserRowID
WHERE els.EmployeeID=EmpRowID
AND els.OrganizationID=OrganizID
AND els.`Status`='In progress'
AND els.BonusID IS NOT NULL
AND (els.DedEffectiveDateFrom >= min_date_ofparamdate OR els.DedEffectiveDateTo >= min_date_ofparamdate)
AND (els.DedEffectiveDateFrom <= max_date_ofparamdate OR els.DedEffectiveDateTo <= max_date_ofparamdate)
AND els.BonusPotentialPaymentForLoan = 0
# AND is_bonus_loan_deduct_exists = FALSE
;


# Bonus pays full loan balance
UPDATE employeeloanschedule els
INNER JOIN employeebonus eb
        ON eb.EmployeeID = els.EmployeeID
	        AND eb.OrganizationID = els.OrganizationID
			  AND eb.RowID = els.BonusID

INNER JOIN (SELECT bld.RowID
           ,bld.LoanSchedID
           FROM bonusloandeduction bld
           INNER JOIN employeeloanschedule els
                   ON els.RowID=bld.LoanSchedID
                      AND els.OrganizationID=bld.OrganizationID
                      AND els.EmployeeID=EmpRowID
							 # AND els.BonusPotentialPaymentForLoan = 1
           WHERE bld.PayPeriodID=psb_PayPeriodID
           AND bld.OrganizationID=OrganizID
           ) i
       ON i.LoanSchedID != els.RowID

SET els.LoanPayPeriodLeft = (els.LoanPayPeriodLeft - els.LoanPayPeriodLeftForBonus)
,els.TotalBalanceLeft = (els.TotalBalanceLeft - (els.TotalLoanAmount - ((els.NoOfPayPeriod - els.LoanPayPeriodLeftForBonus) * els.DeductionAmount)))
,els.LastUpdBy=UserRowID
WHERE els.EmployeeID=EmpRowID
AND els.OrganizationID=OrganizID
AND els.`Status`='In progress'
AND els.BonusID IS NOT NULL
AND (els.DedEffectiveDateFrom >= min_date_ofparamdate OR els.DedEffectiveDateTo >= min_date_ofparamdate)
AND (els.DedEffectiveDateFrom <= max_date_ofparamdate OR els.DedEffectiveDateTo <= max_date_ofparamdate)
AND els.BonusPotentialPaymentForLoan = 1
# AND is_bonus_loan_deduct_exists = FALSE
;


END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.AUTOINS_leaveledger
DROP PROCEDURE IF EXISTS `AUTOINS_leaveledger`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `AUTOINS_leaveledger`(IN `og_rowid` INT, IN `e_rowid` INT, IN `user_rowid` INT)
    DETERMINISTIC
BEGIN

DECLARE leave_type TEXT DEFAULT 'Leave type';

INSERT INTO leaveledger (OrganizationID, Created, CreatedBy, EmployeeID, ProductID, LastTransactionID)
SELECT p.OrganizationID
, CURRENT_TIMESTAMP()
, user_rowid
, e_rowid
, p.RowID
, NULL
FROM product p
WHERE p.OrganizationID=og_rowid
AND p.`Category`=leave_type
ON DUPLICATE KEY UPDATE
LastUpd = CURRENT_TIMESTAMP(), LastUpdBy = user_rowid
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.AUTOMATICUPD_employeeshiftbyday
DROP PROCEDURE IF EXISTS `AUTOMATICUPD_employeeshiftbyday`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `AUTOMATICUPD_employeeshiftbyday`(IN `OrganizID` INT, IN `EmployeeRowID` INT)
    DETERMINISTIC
BEGIN

DECLARE ordervaloforigin INT(11);

DECLARE StartingDate DATE;

DECLARE uniqshiftcount INT(11);

DECLARE uniqshiftRowID VARCHAR(100);

DECLARE defaultindex INT(11) DEFAULT 1;

DECLARE indx INT(11) DEFAULT 0;

DECLARE EndingDate DATE DEFAULT LAST_DAY(DATE_FORMAT(CURDATE(),'%Y-12-01'));

DECLARE the_date DATE;

DECLARE hasShiftForThisYear CHAR(1);

DECLARE anyintiger INT(11) DEFAULT 0;

SELECT CAST(@@default_week_format AS INT) INTO anyintiger;
SELECT LAST_DAY(DATE_FORMAT(CURDATE(),'%Y-12-01')) INTO EndingDate;
SELECT IF(EndingDate > DateValue, ADDDATE(DateValue, INTERVAL 1 WEEK), EndingDate)
FROM dates
WHERE YEAR(DateValue) <= YEAR(CURDATE())
AND DAYOFWEEK(DateValue) = IF(anyintiger - 1 < 0, 7, anyintiger)
AND WEEKOFYEAR(DateValue) > 50
ORDER BY DateValue DESC
LIMIT 1
INTO EndingDate;

SELECT StartDate FROM employee WHERE RowID=EmployeeRowID AND OrganizationID=OrganizID INTO StartingDate;

IF TIMESTAMPDIFF(YEAR,StartingDate,CURDATE()) > 1 THEN


    SELECT DateValue FROM dates WHERE YEAR(DateValue)=YEAR(CURDATE()) AND DAYOFWEEK(DateValue)=(@@default_week_format + 1) ORDER BY DateValue LIMIT 1 INTO StartingDate;

END IF;

SELECT EXISTS(SELECT RowID FROM employeeshift WHERE EmployeeID=EmployeeRowID AND OrganizationID=OrganizID AND (EffectiveFrom >= StartingDate OR EffectiveTo >= StartingDate) AND (EffectiveFrom <= EndingDate OR EffectiveTo <= EndingDate)) INTO hasShiftForThisYear;

IF hasShiftForThisYear = '1' THEN

    SELECT ADDDATE(EffectiveTo, INTERVAL 1 DAY) FROM employeeshift WHERE EmployeeID=EmployeeRowID AND OrganizationID=OrganizID ORDER BY EffectiveFrom DESC, EffectiveTo DESC LIMIT 1 INTO StartingDate;

END IF;


SET @uniqueshift = 0;

SET @indxcount = 0;

IF StartingDate < EndingDate AND hasShiftForThisYear = '0' THEN

    SELECT OrderByValue,SampleDate FROM employeeshiftbyday WHERE EmployeeID=EmployeeRowID AND OrganizationID=OrganizID AND OriginDay=0 LIMIT 1 INTO ordervaloforigin,the_date;


    UPDATE employeeshiftbyday esb
    SET esb.OriginDay = (esb.OrderByValue - ordervaloforigin)
    WHERE esb.EmployeeID=EmployeeRowID
    AND esb.OrganizationID=OrganizID
    ORDER BY esb.OrderByValue;

    UPDATE employeeshiftbyday esb
    SET esb.SampleDate=ADDDATE(the_date,INTERVAL esb.OriginDay DAY)
    WHERE esb.EmployeeID=EmployeeRowID
    AND esb.OrganizationID=OrganizID
    ORDER BY esb.OrderByValue;



    UPDATE employeeshiftbyday esd
    INNER JOIN (
                    SELECT *
                    ,(@indxcount := @indxcount + 1) AS IncrementUnique
                    FROM (
                            SELECT esd.RowID,esd.NameOfDay
                            ,IFNULL(esd.ShiftID,esd.NameOfDay) AS ShiftID
                            FROM employeeshiftbyday esd
                            WHERE esd.EmployeeID=EmployeeRowID
                            AND esd.OrganizationID=OrganizID

                            GROUP BY IFNULL(esd.ShiftID,esd.NameOfDay)
                            ORDER BY esd.SampleDate
                    ) i
    ) esdd ON IFNULL(esdd.ShiftID,esdd.NameOfDay) = IFNULL(esd.ShiftID,esd.NameOfDay)
    SET esd.UniqueShift=esdd.IncrementUnique
    WHERE esd.EmployeeID=EmployeeRowID
    AND esd.OrganizationID=OrganizID;

ELSE



    UPDATE employeeshiftbyday esd
    INNER JOIN (
                    SELECT *
                    ,(@indxcount := @indxcount + 1) AS IncrementUnique
                    FROM (
                            SELECT esd.RowID,esd.NameOfDay
                            ,IFNULL(esd.ShiftID,esd.NameOfDay) AS ShiftID
                            FROM employeeshiftbyday esd
                            WHERE esd.EmployeeID=EmployeeRowID
                            AND esd.OrganizationID=OrganizID

                            GROUP BY IFNULL(esd.ShiftID,esd.NameOfDay)
                            ORDER BY esd.SampleDate
                    ) i
    ) esdd ON IFNULL(esdd.ShiftID,esdd.NameOfDay) = IFNULL(esd.ShiftID,esd.NameOfDay)
    SET esd.UniqueShift=esdd.IncrementUnique
    WHERE esd.EmployeeID=EmployeeRowID
    AND esd.OrganizationID=OrganizID;

END IF;

    INSERT INTO employeefirstweekshift
    (

        OrganizationID
        ,CreatedBy
        ,EmployeeID
        ,ShiftID
        ,EffectiveFrom
        ,EffectiveTo
        ,NightShift
        ,RestDay
        ,IsEncodedByDay
    )   SELECT

        esd.OrganizationID
        ,esd.CreatedBy
        ,esd.EmployeeID
        ,esd.ShiftID
        ,esd.SampleDate
        ,ADDDATE(esd.SampleDate,INTERVAL (COUNT(RowID) - 1) DAY)
        ,esd.NightShift
        ,esd.RestDay
        ,esd.IsEncodedByDay
        FROM employeeshiftbyday esd

        WHERE esd.EmployeeID=EmployeeRowID
        GROUP BY esd.UniqueShift
        HAVING esd.OrganizationID = OrganizID;






END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.BULK_INSUPD_employeeshift
DROP PROCEDURE IF EXISTS `BULK_INSUPD_employeeshift`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `BULK_INSUPD_employeeshift`(IN `OrganizID` INT, IN `EmpIDList` VARCHAR(2000), IN `ShiftRowID` INT, IN `ShiftDateFrom` DATE, IN `ShiftDateTo` DATE, IN `Is_RestDay` CHAR(1), IN `UserRowID` INT)
    DETERMINISTIC
BEGIN

DECLARE indx INT(11) DEFAULT 0;

DECLARE empcount INT(11);

DECLARE emp_rowid INT(11);

DECLARE date_diffcount INT(11);

SELECT COUNT(e.RowID) FROM employee e WHERE e.OrganizationID=OrganizID AND FIND_IN_SET(e.RowID,EmpIDList) > 0 INTO empcount;
SET date_diffcount = DATEDIFF(ShiftDateTo,ShiftDateFrom);
loop_label:LOOP

    IF indx < empcount THEN

        SELECT e.RowID FROM employee e WHERE e.OrganizationID=OrganizID AND FIND_IN_SET(e.RowID,EmpIDList) > 0 ORDER BY e.RowID LIMIT indx,1 INTO emp_rowid;



        UPDATE employeeshift esh INNER JOIN (SELECT DateValue FROM dates WHERE DateValue BETWEEN SUBDATE(SUBDATE(ShiftDateFrom,INTERVAL 1 DAY),INTERVAL date_diffcount DAY) AND SUBDATE(ShiftDateFrom,INTERVAL 1 DAY) ORDER BY DateValue DESC) d ON d.DateValue BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
        SET esh.EffectiveTo=d.DateValue
        ,esh.LastUpd=CURRENT_TIMESTAMP()
        ,esh.LastUpdBy=UserRowID
        WHERE esh.EmployeeID=emp_rowid
        AND esh.OrganizationID=OrganizID AND esh.EffectiveFrom < esh.EffectiveTo;

        SET @mycurrtimestamp = CURRENT_TIMESTAMP();

        INSERT INTO employeeshift(RowID,OrganizationID,Created,CreatedBy,EmployeeID,ShiftID,EffectiveFrom,EffectiveTo,NightShift,RestDay) VALUES (NULL,OrganizID,@mycurrtimestamp,UserRowID,emp_rowid,ShiftRowID,ShiftDateFrom,ShiftDateTo,'0',Is_RestDay) ON DUPLICATE KEY UPDATE LastUpd=@mycurrtimestamp,LastUpdBy=UserRowID,ShiftID=ShiftRowID,RestDay=Is_RestDay;



        UPDATE employeeshift esh INNER JOIN (SELECT DateValue FROM dates WHERE DateValue BETWEEN ADDDATE(ShiftDateTo,INTERVAL 1 DAY) AND ADDDATE(ADDDATE(ShiftDateTo,INTERVAL 1 DAY),INTERVAL date_diffcount DAY) ORDER BY DateValue) d ON d.DateValue BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
        SET esh.EffectiveFrom=d.DateValue
        ,esh.LastUpd=CURRENT_TIMESTAMP()
        ,esh.LastUpdBy=UserRowID
        WHERE esh.EmployeeID=emp_rowid
        AND esh.OrganizationID=OrganizID AND esh.EffectiveFrom < esh.EffectiveTo;
















        SET indx = indx + 1;

        ITERATE loop_label;

    ELSE

        LEAVE loop_label;

    END IF;

END LOOP;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.BULK_INSUPD_employeetimeentrydetails
DROP PROCEDURE IF EXISTS `BULK_INSUPD_employeetimeentrydetails`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `BULK_INSUPD_employeetimeentrydetails`(IN `organiz_rowid` INT, IN `user_rowid` INT, IN `date_from` DATE, IN `date_to` DATE, IN `import_id` INT)
    DETERMINISTIC
BEGIN

DECLARE this_curr_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP();

DECLARE one_sec_time TIME;

DECLARE int_time_allowance INT(11) DEFAULT 10;

DECLARE hous_per_day INT(11) DEFAULT 24;

DECLARE mins_per_hour INT(11) DEFAULT 60;

DECLARE secs_per_min INT(11) DEFAULT 60;

DECLARE divided_into_half INT(11) DEFAULT 2;

DECLARE less_one_second INT(11) DEFAULT 1;

DECLARE total_secs_per_hour INT(11);

SET total_secs_per_hour = (secs_per_min * mins_per_hour);

SET one_sec_time = SEC_TO_TIME(1);

/*SELECT
	DATE(MIN(DATE(DATE_FORMAT(tel.TimeStampLog, @@date_format))))
	,DATE(MAX(DATE(DATE_FORMAT(tel.TimeStampLog, @@date_format))))
FROM timeentrylogs tel
WHERE tel.OrganizationID=i.OrganizationID
AND tel.ImportID=import_id
INTO date_from
	, date_to;*/

SET @comput_sec1 = 0;
SET @comput_sec2 = 0;

SET @less_5hours = 18000; # (total_secs_per_hour * 5)
SET @add_10hours = 36000; # (total_secs_per_hour * 10)

INSERT INTO employeetimeentrydetails
(
	OrganizationID
	,Created
	,CreatedBy
	,EmployeeID
	,TimeIn
	,TimeOut
	,`Date`
	,TimeentrylogsImportID
) SELECT
	organiz_rowid
	,this_curr_timestamp
	,user_rowid
	,etd.EmployeeID
	,TIME(etd.`TimeIn`)
	,TIME(etd.`TimeOut`)
	,etd.DateValue
	,etd.ImportID
	FROM (SELECT i.*

         ,MIN(tel.TimeStampLog) `TimeIn`
			,MAX(tlg.TimeStampLog) `TimeOut`
			,IFNULL(tel.ImportID, tlg.ImportID) `ImportID`
			FROM (# day shift, in and out at same day
					SELECT esh.*
					,d.DateValue
					,'Day shift' `ShiftCategory`
					/*,CONCAT_DATETIME(SUBDATE(d.DateValue, INTERVAL 1 DAY), ADDTIME(sh.TimeTo, one_sec_time)) `RealisticTimeRangeFrom`
					,CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL 1 DAY), SUBTIME(sh.TimeFrom, one_sec_time)) `RealisticTimeRangeTo`*/
					/*,(@comput_sec1 := ROUND((((hous_per_day - COMPUTE_TimeDifference(sh.TimeFrom, sh.TimeTo))
					                          / divided_into_half)
											         * total_secs_per_hour), 0)) `Result`*/
					,(@comput_sec1 := ((COMPUTE_TimeDifference(sh.TimeFrom, sh.TimeTo) / divided_into_half) * total_secs_per_hour)) `Result`
					,SUBDATE(CONCAT_DATETIME(d.DateValue, sh.TimeFrom), INTERVAL @less_5hours SECOND) `RealisticTimeRangeFrom`
					,ADDDATE(CONCAT_DATETIME(d.DateValue, sh.TimeFrom), INTERVAL CAST(@comput_sec1 AS INT) SECOND) `RealisticTimeRangeFromHalf`
					
					,ADDDATE(CONCAT_DATETIME(d.DateValue, sh.TimeTo), INTERVAL @add_10hours SECOND) `RealisticTimeRangeTo`
					,SUBDATE(CONCAT_DATETIME(d.DateValue, sh.TimeTo), INTERVAL CAST((@comput_sec1-less_one_second) AS INT) SECOND) `RealisticTimeRangeToHalf`
					FROM employeeshift esh
					INNER JOIN dates d ON d.DateValue BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
					INNER JOIN shift sh ON sh.RowID=esh.ShiftID AND IS_TIMERANGE_REACHTOMORROW(sh.TimeFrom, sh.TimeTo) = FALSE
					WHERE esh.OrganizationID=organiz_rowid
				
				UNION # night shift, log out on the next day
					SELECT esh.*
					,d.DateValue
					,'Night shift' `ShiftCategory`
					/*,CONCAT_DATETIME(d.DateValue, ADDTIME(sh.TimeTo, one_sec_time)) `RealisticTimeRangeFrom`
					,CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL 1 DAY), SUBTIME(sh.TimeFrom, one_sec_time)) `RealisticTimeRangeTo`*/
					/*,(@comput_sec2 := ROUND((((hous_per_day - COMPUTE_TimeDifference(sh.TimeFrom, sh.TimeTo))
					                          / divided_into_half)
											         * total_secs_per_hour), 0)) `Result`*/
					,(@comput_sec2 := ((TIMESTAMPDIFF(HOUR, CONCAT_DATETIME(d.DateValue, sh.TimeFrom), CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL 1 DAY), sh.TimeTo)) / divided_into_half) * total_secs_per_hour)) `Result`
					,SUBDATE(CONCAT_DATETIME(d.DateValue, sh.TimeFrom), INTERVAL @less_5hours SECOND) `RealisticTimeRangeFrom`
					,ADDDATE(CONCAT_DATETIME(d.DateValue, sh.TimeFrom), INTERVAL CAST(@comput_sec2 AS INT) SECOND) `RealisticTimeRangeFromHalf`
					
					,ADDDATE(CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL 1 DAY), sh.TimeTo), INTERVAL @add_10hours SECOND) `RealisticTimeRangeTo`
					,SUBDATE(CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL 1 DAY), sh.TimeTo), INTERVAL CAST((@comput_sec2-less_one_second) AS INT) SECOND) `RealisticTimeRangeToHalf`
					FROM employeeshift esh
					INNER JOIN dates d ON d.DateValue BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
					INNER JOIN shift sh ON sh.RowID=esh.ShiftID AND IS_TIMERANGE_REACHTOMORROW(sh.TimeFrom, sh.TimeTo) = TRUE
					WHERE esh.OrganizationID=organiz_rowid
					
				UNION # rest day without assigned shift, log in and out at the same day
					SELECT esh.*
					,d.DateValue
					,'Rest day - day shift' `ShiftCategory`
					,0 `Result`
					,CONCAT_DATETIME(d.DateValue, SEC_TO_TIME(0)) `RealisticTimeRangeFrom`
					,CONCAT_DATETIME(d.DateValue, TIME('12:00:00')) `RealisticTimeRangeFromHalf`
					
					,CONCAT_DATETIME(d.DateValue, TIME('23:59:59')) `RealisticTimeRangeTo`
					,CONCAT_DATETIME(d.DateValue, TIME('12:00:01')) `RealisticTimeRangeToHalf`
					FROM employeeshift esh
					INNER JOIN dates d ON d.DateValue BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
					WHERE esh.OrganizationID=organiz_rowid
					AND esh.ShiftID IS NULL
					AND esh.RestDay = 1) i
					
					
			LEFT JOIN timeentrylogs tel
						ON tel.EmployeeRowID		=i.EmployeeID
						AND tel.OrganizationID	=i.OrganizationID
						AND tel.ImportID			=import_id
						AND tel.TimeStampLog BETWEEN i.`RealisticTimeRangeFrom` AND i.`RealisticTimeRangeTo`
						# AND tel.TimeStampLog BETWEEN i.`RealisticTimeRangeFrom` AND i.`RealisticTimeRangeFromHalf`
						
			LEFT JOIN timeentrylogs tlg
						ON tlg.EmployeeRowID		=i.EmployeeID
						AND tlg.OrganizationID	=i.OrganizationID
						AND tlg.ImportID			=import_id
						AND tlg.TimeStampLog BETWEEN i.`RealisticTimeRangeFrom` AND i.`RealisticTimeRangeTo`
						# AND tlg.TimeStampLog BETWEEN i.`RealisticTimeRangeToHalf` AND i.`RealisticTimeRangeTo`
						
			GROUP BY i.EmployeeID, i.DateValue
			ORDER BY i.EmployeeID, i.DateValue) etd

			# WHERE etd.`TimeIn` < etd.`TimeOut`
			# WHERE @max_time_in < @max_time_out
			WHERE etd.ImportID IS NOT NULL

ON
DUPLICATE
KEY
UPDATE
	LastUpd		=CURRENT_TIMESTAMP()
	,LastUpdBy	=user_rowid
	,TimeIn		=etd.`TimeIn`
	,TimeOut		=etd.`TimeOut`;

/*SET @min_date = CURDATE(); SET @max_date = CURDATE();

SELECT
	MIN(DATE(DATE_FORMAT(tel.TimeStampLog,@@date_format)))
	,MAX(DATE(DATE_FORMAT(tel.TimeStampLog,@@date_format)))
FROM timeentrylogs tel
WHERE tel.ImportID = import_id
AND tel.OrganizationID = organiz_rowid
INTO @min_date, @max_date;

UPDATE employeetimeentrydetails etd
SET
	etd.LastUpd		=CURRENT_TIMESTAMP()
	,etd.LastUpdBy	=user_rowid
	,etd.TimeOut	=NULL
WHERE etd.OrganizationID=organiz_rowid
# AND etd.`Date` BETWEEN date_from AND date_to;
AND etd.`Date` BETWEEN @min_date AND @max_date;*/

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.call_employees
DROP PROCEDURE IF EXISTS `call_employees`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `call_employees`(IN `ogid` INT)
    DETERMINISTIC
BEGIN


SELECT e.EmployeeID
,CONCAT_WS(',', e.LastName, e.FirstName) `FullName`
FROM employee e
WHERE e.OrganizationID=ogid;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.common_payrate
DROP PROCEDURE IF EXISTS `common_payrate`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `common_payrate`()
    DETERMINISTIC
BEGIN

SET @i = 2017;

WHILE (@i BETWEEN 2017 AND 2020) DO

    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-01-01'),'Regular Holiday','New Year\'s Day',2.00,2.60,2.20,2.86,2.60,3.38) UNION

    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-02-25'),'Special Non-Working Holiday','People Power Anniversary',1.30,1.69,1.43,1.86,1.50,1.95) UNION

    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-04-09'),'Regular Holiday','The Day of Valor',2.00,2.60,2.20,2.86,2.60,3.38) UNION
    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-05-01'),'Regular Holiday','Labor Day',2.00,2.60,2.20,2.86,2.60,3.38) UNION
    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-06-12'),'Regular Holiday','Independence Day',2.00,2.60,2.20,2.86,2.60,3.38) UNION

    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-08-21'),'Special Non-Working Holiday','Ninoy Aquino Day',1.30,1.69,1.43,1.86,1.50,1.95) UNION

    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-11-01'),'Special Non-Working Holiday','All Saints\' Day',1.30,1.69,1.43,1.86,1.50,1.95) UNION
    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-11-30'),'Regular Holiday','Bonifacio Day',2.00,2.60,2.20,2.86,2.60,3.38) UNION
    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-12-24'),'Special Non-Working Holiday','Christmas Eve',1.30,1.69,1.43,1.86,1.50,1.95) UNION
    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-12-25'),'Regular Holiday','Christmas Day',2.00,2.60,2.20,2.86,2.60,3.38) UNION
    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-12-30'),'Regular Holiday','Rizal Day',2.00,2.60,2.20,2.86,2.60,3.38) UNION

    SELECT INSUPD_payrate(NULL,1,1,1,CONCAT(@i,'-12-31'),'Special Non-Working Holiday','New Year\'s Eve',1.30,1.69,1.43,1.86,1.50,1.95);



    SET @i = @i + 1;

END WHILE;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.CreateWithholdingTaxBatch
DROP PROCEDURE IF EXISTS `CreateWithholdingTaxBatch`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `CreateWithholdingTaxBatch`(IN `I_OrganizationID` INT, IN `I_Year` INT)
    DETERMINISTIC
BEGIN

    INSERT INTO withholdingtaxbatch
    (
        OrganizationID,
        Year
    )
    VALUES
    (
        I_OrganizationID,
        I_Year
    );

    SELECT LAST_INSERT_ID();

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.CreateWithholdingTaxReport
DROP PROCEDURE IF EXISTS `CreateWithholdingTaxReport`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `CreateWithholdingTaxReport`(IN `I_EmployeeID` INT, IN `I_OrganizationID` INT, IN `I_BatchID` INT, IN `I_Category` VARCHAR(50), IN `I_IsMinimumWageEarner` TINYINT(1), IN `I_MinimumWagePerDay` DECIMAL(16,6), IN `I_MinimumWagePerMonth` DECIMAL(16,6), IN `I_PreviousTaxableIncome` DECIMAL(16,6), IN `I_PremiumPaidOnHealth` DECIMAL(16,6), IN `I_PreviousTaxWithheld` DECIMAL(16,6), IN `I_HazardPay` DECIMAL(16,6), IN `I_DeMinimisBenefits` DECIMAL(16,6), IN `I_SalariesAndOtherCompensation` vARCHAR(50), IN `I_Representation` DECIMAL(16,6), IN `I_Transportation` DECIMAL(16,6), IN `I_CostOfLivingAllowance` DECIMAL(16,6), IN `I_FixedHousingAllowance` DECIMAL(16,6), IN `I_OthersAName` VARCHAR(50), IN `I_OthersAAmount` DECIMAL(16,6), IN `I_OthersBName` VARCHAR(50), IN `I_OthersBAmount` DECIMAL(16,6), IN `I_Commission` DECIMAL(16,6), IN `I_ProfitSharing` DECIMAL(16,6), IN `I_FeesInclDirectorsFees` DECIMAL(16,6), IN `I_Taxable13thMonthPay` DECIMAL(16,6), IN `I_TaxableHazardPay` DECIMAL(16,6), IN `I_TaxableOvertimePay` DECIMAL(16,6), IN `I_SupplementaryAName` VARCHAR(50), IN `I_SupplementaryAAmount` DECIMAL(16,6), IN `I_SupplementaryBName` VARCHAR(50), IN `I_SupplementaryBAmount` DECIMAL(16,6))
    DETERMINISTIC
BEGIN

    INSERT INTO withholdingtaxreport
     (
        EmployeeID,
        OrganizationID,
        BatchID,
        CreatedBy,
        UpdatedBy,
        Category,
        IsMinimumWageEarner,
        MinimumWagePerDay,
        MinimumWagePerMonth,
        PreviousTaxableIncome,
        PremiumPaidOnHealth,
        PreviousTaxWithheld,
        HazardPay,
        DeMinimisBenefits,
        SalariesAndOtherCompensation,
        Representation,
        Transportation,
        CostOfLivingAllowance,
        FixedHousingAllowance,
        OthersAName,
        OthersAAmount,
        OthersBName,
        OthersBAmount,
        Commission,
        ProfitSharing,
        FeesInclDirectorsFee,
        Taxable13thMonthPay,
        TaxableHazardPay,
        TaxableOvertimePay,
        SupplementaryAName,
        SupplementaryAAmount,
        SupplementaryBName,
        SupplementaryBAmount
    )
     VALUES
     (
        I_EmployeeID,
        I_OrganizationID,
        I_BatchID,
        NULL,
        NULL,
        I_Category,
        I_IsMinimumWageEarner,
        I_MinimumWagePerDay,
        I_MinimumWagePerMonth,
        I_PreviousTaxableIncome,
        I_PremiumPaidOnHealth,
        I_PreviousTaxWithheld,
        I_HazardPay,
        I_DeMinimisBenefits,
        I_SalariesAndOtherCompensation,
        I_Representation,
        I_Transportation,
        I_CostOfLivingAllowance,
        I_FixedHousingAllowance,
        I_OthersAName,
        I_OthersAAmount,
        I_OthersBName,
        I_OthersBAmount,
        I_Commission,
        I_ProfitSharing,
        I_FeesInclDirectorsFees,
        I_Taxable13thMonthPay,
        I_TaxableHazardPay,
        I_TaxableOvertimePay,
        I_SupplementaryAName,
        I_SupplementaryAAmount,
        I_SupplementaryBName,
        I_SupplementaryBAmount
    )
    ON DUPLICATE KEY
    UPDATE
          Category = I_Category,
          IsMinimumWageEarner = I_IsMinimumWageEarner,
        MinimumWagePerDay = I_MinimumWagePerDay,
        MinimumWagePerMonth = I_MinimumWagePerMonth,
          PreviousTaxableIncome = I_PreviousTaxableIncome,
          PremiumPaidOnHealth = I_PremiumPaidOnHealth,
          PreviousTaxWithheld = I_PreviousTaxWithheld,
          HazardPay = I_HazardPay,
          DeMinimisBenefits = I_DeMinimisBenefits,
          SalariesAndOtherCompensation = I_SalariesAndOtherCompensation,
          Representation = I_Representation,
          Transportation = I_Transportation,
          CostOfLivingAllowance = I_CostOfLivingAllowance,
          FixedHousingAllowance = I_FixedHousingAllowance,
          OthersAName = I_OthersAName,
          OthersAAmount = I_OthersAAmount,
          OthersBName = I_OthersBName,
          OthersBAmount = I_OthersBAmount,
          Commission = I_Commission,
          ProfitSharing = I_ProfitSharing,
          FeesInclDirectorsFee = I_FeesInclDirectorsFees,
          Taxable13thMonthPay = I_Taxable13thMonthPay,
          TaxableHazardPay = I_TaxableHazardPay,
          TaxableOvertimePay = I_TaxableOvertimePay,
          SupplementaryAAmount = I_SupplementaryAAmount,
          SupplementaryBAmount = I_SupplementaryBAmount;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.CREATE_employeesalary_senior_citizen
DROP PROCEDURE IF EXISTS `CREATE_employeesalary_senior_citizen`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `CREATE_employeesalary_senior_citizen`(IN `OrganizID` INT, IN `UserRowID` INT)
    DETERMINISTIC
BEGIN

DECLARE hasalreadyseniorcitizensalary CHAR(1);

DECLARE userhasprivilege CHAR(1);

SET @thisyearfirstdate = MAKEDATE(YEAR(CURDATE()),1);

SET @negativedatediff = 0;

SELECT (pv.Creates = 'Y' AND pv.Updates = 'Y')
FROM position_view pv
INNER JOIN user u ON u.RowID=UserRowID
INNER JOIN `view` v ON v.RowID=pv.ViewID
WHERE pv.PositionID=u.PositionID
AND pv.OrganizationID=OrganizID
LIMIT 1
INTO userhasprivilege;

IF userhasprivilege IS NULL THEN
    SET userhasprivilege = '0';
END IF;

SELECT EXISTS(SELECT RowID
                    FROM employeesalary
                    WHERE EmployeeID IN (SELECT RowID
                                                FROM employee e
                                                WHERE e.OrganizationID=OrganizID
                                                AND e.StartDate < @thisyearfirstdate
                                                AND TIMESTAMPDIFF(YEAR,e.Birthdate, CURDATE()) >= 59
                                                AND e.EmploymentStatus IN ('Regular','Probationary'))
                    AND OrganizationID=OrganizID
                    AND EffectiveDateFrom=@thisyearfirstdate
                    AND DATE_FORMAT(Created,'%Y-%m-%d')<=CURDATE())
INTO hasalreadyseniorcitizensalary;

IF hasalreadyseniorcitizensalary = '0' AND userhasprivilege = '1' THEN

    UPDATE employeesalary es
    INNER JOIN employee e ON e.OrganizationID=OrganizID AND e.StartDate < @thisyearfirstdate AND TIMESTAMPDIFF(YEAR,e.Birthdate, CURDATE()) >= 59 AND e.EmploymentStatus IN ('Regular','Probationary') AND es.EmployeeID=e.RowID
    SET es.PaySocialSecurityID=NULL
    ,es.PayPhilhealthID=NULL
    ,es.HDMFAmount=0
    ,es.LastUpd=CURRENT_TIMESTAMP()
    ,es.LastUpdBy=UserRowID
    WHERE es.OrganizationID=OrganizID
    AND es.EffectiveDateTo IS NOT NULL
    AND (es.EffectiveDateFrom >= @thisyearfirstdate AND IFNULL(es.EffectiveDateTo,SUBDATE(@thisyearfirstdate,INTERVAL 1 DAY)) >= @thisyearfirstdate);

    INSERT INTO employeesalary(RowID,EmployeeID,Created,CreatedBy,OrganizationID,FilingStatusID,PaySocialSecurityID,PayPhilhealthID,HDMFAmount,TrueSalary,BasicPay,Salary,UndeclaredSalary,BasicDailyPay,BasicHourlyPay,NoofDependents,MaritalStatus,PositionID,EffectiveDateFrom,EffectiveDateTo
    )
    SELECT
    es.RowID
    ,e.RowID
    ,CURRENT_TIMESTAMP()
    ,UserRowID
    ,OrganizID
    ,IFNULL(es.FilingStatusID,ees.FilingStatusID)
    ,es.PaySocialSecurityID
    ,es.PayPhilhealthID
    ,IFNULL(es.HDMFAmount,0)
    ,IFNULL(es.TrueSalary,ees.TrueSalary)
    ,IFNULL(es.BasicPay,ees.BasicPay)
    ,IFNULL(es.Salary,ees.Salary)
    ,IFNULL(es.UndeclaredSalary,ees.UndeclaredSalary)
    ,IFNULL(es.BasicDailyPay,ees.BasicDailyPay)
    ,IFNULL(es.BasicHourlyPay,ees.BasicHourlyPay)
    ,IFNULL(es.NoofDependents,ees.NoofDependents)
    ,IFNULL(es.MaritalStatus,ees.MaritalStatus)
    ,IFNULL(es.PositionID,ees.PositionID)
    ,IFNULL(es.EffectiveDateFrom,@thisyearfirstdate)
    ,es.EffectiveDateTo
    FROM employee e
    LEFT JOIN employeesalary es ON es.EffectiveDateFrom >= @thisyearfirstdate AND IFNULL(es.EffectiveDateTo,SUBDATE(@thisyearfirstdate,INTERVAL 1 DAY)) >= @thisyearfirstdate AND es.EmployeeID=e.RowID AND es.OrganizationID=e.OrganizationID AND es.EffectiveDateTo IS NULL

    INNER JOIN (SELECT *
                    FROM employeesalary
                    WHERE EmployeeID IN (SELECT RowID
                                                FROM employee e
                                                WHERE e.OrganizationID=OrganizID
                                                AND e.StartDate < @thisyearfirstdate
                                                AND TIMESTAMPDIFF(YEAR,e.Birthdate, CURDATE()) >= 59
                                                AND e.EmploymentStatus IN ('Regular','Probationary'))
                    AND OrganizationID=OrganizID
                    AND EffectiveDateTo IS NULL
                    GROUP BY EmployeeID) ees ON ees.EmployeeID=e.RowID

    WHERE e.OrganizationID=OrganizID AND e.StartDate < @thisyearfirstdate AND TIMESTAMPDIFF(YEAR,e.Birthdate, CURDATE()) >= 59 AND e.EmploymentStatus IN ('Regular','Probationary')
    ON
    DUPLICATE
    KEY
    UPDATE
        LastUpd=CURRENT_TIMESTAMP()
        ,LastUpdBy=UserRowID
        ,PaySocialSecurityID=NULL
        ,PayPhilhealthID=NULL
        ,HDMFAmount=0;



    UPDATE employeesalary es
    INNER JOIN employee e ON e.OrganizationID=OrganizID
                                AND e.StartDate < @thisyearfirstdate
                                AND TIMESTAMPDIFF(YEAR,e.Birthdate, CURDATE()) >= 59
                                AND e.EmploymentStatus IN ('Regular','Probationary')
                                AND es.EmployeeID=e.RowID
    SET es.EffectiveDateTo=IF(SUBDATE(@thisyearfirstdate, INTERVAL 1 DAY) >= es.EffectiveDateFrom, SUBDATE(@thisyearfirstdate, INTERVAL 1 DAY), es.EffectiveDateFrom)
    ,es.LastUpdBy=UserRowID
    WHERE es.OrganizationID=OrganizID
    AND es.EffectiveDateTo IS NULL
    AND es.EffectiveDateFrom < @thisyearfirstdate;

END IF;

























SELECT EXISTS(SELECT RowID
                    FROM employeesalary
                    WHERE EmployeeID IN (SELECT RowID
                                                FROM employee e
                                                WHERE e.OrganizationID=OrganizID
                                                AND e.StartDate > @thisyearfirstdate
                                                AND TIMESTAMPDIFF(YEAR,e.Birthdate, CURDATE()) >= 59
                                                AND e.EmploymentStatus IN ('Regular','Probationary'))
                    AND OrganizationID=OrganizID
                    AND EffectiveDateFrom=@thisyearfirstdate
                    AND DATE_FORMAT(LastUpd,'%Y-%m-%d')=CURDATE())
INTO hasalreadyseniorcitizensalary;

IF hasalreadyseniorcitizensalary = '0' AND userhasprivilege = '1' THEN
    SET hasalreadyseniorcitizensalary = '0';

    UPDATE employeesalary es
    INNER JOIN employee e ON e.OrganizationID=OrganizID
                                AND e.StartDate > @thisyearfirstdate
                                AND TIMESTAMPDIFF(YEAR,e.Birthdate, CURDATE()) >= 59
                                AND e.EmploymentStatus IN ('Regular','Probationary')
                                AND es.EmployeeID=e.RowID
    SET es.PaySocialSecurityID=NULL
    ,es.PayPhilhealthID=NULL
    ,es.HDMFAmount=0
    ,es.LastUpd=CURRENT_TIMESTAMP()
    ,es.LastUpdBy=UserRowID
    WHERE es.OrganizationID=OrganizID;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DBoard_Age21Dependents
DROP PROCEDURE IF EXISTS `DBoard_Age21Dependents`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DBoard_Age21Dependents`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName,',',INITIALS(e.MiddleName,'.','1')) 'Employee Fullname'
,CONCAT(edp.LastName,',',edp.FirstName,',',INITIALS(edp.MiddleName,'.','1')) 'Dependent Fullname'
,DATE_FORMAT(edp.Birthdate,'%m/%e/%Y') 'Birthdate'
FROM employeedependents edp
LEFT JOIN employee e ON e.RowID=edp.ParentEmployeeID
WHERE ADDDATE(edp.Birthdate, INTERVAL 21 YEAR) <= CURDATE()
AND edp.OrganizationID=OrganizID
AND edp.ActiveFlag='Y'
AND e.EmploymentStatus NOT IN ('Resigned','Terminated')
ORDER BY edp.Birthdate;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DBoard_BirthdayCelebrantThisMonth
DROP PROCEDURE IF EXISTS `DBoard_BirthdayCelebrantThisMonth`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DBoard_BirthdayCelebrantThisMonth`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN



SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName,',',INITIALS(e.MiddleName,'.','1')) 'Employee Fullname'
,CONCAT(DATE_FORMAT(e.Birthdate,'%m/%e/%Y'), IF(ADDDATE(e.Birthdate, INTERVAL 60 YEAR) <= CURDATE(), '(Senior Citizen)', '')) 'Birthdate'
FROM employee e
WHERE MONTH(e.Birthdate)=MONTH(CURDATE())
AND e.OrganizationID=OrganizID
AND e.EmploymentStatus NOT IN ('Resigned','Terminated')
ORDER BY DAY(e.Birthdate);

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DBoard_ForEvaluation
DROP PROCEDURE IF EXISTS `DBoard_ForEvaluation`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DBoard_ForEvaluation`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName,',',INITIALS(e.MiddleName,'.','1')) 'Employee Fullname'
,DATE_FORMAT(e.StartDate,'%m/%e/%Y') AS StartDate
FROM employee e
WHERE e.OrganizationID=OrganizID
AND e.EmploymentStatus='Probationary'
AND ADDDATE(e.StartDate, INTERVAL 3 MONTH) <= CURDATE();

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DBoard_ForEvaluationRegular
DROP PROCEDURE IF EXISTS `DBoard_ForEvaluationRegular`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DBoard_ForEvaluationRegular`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName,',',INITIALS(e.MiddleName,'.','1')) 'Employee Fullname'
,DATE_FORMAT(e.StartDate,'%m/%e/%Y') AS StartDate
FROM employee e
WHERE e.OrganizationID=OrganizID
AND e.EmploymentStatus='Regular'
AND ADDDATE(e.StartDate, INTERVAL 6 MONTH) <= CURDATE();

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DBoard_ForRegularization
DROP PROCEDURE IF EXISTS `DBoard_ForRegularization`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DBoard_ForRegularization`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName,',',INITIALS(e.MiddleName,'.','1')) 'Employee Fullname'
,DATE_FORMAT(e.StartDate,'%m/%e/%Y') AS StartDate
FROM employee e
WHERE e.OrganizationID=OrganizID
AND e.EmploymentStatus='Probationary'
AND ADDDATE(e.StartDate, INTERVAL 5 MONTH) <= CURDATE();



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DBoard_LeavePending
DROP PROCEDURE IF EXISTS `DBoard_LeavePending`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DBoard_LeavePending`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName,',',INITIALS(e.MiddleName,'.','1')) 'Employee Fullname'
,DATEDIFF(elv.LeaveEndDate,elv.LeaveStartDate) + 1 AS NumDaysOfLeave
,elv.RowID
FROM employeeleave elv
LEFT JOIN employee e ON e.RowID=elv.EmployeeID
WHERE elv.OrganizationID=OrganizID
AND elv.`Status`='Pending'
ORDER BY elv.Created;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DBoard_LoanBalances
DROP PROCEDURE IF EXISTS `DBoard_LoanBalances`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DBoard_LoanBalances`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName,',',INITIALS(e.MiddleName,'.','1')) 'Employee Fullname'
,els.`Status`
,DATE_FORMAT(els.DedEffectiveDateFrom,'%m-%e-%Y') AS DedEffectiveDateFrom
,DATE_FORMAT(els.DedEffectiveDateTo,'%m-%e-%Y') AS DedEffectiveDateTo
,FORMAT(els.TotalBalanceLeft,2) AS TotalBalanceLeft
,SUBSTRING_INDEX(els.LoanPayPeriodLeft,'.',1) AS LoanPayPeriodLeft
FROM employeeloanschedule els
INNER JOIN employee e ON e.RowID=els.EmployeeID
INNER JOIN (SELECT *,(TotalLoanAmount - (DeductionAmount * NoOfPayPeriod)) AS Butal FROM employeeloanschedule) eels ON eels.RowID=els.RowID
WHERE els.LoanPayPeriodLeft != 0
AND els.TotalBalanceLeft > 0
AND els.OrganizationID=OrganizID;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DBoard_NegativePaySlips
DROP PROCEDURE IF EXISTS `DBoard_NegativePaySlips`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DBoard_NegativePaySlips`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName,',',INITIALS(e.MiddleName,'.','1')) 'Employee Fullname'
,ps.TotalNetSalary
FROM paystub ps
INNER JOIN employee e ON e.RowID=ps.EmployeeID AND e.OrganizationID=OrganizID
INNER JOIN paystubitem psi ON psi.PayStubID=ps.RowID AND psi.OrganizationID=OrganizID
WHERE ps.OrganizationID=OrganizID
AND ps.TotalNetSalary < 0
GROUP BY ps.EmployeeID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DBoard_OBPending
DROP PROCEDURE IF EXISTS `DBoard_OBPending`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DBoard_OBPending`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName,',',INITIALS(e.MiddleName,'.','1')) 'Employee Fullname'
,FORMAT(IF(TIME_FORMAT(eob.OffBusStartTime,'%p')='PM' AND TIME_FORMAT(eob.OffBusEndTime,'%p')='AM'
    ,IFNULL(((TIME_TO_SEC(TIMEDIFF(ADDTIME(eob.OffBusEndTime,'24:00'), eob.OffBusStartTime)) / 60) / 60),0)
    ,IFNULL(((TIME_TO_SEC(TIMEDIFF(eob.OffBusEndTime, eob.OffBusStartTime)) / 60) / 60),0)), 2) AS OBNumOfHours
,eob.RowID
FROM employeeofficialbusiness eob
LEFT JOIN employee e ON e.RowID=eob.EmployeeID
WHERE eob.OrganizationID=OrganizID
AND eob.OffBusStatus='Pending'
ORDER BY eob.Created;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DBoard_OTPending
DROP PROCEDURE IF EXISTS `DBoard_OTPending`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DBoard_OTPending`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName,',',INITIALS(e.MiddleName,'.','1')) 'Employee Fullname'
,FORMAT(IF(TIME_FORMAT(eot.OTStartTime,'%p')='PM' AND TIME_FORMAT(eot.OTEndTime,'%p')='AM'
    ,IFNULL(((TIME_TO_SEC(TIMEDIFF(ADDTIME(eot.OTEndTime,'24:00'), eot.OTStartTime)) / 60) / 60),0)
    ,IFNULL(((TIME_TO_SEC(TIMEDIFF(eot.OTEndTime, eot.OTStartTime)) / 60) / 60),0)), 2) AS OTNumOfHours
,eot.RowID
FROM employeeovertime eot
LEFT JOIN employee e ON e.RowID=eot.EmployeeID
WHERE eot.OrganizationID=OrganizID
AND eot.OTStatus='Pending'
ORDER BY eot.Created;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DEL_division_shift
DROP PROCEDURE IF EXISTS `DEL_division_shift`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `DEL_division_shift`(IN `OrganizID` INT, IN `Division_RowID` INT)
    DETERMINISTIC
BEGIN

DECLARE is_query_exists CHAR(1);

DECLARE anyintiger INT(11) DEFAULT 0;

SELECT @@default_week_format INTO anyintiger;

SET group_concat_max_len = 1000000;

SET @esh_RowID = '';


                    SELECT (@esh_RowID := GROUP_CONCAT(esh.RowID))

                    FROM employeeshift esh

                    INNER JOIN position pos ON pos.DivisionId=Division_RowID AND pos.OrganizationID=esh.OrganizationID

                    INNER JOIN employee e ON e.RowID=esh.EmployeeID AND e.OrganizationID=esh.OrganizationID AND e.PositionID=pos.RowID



                    INNER JOIN (SELECT DateValue FROM dates WHERE YEAR(DateValue)=YEAR(CURDATE()) AND DAYOFWEEK(DateValue)=(@@default_week_format + 1) ORDER BY DateValue LIMIT 1) dd ON dd.DateValue IS NOT NULL

                    INNER JOIN (SELECT IF(LAST_DAY(DATE_FORMAT(CURDATE(),'%Y-12-01')) > d.DateValue
                                                , ADDDATE(d.DateValue, INTERVAL 1 WEEK)
                                                , LAST_DAY(DATE_FORMAT(CURDATE(),'%Y-12-01'))) AS EndingDate
                                    FROM dates d
                                    WHERE YEAR(d.DateValue) <= YEAR(CURDATE())
                                    AND DAYOFWEEK(d.DateValue) = IF(anyintiger - 1 < 0, 7, anyintiger)
                                    AND WEEKOFYEAR(d.DateValue) > 50
                                    ORDER BY d.DateValue DESC
                                    LIMIT 1) ddd ON ddd.EndingDate IS NOT NULL

                    WHERE esh.OrganizationID=OrganizID

                    AND (esh.EffectiveFrom >= IF(TIMESTAMPDIFF(YEAR,e.StartDate,CURDATE()) > 1, dd.DateValue, e.StartDate)
                            OR esh.EffectiveTo >= IF(TIMESTAMPDIFF(YEAR,e.StartDate,CURDATE()) > 1, dd.DateValue, e.StartDate))

                    AND (esh.EffectiveFrom <= ddd.EndingDate OR esh.EffectiveTo <= ddd.EndingDate);



        DELETE FROM employeeshift WHERE LOCATE(RowID,@esh_RowID) > 0;

        SET GLOBAL event_scheduler = ON;

SET group_concat_max_len = 1024;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DEL_employeeallowance
DROP PROCEDURE IF EXISTS `DEL_employeeallowance`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `DEL_employeeallowance`(IN `EmpAllowanceRowID` INT)
    DETERMINISTIC
BEGIN

DELETE FROM employeeallowance WHERE RowID=EmpAllowanceRowID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DEL_employeebonus
DROP PROCEDURE IF EXISTS `DEL_employeebonus`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `DEL_employeebonus`(IN `bonus_RowID` INT)
    DETERMINISTIC
BEGIN

UPDATE employeeloanschedule els SET els.BonusID=NULL WHERE els.BonusID=bonus_RowID;

DELETE FROM employeebonus WHERE RowID=bonus_RowID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DEL_employeeleave
DROP PROCEDURE IF EXISTS `DEL_employeeleave`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DEL_employeeleave`(IN `leave_rowid` INT)
    DETERMINISTIC
BEGIN

DECLARE og_rowid
        ,e_rowid INT(11);

DECLARE start_date
        ,end_date DATE;

DECLARE start_time
        ,end_time TIME;

SELECT elv.OrganizationID
,elv.EmployeeID
,elv.LeaveStartDate
,elv.LeaveEndDate
,elv.LeaveStartTime
,elv.LeaveEndTime
FROM employeeleave elv
WHERE elv.RowID=leave_rowid
INTO og_rowid
     ,e_rowid
	  ,start_date
	  ,end_date
	  ,start_time
	  ,end_time;

DELETE FROM employeeleave_duplicate WHERE RowID = leave_rowid;

DELETE FROM employeeleave_duplicate
WHERE OrganizationID = og_rowid
AND EmployeeID = e_rowid
AND LeaveStartDate = start_date
AND LeaveEndDate = end_date
AND LeaveStartTime = start_time
AND LeaveEndTime = end_time;

DELETE FROM employeeleave WHERE RowID = leave_rowid;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DEL_employeeshift
DROP PROCEDURE IF EXISTS `DEL_employeeshift`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `DEL_employeeshift`(IN `eshrowid` INT, IN `urowid` INT)
    DETERMINISTIC
BEGIN

UPDATE employeetimeentry et
SET et.EmployeeShiftID = NULL
,et.LastUpdBy = urowid
WHERE et.EmployeeShiftID = eshrowid;

DELETE FROM employeeshift WHERE RowID = eshrowid;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DEL_specificpaystub
DROP PROCEDURE IF EXISTS `DEL_specificpaystub`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `DEL_specificpaystub`(IN `paystub_RowID` INT)
    DETERMINISTIC
BEGIN

DECLARE vl_Amt DECIMAL(11,6);

DECLARE sl_Amt DECIMAL(11,6);

DECLARE ml_Amt DECIMAL(11,6);

DECLARE oth_Amt DECIMAL(11,6);

DECLARE emp_RowID INT(11);

DECLARE og_RowID INT(11);

DECLARE excesshrs DECIMAL(11,6);

DECLARE paydate_from DATE;

DECLARE paydate_to DATE;

DECLARE IsFirstHalfOfMonth CHAR(1);

DECLARE payperiod_rowid INT(11);

DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;

START TRANSACTION;

SELECT
    ps.EmployeeID
    ,ps.OrganizationID
    ,ps.PayFromDate
    ,ps.PayToDate
    ,pp.`Half`
    ,ps.PayPeriodID
FROM paystub ps
INNER JOIN payperiod pp ON pp.RowID=ps.PayPeriodID
WHERE ps.RowID=paystub_RowID
INTO emp_RowID
    ,og_RowID
    ,paydate_from
    ,paydate_to
    ,IsFirstHalfOfMonth
    ,payperiod_rowid;

SELECT
psi.PayAmount
,psi1.PayAmount
,psi2.PayAmount
,psi3.PayAmount
FROM paystubitem psi
INNER JOIN product p            ON p.PartNo='Vacation leave'                    AND psi.ProductID=p.RowID AND p.OrganizationID=psi.OrganizationID
INNER JOIN product p1           ON p1.PartNo='Sick leave'                       AND p1.OrganizationID=psi.OrganizationID
INNER JOIN paystubitem psi1     ON psi1.ProductID=p1.RowID AND psi1.PayStubID=psi.PayStubID
INNER JOIN product p2           ON p2.PartNo='Maternity/paternity leave'    AND p2.OrganizationID=psi.OrganizationID
INNER JOIN paystubitem psi2     ON psi2.ProductID=p2.RowID AND psi2.PayStubID=psi.PayStubID
INNER JOIN product p3           ON p3.PartNo='Others'                           AND p3.OrganizationID=psi.OrganizationID
INNER JOIN paystubitem psi3     ON psi3.ProductID=p3.RowID AND psi3.PayStubID=psi.PayStubID
WHERE psi.PayStubID=paystub_RowID
INTO    vl_Amt
        ,sl_Amt
        ,ml_Amt
        ,oth_Amt;

    SELECT SUM(ete.OtherLeaveHours)
    FROM paystub ps
    INNER JOIN dates d ON d.DateValue BETWEEN ps.PayFromDate AND ps.PayToDate
    INNER JOIN employeetimeentry ete ON ete.EmployeeID=ps.EmployeeID AND ete.OrganizationID=ps.OrganizationID AND ete.`Date`=d.DateValue
    WHERE ps.RowID=paystub_RowID
    INTO excesshrs;

UPDATE employee e
LEFT JOIN (SELECT RowID
                ,SUM(VacationLeaveHours) AS VacationLeaveHours
                ,SUM(SickLeaveHours) AS SickLeaveHours
                ,SUM(MaternityLeaveHours) AS MaternityLeaveHours
                ,SUM(OtherLeaveHours) AS OtherLeaveHours
                FROM employeetimeentry
                WHERE EmployeeID=emp_RowID
                AND OrganizationID=og_RowID
                AND `Date` BETWEEN paydate_from AND paydate_to) ete ON ete.RowID IS NOT NULL
SET
e.LeaveBalance = e.LeaveBalance + IFNULL(ete.VacationLeaveHours,0)
,e.SickLeaveBalance = e.SickLeaveBalance + IFNULL(ete.SickLeaveHours,0)
,e.MaternityLeaveBalance = e.MaternityLeaveBalance + IFNULL(ete.MaternityLeaveHours,0)
,e.OtherLeaveBalance = e.OtherLeaveBalance + IFNULL(ete.OtherLeaveHours,0)
WHERE e.RowID=emp_RowID
AND ADDDATE(e.StartDate, INTERVAL 1 YEAR) NOT BETWEEN paydate_from AND paydate_to;

UPDATE employee e
SET e.LeaveBalance = 0
,e.SickLeaveBalance = 0
,e.MaternityLeaveBalance = 0
,e.OtherLeaveBalance = 0
WHERE e.RowID=emp_RowID
AND ADDDATE(e.StartDate, INTERVAL 1 YEAR) BETWEEN paydate_from AND paydate_to;


    UPDATE employeeloanschedule els
    INNER JOIN scheduledloansperpayperiod slp ON slp.EmployeeLoanRecordID=els.RowID AND slp.PayPeriodID=payperiod_rowid AND slp.OrganizationID=els.OrganizationID AND slp.EmployeeID=els.EmployeeID
    SET
    els.TotalBalanceLeft = els.TotalBalanceLeft + slp.DeductionAmount
    ,els.LastUpdBy = IFNULL(els.LastUpdBy, els.CreatedBy)
    WHERE els.OrganizationID = og_RowID
    AND els.EmployeeID = emp_RowID;


UPDATE thirteenthmonthpay tmp
SET tmp.Amount=0
WHERE tmp.PaystubID=paystub_RowID
AND tmp.OrganizationID=og_RowID;

DELETE FROM employeeloanhistory WHERE PayStubID=paystub_RowID;

DELETE FROM paystubitem WHERE PayStubID=paystub_RowID;

DELETE FROM thirteenthmonthpay WHERE PayStubID=paystub_RowID;

DELETE FROM paystubadjustment WHERE PayStubID=paystub_RowID;

DELETE FROM paystubadjustmentactual WHERE PayStubID=paystub_RowID;

DELETE FROM paystub WHERE RowID=paystub_RowID;

DELETE FROM paystubactual WHERE EmployeeID=emp_RowID AND OrganizationID=og_RowID AND PayPeriodID=payperiod_rowid;

DELETE FROM scheduledloansperpayperiod WHERE OrganizationID=og_RowID AND EmployeeID=emp_RowID AND PayPeriodID=payperiod_rowid;

COMMIT;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.DEL_specificpaystubbonus
DROP PROCEDURE IF EXISTS `DEL_specificpaystubbonus`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `DEL_specificpaystubbonus`(IN `paystubbonus_RowID` INT)
    DETERMINISTIC
BEGIN

DECLARE IsFirstHalfOfMonth
        ,function_wrapper CHAR(1);

DECLARE OrganizID
        ,EmpRowID INT(11);

DECLARE _PayFromDate
        ,_PayToDate DATE;

DECLARE payperiod_schedule VARCHAR(50);

SELECT pp.`Half`,pp.PayFromDate,pp.PayToDate,pp.OrganizationID,psb.EmployeeID FROM payperiod pp INNER JOIN paystubbonus psb ON psb.RowID=paystubbonus_RowID AND psb.PayPeriodID=pp.RowID INTO IsFirstHalfOfMonth,_PayFromDate,_PayToDate,OrganizID,EmpRowID;

IF IsFirstHalfOfMonth = '1' THEN
	SET payperiod_schedule = 'First half';
ELSE
	SET payperiod_schedule = 'End of the month';
END IF;

    # Bonus pays base on loan deduction amount
    /*UPDATE employeeloanschedule els
    INNER JOIN (SELECT *
                    FROM employeebonus
                    WHERE EmployeeID=EmpRowID
                    AND OrganizationID=OrganizID
                    AND (EffectiveStartDate >= _PayFromDate OR EffectiveEndDate >= _PayFromDate)
                    AND (EffectiveStartDate <= _PayToDate OR EffectiveEndDate <= _PayToDate)
    ) eb ON eb.RowID = els.BonusID
    SET
    els.LoanPayPeriodLeft = IF((els.LoanPayPeriodLeft + 1) < 0, 0, (els.LoanPayPeriodLeft + 1))
    ,els.TotalBalanceLeft = els.TotalBalanceLeft + els.DeductionAmount
    WHERE els.OrganizationID=OrganizID
    AND els.BonusPotentialPaymentForLoan = 0
    AND els.EmployeeID=EmpRowID
    AND els.DeductionSchedule IN (payperiod_schedule, 'Per pay period')
    AND (els.DedEffectiveDateFrom >= _PayFromDate OR els.DedEffectiveDateTo >= _PayFromDate)
    AND (els.DedEffectiveDateFrom <= _PayToDate OR els.DedEffectiveDateTo <= _PayToDate);*/

    # Bonus pays full loan balance
    ##############################

    UPDATE employeeloanschedule els
    INNER JOIN (SELECT *
                FROM employeebonus
                WHERE EmployeeID=EmpRowID
                AND OrganizationID=OrganizID
                AND (EffectiveStartDate >= _PayFromDate OR EffectiveEndDate >= _PayFromDate)
                AND (EffectiveStartDate <= _PayToDate OR EffectiveEndDate <= _PayToDate)
    ) eb ON eb.RowID = els.BonusID
    SET
    els.LoanPayPeriodLeft = (els.LoanPayPeriodLeft + els.LoanPayPeriodLeftForBonus)
	 ,els.TotalBalanceLeft = (els.TotalBalanceLeft + (LoanPayPeriodLeftForBonus * els.DeductionAmount))
	 ,els.`Status` = 'In progress'
    WHERE els.OrganizationID=OrganizID
    # AND els.BonusPotentialPaymentForLoan = 1
    AND els.EmployeeID=EmpRowID
    # AND els.DeductionSchedule IN (payperiod_schedule, 'Per pay period')
    # AND (els.DedEffectiveDateFrom >= _PayFromDate OR els.DedEffectiveDateTo >= _PayFromDate)
    # AND (els.DedEffectiveDateFrom <= _PayToDate OR els.DedEffectiveDateTo <= _PayToDate)
	 ;

DELETE FROM paystubitembonus WHERE PayStubBonusID=paystubbonus_RowID;

DELETE FROM paystubbonus WHERE RowID=paystubbonus_RowID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.employeeloanfulldetails
DROP PROCEDURE IF EXISTS `employeeloanfulldetails`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `employeeloanfulldetails`(IN `OrganizID` INT, IN `paypPayFreqID` INT, IN `pay_fromdate` DATE, IN `pay_todate` DATE)
    DETERMINISTIC
BEGIN

SELECT e.RowID AS EmpRowID
,e.EmployeeID
,ps.RowID
,p.RowID
,p.PartNo
,SUM(IFNULL(psi.PayAmount,0)) AS PayAmount
,SUM(IFNULL(elh.DeductionAmount,0)) AS DeductionAmount
,IFNULL((els.TotalLoanAmount - ehi.PaidLoanAmount),0) AS CurrentBalance
FROM product p
INNER JOIN employee e ON e.OrganizationID=OrganizID AND e.PayFrequencyID=paypPayFreqID
LEFT JOIN payperiod pyp ON pyp.OrganizationID=e.OrganizationID AND pyp.TotalGrossSalary=e.PayFrequencyID AND pyp.PayFromDate=pay_fromdate AND pyp.PayToDate=pay_todate
LEFT JOIN paystub ps ON ps.OrganizationID=e.OrganizationID AND ps.EmployeeID=e.RowID AND ps.PayPeriodID=pyp.RowID
LEFT JOIN paystubitem psi ON psi.ProductID=p.RowID AND psi.OrganizationID=e.OrganizationID AND psi.PayStubID=ps.RowID
LEFT JOIN employeeloanhistory elh ON elh.EmployeeID=e.RowID AND elh.OrganizationID=e.OrganizationID AND elh.Comments=p.PartNo AND elh.PayStubID=ps.RowID
LEFT JOIN employeeloanhistoitem ehi ON ehi.LoanHistoID=elh.RowID
LEFT JOIN employeeloanschedule els ON els.RowID=ehi.EmpLoanID AND LOCATE(els.DeductionSchedule, IF(pyp.`Half`='0', 'End of the month,Per pay period', IF(pyp.`Half`='2', 'First half,Per pay period', 'Per pay period'))) > 0
WHERE p.OrganizationID=OrganizID
AND p.`Category`='Loan Type'
GROUP BY e.RowID,p.RowID
ORDER BY e.EmployeeID,p.PartNo;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.EMPLOYEE_payrollgen
DROP PROCEDURE IF EXISTS `EMPLOYEE_payrollgen`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `EMPLOYEE_payrollgen`(
    IN `OrganizID` INT,
    IN `Pay_Date_From` DATE,
    IN `Pay_Date_To` DATE,
    IN `SelectedEmpRowID` VARCHAR(50)


)
    DETERMINISTIC
BEGIN

IF SelectedEmpRowID IS NULL THEN

    SELECT
    e.RowID
    ,e.EmployeeID,e.MaritalStatus
    ,e.NoOfDependents
    ,e.PayFrequencyID
    ,e.EmployeeType
    ,e.EmploymentStatus
    ,e.WorkDaysPerYear
    ,e.PositionID
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.PhHealthDeductSchedAgency,d.PhHealthDeductSched), d.PhHealthDeductSched) AS PhHealthDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.HDMFDeductSchedAgency,d.HDMFDeductSched), d.HDMFDeductSched) AS HDMFDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.SSSDeductSchedAgency,d.SSSDeductSched), d.SSSDeductSched) AS SSSDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.WTaxDeductSchedAgency,d.WTaxDeductSched), d.WTaxDeductSched) AS WTaxDeductSched
    ,PAYFREQUENCY_DIVISOR(pf.PayFrequencyType) 'PAYFREQUENCY_DIVISOR'
    ,ROUND(GET_employeerateperday(e.RowID, e.OrganizationID, Pay_Date_To),2) 'EmpRatePerDay'

    ,IFNULL(dmw.Amount,d.MinimumWageAmount) AS MinimumWageAmount
    ,(e.StartDate BETWEEN Pay_Date_From AND Pay_Date_To) AS IsFirstTimeSalary
    ,GET_employeeStartingAttendanceCount(e.RowID,Pay_Date_From,Pay_Date_To) AS StartingAttendanceCount
    FROM employee e
    LEFT JOIN employeesalary esal ON e.RowID=esal.EmployeeID
    LEFT JOIN position p ON p.RowID=e.PositionID
    LEFT JOIN `division` d ON d.RowID=p.DivisionId
    LEFT JOIN agency ag ON ag.RowID=e.AgencyID
    INNER JOIN payfrequency pf ON pf.RowID=e.PayFrequencyID
    LEFT JOIN divisionminimumwage dmw ON dmw.OrganizationID=e.OrganizationID AND dmw.DivisionID=d.RowID AND Pay_Date_To BETWEEN dmw.EffectiveDateFrom AND dmw.EffectiveDateTo
    WHERE e.OrganizationID=OrganizID AND Pay_Date_To BETWEEN esal.EffectiveDateFrom AND COALESCE(esal.EffectiveDateTo,Pay_Date_To)
    GROUP BY e.RowID
    ORDER BY e.RowID DESC;

ELSE

    SELECT
    e.RowID
    ,e.EmployeeID,e.MaritalStatus
    ,e.NoOfDependents
    ,e.PayFrequencyID
    ,e.EmployeeType
    ,e.EmploymentStatus
    ,e.WorkDaysPerYear
    ,e.PositionID
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.PhHealthDeductSchedAgency,d.PhHealthDeductSched), d.PhHealthDeductSched) AS PhHealthDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.HDMFDeductSchedAgency,d.HDMFDeductSched), d.HDMFDeductSched) AS HDMFDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.SSSDeductSchedAgency,d.SSSDeductSched), d.SSSDeductSched) AS SSSDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.WTaxDeductSchedAgency,d.WTaxDeductSched), d.WTaxDeductSched) AS WTaxDeductSched
    ,PAYFREQUENCY_DIVISOR(pf.PayFrequencyType) 'PAYFREQUENCY_DIVISOR'
    ,ROUND(GET_employeerateperday(e.RowID, e.OrganizationID, Pay_Date_To),2) 'EmpRatePerDay'

    ,IFNULL(dmw.Amount,d.MinimumWageAmount) AS MinimumWageAmount
    ,(e.StartDate BETWEEN Pay_Date_From AND Pay_Date_To) AS IsFirstTimeSalary
    ,GET_employeeStartingAttendanceCount(e.RowID,Pay_Date_From,Pay_Date_To) AS StartingAttendanceCount
    FROM employee e
    LEFT JOIN employeesalary esal ON e.RowID=esal.EmployeeID
    LEFT JOIN position p ON p.RowID=e.PositionID
    LEFT JOIN `division` d ON d.RowID=p.DivisionId
    LEFT JOIN agency ag ON ag.RowID=e.AgencyID
    INNER JOIN payfrequency pf ON pf.RowID=e.PayFrequencyID
    LEFT JOIN divisionminimumwage dmw ON dmw.OrganizationID=e.OrganizationID AND dmw.DivisionID=d.RowID AND Pay_Date_To BETWEEN dmw.EffectiveDateFrom AND dmw.EffectiveDateTo
    WHERE e.OrganizationID=OrganizID AND Pay_Date_To BETWEEN esal.EffectiveDateFrom AND COALESCE(esal.EffectiveDateTo,Pay_Date_To)


    AND e.EmployeeID=SelectedEmpRowID
    GROUP BY e.RowID
    ORDER BY e.RowID DESC;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.EMPLOYEE_payrollgen_paginate
DROP PROCEDURE IF EXISTS `EMPLOYEE_payrollgen_paginate`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `EMPLOYEE_payrollgen_paginate`(IN `OrganizID` INT, IN `Pay_Date_From` DATE, IN `Pay_Date_To` DATE, IN `max_rec_perpage` INT




)
    DETERMINISTIC
BEGIN

DECLARE i INT(11) DEFAULT 0;

DECLARE max_limit INT(11);

DECLARE page_num INT(11) DEFAULT 50;

DECLARE max_val INT(11) DEFAULT 0;

SET max_limit = max_rec_perpage;

SELECT (COUNT(e.RowID) / max_limit) + 1 FROM employee e WHERE e.OrganizationID=OrganizID INTO max_val;

SET @counter = -1;

WHILE i < max_val DO

    SET page_num = i * max_limit;



    SELECT
    e.RowID
    ,e.EmployeeID,e.MaritalStatus
    ,e.NoOfDependents
    ,e.PayFrequencyID
    ,e.EmployeeType
    ,e.EmploymentStatus
    ,e.WorkDaysPerYear
    ,e.PositionID
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.PhHealthDeductSchedAgency,d.PhHealthDeductSched), d.PhHealthDeductSched) AS PhHealthDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.HDMFDeductSchedAgency,d.HDMFDeductSched), d.HDMFDeductSched) AS HDMFDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.SSSDeductSchedAgency,d.SSSDeductSched), d.SSSDeductSched) AS SSSDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.WTaxDeductSchedAgency,d.WTaxDeductSched), d.WTaxDeductSched) AS WTaxDeductSched
    ,PAYFREQUENCY_DIVISOR(pf.PayFrequencyType) 'PAYFREQUENCY_DIVISOR'
    ,IFNULL(dmw.Amount,d.MinimumWageAmount) AS MinimumWageAmount
    ,(e.StartDate BETWEEN Pay_Date_From AND Pay_Date_To) AS IsFirstTimeSalary
    ,IF(e.EmployeeType='Daily', esal.BasicPay, esal.Salary / (e.WorkDaysPerYear / 12)) `EmpRatePerDay`
    ,IFNULL(et.`etcount`,0) AS StartingAttendanceCount


    FROM employee e
    LEFT JOIN employeesalary esal ON e.RowID=esal.EmployeeID
    LEFT JOIN `position` p ON p.RowID=e.PositionID
    LEFT JOIN `division` d ON d.RowID=p.DivisionId
    LEFT JOIN agency ag ON ag.RowID=e.AgencyID
    INNER JOIN payfrequency pf ON pf.RowID=e.PayFrequencyID
    LEFT JOIN divisionminimumwage dmw ON dmw.OrganizationID=e.OrganizationID AND dmw.DivisionID=d.RowID AND Pay_Date_To BETWEEN dmw.EffectiveDateFrom AND dmw.EffectiveDateTo

    LEFT JOIN (SELECT COUNT(RowID) `etcount`,EmployeeID
                    FROM employeetimeentry
                    WHERE TotalDayPay!=0
                    AND OrganizationID=OrganizID
                    AND `Date` BETWEEN Pay_Date_From AND Pay_Date_To
                    GROUP BY EmployeeID) et ON et.EmployeeID=e.RowID

    WHERE e.OrganizationID=OrganizID AND Pay_Date_To BETWEEN esal.EffectiveDateFrom AND COALESCE(esal.EffectiveDateTo,Pay_Date_To)

    GROUP BY e.RowID
    ORDER BY e.LastName
    LIMIT page_num, max_limit;

    SET i = i + 1;

END WHILE;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.empty_this_table_reset_auto_inc
DROP PROCEDURE IF EXISTS `empty_this_table_reset_auto_inc`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `empty_this_table_reset_auto_inc`(IN `table_name` VARCHAR(150))
    DETERMINISTIC
BEGIN

DECLARE _stmt VARCHAR(1024);

    SET @SQL := CONCAT('DELETE FROM ', table_name,';');

    PREPARE _stmt FROM @SQL;

    EXECUTE _stmt;

    DEALLOCATE PREPARE _stmt;


    SET @SQL := CONCAT('ALTER TABLE ', table_name,' AUTO_INCREMENT =  0;');

    PREPARE _stmt FROM @SQL;

    EXECUTE _stmt;

    DEALLOCATE PREPARE _stmt;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.EXEC_userupdateleavebalancelog
DROP PROCEDURE IF EXISTS `EXEC_userupdateleavebalancelog`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `EXEC_userupdateleavebalancelog`(IN `OrganizID` INT, IN `UserRowID` INT)
    DETERMINISTIC
BEGIN

DECLARE hasupdate TINYINT;

DECLARE minimum_date DATE;

DECLARE maximum_date DATE;

DECLARE custom_maximum_date DATE;

DECLARE curr_year YEAR;

DECLARE leave_type TEXT DEFAULT 'Leave type';

DECLARE is_hyundai_sysown BOOL DEFAULT FALSE;

SELECT EXISTS(SELECT so.RowID FROM systemowner so WHERE so.Name='Hyundai' AND so.IsCurrentOwner='1')
INTO is_hyundai_sysown;

SET curr_year = YEAR(CURDATE());

CALL PreserveLastYearsLeave(OrganizID, UserRowID, curr_year - 1);

SELECT EXISTS(SELECT RowID FROM userupdateleavebalancelog uu WHERE uu.OrganizationID=OrganizID AND uu.YearValue=curr_year) INTO hasupdate;

IF hasupdate = 0 THEN

    SELECT MIN(ps.PayFromDate) FROM paystub ps INNER JOIN payperiod pp ON pp.RowID=ps.PayPeriodID AND pp.`Year`=curr_year AND pp.OrganizationID=ps.OrganizationID WHERE ps.OrganizationID=OrganizID INTO minimum_date;

    SELECT MAX(ps.PayToDate) FROM paystub ps INNER JOIN payperiod pp ON pp.RowID=ps.PayPeriodID AND pp.`Year`=curr_year AND pp.OrganizationID=ps.OrganizationID WHERE ps.OrganizationID=OrganizID INTO maximum_date;

    SET minimum_date = IFNULL(minimum_date, MAKEDATE(curr_year, 1));
    
    SET custom_maximum_date = IFNULL(maximum_date, ADDDATE(SUBDATE(minimum_date, INTERVAL 1 DAY), INTERVAL 1 YEAR));

    UPDATE employee e
    LEFT JOIN (SELECT et.RowID,et.EmployeeID
                    ,SUM(et.VacationLeaveHours) AS VacationLeaveHours
                    ,SUM(et.SickLeaveHours) AS SickLeaveHours
                    ,SUM(et.MaternityLeaveHours) AS MaternityLeaveHours
                    ,SUM(et.OtherLeaveHours) AS OtherLeaveHours
                    FROM employeetimeentry et
                    WHERE et.OrganizationID=OrganizID
                    AND (et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) > 0
                    AND et.`Date` BETWEEN IF(is_hyundai_sysown, MAKEDATE(curr_year, 1), minimum_date) AND custom_maximum_date
                    GROUP BY et.EmployeeID) ete ON ete.RowID IS NOT NULL AND ete.EmployeeID=e.RowID
    SET
    e.LeaveBalance=e.LeaveAllowance - IFNULL(ete.VacationLeaveHours,0)
    ,e.SickLeaveBalance=e.SickLeaveAllowance - IFNULL(ete.SickLeaveHours,0)
    ,e.MaternityLeaveBalance=e.MaternityLeaveAllowance - IFNULL(ete.MaternityLeaveHours,0)
    ,e.OtherLeaveBalance=e.OtherLeaveAllowance - IFNULL(ete.OtherLeaveHours,0)
    ,e.LastUpd=CURRENT_TIMESTAMP()
    ,e.LastUpdBy=UserRowID
    WHERE e.OrganizationID=OrganizID
    /*AND (ADDDATE(e.StartDate, INTERVAL 2 YEAR) <= curr_year
            OR ADDDATE(e.StartDate, INTERVAL 1 YEAR) BETWEEN minimum_date AND custom_maximum_date)*/
    AND (YEAR(IFNULL(e.DateRegularized, ADDDATE(e.StartDate, INTERVAL 2 YEAR))) <= curr_year
            OR IFNULL(e.DateRegularized, ADDDATE(e.StartDate, INTERVAL 1 YEAR)) BETWEEN minimum_date AND custom_maximum_date)
	 ;
	 
	 # #############################################################################
	 SET @curr_timestamp = CURRENT_TIMESTAMP();
	 INSERT INTO leavetransaction(OrganizationID,Created,CreatedBy,EmployeeID,ReferenceID,LeaveLedgerID,PayPeriodID,TransactionDate,Balance,Amount,`Type`,Comments)
	SELECT
	p.OrganizationID
	, @curr_timestamp
	, UserRowID
	, e.RowID
	, NULL
	, ll.RowID
	, pp.RowID
	, pp.PayFromDate
	, IF(p.PartNo = 'Vacation leave'
	     , e.LeaveBalance
		  , IF(p.PartNo = 'Sick leave'
		       , e.SickLeaveBalance
				 , IF(p.PartNo = 'Maternity/paternity leave'
				      , e.MaternityLeaveBalance
						, IF(p.PartNo = 'Others'
						     , e.OtherLeaveBalance
							  , 0) # 'Leave w/o Pay'
							  )))
	, (@lv_hrs :=
	   IF(p.PartNo = 'Vacation leave'
	     , IFNULL(ete.VacationLeaveHours, 0)
		  , IF(p.PartNo = 'Sick leave'
		       , IFNULL(ete.SickLeaveHours, 0)
				 , IF(p.PartNo = 'Maternity/paternity leave'
				      , IFNULL(ete.MaternityLeaveHours, 0)
						, IF(p.PartNo = 'Others'
						     , IFNULL(ete.OtherLeaveHours, 0)
							  , 0) # 'Leave w/o Pay'
							  )))
	   )
	, IF(IFNULL(@lv_hrs, 0) > 0, 'Debit', 'Credit')
	, p.PartNo
	
	FROM product p
	
	INNER JOIN employee e
	        ON e.OrganizationID = p.OrganizationID
			     AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
			     AND (YEAR(IFNULL(e.DateRegularized, ADDDATE(e.StartDate, INTERVAL 2 YEAR))) <= curr_year
                   OR IFNULL(e.DateRegularized, ADDDATE(e.StartDate, INTERVAL 1 YEAR)) BETWEEN minimum_date AND custom_maximum_date)
   
   INNER JOIN payperiod pp ON pp.OrganizationID = e.OrganizationID AND pp.TotalGrossSalary = e.PayFrequencyID AND minimum_date BETWEEN pp.PayFromDate AND pp.PayToDate
   
    LEFT JOIN (SELECT et.RowID,et.EmployeeID
                    ,SUM(et.VacationLeaveHours) AS VacationLeaveHours
                    ,SUM(et.SickLeaveHours) AS SickLeaveHours
                    ,SUM(et.MaternityLeaveHours) AS MaternityLeaveHours
                    ,SUM(et.OtherLeaveHours) AS OtherLeaveHours
                    FROM employeetimeentry et
                    WHERE et.OrganizationID=OrganizID
                    AND (et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) > 0
                    AND et.`Date` BETWEEN IF(is_hyundai_sysown, MAKEDATE(curr_year, 1), minimum_date) AND custom_maximum_date
                    GROUP BY et.EmployeeID) ete ON ete.RowID IS NOT NULL AND ete.EmployeeID=e.RowID
   
	INNER JOIN leaveledger ll
	        ON ll.OrganizationID = p.OrganizationID
			     AND ll.ProductID = p.RowID
			     AND ll.EmployeeID = e.RowID
	
	WHERE p.OrganizationID=OrganizID
	AND p.`Category`=leave_type
	;
	
	UPDATE leaveledger ll
	INNER JOIN leavetransaction lt
	        ON lt.Created = @curr_timestamp
			     AND lt.OrganizationID=ll.OrganizationID
			     AND lt.EmployeeID = ll.EmployeeID
			     AND lt.LeaveLedgerID = ll.RowID
	SET
	ll.LastTransactionID = lt.RowID
	, ll.LastUpd = @curr_timestamp
	, ll.LastUpdBy = UserRowID
	WHERE ll.OrganizationID = OrganizID
	;
	 # #############################################################################
	 
    CALL UPD_leavebalance_newlyjoinedemployee(OrganizID, CURDATE(), NULL, UserRowID);
    
    INSERT INTO userupdateleavebalancelog(OrganizationID,Created,UserID,YearValue) VALUES (OrganizID,CURRENT_TIMESTAMP(),UserRowID,curr_year) ON DUPLICATE KEY UPDATE LastUpd=CURRENT_TIMESTAMP();
    
END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.FILL_time_table
DROP PROCEDURE IF EXISTS `FILL_time_table`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `FILL_time_table`()
    DETERMINISTIC
BEGIN

DECLARE in_dex INT(11) DEFAULT 0;



WHILE (in_dex < 86399) DO

    INSERT INTO time_table(TimeValue) VALUES (ADDTIME(SEC_TO_TIME(0), SEC_TO_TIME(in_dex)));

    SET in_dex = in_dex + 1;

END WHILE;


END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.financialinstitution_proc
DROP PROCEDURE IF EXISTS `financialinstitution_proc`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `financialinstitution_proc`(IN `I_Name` VARCHAR(50), IN `I_Branch` VARCHAR(50), IN `I_Created` DATETIME, IN `I_Type` VARCHAR(50), IN `I_FaxNo` VARCHAR(50), IN `I_EmailAddress` VARCHAR(50), IN `I_OrganizationID` INT(11), IN `I_ContactID` INT(11), IN `I_CreatedBy` INT(11), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11), IN `I_MainPhone` VARCHAR(50))
    DETERMINISTIC
BEGIN
INSERT INTO financialinstitution
(
    Name,
    Branch,
    Created,
    `Type`,
    FaxNo,
    EmailAddress,
    OrganizationID,
    ContactID,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    MainPhone
)
VALUES
(
    I_Name,
    I_Branch,
    I_Created,
    I_Type,
    I_FaxNo,
    I_EmailAddress,
    I_OrganizationID,
    I_ContactID,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_MainPhone
);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.FREQUENT_absent
DROP PROCEDURE IF EXISTS `FREQUENT_absent`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `FREQUENT_absent`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

DECLARE min_datebound DATE;

DECLARE max_datebound DATE;

SELECT pp.PayToDate FROM payperiod pp WHERE pp.OrganizationID=OrganizID AND pp.TotalGrossSalary=1 AND CONCAT(pp.`Month`,pp.`Year`)=DATE_FORMAT(SUBDATE(CURDATE(),INTERVAL 1 MONTH),'%c%Y') AND pp.`Half`='1' LIMIT 1 INTO min_datebound;

SELECT pp.PayToDate FROM payperiod pp WHERE pp.OrganizationID=OrganizID AND pp.TotalGrossSalary=1 AND CONCAT(pp.`Month`,pp.`Year`)=DATE_FORMAT(CURDATE(),'%c%Y') AND pp.`Half`=(CURDATE() BETWEEN pp.PayFromDate AND pp.PayToDate) LIMIT 1 INTO max_datebound;

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName, IF(e.MiddleName='','',','),INITIALS(e.MiddleName,'. ','1')) AS Fullname
,COUNT(ete.RowID) AS Frequent
,IF(MONTH(pp.PayToDate) > MONTH(pp.PayFromDate), CONCAT(DATE_FORMAT(pp.PayFromDate,'%c/%e/%Y'),' to ',DATE_FORMAT(pp.PayToDate,'%c/%e/%Y')), CONCAT(DATE_FORMAT(pp.PayFromDate,'%c/%e'),' to ',DATE_FORMAT(pp.PayToDate,'%c/%e/%Y'))) AS CutOff
FROM employeetimeentry ete
INNER JOIN employee e ON e.RowID=ete.EmployeeID AND e.OrganizationID=ete.OrganizationID
INNER JOIN payperiod pp ON pp.OrganizationID=ete.OrganizationID AND pp.TotalGrossSalary=e.PayFrequencyID AND ete.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate
WHERE ete.OrganizationID=OrganizID
AND ete.Absent > 0
AND ete.EmployeeShiftID IS NOT NULL

GROUP BY pp.PayFromDate DESC,pp.PayToDate DESC,e.LastName,e.FirstName;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.FREQUENT_leave
DROP PROCEDURE IF EXISTS `FREQUENT_leave`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `FREQUENT_leave`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

DECLARE min_datebound DATE;

DECLARE max_datebound DATE;

SELECT pp.PayToDate FROM payperiod pp WHERE pp.OrganizationID=OrganizID AND pp.TotalGrossSalary=1 AND CONCAT(pp.`Month`,pp.`Year`)=DATE_FORMAT(SUBDATE(CURDATE(),INTERVAL 1 MONTH),'%c%Y') AND pp.`Half`='1' LIMIT 1 INTO min_datebound;

SELECT pp.PayToDate FROM payperiod pp WHERE pp.OrganizationID=OrganizID AND pp.TotalGrossSalary=1 AND CONCAT(pp.`Month`,pp.`Year`)=DATE_FORMAT(CURDATE(),'%c%Y') AND pp.`Half`=(CURDATE() BETWEEN pp.PayFromDate AND pp.PayToDate) LIMIT 1 INTO max_datebound;

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName, IF(e.MiddleName='','',','),INITIALS(e.MiddleName,'. ','1')) AS Fullname
,COUNT(ete.RowID) AS Frequent
,IF(MONTH(pp.PayToDate) > MONTH(pp.PayFromDate), CONCAT(DATE_FORMAT(pp.PayFromDate,'%c/%e/%Y'),' to ',DATE_FORMAT(pp.PayToDate,'%c/%e/%Y')), CONCAT(DATE_FORMAT(pp.PayFromDate,'%c/%e'),' to ',DATE_FORMAT(pp.PayToDate,'%c/%e/%Y'))) AS CutOff
FROM employeetimeentry ete
INNER JOIN employee e ON e.RowID=ete.EmployeeID AND e.OrganizationID=ete.OrganizationID
INNER JOIN payperiod pp ON pp.OrganizationID=ete.OrganizationID AND pp.TotalGrossSalary=e.PayFrequencyID AND ete.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate
WHERE ete.OrganizationID=OrganizID
AND (ete.VacationLeaveHours + ete.SickLeaveHours + ete.MaternityLeaveHours + ete.OtherLeaveHours) > 0
GROUP BY pp.PayFromDate DESC,pp.PayToDate DESC,e.LastName,e.FirstName;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.GetEmployees
DROP PROCEDURE IF EXISTS `GetEmployees`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `GetEmployees`(
    IN `$OrganizationID` INT,
    IN `$PayDateFrom` DATE,
    IN `$PayDateTo` DATE
)
    DETERMINISTIC
BEGIN

    DECLARE i
	         , payfreq_rowid
	         , payfreqrowid INT(11) DEFAULT 0;
    DECLARE max_limit INT(11);
    DECLARE page_num INT(11) DEFAULT 50;
    DECLARE max_val INT(11) DEFAULT 0;
    
    SELECT pp.TotalGrossSalary
    , pf.RowID
    FROM payperiod pp
    INNER JOIN payfrequency pf ON pf.PayFrequencyType = 'WEEKLY'
    WHERE pp.OrganizationID = $OrganizationID
    AND pp.PayFromDate = $PayDateFrom
    AND pp.PayToDate = $PayDateTo
    LIMIT 1
    INTO payfreq_rowid
	      ,payfreqrowid;
    
    SELECT
        e.RowID,
        IFNULL(dmw.Amount,d.MinimumWageAmount) AS MinimumWageAmount,
        IF(
            e.EmployeeType = 'Daily',
            esal.BasicPay,
            esal.Salary / (e.WorkDaysPerYear / 12)
        ) `EmpRatePerDay`
    FROM employee e
    LEFT JOIN employeesalary esal
    ON e.RowID = esal.EmployeeID
    LEFT JOIN `position` p
    ON p.RowID = e.PositionID
    LEFT JOIN `division` d
    ON d.RowID = p.DivisionId
    LEFT JOIN agency ag
    ON ag.RowID = e.AgencyID
    INNER JOIN payfrequency pf
    ON pf.RowID = e.PayFrequencyID
    LEFT JOIN divisionminimumwage dmw
    ON dmw.OrganizationID = e.OrganizationID AND
        dmw.DivisionID = d.RowID AND
        $PayDateTo BETWEEN dmw.EffectiveDateFrom AND dmw.EffectiveDateTo
    WHERE e.OrganizationID = $OrganizationID AND
        $PayDateTo BETWEEN esal.EffectiveDateFrom AND COALESCE(esal.EffectiveDateTo, $PayDateTo) AND
        e.EmploymentStatus NOT IN ('Resigned', 'Terminated') AND
        e.PayFrequencyID = payfreq_rowid
    GROUP BY e.RowID
    ORDER BY e.LastName;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.GetSummaryOfDailyAllowances
DROP PROCEDURE IF EXISTS `GetSummaryOfDailyAllowances`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetSummaryOfDailyAllowances`(
	IN `$organizationID` INT,
	IN `$dateFrom` DATE,
	IN `$dateTo` DATE
)
BEGIN

    SELECT
        DISTINCT(et.RowID) AS `etRowID`,
        ea.RowID AS `eaRowID`,
        (ea.ProductID) AS ProductID,
        et.EmployeeID,
        et.OrganizationID,
        et.`Date`,
        0 AS Column1,
        ea.TaxableFlag,
        GET_employeerateperday(et.EmployeeID, et.OrganizationID,et.`Date`) AS Column2,
        (
            (
                IF(
                    pr.PayType = 'Regular Day',
                    (
                        IF(
                            es.RestDay = '0',
                            (
                                LEAST(
                                    (et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours + et.RegularHoursWorked),
                                    sh.DivisorToDailyRate
                                ) / sh.DivisorToDailyRate
                            ) * ea.AllowanceAmount,
                            IF(
                                et.TotalHoursWorked > 0,
                                ea.AllowanceAmount,
                                0
                            )
                        )
                    ),
                    IF(
                        pr.PayType = 'Special Non-Working Holiday',
                        (
                            IF(
                                et.RegularHoursWorked > 0,
                                ea.AllowanceAmount,
                                0
                            )
                        ),
                        IF(
                            pr.PayType = 'Regular Holiday',
                            (
                                ((et.RegularHoursWorked / sh.DivisorToDailyRate) * ea.AllowanceAmount) +
                                (
                                    IF(
                                        HasWorkedLastWorkingDay(e.RowID, et.Date),
                                        ea.AllowanceAmount,
                                        0
                                    )
                                )
                            ),
                            0 
                        )
                    )
                )
            )
        ) AS TotalAllowanceAmt,
        p.`Fixed`
    FROM employeetimeentry et
    INNER JOIN employee e
    ON e.OrganizationID = et.OrganizationID AND
        e.RowID = et.EmployeeID AND
        e.EmploymentStatus NOT IN ('Resigned','Terminated')
    LEFT JOIN employeeshift es
    ON es.RowID = et.EmployeeShiftID
    LEFT JOIN shift sh
    ON sh.RowID = es.ShiftID
    INNER JOIN employeeallowance ea
    ON ea.AllowanceFrequency = 'Daily' AND
        ea.EmployeeID = e.RowID AND
        ea.OrganizationID = e.OrganizationID AND
        et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
    INNER JOIN product p
    ON p.RowID = ea.ProductID
    INNER JOIN payrate pr
    ON pr.RowID = et.PayRateID
    WHERE et.Date BETWEEN $dateFrom AND $dateTo AND
        et.OrganizationID = $organizationID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.GETVIEW_employeeTardinessUndertime
DROP PROCEDURE IF EXISTS `GETVIEW_employeeTardinessUndertime`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `GETVIEW_employeeTardinessUndertime`(IN `OrganizID` INT, IN `payp_FromDate` DATE, IN `payp_ToDate` DATE)
    DETERMINISTIC
BEGIN

    SELECT
    ete.EmployeeID
    ,SUM(IFNULL(ete.HoursLate,0)) AS HoursLate
    ,SUM(IFNULL(ete.HoursLateAmount,0)) AS HoursLateAmount
    ,SUM(IFNULL(ete.UndertimeHours,0)) AS UndertimeHours
    ,SUM(IFNULL(ete.UndertimeHoursAmount,0)) AS UndertimeHoursAmount
    FROM employeetimeentry ete
    WHERE ete.OrganizationID=OrganizID
    AND ete.Date BETWEEN payp_FromDate AND payp_ToDate
    GROUP BY ete.EmployeeID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.GETVIEW_previousemployeetimeentry
DROP PROCEDURE IF EXISTS `GETVIEW_previousemployeetimeentry`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `GETVIEW_previousemployeetimeentry`(IN `OrganizID` INT, IN `prev_payperiodID` INT, IN `WeeklySSSSchedPayPeriodID` INT)
    DETERMINISTIC
BEGIN

DECLARE payfreqID INT(11) DEFAULT NULL;

DECLARE payperiodcount INT(11);

DECLARE isSSSContribSched CHAR(1);

DECLARE customdatefrom DATE;

DECLARE paydate_to DATE;

DECLARE paydate_from DATE;

DECLARE this_month VARCHAR(2);

DECLARE this_year INT(11);

DECLARE prev_payperiodRowID INT(11);

DECLARE payperiod_half CHAR(1);

SELECT `Month`, `Year` FROM payperiod WHERE RowID=WeeklySSSSchedPayPeriodID INTO this_month, this_year;

SELECT RowID,`Half`,TotalGrossSalary FROM payperiod WHERE `Half`='1' AND RowID=prev_payperiodID AND `Month`=this_month AND `Year`=this_year AND OrganizationID=OrganizID ORDER BY PayFromDate,PayToDate LIMIT 1 INTO prev_payperiodRowID,payperiod_half,payfreqID;





SELECT TotalGrossSalary,PayToDate,PayFromDate FROM payperiod WHERE RowID=prev_payperiodRowID INTO payfreqID,paydate_to,paydate_from;

SELECT SSSContribSched FROM payperiod WHERE RowID=WeeklySSSSchedPayPeriodID INTO isSSSContribSched;



IF payfreqID = 1 THEN

    SELECT
    ete.*
    ,IFNULL(emt.emtAmount,0) AS emtAmount
    FROM employeetimeentry ete
    INNER JOIN payperiod pyp ON pyp.RowID=prev_payperiodID
    INNER JOIN employee e ON e.RowID=ete.EmployeeID
    INNER JOIN `position` p ON p.RowID=e.PositionID
    INNER JOIN `division` d ON d.RowID=p.DivisionId
    INNER JOIN (
                    SELECT et.RowID
                    ,et.EmployeeID AS eRowID
                    ,SUM(et.RegularHoursAmount / IF(e.CalcHoliday='1' OR e.CalcSpecialHoliday='1', pr.`PayRate`, 1)) AS emtAmount
                    ,'End of the month' AS DeductSched
                    FROM employeetimeentry et
                    INNER JOIN employee e ON e.RowID=et.EmployeeID
                    INNER JOIN payrate pr ON pr.RowID=et.PayRateID
                    INNER JOIN payperiod pp ON pp.RowID=WeeklySSSSchedPayPeriodID AND pp.Half='0'
                    INNER JOIN payperiod ppp ON ppp.OrganizationID=pp.OrganizationID AND ppp.`Month`=pp.`Month` AND ppp.`Year`=pp.`Year` AND ppp.TotalGrossSalary=pp.TotalGrossSalary AND ppp.Half='1'
                    WHERE et.OrganizationID=OrganizID
                    AND et.`Date` BETWEEN ppp.PayFromDate AND ppp.PayToDate
                UNION
                    SELECT et.RowID
                    ,et.EmployeeID AS eRowID
                    ,SUM(et.RegularHoursAmount / IF(e.CalcHoliday='1' OR e.CalcSpecialHoliday='1', pr.`PayRate`, 1)) AS emtAmount
                    ,'First half' AS DeductSched
                    FROM employeetimeentry et
                    INNER JOIN employee e ON e.RowID=et.EmployeeID
                    INNER JOIN payrate pr ON pr.RowID=et.PayRateID
                    INNER JOIN payperiod pp ON pp.RowID=WeeklySSSSchedPayPeriodID AND pp.Half='1'
                    INNER JOIN payperiod ppp ON ppp.OrganizationID=pp.OrganizationID AND ppp.`Month`=pp.`Month` AND ppp.`Year`=pp.`Year` AND ppp.TotalGrossSalary=pp.TotalGrossSalary AND ppp.Half='0'
                    WHERE et.OrganizationID=OrganizID
                    AND et.`Date` BETWEEN ppp.PayFromDate AND ppp.PayToDate
                UNION
                    SELECT et.RowID
                    ,et.EmployeeID AS eRowID
                    ,SUM(et.RegularHoursAmount / IF(e.CalcHoliday='1' OR e.CalcSpecialHoliday='1', pr.`PayRate`, 1)) AS emtAmount
                    ,'Per pay period' AS DeductSched
                    FROM employeetimeentry et
                    INNER JOIN employee e ON e.RowID=et.EmployeeID
                    INNER JOIN payrate pr ON pr.RowID=et.PayRateID
                    INNER JOIN payperiod pp ON pp.RowID=WeeklySSSSchedPayPeriodID
                    WHERE et.OrganizationID=OrganizID
                    AND et.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate
                GROUP BY et.EmployeeID
    ) emt ON emt.eRowID=ete.EmployeeID AND BINARY d.WTaxDeductSched=BINARY emt.DeductSched
    WHERE ete.`Date` BETWEEN pyp.PayFromDate AND pyp.PayToDate
    AND ete.OrganizationID=OrganizID
    AND e.PayFrequencyID=payfreqID
    GROUP BY ete.EmployeeID;

ELSEIF payfreqID = 4 THEN

    IF isSSSContribSched = '1' THEN

        SET customdatefrom = SUBDATE(paydate_to, INTERVAL 3 WEEK);

        SET customdatefrom = ADDDATE(customdatefrom, INTERVAL 1 DAY);

        SELECT
        ete.*
        FROM employeetimeentry ete
        INNER JOIN employee e ON e.RowID=ete.EmployeeID
        WHERE ete.OrganizationID=OrganizID
        AND e.PayFrequencyID=payfreqID
        AND ete.`Date` BETWEEN customdatefrom AND paydate_to;

    ELSE

        SELECT
        ete.*
        FROM employeetimeentry ete
        INNER JOIN payperiod pyp ON pyp.RowID=prev_payperiodID
        INNER JOIN employee e ON e.RowID=ete.EmployeeID
        WHERE ete.OrganizationID=OrganizID
        AND e.PayFrequencyID=payfreqID
        AND ete.Date IN  (SELECT
                                ADDDATE(pyp.PayFromDate, INTERVAL g.n DAY) AS WkDate
                                FROM generator_16 g
                                INNER JOIN payperiod pp ON pp.RowID=prev_payperiodID
                                INNER JOIN payperiod pyp ON pyp.OrganizationID=pp.OrganizationID AND CONCAT(pyp.`Year`,pyp.`Month`)=CONCAT(pp.`Year`,pp.`Month`) AND pyp.TotalGrossSalary=pp.TotalGrossSalary AND pyp.PayFromDate < pp.PayFromDate AND pyp.PayToDate < pp.PayToDate
                                WHERE g.n <= DATEDIFF(pyp.PayToDate,pyp.PayFromDate)
                                ORDER BY ADDDATE(pyp.PayFromDate, INTERVAL g.n DAY));

    END IF;

ELSE

    SELECT
    ete.*
    ,0 AS emtAmount
    FROM employeetimeentry ete
    WHERE ete.OrganizationID IS NULL;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.GET_AbsTardiUTNDifOTHolipay
DROP PROCEDURE IF EXISTS `GET_AbsTardiUTNDifOTHolipay`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_AbsTardiUTNDifOTHolipay`(IN `param_OrganizationID` INT, IN `param_EmployeeRowID` INT, IN `param_PayPeriodID1` INT, IN `param_PayPeriodID2` INT)
    DETERMINISTIC
BEGIN

SELECT psi.PayAmount,psi.Undeclared
,p.PartNo
,p.`Category`
FROM paystubitem psi
INNER JOIN product p ON p.RowID=psi.ProductID AND p.`Category` IN ('Deductions','Miscellaneous') AND p.PartNo NOT LIKE '%.%'
INNER JOIN payperiod pp1 ON pp1.RowID=param_PayPeriodID1
INNER JOIN payperiod pp2 ON pp2.RowID=param_PayPeriodID2
INNER JOIN paystub ps ON ps.RowID=psi.PayStubID AND ps.EmployeeID=param_EmployeeRowID AND ps.OrganizationID=param_OrganizationID AND ps.PayToDate BETWEEN pp1.PayFromDate AND pp2.PayToDate;








END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.GET_Attended_Months
DROP PROCEDURE IF EXISTS `GET_Attended_Months`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_Attended_Months`(IN `param_OrganizationID` INT, IN `param_year` DATE)
    DETERMINISTIC
BEGIN

DECLARE payfreqID INT(11);

DECLARE FirstDateOfYear DATE;

DECLARE LastDateOfYear DATE;

SELECT PayFrequencyID FROM employee WHERE OrganizationID=param_OrganizationID LIMIT 1 INTO payfreqID;

    IF payfreqID = 0 THEN

SELECT MAKEDATE(YEAR(param_year),1) 'FirstDateOfYear',LAST_DAY(ADDDATE(MAKEDATE(YEAR(param_year),1), INTERVAL 11 MONTH)) 'LastDateOfYear' INTO FirstDateOfYear,LastDateOfYear;

        SELECT
        e.RowID 'EmployeeRowID'
        ,IF(e.StartDate > FirstDateOfYear, (12 - MONTH(e.StartDate)) * 1, 12 * 1) 'CompleteMonthAttended'
        ,IF(e.EmployeeType='Fixed', esal.Salary, IF(e.EmployeeType='Daily', esal.BasicDailyPay, esal.BasicHourlyPay)) 'multiplicand'
        ,IF(e.StartDate > FirstDateOfYear, IF(e.EmployeeType='Fixed', IFNULL(SUM(pstb.TotalGrossSalary),0), 0), 0) 'firstmonthpay'
        ,IF(e.EmployeeType='Fixed', 0, COUNT(etime.RowID)) 'HourlyDailyDaysAttended'
        ,e.EmployeeType
        ,IF(e.EmployeeType='Hourly', IFNULL(((TIME_TO_SEC((SELECT SUBSTRING_INDEX(TIMEDIFF(TimeFrom,IF(TimeFrom>TimeTo,ADDTIME(TimeTo,'24:00:00'),TimeTo)),'-',-1) FROM shift WHERE RowID=(SELECT ShiftID FROM employeeshift WHERE EmployeeID=e.RowID ORDER BY EffectiveTo DESC LIMIT 1))) / 60) / 60),0), 0) 'ShiftHoursCount'
        FROM employee e
        LEFT JOIN employeesalary esal ON esal.EmployeeID=e.RowID AND LastDateOfYear BETWEEN esal.EffectiveDateFrom AND IFNULL(esal.EffectiveDateTo,LastDateOfYear)
        LEFT JOIN paystub pstb ON pstb.EmployeeID=e.RowID AND (MONTH(pstb.PayToDate)=MONTH(e.StartDate) AND YEAR(pstb.PayToDate)=YEAR(e.StartDate))
        LEFT JOIN employeetimeentry etime ON etime.EmployeeID=e.RowID AND IF(etime.RegularHoursWorked!=0, etime.RegularHoursWorked, etime.NightDifferentialHours)=etime.UndertimeHours AND YEAR(etime.Date)=YEAR(LastDateOfYear)
        WHERE e.OrganizationID=param_OrganizationID
        AND e.EmploymentStatus NOT IN ('Resigned','Terminated')
        GROUP BY e.RowID;

    ELSE

        SELECT 0 `CompleteMonthAttended`, 0 `multiplicand`, 0 `firstmonthpay`, 0 `HourlyDailyDaysAttended`, 'Daily' `EmployeeType`, 0 `ShiftHoursCount`;

    END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.GET_employeeholidaypay
DROP PROCEDURE IF EXISTS `GET_employeeholidaypay`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_employeeholidaypay`(IN `OrganizID` INT, IN `etentDateFrom` DATE, IN `etentDateTo` DATE)
    DETERMINISTIC
BEGIN

SELECT
ete.EmployeeID
,SUM(((GET_employeerateperhour(ete.EmployeeID,ete.OrganizationID,ete.Date) *
IF(ete.TotalHoursWorked - ete.RegularHoursWorked < 0, ete.TotalHoursWorked, ete.TotalHoursWorked - (ete.TotalHoursWorked - ete.RegularHoursWorked))) *
IF(esh.NightShift='0',pr.PayRate,pr.NightDifferentialRate)) *
(IF(esh.NightShift='0',pr.PayRate,pr.NightDifferentialRate) - 1) /
IF(esh.NightShift='0',pr.PayRate,pr.NightDifferentialRate)) AS HolidayPayResult
FROM employeetimeentry ete
LEFT JOIN employeeshift esh ON esh.EmployeeID=ete.EmployeeID AND ete.Date BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
LEFT JOIN payrate pr ON pr.RowID=ete.PayRateID
WHERE pr.PayType='Regular Holiday'
AND ete.OrganizationID=OrganizID
AND ete.Date BETWEEN etentDateFrom AND etentDateTo
GROUP BY ete.EmployeeID;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.GET_employee_allowanceofthisperiod
DROP PROCEDURE IF EXISTS `GET_employee_allowanceofthisperiod`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `GET_employee_allowanceofthisperiod`(
	IN `OrganizID` INT,
	IN `AllowanceFrequenzy` VARCHAR(50),
	IN `IsTaxable` CHAR(1),
	IN `DatePayFrom` DATE,
	IN `DatePayTo` DATE
)
    DETERMINISTIC
BEGIN

DECLARE isEndOfMonth CHAR(1);
DECLARE MonthCount DECIMAL(11,2) DEFAULT 12.0;

DECLARE firstdate DATE;
DECLARE thismonth VARCHAR(2);
DECLARE thisyear INT(11);

DECLARE giveAllowanceForHoliday TINYINT(1) DEFAULT FALSE;

DECLARE is_ecola_compress BOOL DEFAULT FALSE;

SET giveAllowanceForHoliday = GetListOfValueOrDefault(
    'Payroll Policy', 'allowances.holiday', FALSE
);

SET @timediffcount = 0.00;

SELECT
EXISTS(SELECT lv.RowID
		 FROM listofval lv
		 WHERE lv.LIC = 'EcolaCompressed'
		 AND lv.`Type` = 'MiscAllowance'
		 AND lv.DisplayValue = '1')
INTO is_ecola_compress;

IF AllowanceFrequenzy = 'Monthly' THEN

    SELECT (`Half` = 0),
        `Month`,
        `Year`
    FROM payperiod
    WHERE OrganizationID = OrganizID AND
        PayFromDate = DatePayFrom AND
        PayToDate = DatePayTo
    LIMIT 1
    INTO isEndOfMonth,
        thismonth,
        thisyear;

    IF isEndOfMonth = '1' THEN

        SELECT PayFromDate
        FROM payperiod
        WHERE OrganizationID = OrganizID AND
            `Month` = thismonth AND
            `Year` = thisyear
        ORDER BY PayFromDate,
            PayToDate
        LIMIT 1
        INTO firstdate;

        SELECT (SELECT @dailyallowanceamount := ROUND((ea.AllowanceAmount / (e.WorkDaysPerYear / MonthCount)),2)),
            (SELECT @timediffcount := COMPUTE_TimeDifference(sh.TimeFrom,sh.TimeTo)),
            (SELECT @timediffcount := IF(@timediffcount < 5,@timediffcount,(@timediffcount - 1.0))),
            ROUND((@dailyallowanceamount - ( ( (et.HoursLate + et.UndertimeHours) / @timediffcount ) * @dailyallowanceamount )),2) AS TotalAllowanceAmount,
            et.EmployeeID,
            ea.ProductID
        FROM employeetimeentry et
        INNER JOIN employee e
        ON e.OrganizationID = OrganizID AND
            e.RowID = et.EmployeeID AND
            e.EmploymentStatus NOT IN ('Resigned','Terminated')
        INNER JOIN payfrequency pf
        ON pf.RowID = e.PayFrequencyID
        INNER JOIN employeeshift es
        ON es.RowID = et.EmployeeShiftID
        INNER JOIN shift sh
        ON sh.RowID = es.ShiftID
        INNER JOIN employeeallowance ea
        ON ea.AllowanceFrequency = AllowanceFrequenzy AND
            ea.TaxableFlag = IsTaxable AND
        ea.EmployeeID = e.RowID AND
        ea.OrganizationID = OrganizID AND
        et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
        INNER JOIN product p
        ON p.RowID = ea.ProductID AND
            p.`Fixed` = 0
        WHERE et.OrganizationID = OrganizID AND
            et.`Date` BETWEEN firstdate AND DatePayTo;

    ELSE
        SELECT 0 AS TotalAllowanceAmount,
            '' AS EmployeeID,
            0 AS ProductID;
    END IF;

ELSEIF AllowanceFrequenzy = 'Semi-monthly' THEN

    SELECT i.*,
        ii.AllowanceAmount - (SUM(i.HoursToLess) * ((i.AllowanceAmount / (i.WorkDaysPerYear / (i.PAYFREQDIV * 12))) / 8)) +
            IF(giveAllowanceForHoliday, SUM(i.HolidayAllowance), 0) AS TotalAllowanceAmount
    FROM paystubitem_sum_semimon_allowance_group_prodid i
    INNER JOIN (
        SELECT
            ea.*,
            MIN(d.DateValue) AS DateRange1,
            MAX(d.DateValue) AS DateRange2
        FROM dates d
        INNER JOIN employeeallowance ea
        ON ea.AllowanceFrequency = 'Semi-monthly' AND
            TaxableFlag = IsTaxable AND
            ea.OrganizationID = OrganizID AND
            d.DateValue BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
        WHERE d.DateValue BETWEEN DatePayFrom AND DatePayTo
        GROUP BY ea.RowID
        ORDER BY d.DateValue
    ) ii
    ON i.EmployeeID = ii.EmployeeID AND
        i.OrganizationID = ii.OrganizationID AND
        i.`Date` BETWEEN ii.DateRange1 AND ii.DateRange2 AND
        i.`Fixed` = FALSE
    GROUP BY i.EmployeeID,
        ii.RowID;

ELSEIF AllowanceFrequenzy = 'Daily'
       AND is_ecola_compress = FALSE THEN

    SET @day_pay = 0.0;
    SET @day_pay1 = 0.0;
    SET @day_pay2 = 0.0;

        SELECT
            i.etRowID,
            i.EmployeeID,
            i.`Date`,
            0 AS Equatn,
            0 AS `timediffcount`,
            i.TotalAllowanceAmt AS TotalAllowanceAmount,
            NULL AS ShiftID,
            'First SELECT statement' AS Result
        FROM paystubitem_sum_daily_allowance_group_prodid i
        WHERE i.TaxableFlag=IsTaxable AND
            i.OrganizationID=OrganizID AND
            i.`Date` BETWEEN DatePayFrom AND DatePayTo AND
            i.`Fixed` = 0
    UNION
        SELECT
            et.RowID,
            et.EmployeeID,
            et.`Date`,
            (@day_pay1 := GET_employeerateperday(et.EmployeeID,et.OrganizationID,et.`Date`)) AS Equatn,
            0 AS `timediffcount`,
            ea.AllowanceAmount * ((et.HolidayPayAmount + ((et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) * (@day_pay1 / sh.DivisorToDailyRate))) / @day_pay1) AS TotalAllowanceAmount,
            es.ShiftID,
            'Second SELECT statement' AS Result
        FROM employeetimeentry et
        INNER JOIN payrate pr
        ON pr.RowID = et.PayRateID AND
            pr.PayType = 'Regular Holiday'
        INNER JOIN employee e
        ON e.OrganizationID = OrganizID AND
            e.RowID = et.EmployeeID AND
            e.EmploymentStatus NOT IN ('Resigned', 'Terminated') AND
            e.CalcHoliday = '1'
        INNER JOIN employeeshift es
        ON es.RowID = et.EmployeeShiftID
        INNER JOIN shift sh
        ON sh.RowID = es.ShiftID
        INNER JOIN employeeallowance ea
        ON ea.AllowanceFrequency = AllowanceFrequenzy AND
            ea.TaxableFlag = IsTaxable AND
            ea.EmployeeID = e.RowID AND
            ea.OrganizationID = OrganizID AND
            et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
        INNER JOIN product p
        ON p.RowID = ea.ProductID AND
            p.`Fixed` = 0
        WHERE et.OrganizationID = OrganizID AND
            et.`Date` BETWEEN DatePayFrom AND DatePayTo AND
            FALSE
    UNION
        SELECT
            et.RowID,
            et.EmployeeID,
            et.`Date`,
            (@day_pay1 := GET_employeerateperday(et.EmployeeID,et.OrganizationID,et.`Date`)) AS Equatn,
            0 AS `timediffcount`,
            ea.AllowanceAmount * ((et.HolidayPayAmount + ((et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) * (@day_pay1 / sh.DivisorToDailyRate))) / @day_pay1) AS TotalAllowanceAmount,
            es.ShiftID,
            'Third SELECT statement' AS Result
        FROM employeetimeentry et
        INNER JOIN payrate pr
        ON pr.RowID = et.PayRateID AND
            pr.PayType = 'Special Non-Working Holiday'
        INNER JOIN employee e
        ON e.OrganizationID = OrganizID AND
            e.RowID = et.EmployeeID AND
            e.EmploymentStatus NOT IN ('Resigned','Terminated') AND
            e.EmployeeType != 'Daily'
        INNER JOIN employeeshift es
        ON es.RowID = et.EmployeeShiftID
        INNER JOIN shift sh
        ON sh.RowID = es.ShiftID
        INNER JOIN employeeallowance ea
        ON ea.AllowanceFrequency = AllowanceFrequenzy AND
            IF(IsTaxable = '1', (ea.TaxableFlag = IsTaxable), FALSE) AND
            ea.EmployeeID = e.RowID AND
            ea.OrganizationID = OrganizID AND
            et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
        INNER JOIN product p
        ON p.RowID = ea.ProductID AND
            LOCATE('cola',p.PartNo) > 0
        WHERE et.OrganizationID = OrganizID AND
            et.RegularHoursAmount = 0 AND
            et.TotalDayPay > 0 AND
            et.`Date` BETWEEN DatePayFrom AND DatePayTo;

ELSEIF AllowanceFrequenzy = 'Daily'
       AND is_ecola_compress = TRUE THEN

    SET @day_pay = 0.0;
    SET @day_pay1 = 0.0;
    SET @day_pay2 = 0.0;

        SELECT
            i.etRowID,
            i.EmployeeID,
            i.`Date`,
            0 AS Equatn,
            0 AS `timediffcount`,
            i.TotalAllowanceAmt AS TotalAllowanceAmount,
            NULL AS ShiftID,
            'First SELECT statement' AS Result
        FROM paystubitem_sum_daily_allowance_group_prodid_compress i
        WHERE i.TaxableFlag=IsTaxable AND
            i.OrganizationID=OrganizID AND
            i.`Date` BETWEEN DatePayFrom AND DatePayTo AND
            i.`Fixed` = 0
    UNION
        SELECT
            et.RowID,
            et.EmployeeID,
            et.`Date`,
            (@day_pay1 := GET_employeerateperday(et.EmployeeID,et.OrganizationID,et.`Date`)) AS Equatn,
            0 AS `timediffcount`,
            ea.AllowanceAmount * ((et.HolidayPayAmount + ((et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) * (@day_pay1 / sh.DivisorToDailyRate))) / @day_pay1) AS TotalAllowanceAmount,
            es.ShiftID,
            'Second SELECT statement' AS Result
        FROM employeetimeentry et
        INNER JOIN payrate pr
        ON pr.RowID = et.PayRateID AND
            pr.PayType = 'Regular Holiday'
        INNER JOIN employee e
        ON e.OrganizationID = OrganizID AND
            e.RowID = et.EmployeeID AND
            e.EmploymentStatus NOT IN ('Resigned', 'Terminated') AND
            e.CalcHoliday = '1'
        INNER JOIN employeeshift es
        ON es.RowID = et.EmployeeShiftID
        INNER JOIN shift sh
        ON sh.RowID = es.ShiftID
        INNER JOIN employeeallowance ea
        ON ea.AllowanceFrequency = AllowanceFrequenzy AND
            ea.TaxableFlag = IsTaxable AND
            ea.EmployeeID = e.RowID AND
            ea.OrganizationID = OrganizID AND
            et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
        INNER JOIN product p
        ON p.RowID = ea.ProductID AND
            p.`Fixed` = 0
        WHERE et.OrganizationID = OrganizID AND
            et.`Date` BETWEEN DatePayFrom AND DatePayTo AND
            FALSE
    UNION
        SELECT
            et.RowID,
            et.EmployeeID,
            et.`Date`,
            (@day_pay1 := GET_employeerateperday(et.EmployeeID,et.OrganizationID,et.`Date`)) AS Equatn,
            0 AS `timediffcount`,
            ea.AllowanceAmount * ((et.HolidayPayAmount + ((et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) * (@day_pay1 / sh.DivisorToDailyRate))) / @day_pay1) AS TotalAllowanceAmount,
            es.ShiftID,
            'Third SELECT statement' AS Result
        FROM employeetimeentry et
        INNER JOIN payrate pr
        ON pr.RowID = et.PayRateID AND
            pr.PayType = 'Special Non-Working Holiday'
        INNER JOIN employee e
        ON e.OrganizationID = OrganizID AND
            e.RowID = et.EmployeeID AND
            e.EmploymentStatus NOT IN ('Resigned','Terminated') AND
            e.EmployeeType != 'Daily'
        INNER JOIN employeeshift es
        ON es.RowID = et.EmployeeShiftID
        INNER JOIN shift sh
        ON sh.RowID = es.ShiftID
        INNER JOIN employeeallowance ea
        ON ea.AllowanceFrequency = AllowanceFrequenzy AND
            IF(IsTaxable = '1', (ea.TaxableFlag = IsTaxable), FALSE) AND
            ea.EmployeeID = e.RowID AND
            ea.OrganizationID = OrganizID AND
            et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
        INNER JOIN product p
        ON p.RowID = ea.ProductID AND
            LOCATE('cola',p.PartNo) > 0
        WHERE et.OrganizationID = OrganizID AND
            et.RegularHoursAmount = 0 AND
            et.TotalDayPay > 0 AND
            et.`Date` BETWEEN DatePayFrom AND DatePayTo;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.GET_WeeklyDates
DROP PROCEDURE IF EXISTS `GET_WeeklyDates`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_WeeklyDates`(IN `param_PayPeriodID` INT)
    DETERMINISTIC
BEGIN

SELECT
ADDDATE(pyp.PayFromDate, INTERVAL g.n DAY) AS WkDate
FROM generator_16 g
INNER JOIN payperiod pp ON pp.RowID=param_PayPeriodID
INNER JOIN payperiod pyp ON pyp.OrganizationID=pp.OrganizationID AND CONCAT(pyp.`Year`,pyp.`Month`)=CONCAT(pp.`Year`,pp.`Month`) AND pyp.TotalGrossSalary=pp.TotalGrossSalary AND pyp.PayFromDate < pp.PayFromDate AND pyp.PayToDate < pp.PayToDate
WHERE g.n <= DATEDIFF(pyp.PayToDate,pyp.PayFromDate)
ORDER BY ADDDATE(pyp.PayFromDate, INTERVAL g.n DAY);

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.GRANT_PRIVILEGE_FOR_HOST
DROP PROCEDURE IF EXISTS `GRANT_PRIVILEGE_FOR_HOST`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `GRANT_PRIVILEGE_FOR_HOST`()
    DETERMINISTIC
    COMMENT 'CREATE USER ''root''@''localhost'' IDENTIFIED BY ''password''; GRANT ALL PRIVILEGES ON *.* TO ''root''@''localhost''; FLUSH PRIVILEGES;'
BEGIN

SELECT 'The Grant privilege SQL command is in the comment section of this \'Procedure\'';



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.HyundaiPayslip
DROP PROCEDURE IF EXISTS `HyundaiPayslip`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `HyundaiPayslip`(IN `og_rowid` INT, IN `pperiod_id` INT, IN `is_actual` BOOL, IN `emp_rowid` INT)
    DETERMINISTIC
BEGIN

DECLARE custom_dateformat VARCHAR(50) DEFAULT '%c/%e/%Y';

DECLARE date_from
        ,date_to
		  ,min_date_thisyear
		  ,max_date_thisyear DATE;

DECLARE is_endofmonth BOOL DEFAULT FALSE;

DECLARE max_dependent INT(11);

DECLARE text_cutoff_ordinal VARCHAR(50);

SELECT MAX(fs.Dependent)
FROM filingstatus fs
INTO max_dependent;

SELECT pp.PayFromDate
,pp.PayToDate
,(pp.Half = 0) `is_endofmonth`
,MIN(pyp.PayToDate)
,MAX(pyp.PayToDate)
,CONCAT_WS('-', pp.`Year`, pp.OrdinalValue)
FROM payperiod pp
INNER JOIN payperiod pyp ON pyp.OrganizationID=pp.OrganizationID AND pyp.`Year`=pp.`Year` AND pyp.TotalGrossSalary=pp.TotalGrossSalary
WHERE pp.RowID=pperiod_id
INTO date_from
     ,date_to
	  ,is_endofmonth
	  ,min_date_thisyear
	  ,max_date_thisyear
	  ,text_cutoff_ordinal;

SET @even_num = 0;

SELECT ps.RowID
,e.EmployeeID `COL1`
,CONCAT_WS(', ', e.LastName, e.FirstName) `COL2`

,CONCAT_WS('-', DATE_FORMAT(ADDDATE(date_from, INTERVAL 5 DAY), custom_dateformat)
              , DATE_FORMAT(IF(is_endofmonth = TRUE
				                   , LAST_DAY(date_to)
										 , ADDDATE(date_to, INTERVAL 5 DAY)), custom_dateformat)) `COL3`
              
,CONCAT_WS('-', DATE_FORMAT(date_from, custom_dateformat)
              , DATE_FORMAT(date_to, custom_dateformat)) `COL4`

,fs.`FilingStatus` `COL5`

,(@basic_sal := esa.BasicPay) `EmployeeBasicSalary`

,FORMAT(ps.RegularHours, 2) `COL6`
,(@act_regular := IF(e.EmployeeType = 'Fixed'
                    , @basic_sal
						  , IF(e.EmployeeType = 'Monthly'
                         , (@basic_sal - (ps.LateDeduction + ps.UndertimeDeduction + ps.AbsenceDeduction))
                         , IFNULL(et.`RegularHoursAmount`, 0)))
						  ) `ActualRegular`
,FORMAT(@act_regular, 2) `COL7`

,(@de_minimis := IFNULL(ROUND(((@act_regular * (esa.TrueSalary / esa.Salary))
                               - @act_regular), 2), 0)
  ) `DeMinimis`
,IF(@de_minimis <= 0, 0.00, FORMAT(ps.RegularHours, 2)) `COL8`
,FORMAT(@de_minimis, 2) `COL9`

,ps.TotalEmpSSS `COL10`
,ps.TotalEmpPhilhealth `COL11`
,ps.TotalEmpHDMF `COL12`

,IF(slp.`LoanNameList` IS NULL, '', REPLACE(slp.`LoanNameList`, ',', '\n')) `COL13`
,IF(slp.`LoanBalanceList` IS NULL, '', REPLACE(slp.`LoanBalanceList`, ',', '\n')) `COL14`
,IF(slp.`LoanDeductList` IS NULL, '', REPLACE(slp.`LoanDeductList`, ',', '\n')) `COL15`





/*,CONCAT_WS('\n'
           , IF(once_allow.`AllowanceNameList` IS NULL, '', REPLACE(once_allow.`AllowanceNameList`, ',', '\n'))
			  , IF(day_allow.`AllowanceNameList` IS NULL, '', REPLACE(day_allow.`AllowanceNameList`, ',', '\n'))
			  , IF(semimonth_allow.`AllowanceNameList` IS NULL, '', REPLACE(semimonth_allow.`AllowanceNameList`, ',', '\n'))) `COL16`
,CONCAT_WS('\n'
           , IF(once_allow.`AllowanceAmountList` IS NULL, '', REPLACE(once_allow.`AllowanceAmountList`, ',', '\n'))
           , IF(day_allow.`AllowanceAmountList` IS NULL, '', REPLACE(day_allow.`AllowanceAmountList`, ',', '\n'))
           , IF(semimonth_allow.`AllowanceAmountList` IS NULL, '', REPLACE(semimonth_allow.`AllowanceAmountList`, ',', '\n'))) `COL18`*/
,IF(ai.`AllowanceNameList` IS NULL, '', REPLACE(ai.`AllowanceNameList`, ',', '\n')) `COL16`
,IF(ai.`AllowanceAmountList` IS NULL, '', REPLACE(ai.`AllowanceAmountList`, ',', '\n')) `COL18`




,IF(plusadj.`AdjustmentName` IS NULL, '', REPLACE(plusadj.`AdjustmentName`, ',', '\n')) `COL19`
,IF(plusadj.PayAmount IS NULL, '', REPLACE(plusadj.PayAmount, ',', '\n')) `COL20`

,IF(lessadj.`AdjustmentName` IS NULL, '', REPLACE(lessadj.`AdjustmentName`, ',', '\n')) `COL21`
,IF(lessadj.PayAmount IS NULL, '', REPLACE(lessadj.PayAmount, ',', '\n')) `COL22`

,psa.TotalGrossSalary `COL23`
,(ps.TotalLoans
  + ps.TotalEmpSSS
  + ps.TotalEmpPhilhealth
  + ps.TotalEmpHDMF
  + ps.TotalEmpWithholdingTax
  + IFNULL((lessadj.`TotalNegativeAdjustment`), 0)) `COL24`
,psa.TotalNetSalary `COL25`

,(e.LeaveAllowance - IFNULL(etlv.VacationLeaveHours, 0)) `COL26`
,(e.SickLeaveAllowance - IFNULL(etlv.SickLeaveHours, 0)) `COL27`

,ps.TotalEmpWithholdingTax `COL32`

,ps.OvertimeHours `COL33`
,FORMAT(ps.OvertimePay, 2) `COL34`

,pstub.TotalTaxableSalary `COL41`
,pstub.TotalEmpWithholdingTax `COL42`
,pstub.TotalEmpSSS `COL43`
,pstub.TotalEmpPhilhealth `COL28`
,pstub.TotalEmpHDMF `COL29`

,text_cutoff_ordinal `COL44`

,CONCAT('Dept: ', dv.Name) `COL100`

,is_endofmonth `IsEndOfMonth`

, e.EmployeeID `COL50`

FROM paystub ps

INNER JOIN employee e
        ON e.RowID=ps.EmployeeID
		     AND e.OrganizationID=ps.OrganizationID
		     AND e.EmploymentStatus NOT IN ('Resigned', 'Terminated')
		     AND e.RowID = IF(emp_rowid IS NULL, e.RowID, emp_rowid)
INNER JOIN `position` pos
        ON pos.RowID=e.PositionID
		     AND pos.OrganizationID=e.OrganizationID
INNER JOIN division dv
        ON dv.RowID=pos.DivisionId

INNER JOIN filingstatus fs
        ON fs.MaritalStatus=e.MaritalStatus
           AND fs.Dependent=IF(max_dependent < e.NoOfDependents, max_dependent, e.NoOfDependents)

INNER JOIN paystubactual psa
        ON psa.RowID=ps.RowID

LEFT JOIN (SELECT ete.EmployeeID
           ,SUM(ete.RegularHoursAmount) `RegularHoursAmount`
           FROM v_uni_employeetimeentry ete
           WHERE ete.OrganizationID = og_rowid
           AND ete.`Date` BETWEEN date_from AND date_to
           AND ete.AsActual = FALSE
           ) et
       ON et.EmployeeID=ps.EmployeeID

INNER JOIN employeesalary esa
        ON esa.RowID = (SELECT esa.RowID # ROUND((esa.BasicPay * (esa.TrueSalary / esa.Salary)), 2)
		                  FROM employeesalary esa
								WHERE esa.EmployeeID=ps.EmployeeID
								AND esa.OrganizationID=og_rowid
								AND (esa.EffectiveDateFrom >= date_from OR IFNULL(esa.EffectiveDateTo, max_date_thisyear) >= date_from)
								AND (esa.EffectiveDateFrom <= date_to OR IFNULL(esa.EffectiveDateTo, max_date_thisyear) <= date_to)
								ORDER BY esa.EffectiveDateFrom DESC
								LIMIT 1)

LEFT JOIN (SELECT slp.*
           # ,GROUP_CONCAT(CONCAT('  ', CUSTOM_ABBREVIATE(p.PartNo) )) `LoanNameList`
           ,GROUP_CONCAT(CONCAT('  ', p.PartNo )) `LoanNameList`
           ,GROUP_CONCAT(ROUND(slp.DeductionAmount, 2)) `LoanDeductList`
           ,GROUP_CONCAT(ROUND(slp.TotalBalanceLeft, 2)) `LoanBalanceList`
           FROM scheduledloansperpayperiod slp
           INNER JOIN employeeloanschedule els
                   ON els.RowID=slp.EmployeeLoanRecordID
           INNER JOIN product p
                   ON p.RowID=els.LoanTypeID
			  WHERE slp.OrganizationID=og_rowid
			  AND slp.PayPeriodID=pperiod_id
			  GROUP BY slp.EmployeeID) slp
       ON slp.EmployeeID=ps.EmployeeID

LEFT JOIN (SELECT padj.RowID
           ,padj.PayStubID
           ,GROUP_CONCAT(padj.AdjustmentName) `AdjustmentName`
           ,GROUP_CONCAT(ROUND(padj.PayAmount, 2)) `PayAmount`
           FROM paystubadjustwithproductname padj
           INNER JOIN paystub ps ON ps.RowID=padj.PayStubID AND ps.PayPeriodID=pperiod_id
           WHERE padj.PayAmount > 0
			  AND padj.OrganizationID=og_rowid
			  AND padj.AsActual = is_actual
			  GROUP BY padj.PayStubID) plusadj
       ON plusadj.PayStubID=ps.RowID

LEFT JOIN (SELECT padj.RowID
           ,padj.PayStubID
           ,GROUP_CONCAT(CONCAT(' ', padj.AdjustmentName)) `AdjustmentName`
           ,GROUP_CONCAT(ROUND(padj.PayAmount, 2)) `PayAmount`
           ,SUM(ROUND(padj.PayAmount, 2)) `TotalNegativeAdjustment`
           FROM paystubadjustwithproductname padj
           INNER JOIN paystub ps ON ps.RowID=padj.PayStubID AND ps.PayPeriodID=pperiod_id
           WHERE padj.PayAmount < 0
			  AND padj.OrganizationID=og_rowid
			  AND padj.AsActual = is_actual
			  GROUP BY padj.PayStubID) lessadj
       ON lessadj.PayStubID=ps.RowID

LEFT JOIN (SELECT etlv.RowID
           ,etlv.EmployeeID
           ,SUM(etlv.VacationLeaveHours) `VacationLeaveHours`
			  ,SUM(etlv.SickLeaveHours) `SickLeaveHours`
			  ,SUM(etlv.MaternityLeaveHours) `MaternityLeaveHours`
			  ,SUM(etlv.OtherLeaveHours) `OtherLeaveHours`
           FROM employeetimeentry etlv
			  WHERE etlv.OrganizationID=og_rowid
			  AND (etlv.VacationLeaveHours + etlv.SickLeaveHours + etlv.MaternityLeaveHours + etlv.OtherLeaveHours) > 0
			  AND etlv.`Date` BETWEEN min_date_thisyear AND date_to
			  GROUP BY etlv.EmployeeID) etlv
	    ON etlv.EmployeeID=ps.EmployeeID

/*LEFT JOIN (SELECT ea.*
           ,GROUP_CONCAT(ea.AllowanceAmount) `AllowanceAmountList`
           ,GROUP_CONCAT( CUSTOM_ABBREVIATE(p.PartNo) ) `AllowanceNameList`
           FROM employeeallowance ea
           INNER JOIN product p ON p.RowID=ea.ProductID
			  WHERE ea.OrganizationID=og_rowid
			  AND ea.AllowanceAmount != 0
			  AND ea.AllowanceFrequency='One time'
			  AND ea.EffectiveStartDate BETWEEN date_from AND date_to
			  GROUP BY ea.EmployeeID) once_allow
       ON once_allow.EmployeeID=ps.EmployeeID

LEFT JOIN (SELECT ea.*
           ,(@perc0 := AVG(IFNULL(etn.`AttendancePercentage`, 0)))
           ,(@counts0 := COUNT(IFNULL(etn.RowID, 0)))
           ,GROUP_CONCAT( ROUND((ea.AllowanceAmount * (IF(p.`Fixed` = 1, 1, @perc0) * @counts0)), 2) ) `AllowanceAmountList`
           ,GROUP_CONCAT( CUSTOM_ABBREVIATE(p.PartNo) ) `AllowanceNameList`
           FROM employeeallowance ea
           INNER JOIN product p ON p.RowID=ea.ProductID
           LEFT JOIN v_employeetimeentry_numbers etn
                  ON etn.EmployeeID=ea.EmployeeID
                     AND etn.OrganizationID=ea.OrganizationID
                     AND etn.PayPeriodID=pperiod_id
			  WHERE ea.OrganizationID=og_rowid
			  AND ea.AllowanceAmount != 0
			  AND ea.AllowanceFrequency='Daily'
			  AND (ea.EffectiveStartDate >= date_from OR ea.EffectiveEndDate >= date_from)
			  AND (ea.EffectiveStartDate <= date_to OR ea.EffectiveEndDate <= date_to)
			  GROUP BY ea.EmployeeID) day_allow
       ON day_allow.EmployeeID=ps.EmployeeID

LEFT JOIN (SELECT ea.*
           ,(@perc1 := AVG(IFNULL(etn.`AttendancePercentage`, 0)))
           ,GROUP_CONCAT( ROUND((ea.AllowanceAmount * IF(p.`Fixed` = 1, 1, @perc1)), 2) ) `AllowanceAmountList`
           ,GROUP_CONCAT( CUSTOM_ABBREVIATE(p.PartNo) ) `AllowanceNameList`
           FROM employeeallowance ea
           INNER JOIN product p ON p.RowID=ea.ProductID
           LEFT JOIN v_employeetimeentry_numbers etn
                  ON etn.EmployeeID=ea.EmployeeID
                     AND etn.OrganizationID=ea.OrganizationID
                     AND etn.PayPeriodID=pperiod_id
			  WHERE ea.OrganizationID=og_rowid
			  AND ea.AllowanceAmount != 0
			  AND ea.AllowanceFrequency='Semi-monthly'
			  AND (ea.EffectiveStartDate >= date_from OR ea.EffectiveEndDate >= date_from)
			  AND (ea.EffectiveStartDate <= date_to OR ea.EffectiveEndDate <= date_to)
			  GROUP BY ea.EmployeeID) semimonth_allow
       ON semimonth_allow.EmployeeID=ps.EmployeeID*/
LEFT JOIN (SELECT ai.*
           , GROUP_CONCAT( ROUND(ai.Amount, 2) ) `AllowanceAmountList`
           # , GROUP_CONCAT( CUSTOM_ABBREVIATE(p.PartNo) ) `AllowanceNameList`
           , GROUP_CONCAT( p.PartNo ) `AllowanceNameList`
           FROM allowanceitem ai
           INNER JOIN employeeallowance ea ON ea.RowID=ai.AllowanceID
           INNER JOIN product p ON p.RowID=ea.ProductID
           WHERE ai.OrganizationID = og_rowid
			  AND ai.PayPeriodID = pperiod_id
			  GROUP BY ai.PaystubID
			  ) ai
       ON ai.PaystubID=ps.RowID

INNER JOIN (SELECT ps.RowID
            ,ps.EmployeeID
            ,SUM(ps.TotalTaxableSalary) `TotalTaxableSalary`
            ,SUM(ps.TotalEmpWithholdingTax) `TotalEmpWithholdingTax`
            ,SUM(ps.TotalEmpSSS) `TotalEmpSSS`
            ,SUM(ps.TotalEmpPhilhealth) `TotalEmpPhilhealth`
            ,SUM(ps.TotalEmpHDMF) `TotalEmpHDMF`
            FROM paystubactual ps
            WHERE ps.OrganizationID=og_rowid
            AND (ps.PayFromDate >= min_date_thisyear AND ps.PayToDate <= max_date_thisyear)
            GROUP BY ps.EmployeeID
            ) pstub
        ON pstub.EmployeeID=ps.EmployeeID

WHERE ps.OrganizationID=og_rowid
		AND ps.PayPeriodID=pperiod_id

ORDER BY CONCAT(e.LastName, e.FirstName)
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.IMPORT_allowance
DROP PROCEDURE IF EXISTS `IMPORT_allowance`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `IMPORT_allowance`(IN `og_id` INT, IN `user_rowid` INT, IN `emp_num` VARCHAR(50), IN `allowance_name` VARCHAR(50), IN `start_date` VARCHAR(50), IN `end_date` VARCHAR(50), IN `allowance_freq` VARCHAR(50), IN `allowance_amount` DECIMAL(11,2))
    DETERMINISTIC
BEGIN

INSERT INTO product
(
	Name
	,OrganizationID
	,PartNo
	,Created
	,CreatedBy
	,LastUpdBy
	,`Category`
	,CategoryID
	,`Status`
	,UnitPrice
	,UnitOfMeasure
	,`Fixed`
	,AllocateBelowSafetyFlag
) SELECT
	allowance_name
	,og_id
	,allowance_name
	,CURRENT_TIMESTAMP()
	,user_rowid
	,user_rowid
	,c.CategoryName
	,c.RowID
	,0
	,0
	,0
	,0
	,0
	FROM category c
	WHERE c.OrganizationID=og_id
	AND c.CategoryName='Allowance Type'
ON
DUPLICATE
KEY
UPDATE
	LastUpd=CURRENT_TIMESTAMP()
	,LastUpdBy=user_rowid;

INSERT INTO employeeallowance
(
	OrganizationID
	,Created
	,CreatedBy
	,LastUpdBy
	,EmployeeID
	,ProductID
	,EffectiveStartDate
	,AllowanceFrequency
	,EffectiveEndDate
	,TaxableFlag
	,AllowanceAmount
) SELECT
	e.OrganizationID
	,CURRENT_TIMESTAMP()
	,user_rowid
	,user_rowid
	,e.RowID
	,p.RowID
	,STR_TO_DATE(start_date, @@datetime_format)
	,allowance_freq
	,STR_TO_DATE(end_date, @@datetime_format)
	,p.`Status`
	,allowance_amount
FROM employee e
INNER JOIN product p ON p.PartNo=allowance_name AND p.OrganizationID=e.OrganizationID AND p.`Category`='Allowance Type'
WHERE e.OrganizationID=og_id AND e.EmployeeID=emp_num

ON
DUPLICATE
KEY
UPDATE
	LastUpd=CURRENT_TIMESTAMP()
	,LastUpdBy=user_rowid;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.IMPORT_employeeshift
DROP PROCEDURE IF EXISTS `IMPORT_employeeshift`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `IMPORT_employeeshift`(IN `i_EmployeeID` VARCHAR(50), IN `OrganizID` INT, IN `CreatedLastUpdBy` INT, IN `i_TimeFrom` TIME, IN `i_TimeTo` TIME, IN `i_DateFrom` DATE, IN `i_DateTo` DATE, IN `i_SchedType` TEXT)
    DETERMINISTIC
BEGIN

DECLARE employeeRowID INT(11);
DECLARE shiftRowID INT(11);
DECLARE employeeshiftID INT(11);
DECLARE defaultRestDay INT(11);
DECLARE isRestDay TINYINT(1) DEFAULT FALSE;
DECLARE calcNightShift INT(11);

SELECT
    RowID,
    DayOfRest,
    CalcNightDiff
FROM employee
WHERE EmployeeID = i_EmployeeID
    AND OrganizationID = OrganizID
LIMIT 1
INTO
    employeeRowID,
    defaultRestDay,
    calcNightShift;

SET isRestDay = (i_DateFrom = i_DateTo) AND
    IFNULL(defaultRestDay, FALSE) AND
    (defaultRestDay = DAYOFWEEK(i_DateFrom));

IF (employeeRowID IS NOT NULL) AND (i_DateFrom IS NOT NULL) THEN

    IF (i_TimeFrom IS NULL AND i_TimeTo IS NULL) OR (i_TimeFrom IS NULL OR i_TimeTo IS NULL) THEN
        SET shiftRowID = NULL;
    ELSE
        SELECT RowID
        FROM shift sh
        WHERE sh.TimeFrom = i_TimeFrom AND
            sh.TimeTo = i_TimeTo AND
            sh.OrganizationID = OrganizID
        LIMIT 1
		  INTO shiftRowID;

        IF shiftRowID IS NULL THEN
            INSERT INTO shift
            (
                OrganizationID
                ,Created
                ,CreatedBy
                ,TimeFrom
                ,TimeTo
                ,Hidden
            ) VALUES (
                OrganizID
                ,CURRENT_TIMESTAMP()
                ,CreatedLastUpdBy
                ,i_TimeFrom
                ,i_TimeTo
                ,TRUE
            ) ON
            DUPLICATE
            KEY
            UPDATE
                LastUpd = CURRENT_TIMESTAMP();

            SELECT @@Identity AS Id INTO shiftRowID;
        END IF;
    END IF;

    SELECT RowID
    FROM employeeshift
    WHERE OrganizationID = OrganizID AND
        EmployeeID = employeeRowID AND
        EffectiveFrom = i_DateFrom AND
        EffectiveTo = i_DateTo
    LIMIT 1
	 INTO employeeshiftID;

    INSERT INTO employeeshift (
        RowID,
        OrganizationID,
        Created,
        CreatedBy,
        EmployeeID,
        ShiftID,
        EffectiveFrom,
        EffectiveTo,
        NightShift,
        RestDay
    )
    VALUES (
        employeeshiftID,
        OrganizID,
        CURRENT_TIMESTAMP(),
        CreatedLastUpdBy,
        employeeRowID,
        shiftRowID,
        i_DateFrom,
        i_DateTo,
        calcNightShift,
        isRestDay
    )
    ON DUPLICATE KEY
    UPDATE
        ShiftID = shiftRowID,
        RestDay = isRestDay,
        LastUpdBy = CreatedLastUpdBy,
        LastUpd = CURRENT_TIMESTAMP();

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.IMPORT_OB
DROP PROCEDURE IF EXISTS `IMPORT_OB`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `IMPORT_OB`(IN `og_id` INT, IN `user_rowid` INT, IN `emp_num` VARCHAR(50), IN `allowance_name` VARCHAR(50), IN `start_date` VARCHAR(50), IN `i_starttime` VARCHAR(50), IN `end_date` VARCHAR(50), IN `i_endtime` VARCHAR(50))
    DETERMINISTIC
BEGIN

INSERT INTO employeeofficialbusiness
(
	OrganizationID	
	,Created
	,CreatedBy
	,LastUpdBy
	,EmployeeID
	,OffBusType
	,OffBusStartDate
	,OffBusStartTime
	,OffBusEndDate
	,OffBusEndTime
      ,OffBusStatus
) SELECT
	e.OrganizationID
	,CURRENT_TIMESTAMP()
	,user_rowid
	,user_rowid
	,e.RowID
	,allowance_name
	,STR_TO_DATE(start_date, @@datetime_format)
	,i_starttime
	,STR_TO_DATE(end_date, @@datetime_format)
      ,i_endtime
     ,'Approved'
FROM employee e
WHERE e.OrganizationID=og_id AND e.EmployeeID=emp_num

ON
DUPLICATE
KEY
UPDATE
	LastUpd=CURRENT_TIMESTAMP()
	,LastUpdBy=user_rowid;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.IMPORT_overtime
DROP PROCEDURE IF EXISTS `IMPORT_overtime`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `IMPORT_overtime`(IN `og_id` INT, IN `user_rowid` INT, IN `emp_num` VARCHAR(50), IN `allowance_name` VARCHAR(50), IN `start_date` VARCHAR(50), IN `i_starttime` VARCHAR(50), IN `end_date` VARCHAR(50), IN `i_endtime` VARCHAR(50))
    DETERMINISTIC
BEGIN

INSERT INTO employeeovertime
(
	OrganizationID	
	,Created
	,CreatedBy
	,LastUpdBy
	,EmployeeID
	,OTType
	,OTStartDate
	,OTStartTime
	,OTEndDate
	,OTEndTime
      ,OTStatus
) SELECT
	e.OrganizationID
	,CURRENT_TIMESTAMP()
	,user_rowid
	,user_rowid
	,e.RowID
	,allowance_name
	,STR_TO_DATE(start_date, @@datetime_format)
	,i_starttime
	,STR_TO_DATE(end_date, @@datetime_format)
      ,i_endtime
     ,'Approved'
FROM employee e
WHERE e.OrganizationID=og_id AND e.EmployeeID=emp_num

ON
DUPLICATE
KEY
UPDATE
	LastUpd=CURRENT_TIMESTAMP()
	,LastUpdBy=user_rowid;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.INSUPDPROC_paystub
DROP PROCEDURE IF EXISTS `INSUPDPROC_paystub`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSUPDPROC_paystub`(IN `pstub_RowID` INT, IN `pstub_OrganizationID` INT, IN `pstub_CreatedBy` INT, IN `pstub_LastUpdBy` INT, IN `pstub_PayPeriodID` INT, IN `pstub_EmployeeID` INT, IN `pstub_TimeEntryID` INT, IN `pstub_PayFromDate` DATE, IN `pstub_PayToDate` DATE, IN `pstub_TotalGrossSalary` DECIMAL(10,2), IN `pstub_TotalNetSalary` DECIMAL(10,2), IN `pstub_TotalTaxableSalary` DECIMAL(10,2), IN `pstub_TotalEmpSSS` DECIMAL(10,2), IN `pstub_TotalEmpWithholdingTax` DECIMAL(10,2), IN `pstub_TotalCompSSS` DECIMAL(10,2), IN `pstub_TotalEmpPhilhealth` DECIMAL(10,2), IN `pstub_TotalCompPhilhealth` DECIMAL(10,2), IN `pstub_TotalEmpHDMF` DECIMAL(10,2), IN `pstub_TotalCompHDMF` DECIMAL(10,2), IN `pstub_TotalVacationDaysLeft` DECIMAL(10,2), IN `pstub_TotalLoans` DECIMAL(10,2), IN `pstub_TotalBonus` DECIMAL(10,2), IN `pstub_TotalAllowance` DECIMAL(10,2))
    DETERMINISTIC
BEGIN

DECLARE paystubID INT(11);

DECLARE existingrowrecord INT(11);

DECLARE isexist INT(1);

DECLARE SumPayStubAdjustments DECIMAL(11,2);

DECLARE ps_TotalUndeclaredSalary DECIMAL(11,6) DEFAULT 0.0;
DECLARE ps_rowIDs VARCHAR(2000);
SELECT RowID FROM paystub WHERE EmployeeID=pstub_EmployeeID AND OrganizationID=pstub_OrganizationID AND PayFromDate=pstub_PayFromDate AND PayToDate=pstub_PayToDate INTO ps_rowIDs;
DELETE FROM paystubactual WHERE RowID != ps_rowIDs AND EmployeeID=pstub_EmployeeID AND OrganizationID=pstub_OrganizationID AND PayFromDate=pstub_PayFromDate AND PayToDate=pstub_PayToDate;

SELECT RowID FROM paystub WHERE PayPeriodID=pstub_PayPeriodID AND EmployeeID=pstub_EmployeeID AND OrganizationID=pstub_OrganizationID AND PayFromDate=pstub_PayFromDate AND PayToDate=pstub_PayToDate LIMIT 1 INTO existingrowrecord;

SET SumPayStubAdjustments = IFNULL(GET_SumPayStubAdjustments(IF(pstub_RowID IS NULL, existingrowrecord, pstub_RowID)),0);

SELECT GET_employeeundeclaredsalarypercent(pstub_EmployeeID,pstub_OrganizationID,pstub_PayFromDate,pstub_PayToDate) INTO ps_TotalUndeclaredSalary;

IF ps_TotalUndeclaredSalary < 1.0 THEN
    SET ps_TotalUndeclaredSalary = ps_TotalUndeclaredSalary + 1.000000;
ELSEIF ps_TotalUndeclaredSalary > 1.0 THEN
    SET ps_TotalUndeclaredSalary = ps_TotalUndeclaredSalary - 1.000000;
END IF;

SET ps_TotalUndeclaredSalary = CAST(ps_TotalUndeclaredSalary AS DECIMAL(11,6));

SET ps_TotalUndeclaredSalary = (pstub_TotalNetSalary + SumPayStubAdjustments) * ps_TotalUndeclaredSalary;

INSERT INTO paystub
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,PayPeriodID
    ,EmployeeID
    ,TimeEntryID
    ,PayFromDate
    ,PayToDate
    ,TotalGrossSalary
    ,TotalNetSalary
    ,TotalTaxableSalary
    ,TotalEmpSSS
    ,TotalEmpWithholdingTax
    ,TotalCompSSS
    ,TotalEmpPhilhealth
    ,TotalCompPhilhealth
    ,TotalEmpHDMF
    ,TotalCompHDMF
    ,TotalVacationDaysLeft
    ,TotalLoans
    ,TotalBonus
    ,TotalAllowance
    ,TotalAdjustments
    ,TotalUndeclaredSalary
) VALUES (
    IF(pstub_RowID IS NULL, existingrowrecord, pstub_RowID)
    ,pstub_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,pstub_CreatedBy
    ,pstub_PayPeriodID
    ,pstub_EmployeeID
    ,pstub_TimeEntryID
    ,pstub_PayFromDate
    ,pstub_PayToDate
    ,pstub_TotalGrossSalary
    ,pstub_TotalNetSalary + SumPayStubAdjustments
    ,pstub_TotalTaxableSalary
    ,pstub_TotalEmpSSS
    ,pstub_TotalEmpWithholdingTax
    ,pstub_TotalCompSSS
    ,pstub_TotalEmpPhilhealth
    ,pstub_TotalCompPhilhealth
    ,pstub_TotalEmpHDMF
    ,pstub_TotalCompHDMF
    ,COALESCE((SELECT COALESCE(LeaveBalance,0) + COALESCE(SickLeaveBalance,0) + COALESCE(MaternityLeaveBalance,0) FROM employee WHERE RowID=pstub_EmployeeID),0)
    ,pstub_TotalLoans
    ,pstub_TotalBonus
    ,pstub_TotalAllowance
    ,SumPayStubAdjustments
    ,ps_TotalUndeclaredSalary
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=pstub_LastUpdBy
    ,PayPeriodID=pstub_PayPeriodID
    ,EmployeeID=pstub_EmployeeID
    ,TimeEntryID=pstub_TimeEntryID
    ,PayFromDate=pstub_PayFromDate
    ,PayToDate=pstub_PayToDate
    ,TotalGrossSalary=pstub_TotalGrossSalary
    ,TotalNetSalary=pstub_TotalNetSalary + SumPayStubAdjustments
    ,TotalTaxableSalary=pstub_TotalTaxableSalary
    ,TotalEmpSSS=pstub_TotalEmpSSS
    ,TotalEmpWithholdingTax=pstub_TotalEmpWithholdingTax
    ,TotalCompSSS=pstub_TotalCompSSS
    ,TotalEmpPhilhealth=pstub_TotalEmpPhilhealth
    ,TotalCompPhilhealth=pstub_TotalCompPhilhealth
    ,TotalEmpHDMF=pstub_TotalEmpHDMF
    ,TotalCompHDMF=pstub_TotalCompHDMF
    ,TotalLoans=pstub_TotalLoans
    ,TotalBonus=pstub_TotalBonus
    ,TotalAllowance=pstub_TotalAllowance
    ,TotalAdjustments=SumPayStubAdjustments
    ,TotalUndeclaredSalary=ps_TotalUndeclaredSalary;SELECT @@Identity AS id INTO paystubID;


IF existingrowrecord IS NULL THEN


    SET paystubID = 0;
ELSE


    SET paystubID = 0;
END IF;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.INSUPD_position
DROP PROCEDURE IF EXISTS `INSUPD_position`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSUPD_position`(IN `pos_RowID` INT, IN `pos_PositionName` VARCHAR(50), IN `pos_CreatedBy` INT, IN `pos_OrganizationID` INT, IN `pos_LastUpdBy` INT, IN `pos_ParentPositionID` INT, IN `pos_DivisionId` INT)
    DETERMINISTIC
BEGIN

DECLARE positID
        ,defaultDivisID INT(11);	

DECLARE default_division_name VARCHAR(50) DEFAULT 'Default Division';

SELECT COUNT(RowID) FROM `division` WHERE OrganizationID=pos_OrganizationID AND ParentDivisionID IS NOT NULL INTO defaultDivisID;

IF defaultDivisID > 0 THEN
	
	IF pos_DivisionId IS NULL THEN
		
		SELECT RowID FROM division WHERE Name = default_division_name AND OrganizationID=pos_OrganizationID AND ParentDivisionID IS NOT NULL ORDER BY RowID LIMIT 1 INTO pos_DivisionId;
		
	END IF;
	
	INSERT INTO `position`
	(
		RowID
		,PositionName
		,Created
		,CreatedBy
		,OrganizationID
		,LastUpdBy
		# ,ParentPositionID
		,DivisionId
	) VALUES (
		pos_RowID
		,pos_PositionName
		,CURRENT_TIMESTAMP()
		,pos_CreatedBy
		,pos_OrganizationID
		,pos_LastUpdBy
		# ,pos_ParentPositionID
		,pos_DivisionId
	) ON 
	DUPLICATE 
	KEY 
	UPDATE 
		PositionName=pos_PositionName
		,LastUpd=CURRENT_TIMESTAMP()
		,LastUpdBy=pos_LastUpdBy
		# ,ParentPositionID=pos_ParentPositionID
		,DivisionId=pos_DivisionId;SELECT @@Identity AS Id INTO positID;
	
ELSE

	INSERT INTO `division`
	(
		Name
		,OrganizationID
		,CreatedBy
		,Created
	) VALUES (
		default_division_name
		,pos_OrganizationID
		,pos_CreatedBy
		,CURRENT_TIMESTAMP()
	) ON
	DUPLICATE
	KEY
	UPDATE
		LastUpd=CURRENT_TIMESTAMP()
		,LastUpdBy=pos_LastUpdBy;
	
	SELECT RowID FROM `division` WHERE Name = default_division_name AND OrganizationID=pos_OrganizationID ORDER BY RowID DESC LIMIT 1 INTO defaultDivisID;

	INSERT INTO `position` 
	(
		RowID
		,PositionName
		,Created
		,CreatedBy
		,OrganizationID
		,LastUpdBy
		# ,ParentPositionID
		,DivisionId
	) VALUES (
		pos_RowID
		,pos_PositionName
		,CURRENT_TIMESTAMP()
		,pos_CreatedBy
		,pos_OrganizationID
		,pos_LastUpdBy
		# ,pos_ParentPositionID
		,defaultDivisID
	) ON
	DUPLICATE
	KEY
	UPDATE
		PositionName=pos_PositionName
		,LastUpd=CURRENT_TIMESTAMP()
		,LastUpdBy=pos_LastUpdBy
		# ,ParentPositionID=pos_ParentPositionID
		,DivisionId=defaultDivisID;SELECT @@Identity AS Id INTO positID;
		
END IF;

IF IFNULL(positID,0) = 0 AND IFNULL(pos_RowID,0) != 0 THEN
	SET positID = pos_RowID;
ELSEIF IFNULL(positID,0) = 0 THEN
	SELECT RowID FROM `position` pt WHERE pt.PositionName=pos_PositionName AND pt.OrganizationID=pos_OrganizationID LIMIT 1 INTO positID;
END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.INS_audittrail
DROP PROCEDURE IF EXISTS `INS_audittrail`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `INS_audittrail`(IN `au_CreatedBy` INT, IN `au_LastUpdBy` INT, IN `au_OrganizationID` INT, IN `au_ViewID` INT, IN `au_FieldChanged` VARCHAR(200), IN `au_ChangedRowID` VARCHAR(50), IN `au_OldValue` VARCHAR(200), IN `au_NewValue` VARCHAR(200), IN `au_ActionPerformed` VARCHAR(50))
    DETERMINISTIC
BEGIN

INSERT INTO audittrail
(
    Created
    ,CreatedBy
    ,LastUpd
    ,LastUpdBy
    ,OrganizationID
    ,ViewID
    ,FieldChanged
    ,ChangedRowID
    ,OldValue
    ,NewValue
    ,ActionPerformed
) VALUES (
    CURRENT_TIMESTAMP()
    ,au_CreatedBy
    ,CURRENT_TIMESTAMP()
    ,au_LastUpdBy
    ,au_OrganizationID
    ,au_ViewID
    ,au_FieldChanged
    ,au_ChangedRowID
    ,au_OldValue
    ,au_NewValue
    ,au_ActionPerformed
);



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_address
DROP PROCEDURE IF EXISTS `I_address`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_address`(IN `I_StreetAddress1` VARCHAR(200), IN `I_StreetAddress2` VARCHAR(50), IN `I_CityTown` VARCHAR(50), IN `I_Country` VARCHAR(50), IN `I_State` VARCHAR(50), IN `I_CreatedBy` INT(11), IN `I_LastUpdBy` INT(11), IN `I_Created` DATETIME, IN `I_LastUpd` DATETIME, IN `I_ZipCode` VARCHAR(50), IN `I_Barangay` VARCHAR(50))
    DETERMINISTIC
BEGIN

INSERT INTO address
(
    StreetAddress1,
    StreetAddress2,
    CityTown,
    Country,
    State,
    CreatedBy,
    LastUpdBy,
    Created,
    LastUpd,
    ZipCode,
    Barangay
)
VALUES
(
    I_StreetAddress1,
    I_StreetAddress2,
    I_CityTown,
    I_Country,
    I_State,
    I_CreatedBy,
    I_LastUpdBy,
    I_Created,
    I_LastUpd,
    I_ZipCode,
    I_Barangay
);

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_audittrail
DROP PROCEDURE IF EXISTS `I_audittrail`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_audittrail`(IN `I_Created` DATETIME, IN `I_CreatedBy` INT(10), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(10), IN `I_OrganizationID` INT(10), IN `I_ViewID` INT(10), IN `I_FieldChanged` VARCHAR(100), IN `I_ChangedRowID` INT(10), IN `I_OldValue` VARCHAR(200), IN `I_NewValue` VARCHAR(200), IN `I_ActionPerformed` VARCHAR(50)
)
    DETERMINISTIC
BEGIN
INSERT INTO audittrail
(
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    OrganizationID,
    ViewID,
    FieldChanged,
    ChangedRowID,
    OldValue,
    NewValue,
    ActionPerformed
)
VALUES
(
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_OrganizationID,
    I_ViewID,
    I_FieldChanged,
    I_ChangedRowID,
    I_OldValue,
    I_NewValue,
    I_ActionPerformed
);END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_ClientName
DROP PROCEDURE IF EXISTS `I_ClientName`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_ClientName`(IN `I_Created` DATETIME, IN `I_OrganizationID` INT(11), IN `I_LastName` VARCHAR(50), IN `I_FirstName` VARCHAR(50), IN `I_MiddleName` VARCHAR(50), IN `I_LastUpd` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpdBy` INT(11)
)
BEGIN
INSERT INTO contact
(
    Created,
    OrganizationID,
    LastName,
    FirstName,
    MiddleName,
    LastUpd,
    CreatedBy,
    LastUpdBy
)
VALUES
(
    I_Created,
    I_OrganizationID,
    I_LastName,
    I_FirstName,
    I_MiddleName,
    I_LastUpd,
    I_CreatedBy,
    I_LastUpdBy
);END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_contact
DROP PROCEDURE IF EXISTS `I_contact`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_contact`(IN `I_Status` VARCHAR(50), IN `I_Created` DATETIME, IN `I_OrganizationID` INT(11), IN `I_MainPhone` VARCHAR(50), IN `I_LastName` VARCHAR(50), IN `I_FirstName` VARCHAR(50), IN `I_MiddleName` VARCHAR(50), IN `I_MobilePhone` VARCHAR(50), IN `I_WorkPhone` VARCHAR(50), IN `I_Gender` VARCHAR(50), IN `I_JobTitle` VARCHAR(50), IN `I_EmailAddress` VARCHAR(50), IN `I_AlternatePhone` VARCHAR(50), IN `I_FaxNumber` VARCHAR(50), IN `I_LastUpd` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpdBy` INT(11), IN `I_Personaltitle` VARCHAR(50), IN `I_Type` VARCHAR(50), IN `I_Suffix` VARCHAR(50), IN `I_AddressID` INT(11), IN `I_TINNumber` VARCHAR(50))
    DETERMINISTIC
BEGIN
INSERT INTO contact
(
    Status,
    Created,
    OrganizationID,
    MainPhone,
    LastName,
    FirstName,
    MiddleName,
    MobilePhone,
    WorkPhone,
    Gender,
    JobTitle,
    EmailAddress,
    AlternatePhone,
    FaxNumber,
    LastUpd,
    CreatedBy,
    LastUpdBy,
    PersonalTitle,
    `Type`,
    Suffix,
    AddressID,
    TINNumber
)
VALUES
(
    I_Status,
    I_Created,
    I_OrganizationID,
    I_MainPhone,
    I_LastName,
    I_FirstName,
    I_MiddleName,
    I_MobilePhone,
    I_WorkPhone,
    I_Gender,
    I_JobTitle,
    I_EmailAddress,
    I_AlternatePhone,
    I_FaxNumber,
    I_LastUpd,
    I_CreatedBy,
    I_LastUpdBy,
    I_PersonalTitle,
    I_Type,
    I_Suffix,
    I_AddressID,
    I_TINNumber
);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_contactUpdate
DROP PROCEDURE IF EXISTS `I_contactUpdate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_contactUpdate`(IN `I_Status` VARCHAR(50), IN `I_MainPhone` VARCHAR(50), IN `I_LastName` VARCHAR(50), IN `I_FirstName` VARCHAR(50), IN `I_MiddleName` VARCHAR(50), IN `I_MobilePhone` VARCHAR(50), IN `I_WorkPhone` VARCHAR(50), IN `I_Gender` VARCHAR(50), IN `I_JobTitle` VARCHAR(50), IN `I_EmailAddress` VARCHAR(50), IN `I_AlternatePhone` VARCHAR(50), IN `I_FaxNumber` VARCHAR(50), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11), IN `I_Personaltitle` VARCHAR(50), IN `I_Type` VARCHAR(50), IN `I_Suffix` VARCHAR(50), IN `I_AddressID` INT(11), IN `I_TINNumber` VARCHAR(50), IN `I_RowID` INT(11))
    DETERMINISTIC
BEGIN
UPDATE contact
SET
    Status = I_Status,
    MainPhone = I_MainPhone,
    LastName = I_LastName,
    FirstName = I_FirstName,
    MiddleName = I_MiddleName,
    MobilePhone = I_MobilePhone,
    WorkPhone = I_WorkPhone,
    Gender = I_Gender,
    JobTitle = I_JobTitle,
    EmailAddress = I_EmailAddress,
    AlternatePhone = I_AlternatePhone,
    FaxNumber = I_FaxNumber,
    LastUpd = I_LastUpd,
    LastUpdBy = I_LastUpdBy,
    PersonalTitle = I_PersonalTitle,
    `Type` = I_Type,
    Suffix = I_Suffix,
    AddressID = IF(COALESCE(I_AddressID,0) = 0, NULL, I_AddressID),
    TINNumber = I_TINNumber
WHERE RowID = I_RowID;
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_listofvalue
DROP PROCEDURE IF EXISTS `I_listofvalue`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_listofvalue`(IN `I_Created` DATETIME, IN `I_CreatedBy` INT(10), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(10), IN `I_DisplayValue` VARCHAR(100), IN `I_LIC` VARCHAR(100), IN `I_Type` VARCHAR(50), IN `I_ParentLIC` VARCHAR(100), IN `I_Status` VARCHAR(50), IN `I_Description` VARCHAR(2000), IN `I_SystemAccountFlg` CHAR(10), IN `I_DisplayAccountFlg` CHAR(10), IN `I_OrderBy` INT(10))
    DETERMINISTIC
BEGIN
INSERT INTO listofval
(
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    DisplayValue,
    LIC,
    Type,
    ParentLIC,
    Active,
    Description,
    OrderBy
)
VALUES
(
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_DisplayValue,
    I_LIC,
    I_Type,
    I_ParentLIC,
    I_Status,
    I_Description,
    I_OrderBy
);



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_ListValue
DROP PROCEDURE IF EXISTS `I_ListValue`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_ListValue`(IN `I_DisplayValue` VARCHAR(50), IN `I_LIC` VARCHAR(50), IN `I_Type` VARCHAR(50), IN `I_ParentLIC` VARCHAR(50), IN `I_Active` VARCHAR(50), IN `I_Description` VARCHAR(500), IN `I_Created` DATETIME, IN `I_CreatedBy` VARCHAR(50), IN `I_LastUpd` DATETIME, IN `I_OrderBy` INT, IN `I_LastUpdBy` VARCHAR(50)
)
    DETERMINISTIC
BEGIN

INSERT INTO listofval
(
 DisplayValue,
 LIC,
 Type,
 ParentLIC,
 Active,
 Description,
 Created,
 CreatedBy,
 LastUpd,
 OrderBy,
 LastUpdBy
)
VALUES
(
 I_DisplayValue,
 I_LIC,
 I_Type,
 I_ParentLIC,
 I_Active,
 I_Description,
 I_Created,
 I_CreatedBy,
 I_LastUpd,
 I_OrderBy,
 I_LastUpdBy
);END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_Organization
DROP PROCEDURE IF EXISTS `I_Organization`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_Organization`(IN `I_Name` VARCHAR(100), IN `I_TradeName` VARCHAR(100), IN `I_PrimaryAddressID` INT(10), IN `I_PrimaryContactID` INT(10), IN `I_MainPhone` VARCHAR(50), IN `I_FaxNumber` VARCHAR(50), IN `I_EmailAddress` VARCHAR(50), IN `I_AltEmailAddress` VARCHAR(50), IN `I_AltPhone` VARCHAR(50), IN `I_URL` VARCHAR(50), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11)
, IN `I_TINNo` VARCHAR(50), IN `I_OrganizationType` VARCHAR(50), IN `I_VacationLeaveDays` DECIMAL(11,3), IN `I_SickLeaveDays` DECIMAL(11,3), IN `I_MaternityLeaveDays` DECIMAL(11,3), IN `I_OthersLeaveDays` DECIMAL(11,3), IN `I_NightDifferentialTimeFrom` TIME, IN `I_NightDifferentialTimeTo` TIME, IN `I_NightShiftTimeFrom` TIME, IN `I_NightShiftTimeTo` TIME, IN `I_PhilhealthDeductionSchedule` VARCHAR(50), IN `I_SSSDeductionSchedule` VARCHAR(50), IN `I_PagIbigDeductionSchedule` VARCHAR(50), IN `I_PayFrequencyID` INT, IN `I_WorkDaysPerYear` INT, IN `I_RDOCode` CHAR(50), IN `I_ZIPCode` CHAR(50), IN `I_WithholdingDeductionSchedule` CHAR(50))
    DETERMINISTIC
BEGIN
INSERT INTO organization
    (
    Name,
    TradeName,
    PrimaryAddressID,
    PrimaryContactID,
    MainPhone,
    FaxNumber,
    EmailAddress,
    AltEmailAddress,
    AltPhone,
    URL,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    TINNo,
    OrganizationType,
    VacationLeaveDays,
    SickLeaveDays,
    MaternityLeaveDays,
    OthersLeaveDays,
    NightDifferentialTimeFrom,
    NightDifferentialTimeTo,
    NightShiftTimeFrom,
    NightShiftTimeTo,
    PhilhealthDeductionSchedule,
    SSSDeductionSchedule,
    PagIbigDeductionSchedule,
    PayFrequencyID,
    WorkDaysPerYear,
    RDOCode,
    ZIPCode,
    WithholdingDeductionSchedule
    )
VALUES
    (
    I_Name,
    I_TradeName,
    IF(I_PrimaryAddressID=0,NULL,I_PrimaryAddressID),
    IF(I_PrimaryContactID=0,NULL,I_PrimaryContactID),
    I_MainPhone,
    I_FaxNumber,
    I_EmailAddress,
    I_AltEmailAddress,
    I_AltPhone,
    I_URL,
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_TINNo,
    I_OrganizationType,
    I_VacationLeaveDays,
    I_SickLeaveDays,
    I_MaternityLeaveDays,
    I_OthersLeaveDays,
    I_NightDifferentialTimeFrom,
    I_NightDifferentialTimeTo,
    I_NightShiftTimeFrom,
    I_NightShiftTimeTo,
    I_PhilhealthDeductionSchedule,
    I_SSSDeductionSchedule,
    I_PagIbigDeductionSchedule,
    I_PayFrequencyID,
    IF(I_WorkDaysPerYear=0, IF(DAY(LAST_DAY(ADDDATE(MAKEDATE(YEAR(CURDATE()),1), INTERVAL 1 MONTH))) <= 28, 260, 261), I_WorkDaysPerYear),
    I_RDOCode,
    I_ZIPCode,
    I_WithholdingDeductionSchedule
    );END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_OrganizationID
DROP PROCEDURE IF EXISTS `I_OrganizationID`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_OrganizationID`(IN `I_RowID` INT(10), IN `I_Name` VARCHAR(100), IN `I_PrimaryAddressID` INT(10), IN `I_PrimaryContactID` INT(10), IN `I_MainPhone` VARCHAR(50), IN `I_FaxNumber` VARCHAR(50), IN `I_EmailAddress` VARCHAR(50), IN `I_AltEmailAddress` VARCHAR(50), IN `I_AltPhone` VARCHAR(50), IN `I_URL` VARCHAR(50), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11)
, IN `I_VacationLeaveDays` DECIMAL(11,3), IN `I_SickLeaveDays` DECIMAL(11,3), IN `I_MaternityLeaveDays` DECIMAL(11,3), IN `I_PayFrequencyID` INT)
    DETERMINISTIC
BEGIN
INSERT INTO organization
    (
    RowID,
    Name,
    PrimaryAddressID,
    PrimaryContactID,
    MainPhone,
    FaxNumber,
    EmailAddress,
    AltEmailAddress,
    AltPhone,
    URL,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    VacationLeaveDays,
    SickLeaveDays,
    MaternityLeaveDays,
    PayFrequencyID
    )
VALUES
    (
    I_RowID,
    I_Name,
    I_PrimaryAddressID,
    I_PrimaryContactID,
    I_MainPhone,
    I_FaxNumber,
    I_EmailAddress,
    I_AltEmailAddress,
    I_AltPhone,
    I_URL,
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_VacationLeaveDays,
    I_SickLeaveDays,
    I_MaternityLeaveDays,
    I_PayFrequencyID
    );END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_OrganizationUpdate
DROP PROCEDURE IF EXISTS `I_OrganizationUpdate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_OrganizationUpdate`(IN `I_Name` VARCHAR(100), IN `I_TradeName` VARCHAR(100), IN `I_PrimaryAddressID` INT(10), IN `I_PrimaryContactID` INT(10), IN `I_MainPhone` VARCHAR(50), IN `I_FaxNumber` VARCHAR(50), IN `I_EmailAddress` VARCHAR(50), IN `I_AltEmailAddress` VARCHAR(50), IN `I_AltPhone` VARCHAR(50), IN `I_URL` VARCHAR(50), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11)
, IN `I_TINNo` VARCHAR(50), IN `I_OrganizationType` VARCHAR(50), IN `I_RowID` INT(11), IN `I_VacationLeaveDays` DECIMAL(10,2), IN `I_SickLeaveDays` DECIMAL(10,2), IN `I_MaternityLeaveDays` DECIMAL(10,2), IN `I_OthersLeaveDays` DECIMAL(10,2), IN `I_NightDifferentialTimeFrom` TIME, IN `I_NightDifferentialTimeTo` TIME, IN `I_NightShiftTimeFrom` TIME, IN `I_NightShiftTimeTo` TIME, IN `I_PhilhealthDeductionSchedule` VARCHAR(50), IN `I_SSSDeductionSchedule` VARCHAR(50), IN `I_PagIbigDeductionSchedule` VARCHAR(50), IN `I_PayFrequencyID` INT, IN `I_WorkDaysPerYear` INT, IN `I_RDOCode` CHAR(50), IN `I_ZIPCode` CHAR(50), IN `I_WithholdingDeductionSchedule` CHAR(50))
    DETERMINISTIC
BEGIN

DECLARE prev_org_image MEDIUMBLOB;

SELECT Image FROM organization WHERE RowID=I_RowID INTO prev_org_image;

UPDATE organization
SET
    Name = I_Name,
    TradeName = I_TradeName,
    PrimaryAddressID = IF(I_PrimaryAddressID=0,NULL,I_PrimaryAddressID),
    PrimaryContactID = IF(I_PrimaryContactID=0,NULL,I_PrimaryContactID),
    MainPhone = I_MainPhone,
    FaxNumber = I_FaxNumber,
    EmailAddress = I_EmailAddress,
    AltEmailAddress = I_AltEmailAddress,
    AltPhone = I_AltPhone,
    URL = I_URL,
    LastUpd = I_LastUpd,
    LastUpdBy = I_LastUpdBy,
    TINNo = I_TINNo,
    OrganizationType = I_OrganizationType,
    VacationLeaveDays = I_VacationLeaveDays,
    SickLeaveDays = I_SickLeaveDays,
    MaternityLeaveDays = I_MaternityLeaveDays,
    OthersLeaveDays = I_OthersLeaveDays,
    NightDifferentialTimeFrom = I_NightDifferentialTimeFrom,
    NightDifferentialTimeTo = I_NightDifferentialTimeTo,
    NightShiftTimeFrom = I_NightShiftTimeFrom,
    NightShiftTimeTo = I_NightShiftTimeTo,
    PhilhealthDeductionSchedule = I_PhilhealthDeductionSchedule,
    SSSDeductionSchedule = I_SSSDeductionSchedule,
    PagIbigDeductionSchedule = I_PagIbigDeductionSchedule,
    PayFrequencyID = I_PayFrequencyID,
    Image = prev_org_image,
    WorkDaysPerYear = IF(I_WorkDaysPerYear=0, IF(DAY(LAST_DAY(ADDDATE(MAKEDATE(YEAR(CURDATE()),1), INTERVAL 1 MONTH))) <= 28, 260, 261), I_WorkDaysPerYear),
    RDOCode=I_RDOCode,
    ZIPCode=I_ZIPCode,
    WithholdingDeductionSchedule=I_WithholdingDeductionSchedule
WHERE RowID = I_RowID;END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_OrgWithImage
DROP PROCEDURE IF EXISTS `I_OrgWithImage`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_OrgWithImage`(IN `I_Name` VARCHAR(100), IN `I_TradeName` VARCHAR(100), IN `I_PrimaryAddressID` INT(10), IN `I_PrimaryContactID` INT(10), IN `I_MainPhone` VARCHAR(50), IN `I_FaxNumber` VARCHAR(50), IN `I_EmailAddress` VARCHAR(50), IN `I_AltEmailAddress` VARCHAR(50), IN `I_AltPhone` VARCHAR(50), IN `I_URL` VARCHAR(50), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11)
, IN `I_TINNo` VARCHAR(50), IN `I_OrganizationType` VARCHAR(50), IN `I_Image` LONGBLOB, IN `I_VacationLeaveDays` DECIMAL(11,3), IN `I_SickLeaveDays` DECIMAL(11,3), IN `I_MaternityLeaveDays` DECIMAL(11,3), IN `I_OthersLeaveDays` DECIMAL(11,3), IN `I_NightDifferentialTimeFrom` TIME, IN `I_NightDifferentialTimeTo` TIME, IN `I_NightShiftTimeFrom` TIME, IN `I_NightShiftTimeTo` TIME, IN `I_PhilhealthDeductionSchedule` VARCHAR(50), IN `I_SSSDeductionSchedule` VARCHAR(50), IN `I_PagIbigDeductionSchedule` VARCHAR(50), IN `I_PayFrequencyID` INT, IN `I_WorkDaysPerYear` INT, IN `I_RDOCode` CHAR(50), IN `I_ZIPCode` CHAR(50), IN `I_WithholdingDeductionSchedule` CHAR(50))
    DETERMINISTIC
BEGIN
INSERT INTO organization
    (
    Name,
    TradeName,
    PrimaryAddressID,
    PrimaryContactID,
    MainPhone,
    FaxNumber,
    EmailAddress,
    AltEmailAddress,
    AltPhone,
    URL,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    TINNo,
    OrganizationType,
    VacationLeaveDays,
    SickLeaveDays,
    MaternityLeaveDays,
    OthersLeaveDays,
    NightDifferentialTimeFrom,
    NightDifferentialTimeTo,
    NightShiftTimeFrom,
    NightShiftTimeTo,
    PhilhealthDeductionSchedule,
    SSSDeductionSchedule,
    PagIbigDeductionSchedule,
    PayFrequencyID,
    Image,
    WorkDaysPerYear,
    RDOCode,
    ZIPCode,
    WithholdingDeductionSchedule
    )
VALUES
    (
    I_Name,
    I_TradeName,
    IF(I_PrimaryAddressID=0,NULL,I_PrimaryAddressID),
    IF(I_PrimaryContactID=0,NULL,I_PrimaryContactID),
    I_MainPhone,
    I_FaxNumber,
    I_EmailAddress,
    I_AltEmailAddress,
    I_AltPhone,
    I_URL,
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_TINNo,
    I_OrganizationType,
    I_VacationLeaveDays,
    I_SickLeaveDays,
    I_MaternityLeaveDays,
    I_OthersLeaveDays,
    I_NightDifferentialTimeFrom,
    I_NightDifferentialTimeTo,
    I_NightShiftTimeFrom,
    I_NightShiftTimeTo,
    I_PhilhealthDeductionSchedule,
    I_SSSDeductionSchedule,
    I_PagIbigDeductionSchedule,
    I_PayFrequencyID,
    I_Image,
    IF(I_WorkDaysPerYear=0, IF(DAY(LAST_DAY(ADDDATE(MAKEDATE(YEAR(CURDATE()),1), INTERVAL 1 MONTH))) <= 28, 260, 261), I_WorkDaysPerYear),
    I_RDOCode,
    I_ZIPCode,
    I_WithholdingDeductionSchedule
    ); END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_OrgWithImageUpdate
DROP PROCEDURE IF EXISTS `I_OrgWithImageUpdate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_OrgWithImageUpdate`(IN `I_Name` VARCHAR(100), IN `I_TradeName` VARCHAR(100), IN `I_PrimaryAddressID` INT(10), IN `I_PrimaryContactID` INT(10), IN `I_MainPhone` VARCHAR(50), IN `I_FaxNumber` VARCHAR(50), IN `I_EmailAddress` VARCHAR(50), IN `I_AltEmailAddress` VARCHAR(50), IN `I_AltPhone` VARCHAR(50), IN `I_URL` VARCHAR(50), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11)
, IN `I_TINNo` VARCHAR(50), IN `I_OrganizationType` VARCHAR(50), IN `I_Image` LONGBLOB, IN `I_RowID` INT(11), IN `I_VacationLeaveDays` DECIMAL(10,2), IN `I_SickLeaveDays` DECIMAL(10,2), IN `I_MaternityLeaveDays` DECIMAL(10,2), IN `I_OthersLeaveDays` DECIMAL(10,2), IN `I_NightDifferentialTimeFrom` TIME, IN `I_NightDifferentialTimeTo` TIME, IN `I_NightShiftTimeFrom` TIME, IN `I_NightShiftTimeTo` TIME, IN `I_PhilhealthDeductionSchedule` VARCHAR(50), IN `I_SSSDeductionSchedule` VARCHAR(50), IN `I_PagIbigDeductionSchedule` VARCHAR(50), IN `I_PayFrequencyID` INT, IN `I_WorkDaysPerYear` INT, IN `I_RDOCode` CHAR(50), IN `I_ZIPCode` CHAR(50), IN `I_WithholdingDeductionSchedule` CHAR(50))
    DETERMINISTIC
BEGIN
UPDATE organization
SET
    Name = I_Name,
    TradeName = I_TradeName,
    PrimaryAddressID = IF(I_PrimaryAddressID=0,NULL,I_PrimaryAddressID),
    PrimaryContactID = IF(I_PrimaryContactID=0,NULL,I_PrimaryContactID),
    MainPhone = I_MainPhone,
    FaxNumber = I_FaxNumber,
    EmailAddress = I_EmailAddress,
    AltEmailAddress = I_AltEmailAddress,
    AltPhone = I_AltPhone,
    URL = I_URL,
    LastUpd = I_LastUpd,
    LastUpdBy = I_LastUpdBy,
    TINNo = I_TINNo,
    OrganizationType = I_OrganizationType,
    Image = I_Image,
    VacationLeaveDays = I_VacationLeaveDays,
    SickLeaveDays = I_SickLeaveDays,
    MaternityLeaveDays = I_MaternityLeaveDays,
    OthersLeaveDays = I_OthersLeaveDays,
    NightDifferentialTimeFrom = I_NightDifferentialTimeFrom,
    NightDifferentialTimeTo = I_NightDifferentialTimeTo,
    NightShiftTimeFrom = I_NightShiftTimeFrom,
    NightShiftTimeTo = I_NightShiftTimeTo,
    PhilhealthDeductionSchedule = I_PhilhealthDeductionSchedule,
    SSSDeductionSchedule = I_SSSDeductionSchedule,
    PagIbigDeductionSchedule = I_PagIbigDeductionSchedule,
    PayFrequencyID = I_PayFrequencyID,
    WorkDaysPerYear = IF(I_WorkDaysPerYear=0, IF(DAY(LAST_DAY(ADDDATE(MAKEDATE(YEAR(CURDATE()),1), INTERVAL 1 MONTH))) <= 28, 260, 261), I_WorkDaysPerYear),
    RDOCode=I_RDOCode,
    ZIPCode=I_ZIPCode,
    WithholdingDeductionSchedule=I_WithholdingDeductionSchedule
WHERE RowID = I_RowID;END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_position
DROP PROCEDURE IF EXISTS `I_position`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_position`(IN `I_PositionName` VARCHAR(50), IN `I_LastUpd` DATETIME, IN `I_Created` DATETIME, IN `I_CreatedBy` INT(11), IN `I_OrganizationID` INT(11), IN `I_LastUpdBy` INT(11)
    )
BEGIN
    INSERT INTO position
    (
    PositionName,
    LastUpd,
    Created,
    CreatedBy,
    OrganizationID,
    LastUpdBy
    )
    VALUES
    (
    I_PositionName,
    I_LastUpd,
    I_Created,
    I_CreatedBy,
    I_OrganizationID,
    I_LastUpdBy
    );END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_PositionView
DROP PROCEDURE IF EXISTS `I_PositionView`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_PositionView`(IN `I_PositionID` INT(11), IN `I_ViewID` INT(11), IN `I_Creates` CHAR(1), IN `I_OrganizationID` INT(11), IN `I_ReadOnly` CHAR(1), IN `I_Updates` CHAR(1), IN `I_Deleting` CHAR(1), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11)
)
BEGIN
INSERT INTO position_view
    (
    PositionID,
    ViewID,
    Creates,
    OrganizationID,
    ReadOnly,
    Updates,
    Deleting,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy
    )
VALUES
    (
    I_PositionID,
    I_ViewID,
    I_Creates,
    I_OrganizationID,
    I_ReadOnly,
    I_Updates,
    I_Deleting,
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy
    );END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_ProdImport
DROP PROCEDURE IF EXISTS `I_ProdImport`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_ProdImport`(IN `I_Name` VARCHAR(200), IN `I_OrganizationID` INT(11), IN `I_PartNo` VARCHAR(200), IN `I_Created` DATETIME, IN `I_LastUpd` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpdBy` INT(11), IN `I_Category` VARCHAR(50), IN `I_Catalog` VARCHAR(50), IN `I_Status` VARCHAR(50), IN `I_UnitPrice` DECIMAL(10,2), IN `I_ReorderPoint` INT(10), IN `I_UnitOfMeasure` VARCHAR(50)
, IN `I_CategoryID` INT(11), IN `I_BrandName` VARCHAR(50))
    DETERMINISTIC
BEGIN
INSERT INTO product
    (
    Name,
    OrganizationID,
    PartNo,
    Created,
    LastUpd,
    CreatedBy,
    LastUpdBy,
    Category,
    Catalog,
    Status,
    UnitPrice,
    ReorderPoint,
    UnitOfMeasure,
    CategoryID,
    BrandName
    )
    VALUES
    (
    I_Name,
    I_OrganizationID,
    I_PartNo,
    I_Created,
    I_LastUpd,
    I_CreatedBy,
    I_LastUpdBy,
    I_Category,
    I_Catalog,
    I_Status,
    I_UnitPrice,
    I_ReorderPoint,
    I_UnitOfMeasure,
    I_CategoryID,
    I_BrandName
    );END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_ProdProc
DROP PROCEDURE IF EXISTS `I_ProdProc`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_ProdProc`(IN `I_Name` VARCHAR(200), IN `I_OrganizationID` INT(11), IN `I_Description` VARCHAR(500), IN `I_PartNo` VARCHAR(200), IN `I_Created` DATETIME, IN `I_LastUpd` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpdBy` INT(11), IN `I_Category` VARCHAR(50), IN `I_Catalog` VARCHAR(50), IN `I_Comments` VARCHAR(2000), IN `I_Status` VARCHAR(50), IN `I_UnitPrice` DECIMAL(10,2), IN `I_CostPrice` DECIMAL(10,2), IN `I_UnitOfMeasure` VARCHAR(50), IN `I_SKU` VARCHAR(50), IN `I_Image` LONGBLOB, IN `I_LeadTime` INT(10), IN `I_BarCode` VARCHAR(50), IN `I_BusinessUnitID` INT(11), IN `I_LastRcvdFromShipmentDate` DATE, IN `I_BookPageNo` VARCHAR(10), IN `I_ReOrderPoint` INT(11), IN `I_AllocateBelowSafetyFlag` CHAR(1), IN `I_Strength` VARCHAR(30), IN `I_UnitsBackordered` INT(10), IN `I_UnitsBackorderAsOf` DATETIME, IN `I_DateLastInventoryCount` DATETIME
)
    DETERMINISTIC
BEGIN
INSERT INTO product
    (
    Name,
    OrganizationID,
    Description,
    PartNo,
    Created,
    LastUpd,
    CreatedBy,
    LastUpdBy,
    Category,
    Catalog,
    Comments,
    Status,
    UnitPrice,
    CostPrice,
    UnitOfMeasure,
    SKU,
    Image,
    LeadTime,
    BarCode,
    BusinessUnitID,
    LastRcvdFromShipmentDate,
    BookPageNo,
    ReOrderPoint,
    AllocateBelowSafetyFlag,
    Strength,
    UnitsBackordered,
    UnitsBackorderAsOf,
    DateLastInventoryCount
    )
    VALUES
    (
    I_Name,
    I_OrganizationID,
    I_Description,
    I_PartNo,
    I_Created,
    I_LastUpd,
    I_CreatedBy,
    I_LastUpdBy,
    I_Category,
    I_Catalog,
    I_Comments,
    I_Status,
    I_UnitPrice,
    I_CostPrice,
    I_UnitOfMeasure,
    I_SKU,
    I_Image,
    I_LeadTime,
    I_BarCode,
    I_BusinessUnitID,
    I_LastRcvdFromShipmentDate,
    I_BookPageNo,
    I_ReOrderPoint,
    I_AllocateBelowSafetyFlag,
    I_Strength,
    I_UnitsBackordered,
    I_UnitsBackorderAsOf,
    I_DateLastInventoryCount
    );END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_Products
DROP PROCEDURE IF EXISTS `I_Products`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_Products`(IN `I_Name` VARCHAR(200), IN `I_OrganizationID` INT(11), IN `I_Description` VARCHAR(500), IN `I_PartNo` VARCHAR(200), IN `I_Created` DATETIME, IN `I_LastUpd` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpdBy` INT(11), IN `I_Category` VARCHAR(50), IN `I_Catalog` VARCHAR(50), IN `I_Comments` VARCHAR(2000), IN `I_Status` VARCHAR(50), IN `I_UnitPrice` DECIMAL(10,2), IN `I_CostPrice` DECIMAL(10,2), IN `I_UnitOfMeasure` VARCHAR(50), IN `I_SKU` VARCHAR(50), IN `I_Image` TEXT, IN `I_LeadTime` INT(10), IN `I_BarCode` VARCHAR(50), IN `I_BusinessUnitID` INT(11), IN `I_LastRcvdFromShipmentDate` DATE, IN `I_BookPageNo` VARCHAR(10), IN `I_ReOrderPoint` INT(10), IN `I_AllocateBelowSafetyFlag` CHAR(1), IN `I_Strength` VARCHAR(30), IN `I_UnitsBackordered` INT(10), IN `I_UnitsBackorderAsOf` DATETIME, IN `I_DateLastInventoryCount` DATETIME
, IN `I_SupplierID` INT(10))
    DETERMINISTIC
BEGIN
INSERT INTO product
    (
    Name,
    OrganizationID,
    Description,
    PartNo,
    Created,
    LastUpd,
    CreatedBy,
    LastUpdBy,
    Category,
    Catalog,
    Comments,
    Status,
    UnitPrice,
    CostPrice,
    UnitOfMeasure,
    SKU,
    Image,
    LeadTime,
    BarCode,
    BusinessUnitID,
    LastRcvdFromShipmentDate,
    BookPageNo,
    ReOrderPoint,
    AllocateBelowSafetyFlag,
    Strength,
    UnitsBackordered,
    UnitsBackorderAsOf,
    DateLastInventoryCount,
    SupplierID
    )
    VALUES
    (
    I_Name,
    I_OrganizationID,
    I_Description,
    I_PartNo,
    I_Created,
    I_LastUpd,
    I_CreatedBy,
    I_LastUpdBy,
    I_Category,
    I_Catalog,
    I_Comments,
    I_Status,
    I_UnitPrice,
    I_CostPrice,
    I_UnitOfMeasure,
    I_SKU,
    I_Image,
    I_LeadTime,
    I_BarCode,
    I_BusinessUnitID,
    I_LastRcvdFromShipmentDate,
    I_BookPageNo,
    I_ReOrderPoint,
    I_AllocateBelowSafetyFlag,
    I_Strength,
    I_UnitsBackordered,
    I_UnitsBackorderAsOf,
    I_DateLastInventoryCount,
    I_SupplierID
    );END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.I_Users
DROP PROCEDURE IF EXISTS `I_Users`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `I_Users`(IN `I_LastName` VARCHAR(50), IN `I_FirstName` VARCHAR(50), IN `I_MiddleName` VARCHAR(50), IN `I_UserID` VARCHAR(50), IN `I_Password` VARCHAR(50), IN `I_OrganizationID` INT(11), IN `I_PositionID` INT(11), IN `I_Created` DATETIME, IN `I_LastUpdBy` INT(11), IN `I_CreatedBy` INT(11), IN `I_LastUpd` DATETIME, IN `I_Status` VARCHAR(10)
, IN `I_EmailAddress` VARCHAR(50)
)
    DETERMINISTIC
BEGIN

INSERT INTO user
(
    LastName,
    FirstName,
    MiddleName,
    UserID,
    Password,
    OrganizationID,
    PositionID,
    Created,
    LastUpdBy,
    CreatedBy,
    LastUpd,
    `Status`,
    EmailAddress
)
VALUES
(
    I_LastName,
    I_FirstName,
    I_MiddleName,
    I_UserID,
    I_Password,
    I_OrganizationID,
    I_PositionID,
    I_Created,
    I_LastUpdBy,
    I_CreatedBy,
    I_LastUpd,
    I_Status,
    I_EmailAddress
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP();END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.LoadWithholdingTaxReports
DROP PROCEDURE IF EXISTS `LoadWithholdingTaxReports`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `LoadWithholdingTaxReports`(IN `OrganizationID` INT, IN `BatchID` INT)
    DETERMINISTIC
BEGIN

    SELECT
        w.RowID,
        w.EmployeeID,
        w.OrganizationID,
        w.`Category`,
        w.PreviousTaxableIncome,
        w.PremiumPaidOnHealth,
        w.PreviousTaxWithheld,
        w.HazardPay,
        w.DeMinimisBenefits,
        w.SalariesAndOtherCompensation,
        w.Representation,
        w.Transportation,
        w.CostOfLivingAllowance,
        w.FixedHousingAllowance,
        w.OthersAName,
        w.OthersAAmount,
        w.OthersBName,
        w.OthersBAmount,
        w.Commission,
        w.ProfitSharing,
        w.FeesInclDirectorsFee,
        w.Taxable13thMonthPay,
        w.TaxableHazardPay,
        w.TaxableOvertimePay,
        w.SupplementaryAAmount,
        w.SupplementaryBAmount
    FROM withholdingtaxreport AS w
    WHERE w.OrganizationID = OrganizationID
        AND w.BatchID = BatchID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.MACHINE_WEEKFORMAT
DROP PROCEDURE IF EXISTS `MACHINE_WEEKFORMAT`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `MACHINE_WEEKFORMAT`(IN `iFirstDayOfWeek` CHAR(1))
    DETERMINISTIC
BEGIN

SET @startdayofweek = CURDATE();

SELECT ii.WeekVariable,ii.`DayName`,ii.DayFullName
FROM (SELECT (@startdayofweek := d.DateValue) AS WeekVariable,UPPER(SUBSTRING(DAYNAME(d.DateValue),1,3)) AS `DayName`,DAYNAME(d.DateValue) AS DayFullName FROM dates d WHERE DATE_FORMAT(d.DateValue,'%w')=iFirstDayOfWeek LIMIT 1) ii
UNION
SELECT (@startdayofweek := d.DateValue) AS WeekVariable,UPPER(SUBSTRING(DAYNAME(d.DateValue),1,3)) AS `DayName`,DAYNAME(d.DateValue) AS DayFullName FROM dates d WHERE d.DateValue > @startdayofweek LIMIT 7;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.MASSUPD_employee_agency
DROP PROCEDURE IF EXISTS `MASSUPD_employee_agency`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `MASSUPD_employee_agency`(IN `OrganizID` INT, IN `AgencyRowID` INT, IN `UserRowID` INT, IN `EmployeeListRowID` VARCHAR(1000))
    DETERMINISTIC
    COMMENT 'the comment'
BEGIN

DECLARE param_str_length INT(11);

SET param_str_length = LENGTH(EmployeeListRowID);

SELECT SUBSTRING(EmployeeListRowID,2,param_str_length) INTO EmployeeListRowID;

UPDATE employee
SET AgencyID = AgencyRowID
,LastUpd=CURRENT_TIMESTAMP()
,LastUpdBy=UserRowID
WHERE OrganizationID = OrganizID
AND LOCATE(RowID,EmployeeListRowID) > 0;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.MASSUPD_NewPhilHealthDeduction
DROP PROCEDURE IF EXISTS `MASSUPD_NewPhilHealthDeduction`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `MASSUPD_NewPhilHealthDeduction`(IN `org_rowid` INT)
    DETERMINISTIC
BEGIN

DECLARE row_ids VARCHAR(255);

DECLARE year_ofeffect INT(11) DEFAULT 2018;

DECLARE phh_rate DECIMAL(11, 4) DEFAULT 0.0275;

DECLARE default_phh_contrib DECIMAL(11, 4) DEFAULT 275;

DECLARE min_phh_contrib
        ,max_phh_contrib DECIMAL(11, 4);

DECLARE effect_fromdate
        , effect_todate
		  , effect_to_date
		  , _lastdate
		  , other_date DATE;

DECLARE _rowid
        , _count
		  , _index
		  , other_count
		  , emp_rowid INT(11);

SET min_phh_contrib = default_phh_contrib;

SET max_phh_contrib = 1100;

SET @is_exists = FALSE;

SELECT
EXISTS(SELECT lv.RowID
		 FROM listofval lv
		 WHERE lv.`Type`='PhilHealth'
		 AND lv.LIC IN ('DeductionType','MaximumContribution','MinimumContribution','Rate')
       )
INTO @is_exists;

IF @is_exists THEN

	SET phh_rate = (SELECT (lv.DisplayValue * 0.01) FROM listofval lv WHERE lv.`Type`='PhilHealth' AND lv.LIC = 'Rate' LIMIT 1);

	SET min_phh_contrib = (SELECT lv.DisplayValue FROM listofval lv WHERE lv.`Type`='PhilHealth' AND lv.LIC = 'MinimumContribution' LIMIT 1);

	SET max_phh_contrib = (SELECT lv.DisplayValue FROM listofval lv WHERE lv.`Type`='PhilHealth' AND lv.LIC = 'MaximumContribution' LIMIT 1);

END IF;

SELECT pp.PayFromDate, pp.PayToDate
FROM payperiod pp
WHERE pp.OrganizationID = org_rowid
AND pp.TotalGrossSalary = 1
AND pp.`Year` = year_ofeffect
AND pp.OrdinalValue = 1
LIMIT 1
INTO effect_fromdate
     ,effect_todate;

SET _count = 0;

SELECT COUNT(esa.RowID)
,GROUP_CONCAT(esa.RowID)
FROM employeesalary esa
INNER JOIN employee e ON e.RowID=esa.EmployeeID AND e.OrganizationID=esa.OrganizationID
INNER JOIN (SELECT pp.RowID
            , pp.PayFromDate, pp.PayToDate
            , pp.TotalGrossSalary
            FROM payperiod pp
				WHERE pp.OrganizationID = org_rowid
				AND pp.`Year` = year_ofeffect
				AND pp.OrdinalValue = 1) pp ON pp.TotalGrossSalary = e.PayFrequencyID
WHERE esa.OrganizationID=org_rowid
AND pp.PayFromDate BETWEEN esa.EffectiveDateFrom AND esa.EffectiveDateTo
INTO _count
     ,row_ids
;

SET _index = 0;

WHILE _index < _count DO

	SELECT esa.RowID
	, esa.EffectiveDateTo
	, pp.PayFromDate
	, esa.EmployeeID
	FROM employeesalary esa
	INNER JOIN employee e ON e.RowID=esa.EmployeeID AND e.OrganizationID=esa.OrganizationID
	INNER JOIN (SELECT pp.RowID
	            , pp.PayFromDate, pp.PayToDate
	            , pp.TotalGrossSalary
	            FROM payperiod pp
					WHERE pp.OrganizationID = org_rowid
					AND pp.`Year` = year_ofeffect
					AND pp.OrdinalValue = 1) pp ON pp.TotalGrossSalary = e.PayFrequencyID
	WHERE # esa.OrganizationID=org_rowid
	# AND pp.PayFromDate BETWEEN esa.EffectiveDateFrom AND esa.EffectiveDateTo
	# AND DATE(pp.Created) != CURDATE()
	# AND
	FIND_IN_SET(esa.RowID, row_ids) > 0
	LIMIT _index, 1
	INTO _rowid
	     , effect_to_date
	     , _lastdate
	     , emp_rowid
	;
	
	UPDATE employeesalary esa
	SET
	esa.EffectiveDateTo = SUBDATE(_lastdate, INTERVAL 1 DAY)
	, esa.LastUpd = CURRENT_TIMESTAMP()
	, esa.LastUpdBy = IFNULL(esa.LastUpdBy, esa.CreatedBy)
	WHERE esa.RowID = _rowid
	# AND esa.EffectiveDateFrom < SUBDATE(@_lastdate, INTERVAL 1 DAY)
	;
	
	SELECT COUNT(esa.RowID)
	FROM employeesalary esa
	WHERE esa.EmployeeID = emp_rowid
	AND esa.OrganizationID = org_rowid
	AND esa.EffectiveDateFrom >= _lastdate
	INTO other_count;
	
	IF other_count = 0 THEN
	
		INSERT INTO employeesalary (EmployeeID, Created, CreatedBy, OrganizationID, FilingStatusID, PaySocialSecurityID, PayPhilhealthID, PhilHealthDeduction, HDMFAmount, TrueSalary, BasicPay, Salary, UndeclaredSalary, BasicDailyPay, BasicHourlyPay, NoofDependents, MaritalStatus, PositionID, EffectiveDateFrom, EffectiveDateTo, OverrideDiscardSSSContrib, OverrideDiscardPhilHealthContrib)
		SELECT esa.EmployeeID, CURRENT_TIMESTAMP(), esa.CreatedBy, esa.OrganizationID, esa.FilingStatusID, esa.PaySocialSecurityID, esa.PayPhilhealthID, esa.PhilHealthDeduction, esa.HDMFAmount, esa.TrueSalary, esa.BasicPay, esa.Salary, esa.UndeclaredSalary, esa.BasicDailyPay, esa.BasicHourlyPay, esa.NoofDependents, esa.MaritalStatus, esa.PositionID
		, _lastdate, ADDDATE(_lastdate, INTERVAL 10 YEAR)
		, esa.OverrideDiscardSSSContrib, esa.OverrideDiscardPhilHealthContrib
		FROM employeesalary esa
		WHERE esa.RowID = _rowid
		ON DUPLICATE KEY UPDATE
		LastUpd = CURRENT_TIMESTAMP();
		
	ELSE
	
		SELECT MIN(esa.EffectiveDateFrom)
		FROM employeesalary esa
		WHERE esa.EmployeeID = emp_rowid
		AND esa.OrganizationID = org_rowid
		AND esa.EffectiveDateFrom >= _lastdate
		INTO other_date;
		
		IF _lastdate < SUBDATE(other_date, INTERVAL 1 DAY) THEN
		# effect_to_date > other_date
			INSERT INTO employeesalary (EmployeeID, Created, CreatedBy, OrganizationID, FilingStatusID, PaySocialSecurityID, PayPhilhealthID, PhilHealthDeduction, HDMFAmount, TrueSalary, BasicPay, Salary, UndeclaredSalary, BasicDailyPay, BasicHourlyPay, NoofDependents, MaritalStatus, PositionID, EffectiveDateFrom, EffectiveDateTo, OverrideDiscardSSSContrib, OverrideDiscardPhilHealthContrib)
			SELECT esa.EmployeeID, CURRENT_TIMESTAMP(), esa.CreatedBy, esa.OrganizationID, esa.FilingStatusID, esa.PaySocialSecurityID, esa.PayPhilhealthID, esa.PhilHealthDeduction, esa.HDMFAmount, esa.TrueSalary, esa.BasicPay, esa.Salary, esa.UndeclaredSalary, esa.BasicDailyPay, esa.BasicHourlyPay, esa.NoofDependents, esa.MaritalStatus, esa.PositionID
			, _lastdate, SUBDATE(other_date, INTERVAL 1 DAY)
			, esa.OverrideDiscardSSSContrib, esa.OverrideDiscardPhilHealthContrib
			FROM employeesalary esa
			WHERE esa.RowID = _rowid
			ON DUPLICATE KEY UPDATE
			LastUpd = CURRENT_TIMESTAMP();
			
		END IF;
			
	END IF;
	
	SET _index = (_index + 1);
	
END WHILE;

UPDATE employeesalary esa
INNER JOIN (SELECT ii.RowID
            , ii.MonthlySalary
            , ROUND((ii.MonthlySalary * phh_rate), 4) `ComputedPhilHealth`
            FROM employeesalary_withdailyrate ii
            WHERE ii.OrganizationID = org_rowid
            ) i ON i.RowID = esa.RowID
SET
esa.LastUpd = CURRENT_TIMESTAMP()
,esa.LastUpdBy = IFNULL(esa.LastUpdBy, esa.CreatedBy)
,esa.PhilHealthDeduction = IFNULL(min_phh_contrib, default_phh_contrib)
WHERE i.`ComputedPhilHealth` < min_phh_contrib
AND ((effect_fromdate >= esa.EffectiveDateFrom OR effect_fromdate >= esa.EffectiveDateTo)
     OR (effect_todate >= esa.EffectiveDateFrom OR effect_todate >= esa.EffectiveDateTo))
;

UPDATE employeesalary esa
INNER JOIN (SELECT ii.RowID
            , ii.MonthlySalary
            , ROUND((ii.MonthlySalary * phh_rate), 4) `ComputedPhilHealth`
            FROM employeesalary_withdailyrate ii
            WHERE ii.OrganizationID = org_rowid
            ) i ON i.RowID = esa.RowID
SET
esa.LastUpd = CURRENT_TIMESTAMP()
,esa.LastUpdBy = IFNULL(esa.LastUpdBy, esa.CreatedBy)
,esa.PhilHealthDeduction = IFNULL(i.`ComputedPhilHealth`, default_phh_contrib)
WHERE i.`ComputedPhilHealth` BETWEEN min_phh_contrib AND max_phh_contrib
AND ((effect_fromdate >= esa.EffectiveDateFrom OR effect_fromdate >= esa.EffectiveDateTo)
     OR (effect_todate >= esa.EffectiveDateFrom OR effect_todate >= esa.EffectiveDateTo))
;

UPDATE employeesalary esa
INNER JOIN (SELECT ii.RowID
            , ii.MonthlySalary
            , ROUND((ii.MonthlySalary * phh_rate), 4) `ComputedPhilHealth`
            FROM employeesalary_withdailyrate ii
            WHERE ii.OrganizationID = org_rowid
            ) i ON i.RowID = esa.RowID
SET
esa.LastUpd = CURRENT_TIMESTAMP()
,esa.LastUpdBy = IFNULL(esa.LastUpdBy, esa.CreatedBy)
,esa.PhilHealthDeduction = IFNULL(max_phh_contrib, default_phh_contrib)
WHERE i.`ComputedPhilHealth` > max_phh_contrib
AND ((effect_fromdate >= esa.EffectiveDateFrom OR effect_fromdate >= esa.EffectiveDateTo)
     OR (effect_todate >= esa.EffectiveDateFrom OR effect_todate >= esa.EffectiveDateTo))
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.MASSUPD_paystubactual_paystubid
DROP PROCEDURE IF EXISTS `MASSUPD_paystubactual_paystubid`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `MASSUPD_paystubactual_paystubid`()
BEGIN

UPDATE paystubactual psa
INNER JOIN paystub ps
        ON ps.OrganizationID=psa.OrganizationID
		     AND ps.EmployeeID=psa.EmployeeID
			  AND ps.PayPeriodID=psa.EmployeeID
INNER JOIN employee e
        ON e.RowID=ps.EmployeeID
		     AND e.OrganizationID=ps.OrganizationID
SET psa.PayStubID = ps.RowID
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.MASS_generate_employeetimeentry
DROP PROCEDURE IF EXISTS `MASS_generate_employeetimeentry`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `MASS_generate_employeetimeentry`(IN `OrganizID` INT, IN `Pay_FrequencyType` TEXT, IN `DivisionRowID` VARCHAR(200), IN `UserRowID` INT, IN `periodDateFrom` DATE, IN `periodDateTo` DATE)
    DETERMINISTIC
BEGIN

INSERT INTO `position` (
    `PositionName`,
    `LastUpd`,
    `Created`,
    `CreatedBy`,
    `OrganizationID`,
    `LastUpdBy`,
    `ParentPositionID`,
    `DivisionId`,
    `LevelNumber`
)
SELECT
    'Default Position',
    CURRENT_TIMESTAMP(),
    CURRENT_TIMESTAMP(),
    UserRowID,
    OrganizID,
    UserRowID,
    NULL,
    d.RowID,
    3
FROM division d
WHERE d.OrganizationID = OrganizID AND
    ParentDivisionID IS NOT NULL
LIMIT 1
ON DUPLICATE KEY
UPDATE LastUpd = CURRENT_TIMESTAMP(),
    LastUpdBy = UserRowID;

UPDATE employee e
INNER JOIN `position` p
ON p.PositionName = 'Default Position' AND
    p.OrganizationID = e.OrganizationID
SET e.LastUpdBy = IFNULL(e.LastUpdBy, UserRowID),
    e.PositionID = p.RowID
WHERE e.OrganizationID = OrganizID AND
    e.PositionID IS NULL;

UPDATE employee
SET DayOfRest = NULL
WHERE OrganizationID = OrganizID AND
    DayOfRest IN ('', '0');

UPDATE employeeovertime eot
INNER JOIN payfrequency pf
ON pf.PayFrequencyType = Pay_FrequencyType
INNER JOIN `position` ps
ON ps.OrganizationID = eot.OrganizationID AND
    LOCATE(ps.DivisionId, DivisionRowID) > 0
INNER JOIN employee e
ON e.RowID = eot.EmployeeID AND
    e.OrganizationID = eot.OrganizationID AND
    e.PayFrequencyID = pf.RowID AND
    e.PositionID = ps.RowID
SET
    eot.LastUpd = ADDTIME(eot.LastUpd, '00:00:01'),
    eot.LastUpdBy = IFNULL(eot.LastUpdBy, eot.CreatedBy)
WHERE eot.OrganizationID = OrganizID
    AND (eot.OTStartDate >= periodDateFrom OR eot.OTEndDate >= periodDateFrom)
    AND (eot.OTStartDate <= periodDateTo OR eot.OTEndDate <= periodDateTo);

IF ISNULL(DivisionRowID) THEN
    SELECT GENERATE_employeetimeentry(e.RowID, OrganizID, d.DateValue, UserRowID)
    FROM dates d
    INNER JOIN payfrequency pf ON pf.PayFrequencyType=Pay_FrequencyType
    INNER JOIN employee e ON e.OrganizationID=OrganizID AND e.PayFrequencyID=pf.RowID
    WHERE d.DateValue BETWEEN periodDateFrom AND periodDateTo;
ELSE
    SELECT GENERATE_employeetimeentry(e.RowID, OrganizID, d.DateValue, UserRowID)
    FROM dates d
    INNER JOIN payfrequency pf ON pf.PayFrequencyType=Pay_FrequencyType
    INNER JOIN `position` ps ON ps.OrganizationID=OrganizID AND ps.DivisionId = DivisionRowID
    INNER JOIN employee e ON e.OrganizationID=OrganizID AND e.PayFrequencyID=pf.RowID AND e.PositionID=ps.RowID
    WHERE d.DateValue BETWEEN periodDateFrom AND periodDateTo;
END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.mydetails
DROP PROCEDURE IF EXISTS `mydetails`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `mydetails`()
    DETERMINISTIC
BEGIN

DECLARE i INT(11) DEFAULT 0;

DECLARE max_limit INT(11) DEFAULT 50;

DECLARE page_num INT(11) DEFAULT 50;

DECLARE max_val INT(11) DEFAULT 0;

SELECT (COUNT(e.RowID) / max_limit) + 1 FROM employee e WHERE e.OrganizationID=3 INTO max_val;

WHILE i < max_val DO

    SET page_num = i * max_limit;



    SELECT
    e.RowID
    ,e.EmployeeID,e.MaritalStatus
    ,e.NoOfDependents
    ,e.PayFrequencyID
    ,e.EmployeeType
    ,e.EmploymentStatus
    ,e.WorkDaysPerYear
    ,e.PositionID
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.PhHealthDeductSchedAgency,d.PhHealthDeductSched), d.PhHealthDeductSched) AS PhHealthDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.HDMFDeductSchedAgency,d.HDMFDeductSched), d.HDMFDeductSched) AS HDMFDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.SSSDeductSchedAgency,d.SSSDeductSched), d.SSSDeductSched) AS SSSDeductSched
    ,IF(e.AgencyID IS NOT NULL, IFNULL(d.WTaxDeductSchedAgency,d.WTaxDeductSched), d.WTaxDeductSched) AS WTaxDeductSched
    ,PAYFREQUENCY_DIVISOR(pf.PayFrequencyType) 'PAYFREQUENCY_DIVISOR'
    ,IFNULL(dmw.Amount,d.MinimumWageAmount) AS MinimumWageAmount
    ,(e.StartDate BETWEEN '2016-10-21' AND '2016-11-05') AS IsFirstTimeSalary

    FROM employee e
    LEFT JOIN employeesalary esal ON e.RowID=esal.EmployeeID
    LEFT JOIN `position` p ON p.RowID=e.PositionID
    LEFT JOIN `division` d ON d.RowID=p.DivisionId
    LEFT JOIN agency ag ON ag.RowID=e.AgencyID
    INNER JOIN payfrequency pf ON pf.RowID=e.PayFrequencyID
    LEFT JOIN divisionminimumwage dmw ON dmw.OrganizationID=e.OrganizationID AND dmw.DivisionID=d.RowID AND '2016-11-05' BETWEEN dmw.EffectiveDateFrom AND dmw.EffectiveDateTo
    WHERE e.OrganizationID=3 AND '2016-11-05' BETWEEN esal.EffectiveDateFrom AND COALESCE(esal.EffectiveDateTo,'2016-11-05')
    GROUP BY e.RowID
    ORDER BY e.RowID DESC
    LIMIT page_num, max_limit;

    SET i = i + 1;

END WHILE;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.mysqlmsgbox
DROP PROCEDURE IF EXISTS `mysqlmsgbox`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `mysqlmsgbox`(IN `PromptText` VARCHAR(500))
    DETERMINISTIC
BEGIN

DECLARE specialty CONDITION FOR SQLSTATE '45000';

SIGNAL specialty SET MESSAGE_TEXT = PromptText;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.PAYROLLSUMMARY
DROP PROCEDURE IF EXISTS `PAYROLLSUMMARY`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `PAYROLLSUMMARY`(
	IN `ps_OrganizationID` INT,
	IN `ps_PayPeriodID1` INT,
	IN `ps_PayPeriodID2` INT,
	IN `psi_undeclared` CHAR(1),
	IN `strSalaryDistrib` VARCHAR(50)
)
BEGIN

DECLARE paypdatefrom DATE;
DECLARE paypdateto DATE;
DECLARE payfreq_rowid INT(11);


SELECT
    PayFromDate,
    TotalGrossSalary
FROM payperiod
WHERE RowID = ps_PayPeriodID1
INTO
    paypdatefrom,
    payfreq_rowid;

SELECT PayToDate
FROM payperiod
WHERE RowID = IFNULL(ps_PayPeriodID2, ps_PayPeriodID1)
INTO paypdateto;

SELECT
    e.RowID 'EmployeeRowID',
    e.EmployeeID `DatCol2`,
    IF(psi_undeclared, paystubactual.RegularPay, paystub.RegularPay) `DatCol21`,
    IF(psi_undeclared, paystubactual.OvertimePay, paystub.OvertimePay) 'DatCol37',
    IF(psi_undeclared, paystubactual.NightDiffPay, paystub.NightDiffPay) 'DatCol35',
    IF(psi_undeclared, paystubactual.NightDiffOvertimePay, paystub.NightDiffOvertimePay) 'DatCol38',
    IF(psi_undeclared, paystubactual.HolidayPay, paystub.HolidayPay) 'DatCol36',
    IF(psi_undeclared, paystubactual.LateDeduction, paystub.LateDeduction) 'DatCol33',
    IF(psi_undeclared, paystubactual.UndertimeDeduction, paystub.UndertimeDeduction) 'DatCol34',
    IF(psi_undeclared, paystubactual.AbsenceDeduction, paystub.AbsenceDeduction) 'DatCol32',
    paystub.TotalBonus `DatCol30`,
    paystub.TotalAllowance `DatCol31`,
    IF(psi_undeclared, paystubactual.TotalGrossSalary, paystub.TotalGrossSalary) `DatCol22`,
    IF(
        psi_undeclared,
        paystubactual.TotalNetSalary + IFNULL(agf.DailyFee, 0),
        paystub.TotalNetSalary + IFNULL(agf.DailyFee, 0)
    ) `DatCol23`,
    paystub.TotalTaxableSalary `DatCol24`,
    paystub.TotalEmpSSS `DatCol25`,
    paystub.TotalEmpPhilhealth `DatCol27`,
    paystub.TotalEmpHDMF `DatCol28`,
    paystub.TotalEmpWithholdingTax `DatCol26`,
    paystub.TotalLoans `DatCol29`,
    CONCAT_WS(', ', e.LastName, e.FirstName, INITIALS(e.MiddleName,'. ','1')) `DatCol3`,
    UCASE(e.FirstName) 'FirstName',
    INITIALS(e.MiddleName,'. ','1') 'MiddleName',
    UCASE(e.LastName) 'LastName',
    UCASE(e.Surname) 'Surname',
    UCASE(p.PositionName) 'PositionName',
    UCASE(d.Name) `DatCol1`,
    IFNULL(agf.DailyFee,0) `DatCol39`,
    IFNULL(thirteenthmonthpay.Amount,0) `DatCol40`,
    CONCAT_WS(
        ' to ',
        DATE_FORMAT(paystub.PayFromDate, IF(YEAR(paystub.PayFromDate) = YEAR(paystub.PayToDate), '%c/%e', '%c/%e/%Y')),
        DATE_FORMAT(paystub.PayToDate,'%c/%e/%Y')
    ) `DatCol20`,
    paystub.RegularHours `DatCol41`,
    (IF(psi_undeclared, paystubactual.TotalNetSalary, paystub.TotalNetSalary) + IFNULL(thirteenthmonthpay.Amount,0) + IFNULL(agf.DailyFee, 0)) `DatCol42`,
    IF(
        psi_undeclared,
        GetActualDailyRate(e.RowID, e.OrganizationID, paystub.PayFromDate),
        GET_employeerateperday(e.RowID, e.OrganizationID, paystub.PayFromDate)
    ) `DatCol43`,
    paystub.OvertimeHours `DatCol44`
FROM paystub
LEFT JOIN paystubactual
ON paystubactual.EmployeeID = paystub.EmployeeID AND
    paystubactual.PayPeriodID = paystub.PayPeriodID
LEFT JOIN employee e
ON e.RowID = paystub.EmployeeID
LEFT JOIN `position` p
ON p.RowID = e.PositionID
LEFT JOIN division d
ON d.RowID = p.DivisionId
LEFT JOIN (
    SELECT
        RowID,
        EmployeeID,
        SUM(DailyFee) AS DailyFee
    FROM agencyfee
    WHERE OrganizationID=ps_OrganizationID AND
        DailyFee > 0 AND
        TimeEntryDate BETWEEN paypdatefrom AND paypdateto
    GROUP BY EmployeeID
) agf
ON IFNULL(agf.RowID, 1) > 0 AND
    agf.EmployeeID=paystub.EmployeeID
LEFT JOIN thirteenthmonthpay
ON thirteenthmonthpay.OrganizationID = paystub.OrganizationID AND
    thirteenthmonthpay.PaystubID = IF(psi_undeclared, paystubactual.RowID, paystub.RowID)
WHERE paystub.OrganizationID = ps_OrganizationID AND
    (paystub.PayFromDate >= paypdatefrom OR paystub.PayToDate >= paypdatefrom) AND
    (paystub.PayFromDate <= paypdateto OR paystub.PayToDate <= paypdateto) AND
    LENGTH(IFNULL(e.ATMNo, '')) = IF(strSalaryDistrib = 'Cash', 0, LENGTH(IFNULL(e.ATMNo, ''))) AND
    -- If employee is paid monthly or daily, employee should have worked for the pay period to appear
    IF(e.EmployeeType IN ('Monthly', 'Daily'), paystub.RegularHours > 0, TRUE)
ORDER BY d.Name, e.LastName;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.PAYROLLSUMMARY2
DROP PROCEDURE IF EXISTS `PAYROLLSUMMARY2`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `PAYROLLSUMMARY2`(
	IN `ps_OrganizationID` INT,
	IN `ps_PayPeriodID1` INT,
	IN `ps_PayPeriodID2` INT,
	IN `psi_undeclared` CHAR(1),
	IN `strSalaryDistrib` VARCHAR(50)
,
	IN `is_keep_in_onesheet` BOOL

)
BEGIN

DECLARE paypdatefrom
        ,paypdateto
		  ,min_paydatefrom
		  ,max_paydateto DATE;

DECLARE sec_per_hour INT(11) DEFAULT 3600;

DECLARE payfreq_rowid
        , div_count
        , div_index
        , div_rowid INT(11) DEFAULT 0;

DECLARE decimal_size INT(11) DEFAULT 2;

DECLARE customDateFormat VARCHAR(50) DEFAULT '%m/%d/%Y';

DECLARE isNullSalaryDistribType BOOL DEFAULT FALSE;

SET isNullSalaryDistribType = strSalaryDistrib IS NULL;

SELECT
    PayFromDate,
    TotalGrossSalary
FROM payperiod
WHERE RowID = ps_PayPeriodID1
INTO
    paypdatefrom,
    payfreq_rowid;

SELECT PayToDate
FROM payperiod
WHERE RowID = IFNULL(ps_PayPeriodID2, ps_PayPeriodID1)
INTO paypdateto;

SELECT MIN(pp.PayFromDate)
, MAX(ppd.PayToDate)
FROM payperiod pp
INNER JOIN payperiod ppd ON ppd.RowID = ps_PayPeriodID2
WHERE pp.RowID = ps_PayPeriodID1
INTO min_paydatefrom
     ,max_paydateto;

IF is_keep_in_onesheet = TRUE THEN

		SELECT
		    e.RowID 'EmployeeRowID',
		    e.EmployeeID `DatCol2`,
			ROUND(IF(
				psi_undeclared,
				GetActualDailyRate(e.RowID, e.OrganizationID, paystub.PayFromDate),
				GET_employeerateperday(e.RowID, e.OrganizationID, paystub.PayFromDate)
			), decimal_size) `Rate`,
		    ROUND(GetBasicPay(e.RowID, paystub.PayFromDate, paystub.PayToDate, psi_undeclared, IFNULL(ete.`TotalExpectedHours`, 0)), decimal_size) `BasicPay`,
			ROUND(paystub.RegularHours, decimal_size) `RegularHours`,
		    ROUND(IF(psi_undeclared, paystubactual.RegularPay, paystub.RegularPay), decimal_size) `RegularPay`,
			ROUND(paystub.OvertimeHours, decimal_size) `OvertimeHours`,
		    ROUND(IF(psi_undeclared, paystubactual.OvertimePay, paystub.OvertimePay), decimal_size) 'OvertimePay',
			paystub.NightDiffHours `NightDiffHours`,
		    ROUND(IF(psi_undeclared, paystubactual.NightDiffPay, paystub.NightDiffPay), decimal_size) 'NightDiffPay',
			paystub.NightDiffOvertimeHours `NightDiffOvertimeHours`,
		    ROUND(IF(psi_undeclared, paystubactual.NightDiffOvertimePay, paystub.NightDiffOvertimePay), decimal_size) 'NightDiffOvertimePay',
			paystub.SpecialHolidayHours `SpecialHolidayHours`,
			ROUND(IF(psi_undeclared, paystubactual.SpecialHolidayPay, paystub.SpecialHolidayPay), decimal_size) `SpecialHolidayPay`,
			paystub.SpecialHolidayOTHours `SpecialHolidayOTHours`,
			ROUND(IF(psi_undeclared, paystubactual.SpecialHolidayOTPay, paystub.SpecialHolidayOTPay), decimal_size) `SpecialHolidayOTPay`,
			paystub.RegularHolidayHours `RegularHolidayHours`,
			ROUND(IF(psi_undeclared, paystubactual.RegularHolidayPay, paystub.RegularHolidayPay), decimal_size) `RegularHolidayPay`,
			paystub.RegularHolidayOTHours `RegularHolidayOTHours`,
			ROUND(IF(psi_undeclared, paystubactual.RegularHolidayOTPay, paystub.RegularHolidayOTPay), decimal_size) `RegularHolidayOTPay`,
			ROUND(IF(psi_undeclared, paystubactual.HolidayPay, paystub.HolidayPay), decimal_size) 'HolidayPay',
			paystub.RestDayHours `RestDayHours`,
			ROUND(IF(psi_undeclared, paystubactual.RestDayPay, paystub.RestDayPay), decimal_size) `RestDayPay`,
			paystub.RestDayOTHours `RestDayOTHours`,
			ROUND(IF(psi_undeclared, paystubactual.RestDayOTPay, paystub.RestDayOTPay), decimal_size) `RestDayOTPay`,
			paystub.LeaveHours `LeaveHours`,
			IF(
				e.EmployeeType = 'Daily',
				ROUND(IF(psi_undeclared, paystubactual.LeavePay, paystub.LeavePay), decimal_size),
				0
			) 'LeavePay',
			-paystub.LateHours `LateHours`,
		    ROUND(IF(psi_undeclared, -paystubactual.LateDeduction, -paystub.LateDeduction), decimal_size) 'LateDeduction',
		 	-paystub.UndertimeHours `UndertimeHours`,
		    ROUND(IF(psi_undeclared, -paystubactual.UndertimeDeduction, -paystub.UndertimeDeduction), decimal_size) 'UndertimeDeduction',
			-paystub.AbsentHours `AbsentHours`,
		    ROUND(IF(psi_undeclared, -paystubactual.AbsenceDeduction, -paystub.AbsenceDeduction), decimal_size) 'AbsentDeduction',
			paystub.TotalAllowance `TotalAllowance`,
		    ROUND(paystub.TotalBonus, decimal_size) `TotalBonus`,
		    ROUND(IF(psi_undeclared, paystubactual.TotalGrossSalary, paystub.TotalGrossSalary), decimal_size) `GrossIncome`,
			ROUND(-paystub.TotalEmpSSS, decimal_size) `SSS`,
		    ROUND(-paystub.TotalEmpPhilhealth, decimal_size) `PhilHealth`,
		    ROUND(-paystub.TotalEmpHDMF, decimal_size) `HDMF`,
			ROUND(paystub.TotalTaxableSalary, decimal_size) `TaxableIncome`,
		    ROUND(-paystub.TotalEmpWithholdingTax, decimal_size) `WithholdingTax`,
			ROUND(-paystub.TotalLoans, decimal_size) `TotalLoans`,
			ROUND(IFNULL(agf.DailyFee, 0), decimal_size) `AgencyFee`,
			ROUND(IF(psi_undeclared, paystubactual.TotalAdjustments, paystub.TotalAdjustments), decimal_size) `TotalAdjustments`,
		    ROUND(IF(
				psi_undeclared,
				paystubactual.TotalNetSalary + IFNULL(agf.DailyFee, 0),
				paystub.TotalNetSalary + IFNULL(agf.DailyFee, 0)
			), decimal_size) `NetPay`,
			ROUND(IFNULL(thirteenthmonthpay.Amount, 0), decimal_size) `13thMonthPay`,
			ROUND((IF(psi_undeclared, paystubactual.TotalNetSalary, paystub.TotalNetSalary) + IFNULL(thirteenthmonthpay.Amount,0) + IFNULL(agf.DailyFee, 0)), decimal_size) `Total`,
		    UCASE(CONCAT_WS(', ', e.LastName, e.FirstName, INITIALS(e.MiddleName, '. ', '1'))) `DatCol3`,
		    UCASE(e.FirstName) 'FirstName',
		    INITIALS(e.MiddleName,'. ','1') 'MiddleName',
		    UCASE(e.LastName) 'LastName',
		    UCASE(e.Surname) 'Surname',
		    UCASE(p.PositionName) 'PositionName',
		    '' `DatCol1`,
		    CONCAT_WS(
		        ' to ',
		        DATE_FORMAT(paystub.PayFromDate, IF(YEAR(paystub.PayFromDate) = YEAR(paystub.PayToDate), '%c/%e', '%c/%e/%Y')),
		        DATE_FORMAT(paystub.PayToDate,'%c/%e/%Y')
		    ) `DatCol20`
		
		, DATE_FORMAT(paystub.PayFromDate, customDateFormat) `From`
		, DATE_FORMAT(paystub.PayToDate, customDateFormat) `To`
		FROM paystub
		LEFT JOIN paystubactual
		ON paystubactual.EmployeeID = paystub.EmployeeID AND
		    paystubactual.PayPeriodID = paystub.PayPeriodID AND
		    paystubactual.OrganizationID = paystub.OrganizationID
		INNER JOIN employee e
		        ON e.RowID = paystub.EmployeeID
		INNER JOIN `position` p
		        ON p.RowID = e.PositionID
		INNER JOIN division d
		        ON d.RowID = p.DivisionId
		LEFT JOIN (
		    SELECT
		        RowID,
		        EmployeeID,
		        SUM(DailyFee) AS DailyFee
		    FROM agencyfee
		    WHERE OrganizationID=ps_OrganizationID AND
		        DailyFee > 0 AND
		        TimeEntryDate BETWEEN paypdatefrom AND paypdateto
		    GROUP BY EmployeeID
		) agf
		ON IFNULL(agf.RowID, 1) > 0 AND
		    agf.EmployeeID=paystub.EmployeeID
		LEFT JOIN thirteenthmonthpay
		ON thirteenthmonthpay.OrganizationID = paystub.OrganizationID AND
		    thirteenthmonthpay.PaystubID = IF(psi_undeclared, paystubactual.RowID, paystub.RowID)

		LEFT JOIN (SELECT et.EmployeeID
		           ,SUM(et.TotalExpectedHours) `TotalExpectedHours`
		           FROM expectedhours et
					  WHERE et.OrganizationID = ps_OrganizationID
					  AND et.`Date` BETWEEN min_paydatefrom AND max_paydateto
					  GROUP BY et.EmployeeID) ete
		       ON ete.EmployeeID = paystub.EmployeeID

		WHERE paystub.OrganizationID = ps_OrganizationID AND
		    (paystub.PayFromDate >= paypdatefrom OR paystub.PayToDate >= paypdatefrom) AND
		    (paystub.PayFromDate <= paypdateto OR paystub.PayToDate <= paypdateto) AND
		    # LENGTH(IFNULL(TRIM(e.ATMNo), '')) = IF(strSalaryDistrib = 'Cash', 0, LENGTH(IFNULL(TRIM(e.ATMNo), ''))) AND
		    IF(isNullSalaryDistribType
			    , TRUE
				 , IF(strSalaryDistrib = 'Cash'
				 		, (LENGTH(IFNULL(TRIM(e.ATMNo), '')) = 0)
						, (LENGTH(IFNULL(TRIM(e.ATMNo), '')) > 0))) = TRUE AND
			 -- If employee is paid monthly or daily, employee should have worked for the pay period to appear
		    IF(e.EmployeeType IN ('Monthly', 'Daily'), paystub.WorkPay > 0, TRUE) # RegularHours
		ORDER BY CONCAT(e.LastName, e.FirstName), paystub.PayFromDate, paystub.PayToDate;

ELSE

	SELECT COUNT(i.RowID)
	FROM (SELECT dv.RowID
			FROM employee e
			INNER JOIN `position` pos ON pos.RowID=e.PositionID
			INNER JOIN division dv ON dv.RowID=pos.DivisionId
			WHERE e.OrganizationID = ps_OrganizationID
			GROUP BY dv.RowID) i
	INTO div_count;

	SET div_index = 0;

	WHILE div_index < div_count DO

		SELECT i.`RowID`
		FROM (SELECT dv.RowID
				FROM employee e
				INNER JOIN `position` pos ON pos.RowID=e.PositionID
				INNER JOIN division dv ON dv.RowID=pos.DivisionId
				WHERE e.OrganizationID = ps_OrganizationID
				GROUP BY dv.RowID
				ORDER BY dv.Name) i
		LIMIT div_index, 1
		INTO div_rowid;

		# SELECT div_rowid;

		SELECT
		    e.RowID 'EmployeeRowID',
			d.Name `DatCol1`,
		    e.EmployeeID `DatCol2`,
			ROUND(IF(
				psi_undeclared,
				GetActualDailyRate(e.RowID, e.OrganizationID, paystub.PayFromDate),
				GET_employeerateperday(e.RowID, e.OrganizationID, paystub.PayFromDate)
			), decimal_size) `Rate`,
		    ROUND(GetBasicPay(e.RowID, paystub.PayFromDate, paystub.PayToDate, psi_undeclared, IFNULL(ete.`TotalExpectedHours`, 0)), decimal_size) `BasicPay`,
			ROUND(paystub.RegularHours, decimal_size) `RegularHours`,
		    ROUND(IF(psi_undeclared, paystubactual.RegularPay, paystub.RegularPay), decimal_size) `RegularPay`,
			ROUND(paystub.OvertimeHours, decimal_size) `OvertimeHours`,
		    ROUND(IF(psi_undeclared, paystubactual.OvertimePay, paystub.OvertimePay), decimal_size) 'OvertimePay',
			paystub.NightDiffHours `NightDiffHours`,
		    ROUND(IF(psi_undeclared, paystubactual.NightDiffPay, paystub.NightDiffPay), decimal_size) 'NightDiffPay',
			paystub.NightDiffOvertimeHours `NightDiffOvertimeHours`,
		    ROUND(IF(psi_undeclared, paystubactual.NightDiffOvertimePay, paystub.NightDiffOvertimePay), decimal_size) 'NightDiffOvertimePay',
			paystub.SpecialHolidayHours `SpecialHolidayHours`,
			ROUND(IF(psi_undeclared, paystubactual.SpecialHolidayPay, paystub.SpecialHolidayPay), decimal_size) `SpecialHolidayPay`,
			paystub.SpecialHolidayOTHours `SpecialHolidayOTHours`,
			ROUND(IF(psi_undeclared, paystubactual.SpecialHolidayOTPay, paystub.SpecialHolidayOTPay), decimal_size) `SpecialHolidayOTPay`,
			paystub.RegularHolidayHours `RegularHolidayHours`,
			ROUND(IF(psi_undeclared, paystubactual.RegularHolidayPay, paystub.RegularHolidayPay), decimal_size) `RegularHolidayPay`,
			paystub.RegularHolidayOTHours `RegularHolidayOTHours`,
			ROUND(IF(psi_undeclared, paystubactual.RegularHolidayOTPay, paystub.RegularHolidayOTPay), decimal_size) `RegularHolidayOTPay`,
			ROUND(IF(psi_undeclared, paystubactual.HolidayPay, paystub.HolidayPay), decimal_size) 'HolidayPay',
			paystub.RestDayHours `RestDayHours`,
			ROUND(IF(psi_undeclared, paystubactual.RestDayPay, paystub.RestDayPay), decimal_size) `RestDayPay`,
			paystub.RestDayOTHours `RestDayOTHours`,
			ROUND(IF(psi_undeclared, paystubactual.RestDayOTPay, paystub.RestDayOTPay), decimal_size) `RestDayOTPay`,
			paystub.LeaveHours `LeaveHours`,
			IF(
				e.EmployeeType = 'Daily',
				ROUND(IF(psi_undeclared, paystubactual.LeavePay, paystub.LeavePay), decimal_size),
				0
			) 'LeavePay',
			-paystub.LateHours `LateHours`,
		    ROUND(IF(psi_undeclared, -paystubactual.LateDeduction, -paystub.LateDeduction), decimal_size) 'LateDeduction',
		 	-paystub.UndertimeHours `UndertimeHours`,
		    ROUND(IF(psi_undeclared, -paystubactual.UndertimeDeduction, -paystub.UndertimeDeduction), decimal_size) 'UndertimeDeduction',
			-paystub.AbsentHours `AbsentHours`,
		    ROUND(IF(psi_undeclared, -paystubactual.AbsenceDeduction, -paystub.AbsenceDeduction), decimal_size) 'AbsentDeduction',
			paystub.TotalAllowance `TotalAllowance`,
		    ROUND(paystub.TotalBonus, decimal_size) `TotalBonus`,
		    ROUND(IF(psi_undeclared, paystubactual.TotalGrossSalary, paystub.TotalGrossSalary), decimal_size) `GrossIncome`,
			ROUND(-paystub.TotalEmpSSS, decimal_size) `SSS`,
		    ROUND(-paystub.TotalEmpPhilhealth, decimal_size) `PhilHealth`,
		    ROUND(-paystub.TotalEmpHDMF, decimal_size) `HDMF`,
			ROUND(paystub.TotalTaxableSalary, decimal_size) `TaxableIncome`,
		    ROUND(-paystub.TotalEmpWithholdingTax, decimal_size) `WithholdingTax`,
			ROUND(-paystub.TotalLoans, decimal_size) `TotalLoans`,
			ROUND(IFNULL(agf.DailyFee, 0), decimal_size) `AgencyFee`,
			ROUND(IF(psi_undeclared, paystubactual.TotalAdjustments, paystub.TotalAdjustments), decimal_size) `TotalAdjustments`,
		    ROUND(IF(
				psi_undeclared,
				paystubactual.TotalNetSalary + IFNULL(agf.DailyFee, 0),
				paystub.TotalNetSalary + IFNULL(agf.DailyFee, 0)
			), decimal_size) `NetPay`,
			ROUND(IFNULL(thirteenthmonthpay.Amount, 0), decimal_size) `13thMonthPay`,
			ROUND((IF(psi_undeclared, paystubactual.TotalNetSalary, paystub.TotalNetSalary) + IFNULL(thirteenthmonthpay.Amount,0) + IFNULL(agf.DailyFee, 0)), decimal_size) `Total`,
		    UCASE(CONCAT_WS(', ', e.LastName, e.FirstName, INITIALS(e.MiddleName, '. ', '1'))) `DatCol3`,
		    UCASE(e.FirstName) 'FirstName',
		    INITIALS(e.MiddleName,'. ','1') 'MiddleName',
		    UCASE(e.LastName) 'LastName',
		    UCASE(e.Surname) 'Surname',
		    UCASE(p.PositionName) 'PositionName',
		    CONCAT_WS(
		        ' to ',
		        DATE_FORMAT(paystub.PayFromDate, IF(YEAR(paystub.PayFromDate) = YEAR(paystub.PayToDate), '%c/%e', '%c/%e/%Y')),
		        DATE_FORMAT(paystub.PayToDate,'%c/%e/%Y')
		    ) `DatCol20`
		FROM paystub
		LEFT JOIN paystubactual
		ON paystubactual.EmployeeID = paystub.EmployeeID AND
		    paystubactual.PayPeriodID = paystub.PayPeriodID
		INNER JOIN employee e
		        ON e.RowID = paystub.EmployeeID
		INNER JOIN `position` p
		        ON p.RowID = e.PositionID
		INNER JOIN division d
		        ON d.RowID = p.DivisionId AND d.RowID = div_rowid
		LEFT JOIN (
		    SELECT
		        RowID,
		        EmployeeID,
		        SUM(DailyFee) AS DailyFee
		    FROM agencyfee
		    WHERE OrganizationID=ps_OrganizationID AND
		        DailyFee > 0 AND
		        TimeEntryDate BETWEEN paypdatefrom AND paypdateto
		    GROUP BY EmployeeID
		) agf
		ON IFNULL(agf.RowID, 1) > 0 AND
		    agf.EmployeeID=paystub.EmployeeID
		LEFT JOIN thirteenthmonthpay
		ON thirteenthmonthpay.OrganizationID = paystub.OrganizationID AND
		    thirteenthmonthpay.PaystubID = IF(psi_undeclared, paystubactual.RowID, paystub.RowID)

		LEFT JOIN (SELECT et.EmployeeID
		           ,SUM(et.TotalExpectedHours) `TotalExpectedHours`
		           FROM expectedhours et
					  WHERE et.OrganizationID = ps_OrganizationID
					  AND et.`Date` BETWEEN min_paydatefrom AND max_paydateto
					  GROUP BY et.EmployeeID) ete
		       ON ete.EmployeeID = paystub.EmployeeID

		WHERE paystub.OrganizationID = ps_OrganizationID AND
		    (paystub.PayFromDate >= paypdatefrom OR paystub.PayToDate >= paypdatefrom) AND
		    (paystub.PayFromDate <= paypdateto OR paystub.PayToDate <= paypdateto) AND
		    # LENGTH(IFNULL(TRIM(e.ATMNo), '')) = IF(strSalaryDistrib = 'Cash', 0, LENGTH(IFNULL(TRIM(e.ATMNo), ''))) AND
		    IF(strSalaryDistrib = 'Cash'
		       , (LENGTH(IFNULL(TRIM(e.ATMNo), '')) = 0)
		       , (LENGTH(IFNULL(TRIM(e.ATMNo), '')) > 0)) = TRUE AND
			 -- If employee is paid monthly or daily, employee should have worked for the pay period to appear
		    IF(e.EmployeeType IN ('Monthly', 'Daily'), paystub.RegularHours > 0, TRUE)
		ORDER BY CONCAT(e.LastName, e.FirstName), paystub.PayFromDate, paystub.PayToDate;

		SET div_index = (div_index + 1);

	END WHILE;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.paystub_payslip
DROP PROCEDURE IF EXISTS `paystub_payslip`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `paystub_payslip`(
    IN `OrganizID` INT,
    IN `PayPeriodRowID` INT,
    IN `IsActualFlag` BOOLEAN
)
    DETERMINISTIC
BEGIN

DECLARE paydate_from DATE;
DECLARE paydat_to DATE;

DECLARE v_hours_per_day INT(2) DEFAULT 8;
DECLARE sec_per_hour INT(11) DEFAULT 3600;

SET @ppIds = (SELECT GROUP_CONCAT(pp.RowID)
					#, SUBDATE(ppd.PayToDate, INTERVAL 12 MONTH) #2018-01-05
					
					FROM payperiod pp
					INNER JOIN payperiod ppd ON ppd.RowID = PayPeriodRowID
					WHERE pp.OrganizationID=ppd.OrganizationID
					AND pp.TotalGrossSalary=ppd.TotalGrossSalary
					#AND SUBDATE(ppd.PayToDate, INTERVAL 12 MONTH) BETWEEN pp.PayFromDate AND pp.PayToDate
					AND pp.PayFromDate >= SUBDATE(ppd.PayToDate, INTERVAL 12 MONTH)
					AND pp.PayToDate <= ppd.PayToDate);

SELECT
    pp.PayFromDate,
    pp.PayToDate
FROM payperiod pp
WHERE pp.RowID = PayPeriodRowID
INTO
    paydate_from,
    paydat_to;

SELECT
    e.RowID,
    CONCAT(e.EmployeeID, ' / ', e.LastName, ', ', e.FirstName, ' ', LEFT(e.MiddleName, 1)) `COL1`,
    CONCAT_WS(', ', e.LastName, e.FirstName, e.MiddleName) `COL69`,
    ROUND(GetBasicPay(e.RowID, paydate_from, paydat_to, IsActualFlag, ps.BasicHours), 2) `COL70`,
    ps.BasicHours `COL71`,
    IFNULL(ps.AbsentHours + IF(e.EmployeeType = 'Monthly', ps.LeaveHours, 0), 0) `COL72`,
    IF(IsActualFlag, es.TrueSalary, es.Salary) `COL80`,
    IF(
        IsActualFlag,
        psa.AbsenceDeduction + IF(e.EmployeeType = 'Monthly', psa.LeavePay, 0),
        ps.AbsenceDeduction + IF(e.EmployeeType = 'Monthly', ps.LeavePay, 0)
    ) AS `COL5`,
    ps.LateHours `COL6`,
    IF(IsActualFlag, psa.LateDeduction, ps.LateDeduction) `COL7`,
    ps.UndertimeHours `COL8`,
    IF(IsActualFlag, psa.UndertimeDeduction, ps.UndertimeDeduction) `COL9`,
    ps.OvertimeHours `COL12`,
    (
        IF(
            IsActualFlag,
            (
                psa.OvertimePay +
                psa.NightDiffOvertimePay +
                psa.RestDayOTPay +
                psa.SpecialHolidayOTPay +
                psa.RegularHolidayOTPay
            ),
            (
                ps.OvertimePay +
                ps.NightDiffOvertimePay +
                ps.RestDayOTPay +
                ps.SpecialHolidayOTPay +
                ps.RegularHolidayOTPay
            )
        )
    ) `COL13`,
    ps.NightDiffHours `COL14`,
    IF(IsActualFlag, psa.NightDiffPay, ps.NightDiffPay) `COL15`,
    (ps.TotalAllowance - IFNULL(psiECOLA.PayAmount, 0)) `COL18`,
    IF(IsActualFlag = TRUE, psa.TotalAdjustments, ps.TotalAdjustments) `COL19`,
    IF(
        IsActualFlag,
        psa.TotalGrossSalary + psa.TotalAdjustments,
        ps.TotalGrossSalary + ps.TotalAdjustments
    ) `COL20`,
    ps.TotalEmpSSS `COL21`,
    ps.TotalEmpPhilhealth `COL22`,
    ps.TotalEmpHDMF `COL23`,
    ps.TotalEmpWithholdingTax `COL25`,
    ps.TotalLoans `COL26`,
    IF(IsActualFlag, psa.TotalNetSalary, ps.TotalNetSalary) `COL27`,
    allowances.`Names` AS `COL28`, -- Deprecated
    allowances.PayAmounts AS `COL29`, -- Deprecated
    payStubLoans.`Names` AS `COL31`,
    payStubLoans.PayAmounts AS `COL32`,
    payStubLoans.TotalBalanceLeft AS `COl36`,
    adjustments.`Names` AS `COL37`, -- Deprecated
    adjustments.PayAmounts AS `COL38`,-- Deprecated
    ps.LeaveHours `COL40`,
    IF(IsActualFlag, psa.LeavePay, ps.LeavePay) `COL41`,
	IF(
        IsActualFlag,
        psa.RegularHolidayPay + psa.SpecialHolidayPay + psa.RestDayPay,
        ps.RegularHolidayPay + ps.SpecialHolidayPay + ps.RestDayPay
    ) `COL42`,
    IFNULL(psiECOLA.PayAmount, 0) `COL43`,
    psiLeave.`Names` `COL44`,
    psiLeave.Availed `COl45`,
    psiLeave.Balance `COL46`,
    IFNULL(adjustments.`Names`, '') `COL90`,
    IFNULL(adjustments.`PayAmounts`, '') `COL91`
FROM paystub ps
INNER JOIN paystubactual psa
ON psa.EmployeeID = ps.EmployeeID AND
    psa.PayFromDate = ps.PayFromDate
INNER JOIN employee e
ON e.RowID = ps.EmployeeID AND
    e.OrganizationID = ps.OrganizationID
INNER JOIN employeesalary es
ON es.EmployeeID = ps.EmployeeID AND
    es.OrganizationID=ps.OrganizationID AND
    (es.EffectiveDateFrom >= ps.PayFromDate OR IFNULL(es.EffectiveDateTo,ps.PayToDate) >= ps.PayFromDate) AND
    (es.EffectiveDateFrom <= ps.PayToDate OR IFNULL(es.EffectiveDateTo,ps.PayToDate) <= ps.PayToDate)
LEFT JOIN (
    SELECT
        REPLACE(GROUP_CONCAT(IFNULL(product.PartNo, '')), ',', '\n') 'Names',
        REPLACE(GROUP_CONCAT(IFNULL(paystubitem.PayAmount, '')), ',', '\n') 'PayAmounts',
        paystubitem.PayStubID
    FROM paystubitem
    INNER JOIN product
    ON product.RowID = paystubitem.ProductID AND
        product.OrganizationID = paystubitem.OrganizationID AND
        product.`Category` = 'Allowance Type'
    GROUP BY paystubitem.PayStubID
) allowances
ON allowances.PayStubID = ps.RowID
LEFT JOIN (
    SELECT
        REPLACE(GROUP_CONCAT(IFNULL(product.PartNo, '')), ',', '\n') 'Names',
        REPLACE(GROUP_CONCAT(IFNULL(ROUND(scheduledloansperpayperiod.DeductionAmount, 2), '')), ',', '\n') 'PayAmounts',
        REPLACE(GROUP_CONCAT(IFNULL(ROUND(scheduledloansperpayperiod.TotalBalanceLeft, 2), '')), ',', '\n') 'TotalBalanceLeft',
        paystub.RowID 'PayStubID'
    FROM scheduledloansperpayperiod
    INNER JOIN employeeloanschedule
    ON employeeloanschedule.RowID = scheduledloansperpayperiod.EmployeeLoanRecordID
    INNER JOIN paystub
    ON paystub.PayPeriodID = scheduledloansperpayperiod.PayPeriodID AND
        paystub.EmployeeID = scheduledloansperpayperiod.EmployeeID
    INNER JOIN product
    ON product.RowID = employeeloanschedule.LoanTypeID
    GROUP BY paystub.RowID
) payStubLoans
ON payStubLoans.PayStubID = ps.RowID

LEFT JOIN (SELECT ROUND((lt.Balance / v_hours_per_day), 2) AS 'Balance'
				, lt.EmployeeID
				, p.PartNo `Names`
				, et.`VacationLeaveHours` `Availed`
				
				FROM (SELECT lt.*
						, MAX(lt.TransactionDate) `MaxTransactionDate`
						FROM leavetransaction lt
						WHERE FIND_IN_SET(lt.PayPeriodID, @ppIds) > 0
						AND lt.OrganizationID = OrganizID
						GROUP BY lt.EmployeeID) i
				
				INNER JOIN leavetransaction lt ON lt.EmployeeID=i.EmployeeID AND lt.TransactionDate=i.`MaxTransactionDate`
				INNER JOIN leaveledger ll ON ll.RowID=lt.LeaveLedgerID
				INNER JOIN product p ON p.RowID=ll.ProductID AND p.PartNo='Vacation Leave'
				INNER JOIN category c ON c.RowID=p.CategoryID AND c.CategoryName='Leave Type'
				
				LEFT JOIN (SELECT
								ete.EmployeeID
								, SUM(ete.VacationLeaveHours / 8) `VacationLeaveHours`
								, SUM(ete.SickLeaveHours / 8) `SickLeaveHours`
								FROM employeetimeentry ete
								INNER JOIN payperiod pp ON pp.RowID = PayPeriodRowID
								WHERE ete.OrganizationID = OrganizID
								AND ete.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate
								GROUP BY ete.EmployeeID
								) et ON et.EmployeeID = i.EmployeeID
) psiLeave
#ON psiLeave.PayStubID = ps.RowID
ON psiLeave.EmployeeID = ps.EmployeeID

LEFT JOIN (
    SELECT
        psi.*,
        p.PartNo AS ItemName
    FROM paystubitem psi
    INNER JOIN product p
    ON p.RowID=psi.ProductID AND
        p.OrganizationID=psi.OrganizationID AND
        p.PartNo='Ecola'
    WHERE psi.Undeclared=0 AND
        psi.OrganizationID=OrganizID AND
        psi.PayAmount!=0
) psiECOLA
ON psiECOLA.PayStubID=ps.RowID
LEFT JOIN (
    SELECT
        REPLACE(GROUP_CONCAT(IFNULL(adjustment.ItemName, '')), ',', '\n') `Names`,
        REPLACE(GROUP_CONCAT(IFNULL(ROUND(adjustment.PayAmount, 2), '')), ',', '\n') `PayAmounts`,
        adjustment.PayStubID
    FROM (
            SELECT
                paystubadjustment.PayStubID,
                paystubadjustment.PayAmount,
                product.PartNo AS ItemName
            FROM paystubadjustment
            INNER JOIN product
            ON product.RowID = paystubadjustment.ProductID
            WHERE IsActualFlag = 0 AND
                paystubadjustment.OrganizationID = OrganizID AND
                paystubadjustment.PayAmount != 0
        UNION
            SELECT
                paystubadjustmentactual.PayStubID,
                paystubadjustmentactual.PayAmount,
                product.PartNo AS ItemName
            FROM paystubadjustmentactual
            INNER JOIN product
            ON product.RowID = paystubadjustmentactual.ProductID
            WHERE IsActualFlag = 1 AND
                paystubadjustmentactual.OrganizationID = OrganizID AND
                paystubadjustmentactual.PayAmount != 0
    ) adjustment
    GROUP BY adjustment.PayStubID
) adjustments
ON adjustments.PayStubID = ps.RowID
WHERE ps.OrganizationID = OrganizID AND
    ps.PayFromDate = paydate_from AND
    ps.PayToDate = paydat_to
GROUP BY ps.EmployeeID
ORDER BY CONCAT(e.LastName, e.FirstName, e.MiddleName);

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.PAYSTUB_prepare_loans
DROP PROCEDURE IF EXISTS `PAYSTUB_prepare_loans`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `PAYSTUB_prepare_loans`(
	IN `OrganizID` INT,
	IN `Date_From` DATE,
	IN `Date_To` DATE,
	IN `ppRowID` INT
)
    DETERMINISTIC
BEGIN

DECLARE IsFirstHalfOfMonth CHAR(1) DEFAULT 0;

DECLARE payfreqID INT(11);

SELECT
    pp.`Half`,
    pp.TotalGrossSalary
FROM payperiod pp
INNER JOIN payperiod p2
ON p2.RowID=ppRowID
    AND pp.TotalGrossSalary=p2.TotalGrossSalary
WHERE pp.OrganizationID=OrganizID
    AND pp.PayFromDate=Date_From
    AND pp.PayToDate=Date_To
LIMIT 1
INTO
    IsFirstHalfOfMonth,
    payfreqID;

IF IsFirstHalfOfMonth = '1' THEN

    SELECT
        SUM((IFNULL(els.TotalLoanAmount,0) - IFNULL(els.TotalBalanceLeft,0))) `TotalLoanAmount`,
        SUM(els.DeductionAmount) `DeductionAmount`,
        els.EmployeeID
    FROM employeeloanschedule els
    INNER JOIN employee e
    ON e.RowID=els.EmployeeID
        AND e.OrganizationID=els.OrganizationID
        AND e.PayFrequencyID=payfreqID
    WHERE els.OrganizationID=OrganizID AND els.BonusID IS NULL
        AND (els.`Status`!='Cancelled' AND els.`Status` != 'On Hold')
        AND els.DeductionSchedule IN ('First half', 'Per pay period')
        AND (Date_To >= els.DedEffectiveDateFrom)
        AND els.TotalBalanceLeft > 0
        
        
    GROUP BY els.EmployeeID;

ELSE

    SELECT
        SUM((IFNULL(els.TotalLoanAmount, 0) - IFNULL(els.TotalBalanceLeft, 0))) `TotalLoanAmount`,
        SUM(els.DeductionAmount) `DeductionAmount`,
        els.EmployeeID
    FROM employeeloanschedule els
    INNER JOIN employee e
    ON e.RowID=els.EmployeeID
        AND e.OrganizationID=els.OrganizationID
        AND e.PayFrequencyID=payfreqID
    WHERE els.OrganizationID=OrganizID
        AND els.BonusID IS NULL
        AND (els.`Status`!='Cancelled' AND els.`Status` != 'On Hold')
        AND els.DeductionSchedule IN ('End of the month', 'Per pay period')
        AND (Date_To >= els.DedEffectiveDateFrom)
        AND els.TotalBalanceLeft > 0
        
        
    GROUP BY els.EmployeeID;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.paystub_singlepayslip
DROP PROCEDURE IF EXISTS `paystub_singlepayslip`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `paystub_singlepayslip`(
    IN `OrganizID` INT,
    IN `PayPeriodRowID` INT,
    IN `IsActualFlag` CHAR(1),
    IN `EmployeeRowID` INT




)
    DETERMINISTIC
BEGIN

DECLARE paydate_from DATE;

DECLARE paydat_to DATE;

SELECT pp.PayFromDate,pp.PayToDate FROM payperiod pp WHERE pp.RowID=PayPeriodRowID INTO paydate_from,paydat_to;


SET @daily_rate = GET_employeerateperday(9,2,paydat_to);



SELECT i.*
FROM (SELECT
e.RowID,e.EmployeeID AS `COL1`
,CONCAT_WS(', ',e.LastName,e.FirstName,e.MiddleName) AS `COL69`

,IF(IsActualFlag=0, ete.RegularHoursAmount, ROUND(ete.RegularHoursAmount, 2)) AS `COL70`
,IF(IsActualFlag = 1, es.TrueSalary, es.Salary) `COL80`
,0 AS `COL2`
,ROUND( IF(e.EmployeeType IN ('Fixed','Monthly'), (es.BasicPay * IF(IsActualFlag=0, 1, (es.TrueSalary / es.Salary))), IFNULL(ete.RegularHoursAmount,0)) , 2) AS `COL3`
,IFNULL(ete.UndertimeHours,0) AS `COL4`
,IFNULL(ete.Absent,0) AS `COL5`
,IFNULL(ete.HoursLate,0) AS `COL6`
,IFNULL(ete.HoursLateAmount,0) AS `COL7`
,IFNULL(ete.UndertimeHours,0) AS `COL8`
,IFNULL(ete.UndertimeHoursAmount,0) AS `COL9`
,0 AS `COL10`
,0 AS `COL11`
,IFNULL(ete.OvertimeHoursWorked,0) AS `COL12`
,IFNULL(ete.OvertimeHoursAmount,0) AS `COL13`
,IFNULL(ete.NightDifferentialHours,0) AS `COL14`
,IFNULL(ete.NightDiffHoursAmount,0) AS `COL15`
,0 AS `COL16`
,IFNULL(ete.HolidayPayAmount,0) AS `COL17`
,(ps.TotalAllowance - IFNULL(psiECOLA.PayAmount,0)) AS `COL18`
,ps.TotalAdjustments `COL19`
,ps.TotalGrossSalary AS `COL20`
,ps.TotalEmpSSS AS `COL21`
,ps.TotalEmpPhilhealth AS `COL22`
,ps.TotalEmpHDMF AS `COL23`
,ps.TotalTaxableSalary AS `COL24`
,ps.TotalEmpWithholdingTax AS `COL25`
,ps.TotalLoans AS `COL26`
,ps.TotalNetSalary AS `COL27`

,REPLACE(GROUP_CONCAT(IFNULL(psiAllwnc.ItemName,'')),',','\n') AS `COL28`
,REPLACE(GROUP_CONCAT(IFNULL(psiAllwnc.PayAmount,0)),',','\n') AS `COL29`

,ps.TotalAllowance AS `COL30`
,REPLACE(GROUP_CONCAT(IFNULL(psiLoan.ItemName,'')),',','\n') AS `COL31`
,REPLACE(GROUP_CONCAT(IFNULL(psiLoan.PayAmount,'')),',','\n') AS `COL32`
,REPLACE(GROUP_CONCAT(IFNULL(slp.TotBalLeft,'')),',','\n') AS `COL36`

,ps.TotalLoans AS `COL33`
,0 AS `COL34`
,0 AS `COL35`

,REPLACE(GROUP_CONCAT(IFNULL(psa.ItemName,'')),',','\n') AS `COL37`
,REPLACE(GROUP_CONCAT(IFNULL(psa.PayAmount,0)),',','\n') AS `COL38`

,(IFNULL(ete.VacationLeaveHours,0) + IFNULL(ete.SickLeaveHours,0) + IFNULL(ete.MaternityLeaveHours,0) + IFNULL(ete.OtherLeaveHours,0)) AS `COL40`
,IFNULL(ete.Leavepayment,0) AS `COL41`

,IFNULL(psiHoli.PayAmount,0) AS `COL42`

,IFNULL(psiECOLA.PayAmount,0) AS `COL43`

,REPLACE(GROUP_CONCAT(IFNULL(psiLeave.ItemName,'')),',','\n') AS `COL44`


FROM (SELECT RowID,OrganizationID,PayPeriodID,EmployeeID,TimeEntryID,PayFromDate,PayToDate,TotalGrossSalary,TotalNetSalary,TotalTaxableSalary,TotalEmpSSS,TotalEmpWithholdingTax,TotalCompSSS,TotalEmpPhilhealth,TotalCompPhilhealth,TotalEmpHDMF,TotalCompHDMF,TotalVacationDaysLeft,TotalLoans,TotalBonus,TotalAllowance,TotalAdjustments,ThirteenthMonthInclusion,FirstTimeSalary FROM paystub WHERE IsActualFlag=0 AND OrganizationID=OrganizID
        UNION
        SELECT RowID,OrganizationID,PayPeriodID,EmployeeID,TimeEntryID,PayFromDate,PayToDate,TotalGrossSalary,TotalNetSalary,TotalTaxableSalary,TotalEmpSSS,TotalEmpWithholdingTax,TotalCompSSS,TotalEmpPhilhealth,TotalCompPhilhealth,TotalEmpHDMF,TotalCompHDMF,TotalVacationDaysLeft,TotalLoans,TotalBonus,TotalAllowance,TotalAdjustments,ThirteenthMonthInclusion,FirstTimeSalary FROM paystubactual WHERE IsActualFlag=1 AND OrganizationID=OrganizID
        ) ps

INNER JOIN employee e ON e.RowID=ps.EmployeeID AND e.OrganizationID=ps.OrganizationID AND e.EmployeeType='Daily'

INNER JOIN employeesalary es ON es.EmployeeID=ps.EmployeeID AND es.OrganizationID=ps.OrganizationID AND (es.EffectiveDateFrom >= ps.PayFromDate OR IFNULL(es.EffectiveDateTo,ps.PayToDate) >= ps.PayFromDate) AND (es.EffectiveDateFrom <= ps.PayToDate OR IFNULL(es.EffectiveDateTo,ps.PayToDate) <= ps.PayToDate)

LEFT JOIN (SELECT RowID,EmployeeID,SUM(RegularHoursWorked) AS RegularHoursWorked,SUM(RegularHoursAmount) AS RegularHoursAmount,SUM(TotalHoursWorked) AS TotalHoursWorked,SUM(OvertimeHoursWorked) AS OvertimeHoursWorked,SUM(OvertimeHoursAmount) AS OvertimeHoursAmount,SUM(UndertimeHours) AS UndertimeHours,SUM(UndertimeHoursAmount) AS UndertimeHoursAmount,SUM(NightDifferentialHours) AS NightDifferentialHours,SUM(NightDiffHoursAmount) AS NightDiffHoursAmount,SUM(NightDifferentialOTHours) AS NightDifferentialOTHours,SUM(NightDiffOTHoursAmount) AS NightDiffOTHoursAmount,SUM(HoursLate) AS HoursLate,SUM(HoursLateAmount) AS HoursLateAmount,SUM(VacationLeaveHours) AS VacationLeaveHours,SUM(SickLeaveHours) AS SickLeaveHours,SUM(MaternityLeaveHours) AS MaternityLeaveHours,SUM(OtherLeaveHours) AS OtherLeaveHours,SUM(TotalDayPay) AS TotalDayPay,SUM(Absent) AS Absent,SUM(TaxableDailyAllowance) AS TaxableDailyAllowance,SUM(HolidayPayAmount) AS HolidayPayAmount,SUM(TaxableDailyBonus) AS TaxableDailyBonus,SUM(NonTaxableDailyBonus) AS NonTaxableDailyBonus,SUM(Leavepayment) AS Leavepayment
                FROM (SELECT RowID,OrganizationID,`Date`,EmployeeShiftID,EmployeeID,EmployeeSalaryID,EmployeeFixedSalaryFlag,RegularHoursWorked,RegularHoursAmount,TotalHoursWorked,OvertimeHoursWorked,OvertimeHoursAmount,UndertimeHours,UndertimeHoursAmount,NightDifferentialHours,NightDiffHoursAmount,NightDifferentialOTHours,NightDiffOTHoursAmount,HoursLate,HoursLateAmount,LateFlag,PayRateID,VacationLeaveHours,SickLeaveHours,MaternityLeaveHours,OtherLeaveHours,TotalDayPay,Absent,ChargeToDivisionID,TaxableDailyAllowance,HolidayPayAmount,TaxableDailyBonus,NonTaxableDailyBonus,Leavepayment FROM employeetimeentry WHERE OrganizationID=OrganizID AND IsActualFlag=0 AND `Date` BETWEEN paydate_from AND paydat_to
                        UNION
                        SELECT RowID,OrganizationID,`Date`,EmployeeShiftID,EmployeeID,EmployeeSalaryID,EmployeeFixedSalaryFlag,RegularHoursWorked,RegularHoursAmount,TotalHoursWorked,OvertimeHoursWorked,OvertimeHoursAmount,UndertimeHours,UndertimeHoursAmount,NightDifferentialHours,NightDiffHoursAmount,NightDifferentialOTHours,NightDiffOTHoursAmount,HoursLate,HoursLateAmount,LateFlag,PayRateID,VacationLeaveHours,SickLeaveHours,MaternityLeaveHours,OtherLeaveHours,TotalDayPay,Absent,ChargeToDivisionID,TaxableDailyAllowance,HolidayPayAmount,TaxableDailyBonus,NonTaxableDailyBonus,Leavepayment FROM employeetimeentryactual WHERE OrganizationID=OrganizID AND IsActualFlag=1 AND `Date` BETWEEN paydate_from AND paydat_to
                        ) i GROUP BY i.EmployeeID
                ) ete ON ete.RowID IS NOT NULL AND ete.EmployeeID=ps.EmployeeID




LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.`Category`='Allowance Type' WHERE psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiAllwnc ON psiAllwnc.PayStubID=ps.RowID

LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.`Category`='Loan Type' WHERE psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiLoan ON psiLoan.PayStubID=ps.RowID

LEFT JOIN (SELECT a.*,b.LoanTypeID,ROUND(a.TotalBalanceLeft,2) `TotBalLeft` FROM scheduledloansperpayperiod a INNER JOIN employeeloanschedule b ON b.RowID=a.EmployeeLoanRecordID) slp ON slp.OrganizationID=ps.OrganizationID AND slp.PayPeriodID=ps.PayPeriodID AND slp.EmployeeID=ps.EmployeeID AND slp.LoanTypeID=psiLoan.ProductID AND psiLoan.ProductID IS NOT NULL

LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.`Category`='Leave Type' WHERE psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiLeave ON psiLeave.PayStubID=ps.RowID

LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.PartNo='Holiday pay' WHERE psi.Undeclared=IsActualFlag AND psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiHoli ON psiHoli.PayStubID=ps.RowID

LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.PartNo='Ecola' WHERE psi.Undeclared=0 AND psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiECOLA ON psiECOLA.PayStubID=ps.RowID

LEFT JOIN (SELECT psa.RowID,psa.PayStubID,psa.PayAmount,p.PartNo AS ItemName FROM paystubadjustment psa INNER JOIN product p ON p.RowID=psa.ProductID WHERE IsActualFlag=0 AND psa.OrganizationID=OrganizID AND psa.PayAmount!=0
                UNION
                SELECT psa.RowID,psa.PayStubID,psa.PayAmount,p.PartNo AS ItemName FROM paystubadjustmentactual psa INNER JOIN product p ON p.RowID=psa.ProductID WHERE IsActualFlag=1 AND psa.OrganizationID=OrganizID AND psa.PayAmount!=0
                ) psa ON psa.PayStubID=ps.RowID

WHERE ps.OrganizationID=OrganizID
AND ps.PayFromDate=paydate_from
AND ps.PayToDate=paydat_to AND ps.EmployeeID=EmployeeRowID
GROUP BY ps.EmployeeID) i

UNION



SELECT i.*
FROM (SELECT
e.RowID,e.EmployeeID AS `COL1`
,CONCAT_WS(', ',e.LastName,e.FirstName,e.MiddleName) AS `COL69`

,IF(IsActualFlag=0, ete.RegularHoursAmount, ROUND(ete.RegularHoursAmount, 2)) AS `COL70`
,ROUND( es.BasicPay * IF(IsActualFlag=0, 1, (es.TrueSalary / es.Salary)) , 2) `COL80`
,0 AS `COL2`
,ROUND( IF(e.EmployeeType IN ('Fixed','Monthly'), (es.BasicPay * IF(IsActualFlag=0, 1, (es.TrueSalary / es.Salary))), IFNULL(ete.RegularHoursAmount,0)) , 2) AS `COL3`
,IFNULL(ete.UndertimeHours,0) AS `COL4`
,IFNULL(ete.Absent,0) AS `COL5`
,IFNULL(ete.HoursLate,0) AS `COL6`
,IFNULL(ete.HoursLateAmount,0) AS `COL7`
,IFNULL(ete.UndertimeHours,0) AS `COL8`
,IFNULL(ete.UndertimeHoursAmount,0) AS `COL9`
,0 AS `COL10`
,0 AS `COL11`
,IFNULL(ete.OvertimeHoursWorked,0) AS `COL12`
,IFNULL(ete.OvertimeHoursAmount,0) AS `COL13`
,IFNULL(ete.NightDifferentialHours,0) AS `COL14`
,IFNULL(ete.NightDiffHoursAmount,0) AS `COL15`
,0 AS `COL16`
,IFNULL(ete.HolidayPayAmount,0) AS `COL17`
,(ps.TotalAllowance - IFNULL(psiECOLA.PayAmount,0)) AS `COL18`
,ps.TotalAdjustments `COL19`
,ps.TotalGrossSalary AS `COL20`
,ps.TotalEmpSSS AS `COL21`
,ps.TotalEmpPhilhealth AS `COL22`
,ps.TotalEmpHDMF AS `COL23`
,ps.TotalTaxableSalary AS `COL24`
,ps.TotalEmpWithholdingTax AS `COL25`
,ps.TotalLoans AS `COL26`
,ps.TotalNetSalary AS `COL27`

,REPLACE(GROUP_CONCAT(IFNULL(psiAllwnc.ItemName,'')),',','\n') AS `COL28`
,REPLACE(GROUP_CONCAT(IFNULL(psiAllwnc.PayAmount,0)),',','\n') AS `COL29`

,ps.TotalAllowance AS `COL30`
,REPLACE(GROUP_CONCAT(IFNULL(psiLoan.ItemName,'')),',','\n') AS `COL31`
,REPLACE(GROUP_CONCAT(IFNULL(psiLoan.PayAmount,'')),',','\n') AS `COL32`
,REPLACE(GROUP_CONCAT(IFNULL(slp.TotBalLeft,'')),',','\n') AS `COL36`

,ps.TotalLoans AS `COL33`
,0 AS `COL34`
,0 AS `COL35`

,REPLACE(GROUP_CONCAT(IFNULL(psa.ItemName,'')),',','\n') AS `COL37`
,REPLACE(GROUP_CONCAT(IFNULL(psa.PayAmount,0)),',','\n') AS `COL38`

,(IFNULL(ete.VacationLeaveHours,0) + IFNULL(ete.SickLeaveHours,0) + IFNULL(ete.MaternityLeaveHours,0) + IFNULL(ete.OtherLeaveHours,0)) AS `COL40`
,IFNULL(ete.Leavepayment,0) AS `COL41`

,IFNULL(psiHoli.PayAmount,0) AS `COL42`

,IFNULL(psiECOLA.PayAmount,0) AS `COL43`

,REPLACE(GROUP_CONCAT(IFNULL(psiLeave.ItemName,'')),',','\n') AS `COL44`


FROM (SELECT RowID,OrganizationID,PayPeriodID,EmployeeID,TimeEntryID,PayFromDate,PayToDate,TotalGrossSalary,TotalNetSalary,TotalTaxableSalary,TotalEmpSSS,TotalEmpWithholdingTax,TotalCompSSS,TotalEmpPhilhealth,TotalCompPhilhealth,TotalEmpHDMF,TotalCompHDMF,TotalVacationDaysLeft,TotalLoans,TotalBonus,TotalAllowance,TotalAdjustments,ThirteenthMonthInclusion,FirstTimeSalary FROM paystub WHERE IsActualFlag=0 AND OrganizationID=OrganizID
        UNION
        SELECT RowID,OrganizationID,PayPeriodID,EmployeeID,TimeEntryID,PayFromDate,PayToDate,TotalGrossSalary,TotalNetSalary,TotalTaxableSalary,TotalEmpSSS,TotalEmpWithholdingTax,TotalCompSSS,TotalEmpPhilhealth,TotalCompPhilhealth,TotalEmpHDMF,TotalCompHDMF,TotalVacationDaysLeft,TotalLoans,TotalBonus,TotalAllowance,TotalAdjustments,ThirteenthMonthInclusion,FirstTimeSalary FROM paystubactual WHERE IsActualFlag=1 AND OrganizationID=OrganizID
        ) ps

INNER JOIN employee e ON e.RowID=ps.EmployeeID AND e.OrganizationID=ps.OrganizationID AND e.EmployeeType='Monthly'

INNER JOIN employeesalary es ON es.EmployeeID=ps.EmployeeID AND es.OrganizationID=ps.OrganizationID AND (es.EffectiveDateFrom >= ps.PayFromDate OR IFNULL(es.EffectiveDateTo,ps.PayToDate) >= ps.PayFromDate) AND (es.EffectiveDateFrom <= ps.PayToDate OR IFNULL(es.EffectiveDateTo,ps.PayToDate) <= ps.PayToDate)

LEFT JOIN (SELECT RowID,EmployeeID,SUM(RegularHoursWorked) AS RegularHoursWorked,SUM(RegularHoursAmount) AS RegularHoursAmount,SUM(TotalHoursWorked) AS TotalHoursWorked,SUM(OvertimeHoursWorked) AS OvertimeHoursWorked,SUM(OvertimeHoursAmount) AS OvertimeHoursAmount,SUM(UndertimeHours) AS UndertimeHours,SUM(UndertimeHoursAmount) AS UndertimeHoursAmount,SUM(NightDifferentialHours) AS NightDifferentialHours,SUM(NightDiffHoursAmount) AS NightDiffHoursAmount,SUM(NightDifferentialOTHours) AS NightDifferentialOTHours,SUM(NightDiffOTHoursAmount) AS NightDiffOTHoursAmount,SUM(HoursLate) AS HoursLate,SUM(HoursLateAmount) AS HoursLateAmount,SUM(VacationLeaveHours) AS VacationLeaveHours,SUM(SickLeaveHours) AS SickLeaveHours,SUM(MaternityLeaveHours) AS MaternityLeaveHours,SUM(OtherLeaveHours) AS OtherLeaveHours,SUM(TotalDayPay) AS TotalDayPay,SUM(Absent) AS Absent,SUM(TaxableDailyAllowance) AS TaxableDailyAllowance,SUM(HolidayPayAmount) AS HolidayPayAmount,SUM(TaxableDailyBonus) AS TaxableDailyBonus,SUM(NonTaxableDailyBonus) AS NonTaxableDailyBonus,SUM(Leavepayment) AS Leavepayment
                FROM (SELECT RowID,OrganizationID,`Date`,EmployeeShiftID,EmployeeID,EmployeeSalaryID,EmployeeFixedSalaryFlag,RegularHoursWorked,RegularHoursAmount,TotalHoursWorked,OvertimeHoursWorked,OvertimeHoursAmount,UndertimeHours,UndertimeHoursAmount,NightDifferentialHours,NightDiffHoursAmount,NightDifferentialOTHours,NightDiffOTHoursAmount,HoursLate,HoursLateAmount,LateFlag,PayRateID,VacationLeaveHours,SickLeaveHours,MaternityLeaveHours,OtherLeaveHours,TotalDayPay,Absent,ChargeToDivisionID,TaxableDailyAllowance,HolidayPayAmount,TaxableDailyBonus,NonTaxableDailyBonus,Leavepayment FROM employeetimeentry WHERE OrganizationID=OrganizID AND IsActualFlag=0 AND `Date` BETWEEN paydate_from AND paydat_to
                        UNION
                        SELECT RowID,OrganizationID,`Date`,EmployeeShiftID,EmployeeID,EmployeeSalaryID,EmployeeFixedSalaryFlag,RegularHoursWorked,RegularHoursAmount,TotalHoursWorked,OvertimeHoursWorked,OvertimeHoursAmount,UndertimeHours,UndertimeHoursAmount,NightDifferentialHours,NightDiffHoursAmount,NightDifferentialOTHours,NightDiffOTHoursAmount,HoursLate,HoursLateAmount,LateFlag,PayRateID,VacationLeaveHours,SickLeaveHours,MaternityLeaveHours,OtherLeaveHours,TotalDayPay,Absent,ChargeToDivisionID,TaxableDailyAllowance,HolidayPayAmount,TaxableDailyBonus,NonTaxableDailyBonus,Leavepayment FROM employeetimeentryactual WHERE OrganizationID=OrganizID AND IsActualFlag=1 AND `Date` BETWEEN paydate_from AND paydat_to
                        ) i GROUP BY i.EmployeeID
                ) ete ON ete.RowID IS NOT NULL AND ete.EmployeeID=ps.EmployeeID




LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.`Category`='Allowance Type' WHERE psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiAllwnc ON psiAllwnc.PayStubID=ps.RowID

LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.`Category`='Loan Type' WHERE psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiLoan ON psiLoan.PayStubID=ps.RowID

LEFT JOIN (SELECT a.*,b.LoanTypeID,ROUND(a.TotalBalanceLeft,2) `TotBalLeft` FROM scheduledloansperpayperiod a INNER JOIN employeeloanschedule b ON b.RowID=a.EmployeeLoanRecordID) slp ON slp.OrganizationID=ps.OrganizationID AND slp.PayPeriodID=ps.PayPeriodID AND slp.EmployeeID=ps.EmployeeID AND slp.LoanTypeID=psiLoan.ProductID AND psiLoan.ProductID IS NOT NULL

LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.`Category`='Leave Type' WHERE psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiLeave ON psiLeave.PayStubID=ps.RowID

LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.PartNo='Holiday pay' WHERE psi.Undeclared=IsActualFlag AND psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiHoli ON psiHoli.PayStubID=ps.RowID

LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.PartNo='Ecola' WHERE psi.Undeclared=0 AND psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiECOLA ON psiECOLA.PayStubID=ps.RowID

LEFT JOIN (SELECT psa.RowID,psa.PayStubID,psa.PayAmount,p.PartNo AS ItemName FROM paystubadjustment psa INNER JOIN product p ON p.RowID=psa.ProductID WHERE IsActualFlag=0 AND psa.OrganizationID=OrganizID AND psa.PayAmount!=0
                UNION
                SELECT psa.RowID,psa.PayStubID,psa.PayAmount,p.PartNo AS ItemName FROM paystubadjustmentactual psa INNER JOIN product p ON p.RowID=psa.ProductID WHERE IsActualFlag=1 AND psa.OrganizationID=OrganizID AND psa.PayAmount!=0
                ) psa ON psa.PayStubID=ps.RowID

WHERE ps.OrganizationID=OrganizID
AND ps.PayFromDate=paydate_from
AND ps.PayToDate=paydat_to AND ps.EmployeeID=EmployeeRowID
GROUP BY ps.EmployeeID) i;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.PreserveLastYearsLeave
DROP PROCEDURE IF EXISTS `PreserveLastYearsLeave`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `PreserveLastYearsLeave`(IN `$OrganizationID` INT, IN `$UserID` INT, IN `$Year` YEAR)
    DETERMINISTIC
BEGIN

    INSERT INTO annualunusedleave (
        `OrganizationID`,
        `CreatedBy`,
        `LastUpdBy`,
        `EmployeeID`,
        `TotalLeave`,
        `Year`
    )
    SELECT
        `OrganizationID`,
        $UserID,
        $UserID,
        `RowID`,
        (`LeaveBalance` + `SickLeaveBalance` + `OtherLeaveBalance` + `MaternityLeaveBalance`),
        $Year
    FROM employee e
    WHERE OrganizationID = $OrganizationID
    ON DUPLICATE KEY UPDATE
        `LastUpdBy` = $UserID,
        `TotalLeave` = (`LeaveBalance` + `SickLeaveBalance` + `OtherLeaveBalance` + `MaternityLeaveBalance`);


END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.PRINT_employee_profile
DROP PROCEDURE IF EXISTS `PRINT_employee_profile`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `PRINT_employee_profile`(IN `OrganizID` INT, IN `EmpRowID` INT)
BEGIN

SELECT
e.RowID AS Col1
,og.Name AS Col2
,e.Salutation AS Col3
,e.FirstName AS Col4
,e.MiddleName AS Col5
,e.LastName AS Col6
,e.Surname AS Col7
,e.EmployeeID AS Col8
,e.TINNo AS Col9
,e.SSSNo AS Col10
,e.HDMFNo AS Col11
,e.PhilHealthNo AS Col12
,e.EmploymentStatus AS Col13
,e.EmailAddress AS Col14
,e.WorkPhone AS Col15
,e.HomePhone AS Col16
,e.MobilePhone AS Col17
,e.HomeAddress AS Col18
,e.Nickname AS Col19
,e.JobTitle AS Col20
,IF(e.Gender = 'M','Male','Female') AS Col21
,e.EmployeeType AS Col22
,e.MaritalStatus AS Col23
,DATE_FORMAT(e.Birthdate,'%c/%e/%Y') AS Col24
,DATE_FORMAT(e.StartDate,'%c/%e/%Y') AS Col25
,IF(e.TerminationDate IS NULL,'',DATE_FORMAT(e.TerminationDate,'%c/%e/%Y')) AS Col26
,IFNULL(pos.PositionName,'') AS Col27
,pf.PayFrequencyType AS Col28
,e.NoOfDependents AS Col29
,e.UndertimeOverride AS Col30
,e.OvertimeOverride AS Col31
,e.NewEmployeeFlag AS Col32
,e.LeaveBalance AS Col33
,e.SickLeaveBalance AS Col34
,e.MaternityLeaveBalance AS Col35
,e.OtherLeaveBalance AS Col36
,e.LeaveAllowance AS Col37
,e.SickLeaveAllowance AS Col38
,e.MaternityLeaveAllowance AS Col39
,e.OtherLeaveAllowance AS Col40
,e.LeavePerPayPeriod AS Col41
,e.SickLeavePerPayPeriod AS Col42
,e.MaternityLeavePerPayPeriod AS Col43
,e.OtherLeavePerPayPeriod AS Col44
,e.AlphaListExempted AS Col45
,e.WorkDaysPerYear AS Col46
,e.DayOfRest AS Col47
,e.ATMNo AS Col48
,e.BankName AS Col49
,e.CalcHoliday AS Col50
,e.CalcSpecialHoliday AS Col51
,e.CalcNightDiff AS Col52
,e.CalcNightDiffOT AS Col53
,e.CalcRestDay AS Col54
,e.CalcRestDayOT AS Col55
,IF(e.DateRegularized IS NULL,'',DATE_FORMAT(e.DateRegularized,'%c/%e/%Y')) AS Col56
,IF(e.DateEvaluated IS NULL,'',DATE_FORMAT(e.DateEvaluated,'%c/%e/%Y')) AS Col57
,CONCAT(IFNULL(edp.LastName,''),IFNULL(CONCAT(',',edp.FirstName),''),IFNULL(CONCAT(',',edp.MiddleName),'')) AS Col58
,IFNULL(edp.MiddleName,'') AS Col59
,IFNULL(edp.LastName,'') AS Col60
,IFNULL(edp.Surname,'') AS Col61
,IFNULL(edp.TINNo,'') AS Col62
,IFNULL(edp.SSSNo,'') AS Col63
,IFNULL(edp.HDMFNo,'') AS Col64
,IFNULL(edp.PhilHealthNo,'') AS Col65
,IFNULL(edp.EmailAddress,'') AS Col66
,IFNULL(edp.WorkPhone,'') AS Col67
,IFNULL(edp.HomePhone,'') AS Col68
,IFNULL(edp.MobilePhone,'') AS Col69
,IFNULL(edp.HomeAddress,'') AS Col70
,IFNULL(edp.Nickname,'') AS Col71
,IFNULL(edp.JobTitle,'') AS Col72
,edp.Gender AS Col73
,IFNULL(edp.RelationToEmployee,'') AS Col74
,IF(edp.ActiveFlag = 'Y','Yes','No') AS Col75
,IF(edp.Birthdate IS NULL,'',DATE_FORMAT(edp.Birthdate,'%c/%e/%Y')) AS Col76
,IFNULL(e.ATMNo,'') AS COL119
FROM employee e
INNER JOIN organization og ON og.RowID=e.OrganizationID
INNER JOIN payfrequency pf ON pf.RowID=e.PayFrequencyID
LEFT JOIN `position` pos ON pos.RowID=e.PositionID
LEFT JOIN (SELECT * FROM employeedependents WHERE ParentEmployeeID=EmpRowID AND OrganizationID=OrganizID) edp ON edp.RowID > 0
WHERE e.RowID=EmpRowID
AND e.OrganizationID=OrganizID;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.PRINT_employee_profiles
DROP PROCEDURE IF EXISTS `PRINT_employee_profiles`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `PRINT_employee_profiles`(IN `og_rowid` INT)
    DETERMINISTIC
BEGIN

DECLARE pp_rowid
        ,result_count INT(11);

DECLARE preferred_dateformat VARCHAR(50) DEFAULT '%c/%e/%Y';

SELECT ps.PayPeriodID
,COUNT(e.RowID)
FROM paystub ps
INNER JOIN employee e
        ON e.RowID=ps.EmployeeID
           AND e.OrganizationID=ps.OrganizationID
           AND e.EmployeeType NOT IN ('Resigned', 'Terminated')
           AND e.RevealInPayroll IN ('1', 'Y')
INNER JOIN payperiod pp
        ON pp.RowID=ps.PayPeriodID
           AND pp.OrganizationID=ps.OrganizationID
           AND pp.`Year`=YEAR(CURDATE())
           AND pp.TotalGrossSalary=e.PayFrequencyID
WHERE ps.OrganizationID=og_rowid
LIMIT 1
INTO pp_rowid
     ,result_count;

IF pp_rowid IS NOT NULL THEN

	SELECT
	# e.RowID `DatCol1`,
	e.EmployeeID	`Employee ID`
	,e.LastName	`Last Name`
	,e.FirstName	`First name`
	,e.MiddleName	`Middle Name`
	,IFNULL(DATE_FORMAT(e.Birthdate, preferred_dateformat), '') `Birthdate`
	,e.Gender	`Sex`
	,e.MaritalStatus	`Marital Status`
	,e.EmployeeType	`Employee Type`
	,IFNULL(DATE_FORMAT(e.StartDate, preferred_dateformat), '') `Start Date`
	,IFNULL(DATE_FORMAT(e.DateRegularized, preferred_dateformat), '') `Date Regularized`
	,pf.PayFrequencyType	`Pay Frequency`
	,e.EmploymentStatus	`Employment Status`
	,pos.PositionName	`Position Name`
	,e.MobilePhone	`Mobile no.`
	,e.HomeAddress	`Address`
	,e.TINNo	`TIN`
	,e.SSSNo	`SSS No.`
	,e.HDMFNo	`HDMF No.`
	,e.PhilHealthNo	`PHIC No.`
	# ,e.ATMNo
	,IFNULL(COUNT(edp.RowID), 0) `Dependent count`
	/*
	,(@dependent_lists := REPLACE(	
	                      GROUP_CONCAT( CONCAT_WS('', CONCAT_WS(' ', edp.FirstName, edp.LastName), CONCAT('(', edp.RelationToEmployee, ')')) )
								 , ',', '\n')
								 )	`DatCol22`
   */
	FROM employee e
	LEFT JOIN employeedependents edp
	       ON edp.ParentEmployeeID=e.RowID
	          AND edp.OrganizationID=e.OrganizationID
	INNER JOIN payfrequency pf
	        ON pf.RowID=e.PayFrequencyID
	INNER JOIN `position` pos
	        ON pos.RowID=e.PositionID
	
	INNER JOIN paystub ps
	        ON ps.OrganizationID=e.OrganizationID
	           AND ps.EmployeeID=e.RowID
	           AND ps.PayPeriodID=pp_rowid
	
	WHERE e.OrganizationID=og_rowid
	AND e.EmployeeType NOT IN ('Resigned', 'Terminated')
	AND e.RevealInPayroll IN ('1', 'Y')
	GROUP BY e.RowID
	ORDER BY CONCAT_WS(',', e.LastName, e.FirstName, e.MiddleName)
	;
	
ELSE

	SELECT
	# e.RowID `DatCol1`,
	e.EmployeeID	`Employee ID`
	,e.LastName	`Last Name`
	,e.FirstName	`First name`
	,e.MiddleName	`Middle Name`
	,IFNULL(DATE_FORMAT(e.Birthdate, preferred_dateformat), '') `Birthdate`
	,e.Gender	`Sex`
	,e.MaritalStatus	`Marital Status`
	,e.EmployeeType	`Employee Type`
	,IFNULL(DATE_FORMAT(e.StartDate, preferred_dateformat), '') `Start Date`
	,IFNULL(DATE_FORMAT(e.DateRegularized, preferred_dateformat), '') `Date Regularized`
	,pf.PayFrequencyType	`Pay Frequency`
	,e.EmploymentStatus	`Employment Status`
	,pos.PositionName	`Position Name`
	,e.MobilePhone	`Mobile no.`
	,e.HomeAddress	`Address`
	,e.TINNo	`TIN`
	,e.SSSNo	`SSS No.`
	,e.HDMFNo	`HDMF No.`
	,e.PhilHealthNo	`PHIC No.`
	# ,e.ATMNo
	,IFNULL(COUNT(edp.RowID), 0) `Dependent count`
	/*
	,(@dependent_lists := REPLACE(	
	                      GROUP_CONCAT( CONCAT_WS('', CONCAT_WS(' ', edp.FirstName, edp.LastName), CONCAT('(', edp.RelationToEmployee, ')')) )
								 , ',', '\n')
								 )	`DatCol22`
   */
	FROM employee e
	LEFT JOIN employeedependents edp
	       ON edp.ParentEmployeeID=e.RowID
	          AND edp.OrganizationID=e.OrganizationID
	INNER JOIN payfrequency pf
	        ON pf.RowID=e.PayFrequencyID
	INNER JOIN `position` pos
	        ON pos.RowID=e.PositionID
	WHERE e.OrganizationID=og_rowid
	AND e.EmployeeType NOT IN ('Resigned', 'Terminated')
	AND e.RevealInPayroll IN ('1', 'Y')
	GROUP BY e.RowID
	ORDER BY CONCAT_WS(',', e.LastName, e.FirstName, e.MiddleName)
	;
	
END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.PROCEDURE_CALLER
DROP PROCEDURE IF EXISTS `PROCEDURE_CALLER`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `PROCEDURE_CALLER`(IN `user_query` VARCHAR(64))
    DETERMINISTIC
BEGIN

DECLARE _stmt VARCHAR(1024);

    SET @SQL := user_query;

    PREPARE _stmt FROM @SQL;

    EXECUTE _stmt;

    DEALLOCATE PREPARE _stmt;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RECOMPUTE_agencytotalbill
DROP PROCEDURE IF EXISTS `RECOMPUTE_agencytotalbill`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `RECOMPUTE_agencytotalbill`(IN `OrganizID` INT, IN `FromPayDate` DATE, IN `ToPayDate` DATE, IN `UserRowID` INT)
    DETERMINISTIC
BEGIN

DECLARE payperiod_rowid INT(11);

SELECT RowID
FROM payperiod
WHERE OrganizationID=OrganizID
AND PayFromDate=FromPayDate
AND PayToDate=ToPayDate
INTO payperiod_rowid;



INSERT INTO agencytotalbill
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,AgencyID
    ,PayPeriodID
    ,TotalBilled
) SELECT
    ii.atbRowID
    ,OrganizID
    ,CURRENT_TIMESTAMP()
    ,UserRowID
    ,ii.AgencyID
    ,payperiod_rowid
    ,ii.SumDailyFee
    FROM (
        SELECT
        atb.RowID AS atbRowID
        ,agf.AgencyID
        ,SUM(IFNULL(agf.DailyFee,0)) AS SumDailyFee
        FROM agencyfee agf
        LEFT JOIN agencytotalbill atb ON atb.AgencyID=agf.AgencyID AND atb.PayPeriodID=payperiod_rowid AND atb.OrganizationID=OrganizID
        WHERE IFNULL(agf.DailyFee,0)!=0 AND agf.OrganizationID=OrganizID AND agf.TimeEntryDate BETWEEN FromPayDate AND ToPayDate
        GROUP BY agf.AgencyID
    ) ii
ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=UserRowID
    ,TotalBilled=ii.SumDailyFee;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RECOMPUTE_employeeleave
DROP PROCEDURE IF EXISTS `RECOMPUTE_employeeleave`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `RECOMPUTE_employeeleave`(IN `OrganizID` INT, IN `FromPayDate` DATE, IN `ToPayDate` DATE)
    DETERMINISTIC
BEGIN

DECLARE anyint INT(11);

DECLARE empleaveRowIDtodel VARCHAR(250);

DECLARE atleast_one CHAR(1);

SELECT EXISTS(SELECT RowID FROM employeeleave WHERE OrganizationID=OrganizID AND (LeaveStartDate >= FromPayDate OR LeaveEndDate >= FromPayDate) AND (LeaveStartDate <= ToPayDate OR LeaveEndDate <= ToPayDate) LIMIT 1) INTO atleast_one;



IF atleast_one = '1' THEN

    DELETE FROM employeeleave
    WHERE OrganizationID=OrganizID
    AND (LeaveStartDate >= FromPayDate OR LeaveEndDate >= FromPayDate)
    AND (LeaveStartDate <= ToPayDate OR LeaveEndDate <= ToPayDate);

    INSERT INTO employeeleave
    (
        OrganizationID
        ,Created
        ,LeaveStartTime
        ,LeaveType
        ,CreatedBy
        ,LastUpd
        ,LastUpdBy
        ,EmployeeID
        ,LeaveEndTime
        ,LeaveStartDate
        ,LeaveEndDate
        ,Reason
        ,Comments
        ,Image
        ,`Status`
    ) SELECT elv.OrganizationID
        ,elv.Created
        ,elv.LeaveStartTime
        ,elv.LeaveType
        ,elv.CreatedBy
        ,elv.LastUpd
        ,elv.LastUpdBy
        ,elv.EmployeeID
        ,elv.LeaveEndTime
        ,elv.LeaveStartDate
        ,elv.LeaveEndDate
        ,elv.Reason
        ,elv.Comments
        ,elv.Image
        ,elv.`Status`



    FROM employeeleave_duplicate elv
    WHERE elv.OrganizationID=OrganizID
    AND (elv.LeaveStartDate >= FromPayDate OR elv.LeaveEndDate >= FromPayDate)
    AND (elv.LeaveStartDate <= ToPayDate OR elv.LeaveEndDate <= ToPayDate);



END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RECOMPUTE_thirteenthmonthpay
DROP PROCEDURE IF EXISTS `RECOMPUTE_thirteenthmonthpay`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RECOMPUTE_thirteenthmonthpay`(
	IN `OrganizID` INT,
	IN `PayPRowID` INT,
	IN `UserRowID` INT
)
    DETERMINISTIC
BEGIN

DECLARE ispayperiodendofmonth TEXT;

DECLARE newvalue DECIMAL(11,6);

DECLARE payp_month TEXT;

DECLARE payp_year INT;

DECLARE emppayfreqID INT(11);

DECLARE paypmonthlyID VARCHAR(50);

DECLARE last_date DATE;

DECLARE month_firstdate DATE;

DECLARE pf_div INT;

DECLARE overtimeRate DECIMAL(10, 2);

DECLARE HOURS_IN_A_WORKDAY INT DEFAULT 8;

SELECT
    pyp.`Half`,
    pyp.`Month`,
    pyp.`Year`,
    pyp.TotalGrossSalary,
    pyp.PayFromDate,
    pyp.PayToDate,
    MONTH( SUBDATE(MAKEDATE(YEAR(CURDATE()), 1), INTERVAL 1 DAY) )
FROM payperiod pyp
INNER JOIN payfrequency pf
ON pf.RowID = pyp.TotalGrossSalary
WHERE pyp.RowID = PayPRowID
INTO
    ispayperiodendofmonth,
    payp_month,
    payp_year,
    emppayfreqID,
    month_firstdate,
    last_date,
    pf_div;

SELECT payrate.OvertimeRate
FROM payrate
WHERE payrate.Date = last_date AND
    payrate.OrganizationID = OrganizID
INTO overtimeRate;

SELECT GROUP_CONCAT(RowID)
FROM payperiod pp
WHERE pp.OrganizationID = OrganizID AND
    pp.TotalGrossSalary = 1 AND
    pp.`Year` = payp_year AND
    pp.`Month` = payp_month
ORDER BY
    pp.PayFromDate DESC,
    pp.PayToDate DESC
INTO paypmonthlyID;

UPDATE employeeloanschedule els
INNER JOIN scheduledloansperpayperiod slp
ON slp.EmployeeLoanRecordID = els.RowID
LEFT OUTER JOIN scheduledloansperpayperiod slp2
ON (
    els.RowID = slp2.EmployeeLoanRecordID AND
    slp.PayPeriodID < slp2.PayPeriodID
)
INNER JOIN payperiod pyp ON pyp.RowID=slp.PayPeriodID
SET
    els.LastUpd = CURRENT_TIMESTAMP(),
    els.LastUpdBy = UserRowID,
    els.LoanPayPeriodLeft = slp.LoanPayPeriodLeft,
    els.TotalBalanceLeft = slp.TotalBalanceLeft
WHERE slp2.RowID IS NULL AND
    (
        els.Status = 'In Progress' OR
        pyp.PayFromDate >= month_firstdate
    ) AND
    slp.OrganizationID = OrganizID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RECOMPUTE_weeklyemployeeSSSContribAmount
DROP PROCEDURE IF EXISTS `RECOMPUTE_weeklyemployeeSSSContribAmount`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `RECOMPUTE_weeklyemployeeSSSContribAmount`(IN `OrganizID` INT, IN `PayPeriodID` INT)
    DETERMINISTIC
BEGIN

DECLARE PayPeriodFreqID INT(11);

DECLARE isSSSContribSched CHAR(1);

DECLARE LastPayPeriodDateTo DATE;

DECLARE customPayFromDate DATE;

DECLARE SSSContribProductRowID INT(11);


SELECT TotalGrossSalary
,SSSContribSched
,PayToDate
FROM payperiod
WHERE RowID=PayPeriodID
INTO PayPeriodFreqID
        ,isSSSContribSched
        ,LastPayPeriodDateTo;

SELECT RowID
FROM product
WHERE `Category`='Deductions'
AND OrganizationID=OrganizID
AND PartNo='.SSS'
INTO SSSContribProductRowID;

IF PayPeriodFreqID = 4 AND isSSSContribSched = '1' THEN

    SET customPayFromDate = DATE_FORMAT(LastPayPeriodDateTo,'%Y-%m-01');

    SET PayPeriodFreqID = 4;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RELEASE_thirteenthmonthpay
DROP PROCEDURE IF EXISTS `RELEASE_thirteenthmonthpay`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `RELEASE_thirteenthmonthpay`(IN `OrganizID` INT, IN `PayPeriodRowID` INT, IN `UserRowID` INT)
    DETERMINISTIC
BEGIN

DECLARE annual_first_date DATE;

DECLARE annual_last_date DATE;

DECLARE final_year INT(11);
DECLARE pay_freqID INT(11);
SELECT pp.`Year`,pp.TotalGrossSalary FROM payperiod pp WHERE pp.RowID=PayPeriodRowID INTO final_year,pay_freqID;

SELECT pp.PayToDate FROM payperiod pp WHERE pp.`Year`=final_year AND pp.TotalGrossSalary=pay_freqID AND pp.OrganizationID=OrganizID ORDER BY pp.PayFromDate,pp.PayToDate LIMIT 1 INTO annual_first_date;

SELECT pp.PayToDate FROM payperiod pp WHERE pp.`Year`=final_year AND pp.TotalGrossSalary=pay_freqID AND pp.OrganizationID=OrganizID ORDER BY pp.PayFromDate DESC,pp.PayToDate DESC LIMIT 1 INTO annual_last_date;



UPDATE paystub ps
INNER JOIN
(
    SELECT tmp.*
    ,SUM(tmp.Amount) AS tmpAmount
    ,ps.EmployeeID
    FROM thirteenthmonthpay tmp
    INNER JOIN paystub ps ON ps.RowID=tmp.PaystubID AND ps.OrganizationID=tmp.OrganizationID AND (ps.PayFromDate >= annual_first_date OR ps.PayToDate >= annual_first_date) AND (ps.PayFromDate <= annual_last_date OR ps.PayToDate <= annual_last_date)
    WHERE tmp.OrganizationID=OrganizID
    GROUP BY ps.EmployeeID
) ii ON ii.EmployeeID=ps.EmployeeID
SET ps.TotalGrossSalary = ps.TotalGrossSalary + ii.tmpAmount
,ps.TotalNetSalary = ps.TotalNetSalary + ii.tmpAmount
,ps.ThirteenthMonthInclusion = '1'
WHERE ps.OrganizationID=OrganizID
AND ps.PayPeriodID=PayPeriodRowID
AND ps.ThirteenthMonthInclusion = '0';


END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.reset_auto_increment
DROP PROCEDURE IF EXISTS `reset_auto_increment`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `reset_auto_increment`(IN `_table` VARCHAR(64))
    DETERMINISTIC
BEGIN

DECLARE _stmt VARCHAR(1024);

    SET @SQL := CONCAT('ALTER TABLE ', _table, ' AUTO_INCREMENT =  0');

    PREPARE _stmt FROM @SQL;

    EXECUTE _stmt;

    DEALLOCATE PREPARE _stmt;

    SET GLOBAL event_scheduler = OFF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RESET_employeeleave_duplicate
DROP PROCEDURE IF EXISTS `RESET_employeeleave_duplicate`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `RESET_employeeleave_duplicate`(IN `OrganizID` INT, IN `FromPayDate` DATE, IN `ToPayDate` DATE, IN `Pay_FrequencyType` VARCHAR(50), IN `DivisionRowID` VARCHAR(200))
    DETERMINISTIC
BEGIN

DECLARE atleast_one CHAR(1);

SELECT EXISTS(SELECT RowID FROM employeeleave WHERE OrganizationID=OrganizID AND (LeaveStartDate >= FromPayDate OR LeaveEndDate >= FromPayDate) AND (LeaveStartDate <= ToPayDate OR LeaveEndDate <= ToPayDate) LIMIT 1) INTO atleast_one;

IF atleast_one = '1' THEN

    UPDATE employeetimeentry et
    INNER JOIN payfrequency pf ON pf.PayFrequencyType=Pay_FrequencyType

    INNER JOIN employee e ON e.OrganizationID=et.OrganizationID AND e.PayFrequencyID=pf.RowID
    SET
        et.RegularHoursWorked=0
        ,et.RegularHoursAmount=0
        ,et.TotalHoursWorked=0
        ,et.OvertimeHoursWorked=0
        ,et.OvertimeHoursAmount=0
        ,et.UndertimeHours=0
        ,et.UndertimeHoursAmount=0
        ,et.NightDifferentialHours=0
        ,et.NightDiffHoursAmount=0
        ,et.NightDifferentialOTHours=0
        ,et.NightDiffOTHoursAmount=0
        ,et.HoursLate=0
        ,et.HoursLateAmount=0
        ,et.VacationLeaveHours=0
        ,et.SickLeaveHours=0
        ,et.MaternityLeaveHours=0
        ,et.OtherLeaveHours=0
        ,et.TotalDayPay=0
        ,et.Absent=0
    WHERE et.OrganizationID=OrganizID
    AND et.EmployeeID=e.RowID
    AND et.`Date` BETWEEN FromPayDate AND ToPayDate;

    DELETE FROM employeeleave_duplicate WHERE OrganizationID=OrganizID AND (LeaveStartDate >= FromPayDate OR LeaveEndDate >= FromPayDate) AND (LeaveStartDate <= ToPayDate OR LeaveEndDate <= ToPayDate);

    INSERT INTO employeeleave_duplicate
    (
        RowID
        ,OrganizationID
        ,Created
        ,LeaveStartTime
        ,LeaveType
        ,CreatedBy
        ,LastUpd
        ,LastUpdBy
        ,EmployeeID
        ,LeaveEndTime
        ,LeaveStartDate
        ,LeaveEndDate
        ,Reason
        ,Comments
        ,Image
        ,`Status`
    ) SELECT elv.RowID
        ,elv.OrganizationID
        ,elv.Created
        ,elv.LeaveStartTime
        ,elv.LeaveType
        ,elv.CreatedBy
        ,elv.LastUpd
        ,elv.LastUpdBy
        ,elv.EmployeeID
        ,elv.LeaveEndTime
        ,elv.LeaveStartDate
        ,elv.LeaveEndDate
        ,elv.Reason
        ,elv.Comments
        ,elv.Image
        ,elv.`Status`
    FROM employeeleave elv
    WHERE elv.OrganizationID=OrganizID
    AND (elv.LeaveStartDate >= FromPayDate OR elv.LeaveEndDate >= FromPayDate)
    AND (elv.LeaveStartDate <= ToPayDate OR elv.LeaveEndDate <= ToPayDate);

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_13thmonthpay
DROP PROCEDURE IF EXISTS `RPT_13thmonthpay`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_13thmonthpay`(IN `$organizationID` INT, IN `$dateFrom` Date, IN `$dateTo` Date)
    DETERMINISTIC
BEGIN

DECLARE $endDateFrom DATE;

SET $endDateFrom = (
    SELECT PayFromDate
    FROM payperiod p
    WHERE p.PayToDate = $dateTo AND
        p.OrganizationID = $organizationID);

SELECT
    e.EmployeeID AS DatCol1,
    CONCAT_WS(', ',IF(e.LastName = '', NULL, e.LastName), e.FirstName) AS DatCol2,
    FORMAT(SUM(t.BasicPay), 2) AS DatCol3,
    FORMAT(SUM(t.Amount), 2) AS DatCol4
FROM thirteenthmonthpay t
INNER JOIN paystub p
ON p.RowID = t.PaystubID
INNER JOIN employee e
ON e.RowID = p.EmployeeID AND
    e.OrganizationID = $organizationID AND
    FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
WHERE t.OrganizationID = $organizationID AND
    p.PayFromDate BETWEEN $dateFrom AND $endDateFrom
GROUP BY p.EmployeeID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_13thmonthpayDetailed
DROP PROCEDURE IF EXISTS `RPT_13thmonthpayDetailed`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_13thmonthpayDetailed`(IN `OrganizID` INT, IN `pay_date_from` DATE, IN `pay_date_to` DATE)
    DETERMINISTIC
BEGIN

DECLARE custom_dateformat VARCHAR(50) DEFAULT '%c/%e/%Y';

DECLARE month_count_peryear INT(11) DEFAULT 12;

DECLARE ecola_rowid INT(11);

SELECT p.RowID
FROM product p
WHERE p.OrganizationID=OrganizID
AND p.PartNo='Ecola'
LIMIT 1
INTO ecola_rowid
;

SELECT
e.EmployeeID `DatCol1`
,CONCAT_WS(', ', e.LastName, e.FirstName) `DatCol2`

,CONCAT_WS(' - '
           , DATE_FORMAT(pyp.PayFromDate, custom_dateformat)
           , DATE_FORMAT(pyp.PayToDate, custom_dateformat)) `DatCol3`

,ROUND(ttmp.BasicPay, 2) `DatCol4`
,ttmp.Amount `DatCol5`

,e.EmployeeType `DatCol6`
,esa.BasicPay `DatCol7`
,IFNULL(ea.AllowanceAmount, 0) `DatCol8`

FROM thirteenthmonthpay ttmp
INNER JOIN paystub ps
        ON ps.RowID=ttmp.PaystubID

INNER JOIN employee e
        ON e.RowID=ps.EmployeeID
		     AND e.OrganizationID=ttmp.OrganizationID
		     AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0

INNER JOIN employeesalary esa
        ON esa.EmployeeID=e.RowID
           AND (esa.EffectiveDateFrom >= pay_date_from OR IFNULL(esa.EffectiveDateTo, ADDDATE(esa.EffectiveDateFrom, INTERVAL 99 YEAR)) >= pay_date_from)
           AND (esa.EffectiveDateFrom <= pay_date_to OR IFNULL(esa.EffectiveDateTo, ADDDATE(esa.EffectiveDateFrom, INTERVAL 99 YEAR)) <= pay_date_to)

INNER JOIN payperiod pyp
        ON pyp.RowID=ps.PayPeriodID
		     AND pyp.OrganizationID=ttmp.OrganizationID
		     AND (pyp.PayFromDate >= pay_date_from OR pyp.PayToDate >= pay_date_from)
		     AND (pyp.PayFromDate <= pay_date_to OR pyp.PayToDate <= pay_date_to)
		     
LEFT JOIN employeeallowance ea
       ON ea.EmployeeID=e.RowID
          AND ea.OrganizationID=e.OrganizationID
          AND (ea.EffectiveStartDate >= pay_date_from OR ea.EffectiveEndDate >= pay_date_from)
          AND (ea.EffectiveStartDate <= pay_date_to OR ea.EffectiveEndDate <= pay_date_to)
          AND ea.ProductID=ecola_rowid

WHERE ttmp.OrganizationID=OrganizID
GROUP BY ps.RowID
ORDER BY CONCAT(e.LastName, e.FirstName), pyp.Year, pyp.OrdinalValue
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_AgencyFee
DROP PROCEDURE IF EXISTS `RPT_AgencyFee`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `RPT_AgencyFee`(IN `OrganizID` INT, IN `FromPayDate` DATE, IN `ToPayDate` DATE)
    DETERMINISTIC
BEGIN

DECLARE OT_RowID INT(11);

DECLARE Holiday_ID INT(11);

DECLARE Ecola_ID INT(11);


SET @anyint = 0.0;

SELECT p1.RowID
,p2.RowID
,p3.RowID
FROM product p1
INNER JOIN product p2 ON p2.PartNo='Holiday pay' AND p2.OrganizationID=OrganizID
INNER JOIN product p3 ON p3.PartNo='Ecola' AND p3.OrganizationID=OrganizID
WHERE p1.PartNo='Overtime'
AND p1.OrganizationID=OrganizID
INTO OT_RowID
        ,Holiday_ID
        ,Ecola_ID;

SELECT d.Name
, e.EmployeeID
, GET_employeerateperday(e.RowID,OrganizID,ToPayDate) AS DailyRate
, CONCAT(e.LastName,',',e.FirstName, IF(e.MiddleName='','',','),INITIALS(e.MiddleName,'. ','1')) 'Fullname'
, SUM(agf.DailyFee)
, (SELECT @anyint := COMPUTE_TimeDifference(sh.TimeFrom,sh.TimeTo)) AS ShiftTimeDiff
, (SELECT IF(@anyint IN (4,5), @anyint, (SELECT @anyint := @anyint - 1))) AS ShiftTimeDiffLessBreak
, SUM((SELECT ete.RegularHoursWorked / @anyint)) AS RegularDays
, SUM(ete.RegularHoursAmount) AS RegularHoursAmount
, SUM(ete.OvertimeHoursWorked) AS OvertimeHoursWorked
, psi.PayAmount AS OvertimeHoursAmount
, psi2.PayAmount AS HolidayPay
, psi3.PayAmount AS EcolaAmount
FROM agencyfee agf
INNER JOIN `division` d ON d.RowID=agf.DivisionID
INNER JOIN employee e ON e.RowID=agf.EmployeeID AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
INNER JOIN employeetimeentry ete ON ete.RowID=agf.TimeEntryID
INNER JOIN employeeshift esh ON esh.RowID=ete.EmployeeShiftID AND esh.RestDay='0'
INNER JOIN shift sh ON sh.RowID=esh.ShiftID

INNER JOIN (SELECT RowID,EmployeeID FROM paystub WHERE OrganizationID=OrganizID AND (PayFromDate >= FromPayDate OR PayToDate >= FromPayDate) AND (PayFromDate <= ToPayDate OR PayToDate <= ToPayDate)) ps ON ps.EmployeeID=agf.EmployeeID

INNER JOIN paystubitem psi ON psi.ProductID=OT_RowID AND psi.OrganizationID=OrganizID AND psi.PayStubID IN (ps.RowID)

INNER JOIN paystubitem psi2 ON psi2.ProductID=Holiday_ID AND psi2.OrganizationID=OrganizID AND psi2.PayStubID IN (ps.RowID)

INNER JOIN paystubitem psi3 ON psi3.ProductID=Ecola_ID AND psi3.OrganizationID=OrganizID AND psi3.PayStubID IN (ps.RowID)

WHERE agf.OrganizationID=OrganizID
AND agf.TimeEntryDate BETWEEN FromPayDate AND ToPayDate
GROUP BY agf.EmployeeID;





END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_AlphaListempdependents
DROP PROCEDURE IF EXISTS `RPT_AlphaListempdependents`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_AlphaListempdependents`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT
ed.ParentEmployeeID
,ed.FirstName
,CONCAT(IF(ed.MiddleName = '', '', ' '),INITIALS(ed.MiddleName,'.','1')) MiddleName
,IF(ed.LastName = '', ed.LastName, CONCAT(' ',ed.LastName)) LastName
,DATE_FORMAT(ed.Birthdate,'%m%d%Y') Birthdate
FROM employeedependents ed
WHERE ed.OrganizationID=OrganizID
AND ed.ActiveFlag='Y';

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_AlphaListemployee
DROP PROCEDURE IF EXISTS `RPT_AlphaListemployee`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_AlphaListemployee`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT e.RowID
,e.EmployeeID 'EmployeeID'
,UPPER(e.LastName) LastName
,UPPER(e.FirstName) FirstName
,IF(e.MiddleName = '', e.MiddleName, UPPER(e.MiddleName)) MiddleName
,REPLACE(e.TINNo,'-',' ') TINNo
,e.HomeAddress
,e.StartDate
,e.TerminationDate
,DATE_FORMAT(e.Birthdate,'%m%d%Y') Birthdate
,e.MobilePhone
,IF(e.MaritalStatus = 'Single', 'N', 'Y') AS ExemptionStatus
,e.EmployeeType
,e.EmploymentStatus
,fs.FilingStatus AS 'ExemptionCode'
,e.WorkDaysPerYear WorkDaysPerYear
,sa.BasicPay
FROM employee e
LEFT JOIN filingstatus fs
ON fs.MaritalStatus = e.MaritalStatus AND e.NoOfDependents = fs.Dependent
LEFT JOIN employeesalary sa
ON sa.RowID = (
    SELECT salid.RowID
    FROM employeesalary salid
    WHERE salid.EmployeeID = e.RowID
    ORDER BY salid.RowID
    LIMIT 1
)
WHERE e.OrganizationID=OrganizID
AND e.AlphaListExempted='0'
AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_AlphaListemppreviousemployer
DROP PROCEDURE IF EXISTS `RPT_AlphaListemppreviousemployer`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_AlphaListemppreviousemployer`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN



SELECT
epe.EmployeeID
,epe.TINNo
,epe.Name
,epe.BusinessAddress
FROM employeepreviousemployer epe
WHERE epe.OrganizationID=OrganizID
GROUP BY epe.EmployeeID
ORDER BY DATE(SUBSTRING_INDEX(epe.ExperienceFromTo,'@',1)) DESC,DATE(SUBSTRING_INDEX(epe.ExperienceFromTo,'@',-1)) DESC;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_AnnualizedWithholdingTax
DROP PROCEDURE IF EXISTS `RPT_AnnualizedWithholdingTax`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_AnnualizedWithholdingTax`(IN `OrganizID` INT, IN `AnnualDateFrom` DATE, IN `AnnualDateTo` DATE, IN `IsActual` CHAR(1))
    DETERMINISTIC
BEGIN

DECLARE allowance_catID INT(11);

DECLARE bonus_catID INT(11);

DECLARE lastDateOfYear DATE;

DECLARE orgworkdaysofyear INT(11);

SELECT RowID FROM category WHERE CategoryName='Allowance Type' AND OrganizationID=OrganizID INTO allowance_catID;

SELECT RowID FROM category WHERE CategoryName='Bonus' AND OrganizationID=OrganizID INTO bonus_catID;

SELECT WorkDaysPerYear FROM organization WHERE RowID=OrganizID INTO orgworkdaysofyear;

SET lastDateOfYear = LAST_DAY(CONCAT(YEAR(CURDATE()),'-12-01'));



SELECT
ps.RowID
,ps.OrganizationID
,ps.Created
,ps.CreatedBy
,ps.LastUpd
,ps.LastUpdBy
,ps.PayPeriodID
,ps.EmployeeID
,ps.TimeEntryID
,ps.PayFromDate
,ps.PayToDate
,SUM(IFNULL(pst5.PayAmount,0)) AS TotalGrossSalary
,SUM(IFNULL(pst6.PayAmount,0)) AS TotalNetSalary
,SUM(IFNULL(pst7.PayAmount,0)) AS TotalTaxableSalary
,ps.TotalEmpSSS
,ps.TotalEmpWithholdingTax
,ps.TotalCompSSS
,ps.TotalEmpPhilhealth
,ps.TotalCompPhilhealth
,ps.TotalEmpHDMF
,ps.TotalCompHDMF
,ps.TotalVacationDaysLeft
,ps.TotalUndeclaredSalary
,ps.TotalLoans
,ps.TotalBonus
,ps.TotalAllowance
,ps.TotalAdjustments
,IFNULL((SELECT SUM(PayAmount) FROM v_sumpsitaxableallowance WHERE PayStubID=ps.RowID AND Taxable='0' AND CategoryID=allowance_catID),0) AS AllowanceNoTax
,IFNULL((SELECT SUM(PayAmount) FROM v_sumpsitaxableallowance WHERE PayStubID=ps.RowID AND Taxable='1' AND CategoryID=allowance_catID),0) AS AllowanceYesTax
,50000 AS PersonalExemption
,(e.NoOfDependents * 25000) AS AdditionalPersonalExemption
,30000 AS DeMinimisExemption
,SUM(IFNULL(pst.PayAmount,0)) AS HolidayPay
,SUM(IFNULL(pst1.PayAmount,0)) AS OvertimePay
,SUM(IFNULL(pst1.PayAmount,0)) AS TotalOverTime
,SUM(IFNULL(pst2.PayAmount,0)) AS NightDiffPay
,SUM(IFNULL(pst4.PayAmount,0)) AS NightDiffOT
,IFNULL((SELECT SUM(ete.TotalDayPay) FROM employeetimeentry ete WHERE ete.OrganizationID=OrganizID AND ete.EmployeeID=ps.EmployeeID AND ete.`Date` BETWEEN ps.PayFromDate AND ps.PayToDate) * IF(IsActual = '0', 1, (GET_employeeundeclaredsalarypercent(ps.EmployeeID,OrganizID,ps.PayFromDate,ps.PayToDate) + 1)),0) AS TotalDayPay
,GET_employeeundeclaredsalarypercent(ps.EmployeeID,OrganizID,ps.PayFromDate,ps.PayToDate) AS employeeundeclaredsalarypercent
FROM paystub ps
INNER JOIN employee e ON e.RowID=ps.EmployeeID AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0









INNER JOIN product pd ON pd.OrganizationID=OrganizID AND pd.PartNo='Holiday pay'
LEFT JOIN paystubitem pst ON pst.PayStubID=ps.RowID AND pst.ProductID=pd.RowID AND pst.Undeclared=IsActual

INNER JOIN product pd1 ON pd1.OrganizationID=OrganizID AND pd1.PartNo='Overtime'
LEFT JOIN paystubitem pst1 ON pst1.PayStubID=ps.RowID AND pst1.ProductID=pd1.RowID AND pst1.Undeclared=IsActual

INNER JOIN product pd2 ON pd2.OrganizationID=OrganizID AND pd2.PartNo='Night differential'
LEFT JOIN paystubitem pst2 ON pst2.PayStubID=ps.RowID AND pst2.ProductID=pd2.RowID AND pst2.Undeclared=IsActual

INNER JOIN product pd3 ON pd3.OrganizationID=OrganizID AND pd3.PartNo='Undertime'
LEFT JOIN paystubitem pst3 ON pst3.PayStubID=ps.RowID AND pst3.ProductID=pd3.RowID AND pst3.`Undeclared`=IsActual

INNER JOIN product pd4 ON pd4.OrganizationID=OrganizID AND pd4.PartNo='Night differential OT'
LEFT JOIN paystubitem pst4 ON pst4.PayStubID=ps.RowID AND pst4.ProductID=pd4.RowID AND pst4.`Undeclared`=IsActual

INNER JOIN product pd5 ON pd5.OrganizationID=OrganizID AND pd5.PartNo='Gross Income'
LEFT JOIN paystubitem pst5 ON pst5.PayStubID=ps.RowID AND pst5.ProductID=pd5.RowID AND pst5.`Undeclared`=IsActual

INNER JOIN product pd6 ON pd6.OrganizationID=OrganizID AND pd6.PartNo='Net Income'
LEFT JOIN paystubitem pst6 ON pst6.PayStubID=ps.RowID AND pst6.ProductID=pd6.RowID AND pst6.`Undeclared`=IsActual

INNER JOIN product pd7 ON pd7.OrganizationID=OrganizID AND pd7.PartNo='Taxable Income'
LEFT JOIN paystubitem pst7 ON pst7.PayStubID=ps.RowID AND pst7.ProductID=pd7.RowID AND pst7.`Undeclared`=IsActual

INNER JOIN product pd8 ON pd8.OrganizationID=OrganizID AND pd8.PartNo='Withholding Tax'
LEFT JOIN paystubitem pst8 ON pst8.PayStubID=ps.RowID AND pst8.ProductID=pd8.RowID AND pst8.`Undeclared`=IsActual

WHERE ps.OrganizationID=OrganizID
AND (AnnualDateFrom <= ps.PayFromDate OR AnnualDateFrom <= ps.PayToDate)
AND (AnnualDateTo >= ps.PayFromDate OR AnnualDateTo >= ps.PayToDate)
GROUP BY ps.RowID;




END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_AttendanceDeduction
DROP PROCEDURE IF EXISTS `RPT_AttendanceDeduction`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_AttendanceDeduction`(IN `og_rowid` INT, IN `date_from` DATE, IN `date_to` DATE, IN `emp_rowid` INT)
    DETERMINISTIC
BEGIN

DECLARE mins_per_hour INT(11) DEFAULT 60;

SELECT
e.EmployeeType `DatCol1`
,dv.Name `DatCol2`

,(@mid_init := LEFT(e.MiddleName, 1)) `MiddleInit`

,CONCAT_WS(', ', e.LastName, e.FirstName, IF(LENGTH(@mid_init) = 0, NULL, CONCAT(@mid_init, '.'))) `DatCol3`

, ROUND(SUM(et.Absent), 2) `DatCol5`
, ROUND(SUM(et.HoursLateAmount), 2) `DatCol7`
, ROUND(SUM(et.UndertimeHoursAmount), 2) `DatCol9`
 
, SUM( (et.Absent > 0) ) `DatCol4`
, ROUND(SUM( (et.HoursLate * mins_per_hour) ), 2) `DatCol6`
, ROUND(SUM(et.UndertimeHours), 2) `DatCol8`
 
FROM employeetimeentry et
INNER JOIN employee e
        ON e.RowID=et.EmployeeID
		     AND e.OrganizationID=et.OrganizationID
		     AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
			  AND e.EmploymentStatus = 'Regular'
			  AND e.AgencyID IS NULL
INNER JOIN `position` pos
        ON pos.RowID=e.PositionID
           AND pos.OrganizationID=e.OrganizationID
INNER JOIN division dv
        ON dv.RowID=pos.DivisionId
WHERE et.OrganizationID=og_rowid
AND et.`Date` BETWEEN date_from AND date_to
AND (et.Absent + et.HoursLateAmount + et.UndertimeHoursAmount) > 0

GROUP BY e.RowID

ORDER BY FIELD(e.EmployeeType, 'Daily', 'Monthly', 'Fixed')
         ,dv.Name
         ,CONCAT(e.LastName, e.FirstName, e.MiddleName)
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_attendance_sheet
DROP PROCEDURE IF EXISTS `RPT_attendance_sheet`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_attendance_sheet`(IN `OrganizationID` INT, IN `FromDate` DATE, IN `ToDate` DATE)
    DETERMINISTIC
BEGIN

SELECT
CONCAT_WS(' / ', ee.EmployeeID, CONCAT_WS(',', ee.LastName, ee.FirstName, INITIALS(ee.MiddleName,'. ','1'))) `DatCol1`
, UCASE(SUBSTRING(DATE_FORMAT(ete.Date,'%W'),1,3)) `DatCol2`
, DATE_FORMAT(ete.Date,'%m/%e/%y') `DatCol3`
, IFNULL(CONCAT(TIME_FORMAT(sh.TimeFrom,'%l'), IF(TIME_FORMAT(sh.TimeFrom,'%i') > 0, CONCAT(':', TIME_FORMAT(sh.TimeFrom,'%i')),''),'to', TIME_FORMAT(sh.TimeTo,'%l'), IF(TIME_FORMAT(sh.TimeTo,'%i') > 0, CONCAT(':', TIME_FORMAT(sh.TimeTo,'%i')),'')),'') `DatCol4`
,REPLACE(TIME_FORMAT(etd.TimeIn,'%l:%i %p'),'M','') `DatCol5`
,'' AS `DatCol6`
,'' AS `DatCol7`
,REPLACE(TIME_FORMAT(etd.TimeOut,'%l:%i %p'),'M','') `DatCol8`
, IFNULL(ete.RegularHoursWorked,0) `DatCol9`
, IFNULL(ete.HoursLate,0) `DatCol10`
, IFNULL(ete.UndertimeHours,0) `DatCol11`
, IFNULL(ete.NightDifferentialHours,0) `DatCol12`
, IFNULL(ete.OvertimeHoursWorked,0) `DatCol13`
, IFNULL(ete.NightDifferentialOTHours,0) `DatCol14`
,etd.TimeScheduleType `DatCol15`
FROM employeetimeentry ete
LEFT JOIN employeeshift esh ON esh.RowID=ete.EmployeeShiftID
LEFT JOIN shift sh ON sh.RowID=esh.ShiftID
LEFT JOIN employeetimeentrydetails etd ON etd.EmployeeID=ete.EmployeeID AND etd.OrganizationID=ete.OrganizationID AND etd.Date=ete.Date
LEFT JOIN employee ee ON ee.RowID=ete.EmployeeID AND FIND_IN_SET(ee.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
WHERE ete.DATE BETWEEN FromDate AND ToDate AND
    ete.OrganizationID=OrganizationID
GROUP BY ete.RowID
ORDER BY ete.Date,ee.LastName;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_BIR2316
DROP PROCEDURE IF EXISTS `RPT_BIR2316`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_BIR2316`(IN `OrganizID` INT, IN `paramDateFrom` DATE, IN `paramDateTo` DATE)
    DETERMINISTIC
BEGIN

SELECT e.RowID
,IFNULL(REPLACE(e.TINNo,'-',' '),'') 'EmployeeTIN'
,CONCAT(e.LastName,', ',e.FirstName,IF(e.MiddleName='','',CONCAT(', ',e.MiddleName))) 'EmployeeFullName'
,e.HomeAddress
,DATE_FORMAT(e.Birthdate,'%m%d%Y') 'Birthdate'
,e.HomePhone
,e.MaritalStatus
,IFNULL(REPLACE(og.TINNo,'-',' '),'') 'og_TIN'
,og.Name
,CONCAT(ad.StreetAddress1,IF_NOT_EMPTY_STRING(ad.StreetAddress2,CONCAT(', ',ad.StreetAddress2)),IF_NOT_EMPTY_STRING(ad.Barangay,CONCAT(', ',ad.Barangay)),IF_NOT_EMPTY_STRING(ad.CityTown,CONCAT(', ',ad.CityTown)),IF_NOT_EMPTY_STRING(ad.State,CONCAT(', ',ad.State)),IF_NOT_EMPTY_STRING(ad.Country,CONCAT(', ',ad.Country))) 'FullAddress'
,ad.ZipCode
FROM employee e
LEFT JOIN employeesalary es ON es.EmployeeID=e.RowID
LEFT JOIN paystub ps ON ps.EmployeeID=e.RowID
LEFT JOIN paystubitem psi ON psi.PayStubID=ps.RowID
LEFT JOIN organization og ON og.RowID=e.OrganizationID
LEFT JOIN address ad ON ad.RowID=og.PrimaryAddressID
WHERE e.OrganizationID=OrganizID
AND e.EmploymentStatus NOT IN ('Resigned','Terminated')
GROUP BY e.RowID
ORDER BY e.LastName,e.FirstName,e.MiddleName;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_employeeidhistory
DROP PROCEDURE IF EXISTS `RPT_employeeidhistory`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_employeeidhistory`(IN `og_rowid` INT)
BEGIN

SELECT i.EmployeeRowID `DatCol1`
, (@mid_init := LEFT(i.MiddleName, 1)) `MiddleInitial`
, CONCAT_WS(', ', i.LastName, i.FirstName, IF(LENGTH(@mid_init) = 0, NULL, CONCAT(@mid_init, '.'))) `DatCol2`
, i.NewValue `DatCol3`
, i.ActionPerformed `DatCol4`
, '' `DatCol50`
FROM employeeidhistory i
WHERE i.OrganizationID = og_rowid
ORDER BY CONCAT(i.LastName, i.FirstName, i.MiddleName)
         , i.Created
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_EmployeeOffenses
DROP PROCEDURE IF EXISTS `RPT_EmployeeOffenses`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_EmployeeOffenses`(IN `organizationID` INT, IN `dateFrom` DATE, IN `dateTo` DATE)
    DETERMINISTIC
BEGIN

SELECT
    ee.EmployeeID `DatCol1`,
    CONCAT(ee.LastName, ', ', ee.FirstName, ' ', INITIALS(ee.MiddleName)) `DatCol2`,
    act.DateFrom `DatCol3`,
    act.DateTo `DatCol4`,
    p.PartNo `DatCol5`,
    act.FindingDescription `DatCol6`,
    act.Action `DatCol7`,
    act.Penalty `DatCol8`,
    act.Comments `DatCol9`
FROM employeedisciplinaryaction act
INNER JOIN product p
ON p.RowID = act.FindingID
INNER JOIN employee ee
ON ee.RowID = act.EmployeeID
AND FIND_IN_SET(ee.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
WHERE act.OrganizationID = organizationID AND
    act.Created BETWEEN dateFrom AND dateTo;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_employment_record
DROP PROCEDURE IF EXISTS `RPT_employment_record`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_employment_record`(IN `OrganizatID` INT)
    DETERMINISTIC
BEGIN

DECLARE custom_dateformat VARCHAR(50) DEFAULT '%c/%e/%Y';

SELECT
e.EmployeeID `DatCol1`
,CONCAT_WS(', ', e.LastName, e.FirstName, e.MiddleName) `DatCol2`
,pe.Name `DatCol3`
,pe.JobFunction `DatCol4`

,(@date_from := SUBSTRING_INDEX(pe.ExperienceFromTo, '@', 1))
,(@date_to := SUBSTRING_INDEX(pe.ExperienceFromTo, '@', -1))

,DATE_FORMAT(@date_from, custom_dateformat) `DatCol5`
,DATE_FORMAT(@date_to, custom_dateformat) `DatCol6`

FROM employeepreviousemployer pe
INNER JOIN employee e
        ON e.RowID=pe.EmployeeID AND e.OrganizationID=pe.OrganizationID
        AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
WHERE pe.OrganizationID=OrganizatID
ORDER BY CONCAT(e.LastName, e.FirstName)
         ,STR_TO_DATE(@date_from, @@date_format) DESC
         ,STR_TO_DATE(@date_to, @@date_format) DESC
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_FiledLeave
DROP PROCEDURE IF EXISTS `RPT_FiledLeave`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_FiledLeave`(
    IN `OrganizationID` INT,
    IN `PayDateFrom` DATE,
    IN `PayDateTo` DATE
)
BEGIN

DECLARE defaultWorkHour INT(11) DEFAULT 8;

SET @leaveHours = 0.00;

SELECT emp.RowID AS `DatCol1`,
       emp.EmployeeID AS `DatCol2`,
       CONCAT_WS(', ', emp.LastName, emp.FirstName, SUBSTR(emp.MiddleName, 1, 1)) AS `DatCol3`,
       DAYNAME(ete.`Date`) AS `DatCol11`,
       DATE_FORMAT(ete.`Date`, '%m/%d/%Y') AS `DatCol12`,
       lev.LeaveType AS `DatCol13`,
       @leaveHours := (IFNULL(ete.SickLeaveHours, 0)
		                 + IFNULL(ete.VacationLeaveHours, 0)
		                 + IFNULL(ete.OtherLeaveHours, 0)) AS `DatCol14`,
       (@leaveHours / defaultWorkHour) `DatCol15`,
       lev.Reason AS `DatCol16`
FROM employee emp
INNER JOIN employeeleave lev
        ON lev.EmployeeID = emp.RowID
INNER JOIN employeetimeentry ete
        ON ete.`Date` BETWEEN lev.LeaveStartDate AND lev.LeaveEndDate
           AND ete.EmployeeID = lev.EmployeeID
INNER JOIN employeeshift esh
        ON esh.RowID=ete.EmployeeShiftID
INNER JOIN shift sh
        ON sh.RowID=esh.ShiftID
WHERE emp.OrganizationID = OrganizationID AND
      lev.LeaveStartDate BETWEEN PayDateFrom AND PayDateTo
		# AND FIND_IN_SET(emp.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
		AND (IFNULL(ete.SickLeaveHours, 0)
		     + IFNULL(ete.VacationLeaveHours, 0)
			  + IFNULL(ete.OtherLeaveHours, 0)) != 0
ORDER BY CONCAT(emp.LastName,emp.FirstName), ete.`Date`
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_filed_leaves
DROP PROCEDURE IF EXISTS `RPT_filed_leaves`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_filed_leaves`(
	IN `org_rowid` INT,
	IN `emp_rowid` INT,
	IN `date_from` DATE,
	IN `date_to` DATE
)
BEGIN

DECLARE leave_prodids TEXT;

DECLARE yeartofollow INT(11);

DECLARE remarks TEXT;

DECLARE custom_dateformat TEXT DEFAULT '%c/%e/%Y';

SELECT GROUP_CONCAT(p.RowID)
FROM product p
WHERE p.`Category`='Leave type'
AND p.OrganizationID=org_rowid
AND p.PartNo IN ('Vacation leave', 'Sick leave', 'Additional VL')
INTO leave_prodids;

SELECT MAX(pp.`Year`)
FROM payperiod pp
INNER JOIN dates d ON d.DateValue BETWEEN date_from AND date_to
WHERE pp.OrganizationID = org_rowid
AND d.DateValue BETWEEN pp.PayFromDate AND pp.PayToDate
AND pp.TotalGrossSalary = 1
INTO yeartofollow;

SELECT CONCAT('BALANCE AS OF ', DATE_FORMAT(MAX(pp.PayToDate), custom_dateformat)) `Remarks`
FROM payperiod pp
WHERE pp.OrganizationID = org_rowid
AND pp.TotalGrossSalary = 1
AND date_to BETWEEN pp.PayFromDate AND pp.PayToDate
INTO remarks;

SELECT
et.RowID
, DATE_FORMAT(et.`Date`, custom_dateformat) `Date`
,et.EmployeeShiftID
# ,et.EmployeeID
,e.EmployeeID
,et.EmployeeSalaryID
,et.EmployeeFixedSalaryFlag
,et.RegularHoursWorked
,et.RegularHoursAmount
,et.TotalHoursWorked
,et.OvertimeHoursWorked
,et.OvertimeHoursAmount
,et.UndertimeHours
,et.UndertimeHoursAmount
,et.NightDifferentialHours
,et.NightDiffHoursAmount
,et.NightDifferentialOTHours
,et.NightDiffOTHoursAmount
,et.HoursLate
,et.HoursLateAmount
,et.LateFlag
,et.PayRateID
,et.VacationLeaveHours
,et.SickLeaveHours
,et.MaternityLeaveHours
,et.OtherLeaveHours
,et.AdditionalVLHours
,et.TotalDayPay
,et.Absent
,et.TaxableDailyAllowance
,et.HolidayPayAmount
,et.TaxableDailyBonus
,et.NonTaxableDailyBonus
,et.IsValidForHolidayPayment

, e.EmployeeID
, PROPERCASE(CONCAT_WS(', ', e.LastName, e.FirstName)) `FullName`
, e.LeaveAllowance
, e.SickLeaveAllowance
, e.AdditionalVLAllowance

, (e.LeaveAllowance
   + e.SickLeaveAllowance
   + e.AdditionalVLAllowance) `TotalLeave`

, remarks `Remarks`
FROM employeetimeentry et

INNER JOIN employee e
        ON e.RowID=et.EmployeeID
		     AND e.RowID = IFNULL(emp_rowid, e.RowID)
		     AND e.OrganizationID = et.OrganizationID
		     AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
			  AND (e.DateRegularized BETWEEN date_from AND date_to
				    OR (e.DateRegularized <= date_from
					     OR e.DateRegularized <= date_to)
					 )

INNER JOIN payperiod pp ON pp.TotalGrossSalary=e.PayFrequencyID AND pp.OrganizationID=e.OrganizationID AND pp.`Year` = yeartofollow AND et.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate

INNER JOIN paystub ps ON ps.OrganizationID=e.OrganizationID AND ps.EmployeeID=e.RowID AND ps.PayPeriodID=pp.RowID
INNER JOIN paystubitem psi ON psi.PayStubID = ps.RowID AND FIND_IN_SET(psi.ProductID, leave_prodids) > 0
WHERE et.OrganizationID = org_rowid
AND et.`Date` BETWEEN date_from AND date_to
# AND (et.VacationLeaveHours + et.SickLeaveHours + et.OtherLeaveHours + et.AdditionalVLHours) > 0
AND (et.VacationLeaveHours + et.SickLeaveHours + et.AdditionalVLHours) > 0
GROUP BY et.RowID
ORDER BY CONCAT(e.LastName, e.FirstName), et.`Date`
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_getGrossCompensation
DROP PROCEDURE IF EXISTS `RPT_getGrossCompensation`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_getGrossCompensation`(IN `OrganizID` INT, IN `LastDateOfFinancialYear` DATE, IN `FirstDateOfFinancialYear` DATE)
    DETERMINISTIC
BEGIN

DECLARE lastDateOfYear DATE;

DECLARE orgworkdaysofyear INT(11);

DECLARE allowance_catID INT(11);

SELECT WorkDaysPerYear FROM organization WHERE RowID=OrganizID INTO orgworkdaysofyear;

SET lastDateOfYear = MAKEDATE(YEAR(LastDateOfFinancialYear), DAYOFYEAR(LAST_DAY(CONCAT(YEAR(CURDATE()),'-12-01'))));

SELECT RowID FROM category WHERE CategoryName='Allowance Type' AND OrganizationID=OrganizID INTO allowance_catID;






SELECT es.*
,IF(e.EmployeeType = 'Fixed', (es.Salary * 12), IF(e.EmployeeType = 'Daily', (es.BasicPay * GET_OrgProRatedCountOfDays(orgworkdaysofyear, es.EffectiveDateFrom, IFNULL(es.EffectiveDateTo,LastDateOfFinancialYear), eal.AllowanceFrequency)), (((es.BasicPay * 8) * orgworkdaysofyear) / 12) * 12)) AS TotalGrossCompensation
,IFNULL((pss.EmployeeContributionAmount * 12),0) AS EmployeeContributionAmount
,(phh.EmployeeShare * 12) AS EmployeeShare
,(es.HDMFAmount) * 12 AS HDMFAmount
    , IFNULL((
    SELECT SUM(IFNULL(tmp.Amount,0))
    FROM v_sumthirteenthmonthpay tmp
    WHERE tmp.OrganizationID=OrganizID AND tmp.EmployeeID=es.EmployeeID AND (GET_paytodatepayperiod(OrganizID,FirstDateOfFinancialYear,e.PayFrequencyID) <= tmp.PayFromDate OR GET_paytodatepayperiod(OrganizID,FirstDateOfFinancialYear,e.PayFrequencyID) <= tmp.PayToDate) AND (GET_paytodatepayperiod(OrganizID,LastDateOfFinancialYear,e.PayFrequencyID) >= tmp.PayFromDate OR GET_paytodatepayperiod(OrganizID,LastDateOfFinancialYear,e.PayFrequencyID) >= tmp.PayToDate)),0) AS ThirteenthMonthPay
,SUM(eal.TotalAllowance) AS TotalAllowance
FROM employeesalary es
LEFT JOIN employee e ON e.RowID=es.EmployeeID AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
LEFT JOIN paysocialsecurity pss ON pss.RowID=es.PaySocialSecurityID
LEFT JOIN payphilhealth phh ON phh.RowID=es.PayPhilhealthID
LEFT JOIN (SELECT ea.*
                ,IF(ea.AllowanceFrequency='Daily', ea.AllowanceAmount * GET_OrgProRatedCountOfDays(orgworkdaysofyear, ea.EffectiveStartDate, ea.EffectiveEndDate, ea.AllowanceFrequency), IF(ea.AllowanceFrequency='Semi-monthly', ea.AllowanceAmount * 24, IF(ea.AllowanceFrequency='Monthly', ea.AllowanceAmount * 12, ea.AllowanceAmount))) AS TotalAllowance
                FROM employeeallowance ea
                WHERE OrganizationID=OrganizID
                AND (FirstDateOfFinancialYear <= ea.EffectiveStartDate OR FirstDateOfFinancialYear <= ea.EffectiveEndDate)
                AND (LastDateOfFinancialYear >= ea.EffectiveStartDate OR LastDateOfFinancialYear >= ea.EffectiveEndDate)) eal ON eal.EmployeeID=es.EmployeeID
WHERE es.OrganizationID=OrganizID
AND (FirstDateOfFinancialYear <= es.EffectiveDateFrom OR FirstDateOfFinancialYear <= IFNULL(es.EffectiveDateTo,FirstDateOfFinancialYear))
AND (LastDateOfFinancialYear >= es.EffectiveDateFrom OR LastDateOfFinancialYear >= IFNULL(es.EffectiveDateTo,LastDateOfFinancialYear))
GROUP BY es.EmployeeID;





END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_LeaveConvertibles
DROP PROCEDURE IF EXISTS `RPT_LeaveConvertibles`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_LeaveConvertibles`(
	IN `orgId` INT,
	IN `leaveTypeId` INT,
	IN `payPeriodFromId` INT,
	IN `payPeriodToId` INT,
	IN `employeePrimId` INT




)
BEGIN

DECLARE defaultWorkHour INT(11) DEFAULT 8;

SET SESSION group_concat_max_len = 2048;

SET @ids = NULL;

IF IFNULL(payPeriodFromId, 0) = 0 OR payPeriodFromId = payPeriodToId THEN

	SET @ids = (SELECT GROUP_CONCAT(pp.RowID)
					FROM payperiod pp
					INNER JOIN payperiod ppd ON ppd.RowID = payPeriodToId
					WHERE pp.OrganizationID=ppd.OrganizationID
					AND pp.TotalGrossSalary=ppd.TotalGrossSalary
					AND pp.PayFromDate >= SUBDATE(ppd.PayToDate, INTERVAL 12 MONTH)
					AND pp.PayToDate <= ppd.PayToDate);

ELSEIF payPeriodFromId IS NOT NULL AND payPeriodToId IS NOT NULL THEN

	SELECT
		GROUP_CONCAT(pp.RowID) `Ids`
	FROM payperiod pp
		INNER JOIN payperiod ppf ON ppf.RowID=payPeriodFromId
		INNER JOIN payperiod ppt ON ppt.RowID=payPeriodToId
	WHERE (pp.PayFromDate >= ppf.PayFromDate OR pp.PayToDate >= ppf.PayFromDate)
			AND (pp.PayFromDate <= ppt.PayToDate OR pp.PayToDate <= ppt.PayToDate)
			AND pp.OrganizationID=orgId
	ORDER BY pp.`Year`, pp.OrdinalValue
	INTO @ids
	;

END IF;

SET @dailyRate = 0.00;

IF employeePrimId IS NULL THEN

	IF leaveTypeId IS NULL THEN

		SELECT lll.*
		, i.`EmployeeNo`
		, CONCAT_WS(', ', i.LastName, i.FirstName) `FullName`
		, (@dailyRate := GetActualDailyRate(lll.EmployeeID, orgId, lll.PayToDate)) `ActualDailyRate`
		, (@dailyRate / defaultWorkHour) `HourlyRate`
		FROM latestleaveledger lll
		INNER JOIN (SELECT ll.*
						
						#, p.PartNo `LeaveType`
						
						, lt.TransactionDate
						, lt.ReferenceID
						, lt.Balance
						, lt.Amount
						, lt.PayPeriodID
						, pp.PayFromDate, pp.PayToDate, pp.OrdinalValue
						
						, e.EmployeeID `EmployeeNo`
						, e.LastName
						, e.FirstName
						, e.MiddleName
						
						, MAX(pp.PayToDate) `MaxPayToDate`
						FROM leaveledger ll
						INNER JOIN employee e ON e.RowID=ll.EmployeeID
						INNER JOIN product p
						        ON p.RowID=ll.ProductID
								     AND p.PartNo IN ('Sick Leave', 'Vacation Leave')
								     AND p.RowID = leaveTypeId
						INNER JOIN leavetransaction lt
						        ON lt.LeaveLedgerID=ll.RowID
						INNER JOIN payperiod pp
						        ON pp.RowID=lt.PayPeriodID
						AND FIND_IN_SET(pp.RowID, @ids) > 0
						GROUP BY ll.EmployeeID, ll.ProductID
						) i
		
		WHERE lll.EmployeeID=i.EmployeeID
		AND lll.PayToDate=i.`MaxPayToDate`
		ORDER BY CONCAT(i.LastName, i.FirstName, i.MiddleName)
		;

	ELSE 

		SELECT lll.*
		, i.`EmployeeNo`
		, CONCAT_WS(', ', i.LastName, i.FirstName) `FullName`
		, (@dailyRate := GetActualDailyRate(lll.EmployeeID, orgId, lll.PayToDate)) `ActualDailyRate`
		, (@dailyRate / defaultWorkHour) `HourlyRate`
		FROM latestleaveledger lll
		INNER JOIN (SELECT ll.*
						
						#, p.PartNo `LeaveType`
						
						, lt.TransactionDate
						, lt.ReferenceID
						, lt.Balance
						, lt.Amount
						, lt.PayPeriodID
						, pp.PayFromDate, pp.PayToDate, pp.OrdinalValue
						
						, e.EmployeeID `EmployeeNo`
						, e.LastName
						, e.FirstName
						, e.MiddleName
						
						, MAX(pp.PayToDate) `MaxPayToDate`
						FROM leaveledger ll
						INNER JOIN employee e ON e.RowID=ll.EmployeeID
						INNER JOIN product p
						        ON p.RowID=ll.ProductID
								     AND p.PartNo IN ('Sick Leave', 'Vacation Leave')
								     AND p.RowID = leaveTypeId
						INNER JOIN leavetransaction lt
						        ON lt.LeaveLedgerID=ll.RowID
						INNER JOIN payperiod pp
						        ON pp.RowID=lt.PayPeriodID
						AND FIND_IN_SET(pp.RowID, @ids) > 0
						GROUP BY ll.EmployeeID, ll.ProductID
						) i
		
		WHERE lll.EmployeeID=i.EmployeeID
		AND lll.PayToDate=i.`MaxPayToDate`
		AND lll.ProductID=leaveTypeId
		ORDER BY CONCAT(i.LastName, i.FirstName, i.MiddleName)
		;

	END IF;

ELSE

	IF leaveTypeId IS NULL THEN

		SELECT lll.*
		, i.`EmployeeNo`
		, CONCAT_WS(', ', i.LastName, i.FirstName) `FullName`
		, (@dailyRate := GetActualDailyRate(lll.EmployeeID, orgId, lll.PayToDate)) `ActualDailyRate`
		, (@dailyRate / defaultWorkHour) `HourlyRate`
		FROM latestleaveledger lll
		INNER JOIN (SELECT ll.*
						
						#, p.PartNo `LeaveType`
						
						, lt.TransactionDate
						, lt.ReferenceID
						, lt.Balance
						, lt.Amount
						, lt.PayPeriodID
						, pp.PayFromDate, pp.PayToDate, pp.OrdinalValue
						
						, e.EmployeeID `EmployeeNo`
						, e.LastName
						, e.FirstName
						, e.MiddleName
						
						, MAX(pp.PayToDate) `MaxPayToDate`
						FROM leaveledger ll
						INNER JOIN product p
						        ON p.RowID=ll.ProductID
								     AND p.PartNo IN ('Sick Leave', 'Vacation Leave')
								     AND p.RowID = leaveTypeId
						INNER JOIN leavetransaction lt
						        ON lt.LeaveLedgerID=ll.RowID
						INNER JOIN payperiod pp
						        ON pp.RowID=lt.PayPeriodID
						AND FIND_IN_SET(pp.RowID, @ids) > 0
						WHERE ll.EmployeeID = employeePrimId
						GROUP BY ll.EmployeeID, ll.ProductID
						) i
		
		WHERE lll.EmployeeID=i.EmployeeID
		AND lll.PayToDate=i.`MaxPayToDate`
		ORDER BY CONCAT(i.LastName, i.FirstName, i.MiddleName)
		;

	ELSE

		SELECT lll.*
		, i.`EmployeeNo`
		, CONCAT_WS(', ', i.LastName, i.FirstName) `FullName`
		, (@dailyRate := GetActualDailyRate(lll.EmployeeID, orgId, lll.PayToDate)) `ActualDailyRate`
		, (@dailyRate / defaultWorkHour) `HourlyRate`
		FROM latestleaveledger lll
		INNER JOIN (SELECT ll.*
						
						#, p.PartNo `LeaveType`
						
						, lt.TransactionDate
						, lt.ReferenceID
						, lt.Balance
						, lt.Amount
						, lt.PayPeriodID
						, pp.PayFromDate, pp.PayToDate, pp.OrdinalValue
						
						, e.EmployeeID `EmployeeNo`
						, e.LastName
						, e.FirstName
						, e.MiddleName
						
						, MAX(pp.PayToDate) `MaxPayToDate`
						FROM leaveledger ll
						INNER JOIN product p
						        ON p.RowID=ll.ProductID
								     AND p.PartNo IN ('Sick Leave', 'Vacation Leave')
								     AND p.RowID = leaveTypeId
						INNER JOIN leavetransaction lt
						        ON lt.LeaveLedgerID=ll.RowID
						INNER JOIN payperiod pp
						        ON pp.RowID=lt.PayPeriodID
						AND FIND_IN_SET(pp.RowID, @ids) > 0
						WHERE ll.EmployeeID = employeePrimId
						GROUP BY ll.EmployeeID, ll.ProductID
						) i
		
		WHERE lll.EmployeeID=i.EmployeeID
		AND lll.PayToDate=i.`MaxPayToDate`
		AND lll.ProductID=leaveTypeId
		ORDER BY CONCAT(i.LastName, i.FirstName, i.MiddleName)
		;

	END IF;
		
END IF;
	
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_leave_ledger
DROP PROCEDURE IF EXISTS `RPT_leave_ledger`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_leave_ledger`(IN `OrganizID` INT, IN `paramDateFrom` DATE, IN `paramDateTo` DATE, IN `PayPeriodDateFromID` INT, IN `PayPeriodDateToID` INT)
    DETERMINISTIC
BEGIN

DECLARE payfreqID INT(11);
DECLARE dateloop DATE;
DECLARE indx INT(11) DEFAULT 1;
DECLARE cnt INT(11) DEFAULT 0;

DECLARE datetoOfDateFromID DATE;
DECLARE leavetypecount INT(11);
DECLARE leavetypetext VARCHAR(50);
DECLARE i_count INT(11) DEFAULT 0;
DECLARE emp_count INT(11) DEFAULT 0;
DECLARE emp_counts INT(11) DEFAULT 0;

SET @exists = EXISTS(
    SELECT RowID
    FROM paystub
    WHERE PayPeriodID = PayPeriodDateToID AND
        OrganizationID = OrganizID
    LIMIT 1
);

SELECT PayFrequencyID
FROM organization
WHERE RowID = OrganizID
INTO payfreqID;

IF payfreqID = 1 THEN

    SELECT COUNT_pay_period(
        paramDateFrom,
        paramDateTo
    )
    INTO cnt;

    SET @exists = TRUE;

    IF @exists THEN

        SELECT
            ee.RowID AS `DatCol1`,
            ee.EmployeeID AS `DatCol2`,
            CONCAT(ee.LastName, ', ', ee.FirstName, ' ', INITIALS(ee.MiddleName, '.', '1')) AS `DatCol3`,
            CONCAT(INITIALS(p.PartNo, '', '1'), IF(LOCATE('Others', p.PartNo) > 0, 'L', '')) AS `DatCol12`,
            psi1.`EarnedHrs` AS `DatCol13`,
            FORMAT(psi1.`EarnedHrs` / 8, 2) AS `DatCol14`,
            IFNULL(FORMAT(SUM(IF(eelv.LeaveHrs >= 9, 8, eelv.LeaveHrs)), 2), 0.00) AS `DatCol15`,
            IFNULL(FORMAT(SUM(IF(eelv.LeaveHrs >= 9, 8, eelv.LeaveHrs)), 2) / 8, 0.00) AS `DatCol16`,
            psi1.`EarnedHrs` - IFNULL(FORMAT(SUM(IF(eelv.LeaveHrs >= 9, 8, eelv.LeaveHrs)), 2), 0.00) AS `DatCol17`,
            FORMAT((psi1.`EarnedHrs` - IFNULL(FORMAT(SUM(IF(eelv.LeaveHrs >= 9, 8, eelv.LeaveHrs)), 2), 0.00)) / 8, 2) AS `DatCol18`
        FROM paystubitem psi
        LEFT JOIN product p
        ON p.RowID = psi.ProductID AND
            p.OrganizationID = psi.OrganizationID
        LEFT JOIN paystub ps
        ON ps.RowID = psi.PayStubID AND
            ps.OrganizationID = psi.OrganizationID
        LEFT JOIN employee ee
        ON ee.RowID = ps.EmployeeID AND
            ee.OrganizationID = psi.OrganizationID AND
            FIND_IN_SET(ee.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
        LEFT JOIN (
            SELECT
                RowID,
                EmployeeID,
                OrganizationID,
                LeaveStartDate,
                LeaveEndDate,
                LeaveType,
                ((TIME_TO_SEC(TIMEDIFF(LeaveEndTime,LeaveStartTime)) / 60) / 60) AS LeaveHrs
            FROM employeeleave
        ) AS eelv
        ON eelv.EmployeeID = ps.EmployeeID AND
           eelv.OrganizationID = ps.OrganizationID AND
           eelv.LeaveStartDate >= paramDateFrom AND
           eelv.LeaveEndDate <= paramDateTo AND
           eelv.LeaveType = p.PartNo
        LEFT JOIN (
            SELECT
                psii.RowID,
                IF(
                    psii.PayAmount <= 0,
                    IF(
                        LOCATE('Vacation', pp.PartNo) > 0,
                        e1.LeavePerPayPeriod * cnt,
                        IF(
                            LOCATE('Sick', pp.PartNo) > 0,
                            e1.SickLeavePerPayPeriod * cnt,
                            IF(
                                LOCATE('aternity', pp.PartNo) > 0,
                                e1.MaternityLeavePerPayPeriod * cnt,
                                0.00
                            )
                        )
                    ),
                    psii.PayAmount
                ) AS EarnedHrs
            FROM paystubitem psii
            LEFT JOIN product pp
            ON pp.RowID = psii.ProductID AND
                pp.OrganizationID=psii.OrganizationID
            LEFT JOIN paystub pss
            ON pss.RowID = psii.PayStubID AND
                pss.OrganizationID = psii.OrganizationID
            LEFT JOIN employee e1
            ON e1.RowID = pss.EmployeeID AND
                e1.OrganizationID = psii.OrganizationID
            WHERE pp.Category = 'Leave Type'
        ) AS psi1
        ON psi1.RowID = psi.RowID
        WHERE psi.OrganizationID = OrganizID AND
            ee.EmploymentStatus != 'Terminated' AND
            p.Category = 'Leave Type' AND
            ps.PayToDate = paramDateTo
        GROUP BY psi.ProductID, ps.EmployeeID
        ORDER BY ee.LastName;

    ELSE

        SELECT MAX(PayToDate) FROM paystub WHERE OrganizationID=OrganizID AND PayPeriodID BETWEEN PayPeriodDateFromID AND PayPeriodDateToID INTO paramDateTo;

        SELECT
        ee.EmployeeID
        ,CONCAT(ee.LastName,',',ee.FirstName, IF(ee.MiddleName='','',','),INITIALS(ee.MiddleName,'. ','1')) AS Fullname
        ,CONCAT(INITIALS(p.PartNo,'','1'),IF(LOCATE('Others',p.PartNo) > 0, 'L', '')) 'PartNo'
        ,psi1.`EarnedHrs` AS EarnedHrs
        ,FORMAT(psi1.`EarnedHrs` / 8,2) AS EarnedDays
        ,IFNULL(FORMAT(SUM(IF(eelv.LeaveHrs >= 9, 8, eelv.LeaveHrs)),2),0.00) AS AvailHrs
        ,IFNULL(FORMAT(SUM(IF(eelv.LeaveHrs >= 9, 8, eelv.LeaveHrs)),2) / 8,0.00) AS AvailDays
        ,FORMAT((psi1.`EarnedHrs` - IFNULL(SUM(IF(eelv.LeaveHrs >= 9, 8, eelv.LeaveHrs)),0.00)),2) 'BalHrs'
        ,FORMAT((psi1.`EarnedHrs` - IFNULL(FORMAT(SUM(IF(eelv.LeaveHrs >= 9, 8, eelv.LeaveHrs)),2),0.00)) / 8,2) 'BalDays'
        FROM paystubitem psi
        LEFT JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID
        LEFT JOIN paystub ps ON ps.RowID=psi.PayStubID AND ps.OrganizationID=psi.OrganizationID
        LEFT JOIN employee ee ON ee.RowID=ps.EmployeeID AND ee.OrganizationID=psi.OrganizationID
        LEFT JOIN (SELECT RowID,EmployeeID,OrganizationID,LeaveStartDate,LeaveEndDate,LeaveType,((TIME_TO_SEC(TIMEDIFF(LeaveEndTime,LeaveStartTime)) / 60) / 60) AS LeaveHrs FROM employeeleave) AS eelv ON eelv.EmployeeID=ps.EmployeeID AND eelv.OrganizationID=ps.OrganizationID AND eelv.LeaveStartDate >= paramDateFrom AND eelv.LeaveEndDate <= paramDateTo AND eelv.LeaveType=p.PartNo
        LEFT JOIN (SELECT psii.RowID,IF(LOCATE('Vacation',pp.PartNo) > 0, e1.LeavePerPayPeriod * cnt, IF(LOCATE('Sick',pp.PartNo) > 0, e1.SickLeavePerPayPeriod * cnt, IF(LOCATE('aternity',pp.PartNo) > 0, e1.MaternityLeavePerPayPeriod * cnt, 0.00))) AS EarnedHrs FROM paystubitem psii LEFT JOIN product pp ON pp.RowID=psii.ProductID AND pp.OrganizationID=psii.OrganizationID LEFT JOIN paystub pss ON pss.RowID=psii.PayStubID AND pss.OrganizationID=psii.OrganizationID LEFT JOIN employee e1 ON e1.RowID=pss.EmployeeID AND e1.OrganizationID=psii.OrganizationID WHERE pp.Category='Leave Type') AS psi1 ON psi1.RowID=psi.RowID
        WHERE psi.OrganizationID=OrganizID
        AND ee.EmploymentStatus != 'Terminated'
        AND p.Category='Leave Type'
        AND ps.PayToDate = paramDateTo
        GROUP BY psi.ProductID,ps.EmployeeID
        ORDER BY ee.LastName;



        END IF;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_leave_summary
DROP PROCEDURE IF EXISTS `RPT_leave_summary`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_leave_summary`(
	IN `org_rowid` INT,
	IN `emp_rowid` INT,
	IN `date_from` DATE,
	IN `date_to` DATE

)
BEGIN

DECLARE leave_prodids TEXT;

DECLARE yeartofollow INT(11);

DECLARE remarks TEXT;

DECLARE custom_dateformat TEXT DEFAULT '%c/%e/%Y';

SELECT GROUP_CONCAT(p.RowID)
FROM product p
WHERE p.`Category`='Leave type'
AND p.OrganizationID=org_rowid
AND p.PartNo IN ('Vacation leave', 'Sick leave', 'Additional VL')
INTO leave_prodids;

SELECT MAX(pp.`Year`)
FROM payperiod pp
INNER JOIN dates d ON d.DateValue BETWEEN date_from AND date_to
WHERE pp.OrganizationID = org_rowid
AND d.DateValue BETWEEN pp.PayFromDate AND pp.PayToDate
AND pp.TotalGrossSalary = 1
INTO yeartofollow;

SELECT CONCAT('BALANCE AS OF ', DATE_FORMAT(MAX(pp.PayToDate), custom_dateformat)) `Remarks`
FROM payperiod pp
WHERE pp.OrganizationID = org_rowid
AND pp.TotalGrossSalary = 1
AND date_to BETWEEN pp.PayFromDate AND pp.PayToDate
INTO remarks;

SELECT i.*

/**/ , (i.LeaveAllowance - SUM(i.VacationLeaveHrs)) `VacationLeaveHours`
, (i.SickLeaveAllowance - SUM(i.SickLeaveHrs)) `SickLeaveHours`
# ,i.MaternityLeaveHours `MaternityLeaveHours`
# ,i.OtherLeaveHours `OtherLeaveHours`
, (i.AdditionalVLAllowance - SUM(i.AdditionalVLHrs)) `AdditionalVLHours`

FROM (SELECT ii.*
      FROM (SELECT
				e.RowID `EmployeeRowId`
				, et.RowID
				, DATE_FORMAT(et.`Date`, custom_dateformat) `Date`
				
				,et.VacationLeaveHours `VacationLeaveHrs`
				,et.SickLeaveHours `SickLeaveHrs`
				,et.MaternityLeaveHours `MaternityLeaveHrs`
				,et.OtherLeaveHours `OtherLeaveHrs`
				,et.AdditionalVLHours `AdditionalVLHrs`
				
				, e.EmployeeID
				, PROPERCASE(CONCAT_WS(', ', e.LastName, e.FirstName)) `FullName`
				, e.LeaveAllowance
				, e.SickLeaveAllowance
				, e.AdditionalVLAllowance
				
				, (e.LeaveAllowance
				   + e.SickLeaveAllowance
				   + e.AdditionalVLAllowance) `TotalLeave`
				
				, remarks `Remarks`
				FROM employee e
				
				LEFT JOIN employeetimeentry et
				        ON et.OrganizationID = org_rowid
						     AND et.`Date` BETWEEN date_from AND date_to
							  # AND (et.VacationLeaveHours + et.SickLeaveHours + et.OtherLeaveHours + et.AdditionalVLHours) > 0
							  AND (et.VacationLeaveHours + et.SickLeaveHours + et.AdditionalVLHours) > 0
							  AND et.EmployeeID=e.RowID
				
				INNER JOIN employeeleave elv ON elv.EmployeeID=et.EmployeeID AND elv.`Status`='Approved' AND et.`Date` BETWEEN elv.LeaveStartDate AND elv.LeaveEndDate
				
				LEFT JOIN payperiod pp ON pp.TotalGrossSalary=e.PayFrequencyID AND pp.OrganizationID=e.OrganizationID AND pp.`Year` = yeartofollow AND et.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate
				
				LEFT JOIN paystub ps ON ps.OrganizationID=e.OrganizationID AND ps.EmployeeID=e.RowID AND ps.PayPeriodID=pp.RowID
				LEFT JOIN paystubitem psi ON psi.PayStubID = ps.RowID AND FIND_IN_SET(psi.ProductID, leave_prodids) > 0
				
				WHERE e.OrganizationID = et.OrganizationID
				AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
				AND e.RowID = IFNULL(emp_rowid, e.RowID)
				AND (e.DateRegularized BETWEEN date_from AND date_to
				     OR (e.DateRegularized <= date_from
					      OR e.DateRegularized <= date_to)
					  )
				
				GROUP BY et.RowID
				ORDER BY CONCAT(e.LastName, e.FirstName), et.`Date`
				) ii
					
			/**/ UNION
				SELECT
				e.RowID `EmployeeRowId`
				, NULL `RowID`
				, NULL `Date`
				
				,0 `VacationLeaveHrs`
				,0 `SickLeaveHrs`
				,0 `MaternityLeaveHrs`
				,0 `OtherLeaveHrs`
				,0 `AdditionalVLHrs`
				
				, e.EmployeeID
				, PROPERCASE(CONCAT_WS(', ', e.LastName, e.FirstName)) `FullName`
				, e.LeaveAllowance
				, e.SickLeaveAllowance
				, e.AdditionalVLAllowance
				
				, (e.LeaveAllowance
				   + e.SickLeaveAllowance
				   + e.AdditionalVLAllowance) `TotalLeave`
				
				, remarks `Remarks`
				FROM employee e
				WHERE e.OrganizationID=org_rowid
				AND e.RowID=IFNULL(emp_rowid, e.RowID)
				AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
				AND (e.LeaveAllowance
				     + e.SickLeaveAllowance
				     + e.AdditionalVLAllowance) > 0
				AND (e.DateRegularized BETWEEN date_from AND date_to
				     OR (e.DateRegularized <= date_from
					      OR e.DateRegularized <= date_to)
					  )
) i
GROUP BY i.EmployeeRowId
ORDER BY i.`FullName`
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_LoanLedger
DROP PROCEDURE IF EXISTS `RPT_LoanLedger`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_LoanLedger`(
	IN `orgId` INT,
	IN `payPeriodFromId` INT,
	IN `payPeriodToId` INT,
	IN `loanTypeId` INT

)
BEGIN

SET @i = 0;
SET @rowId = 0;
SET @isTrue = FALSE;

SET @notEqual = FALSE;
SET @currBal = 0.00;

SET SESSION group_concat_max_len = 10240;

SET @periodIds = NULL;

SELECT GROUP_CONCAT(pp.RowID) `Result`
FROM payperiod pp
INNER JOIN payperiod ppf ON ppf.RowID=payPeriodFromId
INNER JOIN payperiod ppt ON ppt.RowID=payPeriodToId
WHERE pp.OrganizationID=ppf.OrganizationID
AND pp.TotalGrossSalary=ppf.TotalGrossSalary
AND pp.PayFromDate >= ppf.PayFromDate
AND pp.PayToDate <= ppt.PayToDate
INTO @periodIds
;

IF loanTypeId IS NULL THEN

	SELECT
	slp.EmployeeID `COL1`
	, slp.EmployeeLoanRecordID `COL2`
	, els.TotalLoanAmount `COL3`
	, DATE_FORMAT(els.DedEffectiveDateFrom, '%m/%d/%Y') `COL4`
	, DATE_FORMAT(pp.PayToDate, '%m/%d/%Y') `COL5`
	, slp.DeductionAmount `COL6`
	, els.TotalBalanceLeft `COL7`
	, slp.TotalBalanceLeft `COL70`
	, CONCAT_WS(', ', e.LastName, e.FirstName) `COL8`
	, p.PartNo `COL9`
	
	, slp.*
	/*
	, @isTrue := slp.EmployeeLoanRecordID != @rowId `IsAnotherEmployeeLoanID`
	, IF(@isTrue, (@rowId := slp.EmployeeLoanRecordID), (@rowId := slp.EmployeeLoanRecordID)) `EmployeeLoanID`
	, IF(@isTrue, (@i := 1), (@i := @i + 1)) `OrdinalIndex`
	
	, IF(@isTrue
	#		, (@currBal := (els.TotalLoanAmount - IF(els.NoOfPayPeriod=1, els.DeductionAmount, slp.DeductionAmount)))
			, (@currBal := (els.TotalLoanAmount - slp.DeductionAmount))
			, (@currBal := (@currBal - IF(els.NoOfPayPeriod=1, els.DeductionAmount, slp.DeductionAmount)))
			) `CurrentBalance`*/
	
	FROM scheduledloansperpayperiod slp
	INNER JOIN employee e ON e.RowID=slp.EmployeeID
	INNER JOIN employeeloanschedule els ON els.RowID=slp.EmployeeLoanRecordID
	INNER JOIN payperiod pp ON pp.RowID=slp.PayPeriodID AND (pp.PayFromDate <= els.DedEffectiveDateTo OR pp.PayToDate <= els.DedEffectiveDateTo)
	INNER JOIN product p ON p.RowID=els.LoanTypeID
	
	/*LEFT JOIN (SELECT els.*
			, pp.RowID `PayPeriodID`
			FROM employeeloanschedule els
			INNER JOIN payperiod pp ON pp.OrganizationID=els.OrganizationID AND els.DedEffectiveDateTo BETWEEN pp.PayFromDate AND pp.PayToDate
	) i*/
	
	WHERE slp.OrganizationID = orgId
	AND FIND_IN_SET(slp.PayPeriodID, @periodIds) > 0
#	AND slp.EmployeeID = 6
	ORDER BY CONCAT(e.LastName, e.FirstName, e.MiddleName), slp.EmployeeLoanRecordID, p.PartNo, pp.`Year`, pp.`Month`, pp.OrdinalValue
	;

ELSE

	SELECT
	slp.EmployeeID `COL1`
	, slp.EmployeeLoanRecordID `COL2`
	, els.TotalLoanAmount `COL3`
	, DATE_FORMAT(els.DedEffectiveDateFrom, '%m/%d/%Y') `COL4`
	, DATE_FORMAT(pp.PayToDate, '%m/%d/%Y') `COL5`
	, slp.DeductionAmount `COL6`
	, els.TotalBalanceLeft `COL7`
	, slp.TotalBalanceLeft `COL70`
	, CONCAT_WS(', ', e.LastName, e.FirstName) `COL8`
	, p.PartNo `COL9`
	
	, slp.*
	
	FROM scheduledloansperpayperiod slp
	INNER JOIN employee e ON e.RowID=slp.EmployeeID
	INNER JOIN employeeloanschedule els ON els.RowID=slp.EmployeeLoanRecordID
	INNER JOIN payperiod pp ON pp.RowID=slp.PayPeriodID AND (pp.PayFromDate <= els.DedEffectiveDateTo OR pp.PayToDate <= els.DedEffectiveDateTo)
	INNER JOIN product p ON p.RowID=els.LoanTypeID AND p.RowID = loanTypeId
	
	WHERE slp.OrganizationID = orgId
	AND FIND_IN_SET(slp.PayPeriodID, @periodIds) > 0
	ORDER BY CONCAT(e.LastName, e.FirstName, e.MiddleName), slp.EmployeeLoanRecordID, p.PartNo, pp.`Year`, pp.`Month`, pp.OrdinalValue
	;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_loans
DROP PROCEDURE IF EXISTS `RPT_loans`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_loans`(IN `OrganizID` INT, IN `PayDateFrom` DATE, IN `PayDateTo` DATE, IN `LoanTypeID` INT)
    DETERMINISTIC
BEGIN

SELECT
    /*p.PartNo 'Comments',
    ee.EmployeeID,
    CONCAT(
        ee.LastName,
        ',',
        ee.FirstName,
        IF(ee.MiddleName = '', '', ','),
        INITIALS(ee.MiddleName, '. ', '1')
    ) 'Fullname',
    FORMAT(SUM(IFNULL(slp.DeductionAmount, 0)), 2) 'DeductionAmount',
    FORMAT(els.TotalLoanAmount, 2),
    FORMAT(els.TotalBalanceLeft, 2)*/
    ee.EmployeeID `DatCol1`
    ,CONCAT_WS(', ', ee.LastName, ee.FirstName, ee.MiddleName) `DatCol2`
    ,p.PartNo `DatCol3`
    ,ROUND(slp.DeductionAmount, 2) `DatCol4`
    ,ROUND(slp.TotalBalanceLeft, 2) `DatCol5`
    ,ROUND(els.TotalLoanAmount, 2) `DatCol6`
FROM scheduledloansperpayperiod slp
INNER JOIN employeeloanschedule els
ON els.RowID = slp.EmployeeLoanRecordID
INNER JOIN employee ee
ON ee.RowID = slp.EmployeeID AND FIND_IN_SET(ee.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
INNER JOIN product p
ON p.RowID = els.LoanTypeID
INNER JOIN payperiod pp
ON pp.RowID = slp.PayPeriodID
WHERE slp.OrganizationID = OrganizID
# AND pp.PayFromDate BETWEEN PayDateFrom AND PayDateTo
AND (pp.PayFromDate >= PayDateFrom OR pp.PayToDate >= PayDateFrom)
AND (pp.PayFromDate <= PayDateTo OR pp.PayToDate <= PayDateTo)
# GROUP BY slp.EmployeeID, els.RowID
ORDER BY CONCAT(ee.LastName, ee.FirstName), p.PartNo;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_LoansByType
DROP PROCEDURE IF EXISTS `RPT_LoansByType`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_LoansByType`(IN `OrganizID` INT, IN `PayDateFrom` DATE, IN `PayDateTo` DATE)
    DETERMINISTIC
BEGIN

SELECT
    p.PartNo `DatCol1`,
    ee.EmployeeID `DatCol2`,
    CONCAT(
        ee.LastName,
        ',',
        ee.FirstName,
        IF(ee.MiddleName = '', '', ','),
        INITIALS(ee.MiddleName, '. ', '1')
    ) `DatCol3`,
    FORMAT(SUM(IFNULL(slp.DeductionAmount, 0)), 2) `DatCol4`,
    FORMAT(els.TotalLoanAmount, 2) `DatCol5`,
    FORMAT(slp.TotalBalanceLeft, 2) `DatCol6`
FROM scheduledloansperpayperiod slp
INNER JOIN employeeloanschedule els
ON els.RowID = slp.EmployeeLoanRecordID
INNER JOIN employee ee
ON ee.RowID = slp.EmployeeID AND FIND_IN_SET(ee.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
INNER JOIN product p
ON p.RowID = els.LoanTypeID
INNER JOIN payperiod pp
ON pp.RowID = slp.PayPeriodID
WHERE slp.OrganizationID = OrganizID AND
    pp.PayFromDate BETWEEN PayDateFrom AND PayDateTo
GROUP BY slp.EmployeeID, els.RowID
ORDER BY p.PartNo, ee.LastName;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_officialbusiness
DROP PROCEDURE IF EXISTS `RPT_officialbusiness`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_officialbusiness`(IN `OrganizID` INT, IN `OBDateFrom` DATE, IN `OBDateTo` DATE)
    DETERMINISTIC
BEGIN

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName, IF(e.MiddleName='','',','),INITIALS(e.MiddleName,'. ','1')) AS Fullname
,FORMAT(SUM(IF(ob.TotalOBHrs > 8, (ob.TotalOBHrs - 1), ob.TotalOBHrs)), 2) AS TotalOBHrs
,SUM(IFNULL((DATEDIFF(eob.OffBusEndDate, eob.OffBusStartDate) + 1), 0)) 'TotalOBDays'
,IFNULL(eob.OffBusStatus,'') AS OffBusStatus
FROM employeeofficialbusiness eob
LEFT JOIN (
               SELECT
                IFNULL(IF(TIME_FORMAT(OffBusStartTime,'%p') = 'PM' AND TIME_FORMAT(OffBusEndTime,'%p') = 'AM', ((TIME_TO_SEC(TIMEDIFF(ADDTIME(OffBusEndTime,'24:00'), OffBusStartTime)) / 60) / 60), ((TIME_TO_SEC(TIMEDIFF(OffBusEndTime, OffBusStartTime)) / 60) / 60)),0) AS TotalOBHrs
                ,EmployeeID
                ,OrganizationID
                FROM employeeofficialbusiness
                WHERE OrganizationID=OrganizID
                AND (OffBusStartDate >= OBDateFrom OR OffBusEndDate >= OBDateFrom)
                AND (OffBusStartDate <= OBDateTo OR OffBusEndDate <= OBDateTo)
             ) ob ON ob.EmployeeID=eob.EmployeeID AND ob.OrganizationID=eob.OrganizationID
INNER JOIN employee e ON e.RowID=eob.EmployeeID AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
WHERE eob.OrganizationID=OrganizID
AND (eob.OffBusStartDate >= OBDateFrom OR eob.OffBusEndDate >= OBDateFrom)
AND (eob.OffBusStartDate <= OBDateTo OR eob.OffBusEndDate <= OBDateTo)
GROUP BY eob.EmployeeID;





END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_PAGIBIG_Monthly
DROP PROCEDURE IF EXISTS `RPT_PAGIBIG_Monthly`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_PAGIBIG_Monthly`(
	IN `OrganizID` INT,
	IN `paramDate` DATE
)
    DETERMINISTIC
BEGIN

    DECLARE year INT(11);
    DECLARE month INT(11);

    SET year = DATE_FORMAT(paramDate, '%Y');
    SET month = DATE_FORMAT(paramDate, '%m');

    SELECT
        employee.HDMFNo `DatCol1`,
        CONCAT(
            employee.LastName,
            ',',
            employee.FirstName,
            IF(employee.MiddleName = '', '', ','),
            INITIALS(employee.MiddleName, '. ', '1')
        ) AS `DatCol2`,
        paystubsummary.TotalEmpHDMF AS `DatCol3`,
        paystubsummary.TotalCompHDMF AS `DatCol4`,
        (paystubsummary.TotalEmpHDMF + paystubsummary.TotalCompHDMF) AS `DatCol5`
    FROM employee
    INNER JOIN (
        SELECT
            paystub.EmployeeID,
            SUM(paystub.TotalEmpHDMF) 'TotalEmpHDMF',
            SUM(paystub.TotalCompHDMF) 'TotalCompHDMF'
        FROM paystub
        INNER JOIN payperiod
        ON payperiod.RowID = paystub.PayPeriodID
        WHERE paystub.OrganizationID = OrganizID AND
            payperiod.Year = year AND
            payperiod.Month = month
        GROUP BY paystub.EmployeeID
    ) paystubsummary
    ON paystubsummary.EmployeeID = employee.RowID
    WHERE employee.OrganizationID = OrganizID
	ORDER BY employee.LastName, employee.FirstName;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_payroll_legder
DROP PROCEDURE IF EXISTS `RPT_payroll_legder`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_payroll_legder`(IN `OrganizID` INT, IN `PayPerID1` INT, IN `PayPerID2` INT, IN `psi_undeclared` CHAR(1))
    DETERMINISTIC
BEGIN

DECLARE PayP_Date1 DATE;
DECLARE PayP_Date2 DATE;

SELECT PayFromDate
FROM payperiod
WHERE RowID = PayPerID1
INTO PayP_Date1;

SELECT PayToDate
FROM payperiod
WHERE RowID = PayPerID2
INTO PayP_Date2;

SELECT
    ee.RowID AS `DatCol1`,
    ee.EmployeeID AS `DatCol2`,
    CONCAT(ee.LastName,',',ee.FirstName, IF(ee.MiddleName='','',','),INITIALS(ee.MiddleName,'. ','1')) AS `DatCol3`,
    DATE_FORMAT(ps.PayFromDate, '%m/%d/%Y') AS `DatCol4`,
    DATE_FORMAT(ps.PayToDate, '%m/%d/%Y') AS `DatCol5`,
    ps.TotalGrossSalary AS `DatCol6`,
    ps.TotalEmpSSS AS `DatCol7`,
    ps.TotalEmpPhilHealth AS `DatCol8`,
    ps.TotalEmpHDMF AS `DatCol9`,
    ps.TotalLoans AS `DatCol10`,
    ps.TotalAdjustments AS `DatCol11`,
    ps.TotalNetSalary AS `DatCol12`
FROM paystub ps
INNER JOIN employee ee
ON ee.RowID = ps.EmployeeID AND FIND_IN_SET(ee.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
WHERE ps.OrganizationID = OrganizID AND
    ps.PayPeriodID BETWEEN PayPerID1 AND PayPerID2
ORDER BY ee.LastName, ps.PayToDate;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_payslip
DROP PROCEDURE IF EXISTS `RPT_payslip`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_payslip`(IN `og_rowid` INT, IN `pperiod_id` INT, IN `is_actual` BOOL, IN `emp_rowid` INT)
    DETERMINISTIC
BEGIN

DECLARE custom_dateformat VARCHAR(50) DEFAULT '%c/%e/%Y';

DECLARE date_from
        ,date_to
		  ,min_date_thisyear
		  ,max_date_thisyear DATE;

DECLARE is_endofmonth BOOL DEFAULT FALSE;

DECLARE max_dependent INT(11);

DECLARE text_cutoff_ordinal VARCHAR(50);

DECLARE giveAllowanceForHoliday BOOL DEFAULT FALSE;

DECLARE month_per_year
        , default_min_workhour INT(11);

DECLARE leave_transac_rowids TINYTEXT;

SET month_per_year = 12; SET default_min_workhour = 8;

# SET @perc0 = 0.00; SET @perc1 = @perc0; SET @counts0 = @perc0; SET @_amt = @perc0;

SELECT LeaveTransactionRowIdsWithinCutOff(og_rowid, pperiod_id) INTO leave_transac_rowids;

SELECT
EXISTS(SELECT l.RowID
       FROM listofval l
		 WHERE l.`Type` = 'Payroll Policy' AND
		 l.LIC = 'allowances.holiday'
		 AND l.DisplayValue = '1'
		 LIMIT 1)
INTO giveAllowanceForHoliday;

SELECT MAX(fs.Dependent)
FROM filingstatus fs
INTO max_dependent;

SELECT pp.PayFromDate
,pp.PayToDate
,(pp.Half = 0) `is_endofmonth`
,MIN(pyp.PayToDate)
,MAX(pyp.PayToDate)
,CONCAT_WS('-', pp.`Year`, pp.OrdinalValue)
FROM payperiod pp
INNER JOIN payperiod pyp ON pyp.OrganizationID=pp.OrganizationID AND pyp.`Year`=pp.`Year` AND pyp.TotalGrossSalary=pp.TotalGrossSalary
WHERE pp.RowID=pperiod_id
INTO date_from
     ,date_to
	  ,is_endofmonth
	  ,min_date_thisyear
	  ,max_date_thisyear
	  ,text_cutoff_ordinal;

SELECT ps.RowID
,e.EmployeeID `COL1`
,CONCAT_WS(', ', e.LastName, e.FirstName) `COL69`

/*,CONCAT_WS('-', DATE_FORMAT(ADDDATE(date_from, INTERVAL 5 DAY), custom_dateformat)
              , DATE_FORMAT(IF(is_endofmonth = TRUE
				                   , LAST_DAY(date_to)
										 , ADDDATE(date_to, INTERVAL 5 DAY)), custom_dateformat)) `COL3`*/
              
/*,CONCAT_WS('-', DATE_FORMAT(date_from, custom_dateformat)
              , DATE_FORMAT(date_to, custom_dateformat)) `COL4`*/

# ,fs.`FilingStatus` `COL5`

,esa.Salary `COL70`
,(@basic_sal := esa.BasicPay) `BasicPay`

,(@act_regular := IF(e.EmployeeType = 'Fixed'
                    , @basic_sal
						  , IF(e.EmployeeType = 'Monthly'
                         , (@basic_sal - (ps.LateDeduction + ps.UndertimeDeduction + ps.AbsenceDeduction))
                         , IFNULL(ps.RegularPay, 0)))
						  ) `ActualRegular`
,FORMAT(@act_regular, 2) `COL3`
,IFNULL(FORMAT(et.RegularHoursWorked, 2), 0) `COL2`

,IFNULL(FORMAT(et.Absent, 2), 0) `COL5`
,IFNULL(FORMAT(et.HoursLate, 2), 0) `COL6`
,IFNULL(FORMAT(et.HoursLateAmount, 2), 0) `COL7`

,IFNULL(FORMAT(et.UndertimeHours, 2), 0) `COL8`
,IFNULL(FORMAT(et.UndertimeHoursAmount, 2), 0) `COL9`

,IFNULL(FORMAT(et.RestDayHours, 2), 0) `COL41`
,IFNULL(FORMAT(et.RestDayAmount, 2), 0) `COL42`

,IFNULL(FORMAT(et.NightDifferentialOTHours, 2), 0) `COL43`
,IFNULL(FORMAT(et.NightDiffOTHoursAmount, 2), 0) `COL44`

,IFNULL(FORMAT(et.RestDayOTHours, 2), 0) `COL10`
,IFNULL(FORMAT(et.RestDayOTPay, 2), 0) `COL11`

,IFNULL(FORMAT(et.OvertimeHoursWorked, 2), 0) `COL12`
,IFNULL(FORMAT(et.OvertimeHoursAmount, 2), 0) `COL13`

,IFNULL(FORMAT(et.NightDifferentialHours, 2), 0) `COL14`
,IFNULL(FORMAT(et.NightDiffHoursAmount, 2), 0) `COL15`

,IFNULL(FORMAT(et.HolidayPayAmount, 2), 0) `COL17`

,(ps.TotalAllowance + ps.TotalBonus) `COL18`
,ps.TotalAdjustments `COL19`

,ps.TotalGrossSalary `COL20`

,ps.TotalEmpSSS `COL21`
,ps.TotalEmpPhilhealth `COL22`
,ps.TotalEmpHDMF `COL23`

,ps.TotalTaxableSalary `COL24`
,ps.TotalEmpWithholdingTax `COL25`

,ps.TotalLoans `COL26`

,ps.TotalNetSalary `COL27`

,CONCAT_WS('\n'
           , IF(plusadj.`AdjustmentName` IS NULL, '', REPLACE(plusadj.`AdjustmentName`, ',', '\n'))
			  , IF(lessadj.`AdjustmentName` IS NULL, '', REPLACE(lessadj.`AdjustmentName`, ',', '\n')))
`COL37`
,CONCAT_WS('\n'
           , IF(plusadj.`PayAmount` IS NULL, '', REPLACE(plusadj.`PayAmount`, ',', '\n'))
			  , IF(lessadj.`PayAmount` IS NULL, '', REPLACE(lessadj.`PayAmount`, ',', '\n')))
`COL38`

,ps.TotalAdjustments `COL39`

,CONCAT_WS('\n'
           , IF(once_allow.`AllowanceNameList` IS NULL, '-', REPLACE(once_allow.`AllowanceNameList`, ',', '\n'))
			  , IF(day_allow.`AllowanceNameList` IS NULL, '-', REPLACE(day_allow.`AllowanceNameList`, ',', '\n'))
			  , IF(semimonth_allow.`AllowanceNameList` IS NULL, '-', REPLACE(semimonth_allow.`AllowanceNameList`, ',', '\n'))) `COL28`
,CONCAT_WS('\n'
           , IF(once_allow.`AllowanceAmountList` IS NULL, '-', REPLACE(once_allow.`AllowanceAmountList`, ',', '\n'))
           , IF(day_allow.`AllowanceAmountList` IS NULL, '-', REPLACE(day_allow.`AllowanceAmountList`, ',', '\n'))
           , IF(semimonth_allow.`AllowanceAmountList` IS NULL, '-', REPLACE(semimonth_allow.`AllowanceAmountList`, ',', '\n'))) `COL29`

,ps.TotalAllowance `COL30`

,IF(slp.`LoanNameList` IS NULL, '', REPLACE(slp.`LoanNameList`, ',', '\n')) `COL31`
,IF(slp.`LoanDeductList` IS NULL, '', REPLACE(slp.`LoanDeductList`, ',', '\n')) `COL32`
,IF(slp.`LoanBalance` IS NULL, '', REPLACE(slp.`LoanBalance`, ',', '\n')) `COL40`
,IFNULL(slp.`TotalLoanBal`, 0) `COL50`
# `LoanBalance` `TotalLoanBal`

,ps.TotalLoans `COL33`

,IF(lt.`LeaveTypes` IS NULL, '', REPLACE(lt.`LeaveTypes`, ',', '\n')) `COL34`
,IF(lt.`BalanceLeave` IS NULL, '', REPLACE(lt.`BalanceLeave`, ',', '\n')) `COL35`

# ######################

/*

,(@de_minimis := IFNULL(ROUND(((@act_regular * (esa.TrueSalary / esa.Salary))
                               - @act_regular), 2), 0)
  ) `DeMinimis`
,IF(@de_minimis <= 0, 0.00, FORMAT(ps.RegularHours, 2)) `COL8`
,FORMAT(@de_minimis, 2) `COL9`









,psa.TotalGrossSalary `COL23`
,(ps.TotalLoans
  + ps.TotalEmpSSS
  + ps.TotalEmpPhilhealth
  + ps.TotalEmpHDMF
  + ps.TotalEmpWithholdingTax
  + IFNULL((lessadj.`TotalNegativeAdjustment`), 0)) `COL24`
,psa.TotalNetSalary `COL25`

,(e.LeaveAllowance - IFNULL(etlv.VacationLeaveHours, 0)) `COL26`
,(e.SickLeaveAllowance - IFNULL(etlv.SickLeaveHours, 0)) `COL27`

,ps.TotalEmpWithholdingTax `COL32`

,ps.OvertimeHours `COL33`
,FORMAT(ps.OvertimePay, 2) `COL34`

,pstub.TotalTaxableSalary `COL41`
,pstub.TotalEmpWithholdingTax `COL42`
,pstub.TotalEmpSSS `COL43`
,pstub.TotalEmpPhilhealth `COL28`
,pstub.TotalEmpHDMF `COL29`

,text_cutoff_ordinal `COL44`

,CONCAT('Dept: ', dv.Name) `COL100`

,is_endofmonth `IsEndOfMonth`

*/

FROM paystub ps

INNER JOIN employee e
        ON e.RowID=ps.EmployeeID
		     AND e.OrganizationID=ps.OrganizationID
		     AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
INNER JOIN `position` pos
        ON pos.RowID=e.PositionID
		     AND pos.OrganizationID=e.OrganizationID
INNER JOIN division dv
        ON dv.RowID=pos.DivisionId

INNER JOIN filingstatus fs
        ON fs.MaritalStatus=e.MaritalStatus
           AND fs.Dependent=IF(max_dependent < e.NoOfDependents, max_dependent, e.NoOfDependents)

INNER JOIN paystubactual psa
        ON psa.RowID=ps.RowID

LEFT JOIN (SELECT ete.EmployeeID
           ,SUM(ete.RegularHoursWorked) `RegularHoursWorked`
           ,SUM(ete.RegularHoursAmount) `RegularHoursAmount`
			  ,SUM(ete.HoursLate) `HoursLate`
			  ,SUM(ete.HoursLateAmount) `HoursLateAmount`
			  ,SUM(ete.UndertimeHours) `UndertimeHours`
			  ,SUM(ete.UndertimeHoursAmount) `UndertimeHoursAmount`
			  ,SUM(ete.OvertimeHoursWorked) `OvertimeHoursWorked`
			  ,SUM(ete.OvertimeHoursAmount) `OvertimeHoursAmount`
			  ,SUM(ete.NightDifferentialHours) `NightDifferentialHours`
           ,SUM(ete.NightDiffHoursAmount) `NightDiffHoursAmount`
           ,SUM(ete.HolidayPayAmount) `HolidayPayAmount`
           ,SUM(ete.Absent) `Absent`
           
			  ,SUM(ete.RestDayHours) `RestDayHours`
			  ,SUM(ete.RestDayAmount) `RestDayAmount`
			  ,SUM(ete.RestDayOTHours) `RestDayOTHours`
			  ,SUM(ete.RestDayOTPay) `RestDayOTPay`
			  
			  ,SUM(ete.NightDifferentialOTHours) `NightDifferentialOTHours`
			  ,SUM(ete.NightDiffOTHoursAmount) `NightDiffOTHoursAmount`
           FROM v_uni_employeetimeentry ete
           WHERE ete.OrganizationID = og_rowid
           AND ete.`Date` BETWEEN date_from AND date_to
           AND ete.AsActual = FALSE
			  GROUP BY ete.EmployeeID
           ) et
       ON et.EmployeeID=ps.EmployeeID

INNER JOIN employeesalary esa
        ON esa.RowID = (SELECT esa.RowID # ROUND((esa.BasicPay * (esa.TrueSalary / esa.Salary)), 2)
		                  FROM employeesalary esa
								WHERE esa.EmployeeID=ps.EmployeeID
								AND esa.OrganizationID=og_rowid
								AND (esa.EffectiveDateFrom >= date_from OR IFNULL(esa.EffectiveDateTo, max_date_thisyear) >= date_from)
								AND (esa.EffectiveDateFrom <= date_to OR IFNULL(esa.EffectiveDateTo, max_date_thisyear) <= date_to)
								ORDER BY esa.EffectiveDateFrom DESC
								LIMIT 1)

LEFT JOIN (SELECT slp.*
           ,GROUP_CONCAT(CONCAT('  ', p.PartNo)) `LoanNameList`
           ,GROUP_CONCAT(ROUND(slp.DeductionAmount, 2)) `LoanDeductList`
           ,GROUP_CONCAT(ROUND(slp.TotalBalanceLeft, 2)) `LoanBalance`
           ,ROUND(SUM(slp.TotalBalanceLeft), 2) `TotalLoanBal`
           
           FROM scheduledloansperpayperiod slp
           INNER JOIN employeeloanschedule els
                   ON els.RowID=slp.EmployeeLoanRecordID
           INNER JOIN product p
                   ON p.RowID=els.LoanTypeID
			  WHERE slp.OrganizationID=og_rowid
			  AND slp.PayPeriodID=pperiod_id
			  GROUP BY slp.EmployeeID) slp
       ON slp.EmployeeID=ps.EmployeeID

LEFT JOIN (SELECT padj.RowID
           ,padj.PayStubID
           ,GROUP_CONCAT(padj.AdjustmentName) `AdjustmentName`
           ,GROUP_CONCAT(ROUND(padj.PayAmount, 2)) `PayAmount`
           FROM paystubadjustwithproductname padj
           INNER JOIN paystub ps ON ps.RowID=padj.PayStubID AND ps.PayPeriodID=pperiod_id
           WHERE padj.PayAmount > 0
			  AND padj.OrganizationID=og_rowid
			  GROUP BY padj.PayStubID) plusadj
       ON plusadj.PayStubID=ps.RowID

LEFT JOIN (SELECT padj.RowID
           ,padj.PayStubID
           ,GROUP_CONCAT(padj.AdjustmentName) `AdjustmentName`
           ,GROUP_CONCAT(ROUND(padj.PayAmount, 2)) `PayAmount`
           ,SUM(ROUND(padj.PayAmount, 2)) `TotalNegativeAdjustment`
           FROM paystubadjustwithproductname padj
           INNER JOIN paystub ps ON ps.RowID=padj.PayStubID AND ps.PayPeriodID=pperiod_id
           WHERE padj.PayAmount < 0
			  AND padj.OrganizationID=og_rowid
			  GROUP BY padj.PayStubID) lessadj
       ON lessadj.PayStubID=ps.RowID

LEFT JOIN (SELECT etlv.RowID
           ,etlv.EmployeeID
           ,SUM(etlv.VacationLeaveHours) `VacationLeaveHours`
			  ,SUM(etlv.SickLeaveHours) `SickLeaveHours`
			  ,SUM(etlv.MaternityLeaveHours) `MaternityLeaveHours`
			  ,SUM(etlv.OtherLeaveHours) `OtherLeaveHours`
           FROM employeetimeentry etlv
			  WHERE etlv.OrganizationID=og_rowid
			  AND (etlv.VacationLeaveHours + etlv.SickLeaveHours + etlv.MaternityLeaveHours + etlv.OtherLeaveHours) > 0
			  AND etlv.`Date` BETWEEN min_date_thisyear AND date_to
			  GROUP BY etlv.EmployeeID) etlv
	    ON etlv.EmployeeID=ps.EmployeeID

LEFT JOIN (SELECT ea.*
           ,GROUP_CONCAT( ea.AllowanceAmount ) `AllowanceAmountList`# DISTINCT
           # ,GROUP_CONCAT(p.PartNo) `AllowanceNameList`
           ,GROUP_CONCAT( p.PartNo ) `AllowanceNameList`
           FROM employeeallowance ea
           INNER JOIN product p ON p.RowID=ea.ProductID
			  WHERE ea.OrganizationID=og_rowid
			  AND ea.AllowanceAmount != 0
			  AND ea.AllowanceFrequency='One time'
			  AND ea.EffectiveStartDate BETWEEN date_from AND date_to
			  GROUP BY ea.EmployeeID, ea.RowID) once_allow
       ON once_allow.EmployeeID=ps.EmployeeID

/*LEFT JOIN (SELECT ea.*
           ,(@perc0 := AVG(IFNULL(etn.`AttendancePercentage`, 0)))
           ,(@counts0 := COUNT(IFNULL(etn.RowID, 0)))
           ,GROUP_CONCAT( ( ROUND((ea.AllowanceAmount * (IF(p.`Fixed` = 1, 1, @perc0) * @counts0)), 2) ) ) `AllowanceAmountList`# DISTINCT
           # ,GROUP_CONCAT(p.PartNo) `AllowanceNameList`
           ,GROUP_CONCAT( p.PartNo ) `AllowanceNameList`
           FROM employeeallowance ea
           INNER JOIN product p ON p.RowID=ea.ProductID
           LEFT JOIN v_employeetimeentry_numbers etn
                  ON etn.EmployeeID=ea.EmployeeID
                     AND etn.OrganizationID=ea.OrganizationID
                     AND etn.PayPeriodID=pperiod_id
			  WHERE ea.OrganizationID=og_rowid
			  AND ea.AllowanceAmount != 0
			  AND ea.AllowanceFrequency='Daily'
			  AND (ea.EffectiveStartDate >= date_from OR ea.EffectiveEndDate >= date_from)
			  AND (ea.EffectiveStartDate <= date_to OR ea.EffectiveEndDate <= date_to)
			  GROUP BY ea.EmployeeID, ea.RowID
			  ) day_allow
       ON day_allow.EmployeeID=ps.EmployeeID*/

LEFT JOIN (
           SELECT ea.*
		     ,GROUP_CONCAT( ea.`TheAmount` ) `AllowanceAmountList`
		     ,GROUP_CONCAT( ea.PartNo ) `AllowanceNameList`
		FROM (
		      SELECT ai.AllowanceID `RowID`
				, ea.EmployeeID
				, ROUND(ai.Amount, 2) `TheAmount`
				, p.PartNo
				FROM allowanceitem ai
				INNER JOIN employeeallowance ea ON ea.RowID=ai.AllowanceID AND ea.AllowanceFrequency='Daily'
				INNER JOIN product p ON p.RowID=ea.ProductID
				WHERE ai.PayPeriodID = pperiod_id
				AND ai.OrganizationID = og_rowid
				AND ai.Amount > 0
		      ) ea
		 GROUP BY ea.EmployeeID, ea.RowID
			   ) day_allow
       ON day_allow.EmployeeID=ps.EmployeeID

LEFT JOIN (
           SELECT ea.*
		     ,GROUP_CONCAT( ea.`TheAmount` ) `AllowanceAmountList`
		     ,GROUP_CONCAT( ea.PartNo ) `AllowanceNameList`
		FROM (
		     SELECT ea.eaRowID `RowID`, ea.EmployeeID
		     # , (@perc1 := AVG(IFNULL(etn.`HoursDeduct` / etn.DivisorToDailyRate, 0)))
		     /*, IF(p.`Fixed` = 1
			       , ea.AllowanceAmount
					 , ROUND(ea.AllowanceAmount
					         - (ea.AllowanceAmount * AVG(IFNULL(etn.`HoursDeduct` / etn.DivisorToDailyRate, 0)))
								, 2)
             ) `TheAmount`*/
           , ROUND( ( ea.AllowanceAmount - (SUM(ea.HoursToLess) * ((ea.AllowanceAmount / (ea.WorkDaysPerYear / (ea.PAYFREQDIV * month_per_year))) / default_min_workhour)) + IF(giveAllowanceForHoliday, SUM(ea.HolidayAllowance), 0) ), 2) `TheAmount`
           
		     , p.PartNo
		     FROM paystubitem_sum_semimon_allowance_group_prodid ea
		     INNER JOIN employee e ON e.RowID=ea.EmployeeID AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
		     INNER JOIN product p ON p.RowID=ea.ProductID
			  WHERE ea.OrganizationID=og_rowid
			  AND ea.`Date` BETWEEN date_from AND date_to
			  GROUP BY ea.eaRowID
		     ) ea
		GROUP BY ea.EmployeeID, ea.RowID
			  ) semimonth_allow
       ON semimonth_allow.EmployeeID=ps.EmployeeID

INNER JOIN (SELECT ps.RowID
            ,ps.EmployeeID
            ,SUM(ps.TotalTaxableSalary) `TotalTaxableSalary`
            ,SUM(ps.TotalEmpWithholdingTax) `TotalEmpWithholdingTax`
            ,SUM(ps.TotalEmpSSS) `TotalEmpSSS`
            ,SUM(ps.TotalEmpPhilhealth) `TotalEmpPhilhealth`
            ,SUM(ps.TotalEmpHDMF) `TotalEmpHDMF`
            FROM paystubactual ps
            WHERE ps.OrganizationID=og_rowid
            AND (ps.PayFromDate >= min_date_thisyear AND ps.PayToDate <= max_date_thisyear)
            GROUP BY ps.EmployeeID
            ) pstub
        ON pstub.EmployeeID=ps.EmployeeID

LEFT JOIN (SELECT lt.*
			  , GROUP_CONCAT(p.PartNo) `LeaveTypes`
           , GROUP_CONCAT(lt.Balance) `BalanceLeave`
			  FROM leavetransaction lt
			  INNER JOIN leaveledger ll ON ll.LastTransactionID=lt.RowID
			  INNER JOIN product p ON p.RowID=ll.ProductID
			  WHERE FIND_IN_SET(lt.RowID, leave_transac_rowids) > 0
			  AND lt.OrganizationID = og_rowid
			  AND lt.Balance > -1
			  GROUP BY lt.EmployeeID
           ) lt ON lt.EmployeeID = e.RowID

WHERE ps.OrganizationID=og_rowid
		AND ps.PayPeriodID=pperiod_id

GROUP BY ps.RowID
ORDER BY CONCAT(e.LastName, e.FirstName)
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_PhilHealth_Monthly
DROP PROCEDURE IF EXISTS `RPT_PhilHealth_Monthly`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_PhilHealth_Monthly`(
	IN `OrganizID` INT,
	IN `paramDate` DATE
)
    DETERMINISTIC
BEGIN

    DECLARE year INT(11);
    DECLARE month INT(11);

    SET year = DATE_FORMAT(paramDate, '%Y');
    SET month = DATE_FORMAT(paramDate, '%m');

    SELECT
        emp.PhilHealthNo `DatCol1`,
        CONCAT(
            emp.LastName,
            ',',
            emp.FirstName,
            IF(emp.MiddleName = '', '', ','),
            INITIALS(emp.MiddleName, '. ', '1')
        ) AS `DatCol2`,
        paystubsummary.TotalEmpPhilHealth AS `DatCol3`,
        paystubsummary.TotalCompPhilHealth AS `DatCol4`,
        (paystubsummary.TotalEmpPhilHealth + paystubsummary.TotalCompPhilHealth) AS `DatCol5`
    FROM employee emp
    INNER JOIN (
        SELECT
            paystub.EmployeeID,
            SUM(paystub.TotalEmpPhilhealth) 'TotalEmpPhilHealth',
            SUM(paystub.TotalCompPhilhealth) 'TotalCompPhilHealth'
        FROM paystub
        INNER JOIN payperiod
        ON payperiod.RowID = paystub.PayPeriodID
        WHERE paystub.OrganizationID = OrganizID AND
            payperiod.Year = year AND
            payperiod.Month = month
        GROUP BY paystub.EmployeeID
    ) paystubsummary
    ON paystubsummary.EmployeeID = emp.RowID
    WHERE emp.OrganizationID = OrganizID
    ORDER BY emp.LastName, emp.FirstName;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_salary_increase_histo
DROP PROCEDURE IF EXISTS `RPT_salary_increase_histo`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_salary_increase_histo`(IN `OrganizID` INT, IN `PayPerDate1` DATE, IN `PayPerDate2` DATE)
    DETERMINISTIC
BEGIN


SELECT
    ee.RowID AS `DatCol1`,
    es.RowID AS `DatCol2`,
    ee.EmployeeID AS `DatCol3`,
    CONCAT(ee.LastName, ', ', ee.FirstName) AS `DatCol4`,
    DATE_FORMAT(es.EffectiveDateFrom, '%m/%d/%Y') AS `DatCol5`,
    DATE_FORMAT(es.EffectiveDateTo, '%m/%d/%Y') AS `DatCol6`,
    es.Salary AS `DatCol7`,
    es.UndeclaredSalary AS `DatCol8`,
    (es.Salary + es.UndeclaredSalary) AS `DatCol9`
FROM employeesalary es
INNER JOIN employee ee
ON ee.RowID = es.EmployeeID AND FIND_IN_SET(ee.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
WHERE es.OrganizationID = OrganizID
ORDER BY ee.LastName,
    ee.FirstName,
    ee.MiddleName,
    es.EffectiveDateFrom;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_solopayslip
DROP PROCEDURE IF EXISTS `RPT_solopayslip`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `RPT_solopayslip`(IN `OrganizID` INT, IN `PayDate_From` DATE, IN `PayDate_To` DATE, IN `EmployeeRowID` INT(11), IN `IsActual` CHAR(1))
    DETERMINISTIC
BEGIN

SET @daily_rate = GET_employeerateperday(EmployeeRowID,OrganizID,PayDate_To);

SELECT
e.EmployeeID AS `COL1`
,CONCAT_WS(',',e.LastName,e.FirstName,e.MiddleName) AS `COL69`
,ROUND( (es.BasicPay * IF(IsActual=0, 1, (es.TrueSalary / es.Salary))) , 2) AS `COL70`
,0 AS `COL2`
,ROUND( IF(e.EmployeeType IN ('Fixed','Monthly'), (es.BasicPay * IF(IsActual=0, 1, (es.TrueSalary / es.Salary))), IFNULL(ete.RegularHoursAmount,0)) , 2) AS `COL3`
,IFNULL(ete.UndertimeHours,0) AS `COL4`
,IFNULL(ete.Absent,0) AS `COL5`
,IFNULL(ete.HoursLate,0) AS `COL6`
,IFNULL(ete.HoursLateAmount,0) AS `COL7`
,IFNULL(ete.UndertimeHours,0) AS `COL8`
,IFNULL(ete.UndertimeHoursAmount,0) AS `COL9`
,0 AS `COL10`
,0 AS `COL11`
,IFNULL(ete.OvertimeHoursWorked,0) AS `COL12`
,IFNULL(ete.OvertimeHoursAmount,0) AS `COL13`
,IFNULL(ete.NightDifferentialHours,0) AS `COL14`
,IFNULL(ete.NightDiffHoursAmount,0) AS `COL15`
,0 AS `COL16`
,IFNULL(ete.HolidayPayAmount,0) AS `COL17`
,ps.TotalAllowance AS `COL18`
,ps.TotalAdjustments AS `COL19`
,ps.TotalGrossSalary AS `COL20`
,ps.TotalEmpSSS AS `COL21`
,ps.TotalEmpPhilhealth AS `COL22`
,ps.TotalEmpHDMF AS `COL23`
,ps.TotalTaxableSalary AS `COL24`
,ps.TotalEmpWithholdingTax AS `COL25`
,ps.TotalLoans AS `COL26`
,ps.TotalNetSalary AS `COL27`

,REPLACE(GROUP_CONCAT(IFNULL(psiAllwnc.ItemName,'')),',','\n') AS `COL28`
,REPLACE(GROUP_CONCAT(IFNULL(psiAllwnc.PayAmount,0)),',','\n') AS `COL29`

,ps.TotalAllowance AS `COL30`
,REPLACE(GROUP_CONCAT(IFNULL(psiLoan.ItemName,'')),',','\n') AS `COL31`
,REPLACE(GROUP_CONCAT(IFNULL(psiLoan.PayAmount,0)),',','\n') AS `COL32`

,ps.TotalLoans AS `COL33`
,0 AS `COL34`
,0 AS `COL35`

,REPLACE(GROUP_CONCAT(IFNULL(psa.ItemName,'')),',','\n') AS `COL37`
,REPLACE(GROUP_CONCAT(IFNULL(psa.PayAmount,0)),',','\n') AS `COL38`

,(IFNULL(ete.VacationLeaveHours,0) + IFNULL(ete.SickLeaveHours,0) + IFNULL(ete.MaternityLeaveHours,0) + IFNULL(ete.OtherLeaveHours,0)) AS `COL40`
,IFNULL(psiHoli.PayAmount,0) AS `COL41`
FROM (SELECT RowID,OrganizationID,PayPeriodID,EmployeeID,TimeEntryID,PayFromDate,PayToDate,TotalGrossSalary,TotalNetSalary,TotalTaxableSalary,TotalEmpSSS,TotalEmpWithholdingTax,TotalCompSSS,TotalEmpPhilhealth,TotalCompPhilhealth,TotalEmpHDMF,TotalCompHDMF,TotalVacationDaysLeft,TotalLoans,TotalBonus,TotalAllowance,TotalAdjustments,ThirteenthMonthInclusion,FirstTimeSalary FROM paystub WHERE IsActual=0 AND OrganizationID=OrganizID
        UNION
        SELECT RowID,OrganizationID,PayPeriodID,EmployeeID,TimeEntryID,PayFromDate,PayToDate,TotalGrossSalary,TotalNetSalary,TotalTaxableSalary,TotalEmpSSS,TotalEmpWithholdingTax,TotalCompSSS,TotalEmpPhilhealth,TotalCompPhilhealth,TotalEmpHDMF,TotalCompHDMF,TotalVacationDaysLeft,TotalLoans,TotalBonus,TotalAllowance,TotalAdjustments,ThirteenthMonthInclusion,FirstTimeSalary FROM paystubactual WHERE IsActual=1 AND OrganizationID=OrganizID
        ) ps

INNER JOIN employee e ON e.RowID=ps.EmployeeID AND e.OrganizationID=ps.OrganizationID AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0

INNER JOIN employeesalary es ON es.EmployeeID=ps.EmployeeID AND es.OrganizationID=ps.OrganizationID AND (es.EffectiveDateFrom >= ps.PayFromDate OR IFNULL(es.EffectiveDateTo,ps.PayToDate) >= ps.PayFromDate) AND (es.EffectiveDateFrom <= ps.PayToDate OR IFNULL(es.EffectiveDateTo,ps.PayToDate) <= ps.PayToDate)

LEFT JOIN (SELECT RowID,SUM(RegularHoursWorked) AS RegularHoursWorked,SUM(RegularHoursAmount) AS RegularHoursAmount,SUM(TotalHoursWorked) AS TotalHoursWorked,SUM(OvertimeHoursWorked) AS OvertimeHoursWorked,SUM(OvertimeHoursAmount) AS OvertimeHoursAmount,SUM(UndertimeHours) AS UndertimeHours,SUM(UndertimeHoursAmount) AS UndertimeHoursAmount,SUM(NightDifferentialHours) AS NightDifferentialHours,SUM(NightDiffHoursAmount) AS NightDiffHoursAmount,SUM(NightDifferentialOTHours) AS NightDifferentialOTHours,SUM(NightDiffOTHoursAmount) AS NightDiffOTHoursAmount,SUM(HoursLate) AS HoursLate,SUM(HoursLateAmount) AS HoursLateAmount,SUM(VacationLeaveHours) AS VacationLeaveHours,SUM(SickLeaveHours) AS SickLeaveHours,SUM(MaternityLeaveHours) AS MaternityLeaveHours,SUM(OtherLeaveHours) AS OtherLeaveHours,SUM(TotalDayPay) AS TotalDayPay,SUM(Absent) AS Absent,SUM(TaxableDailyAllowance) AS TaxableDailyAllowance,SUM(HolidayPayAmount) AS HolidayPayAmount,SUM(TaxableDailyBonus) AS TaxableDailyBonus,SUM(NonTaxableDailyBonus) AS NonTaxableDailyBonus,SUM(Leavepayment) AS Leavepayment
                FROM (SELECT RowID,OrganizationID,`Date`,EmployeeShiftID,EmployeeID,EmployeeSalaryID,EmployeeFixedSalaryFlag,RegularHoursWorked,RegularHoursAmount,TotalHoursWorked,OvertimeHoursWorked,OvertimeHoursAmount,UndertimeHours,UndertimeHoursAmount,NightDifferentialHours,NightDiffHoursAmount,NightDifferentialOTHours,NightDiffOTHoursAmount,HoursLate,HoursLateAmount,LateFlag,PayRateID,VacationLeaveHours,SickLeaveHours,MaternityLeaveHours,OtherLeaveHours,TotalDayPay,Absent,ChargeToDivisionID,TaxableDailyAllowance,HolidayPayAmount,TaxableDailyBonus,NonTaxableDailyBonus,Leavepayment FROM employeetimeentry WHERE OrganizationID=OrganizID AND IsActual=0 AND EmployeeID=EmployeeRowID AND `Date` BETWEEN PayDate_From AND PayDate_To
                        UNION
                        SELECT RowID,OrganizationID,`Date`,EmployeeShiftID,EmployeeID,EmployeeSalaryID,EmployeeFixedSalaryFlag,RegularHoursWorked,RegularHoursAmount,TotalHoursWorked,OvertimeHoursWorked,OvertimeHoursAmount,UndertimeHours,UndertimeHoursAmount,NightDifferentialHours,NightDiffHoursAmount,NightDifferentialOTHours,NightDiffOTHoursAmount,HoursLate,HoursLateAmount,LateFlag,PayRateID,VacationLeaveHours,SickLeaveHours,MaternityLeaveHours,OtherLeaveHours,TotalDayPay,Absent,ChargeToDivisionID,TaxableDailyAllowance,HolidayPayAmount,TaxableDailyBonus,NonTaxableDailyBonus,Leavepayment FROM employeetimeentryactual WHERE OrganizationID=OrganizID AND IsActual=1 AND EmployeeID=EmployeeRowID AND `Date` BETWEEN PayDate_From AND PayDate_To
                        ) i
                ) ete ON ete.RowID IS NOT NULL




LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.`Category`='Allowance Type' WHERE psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiAllwnc ON psiAllwnc.PayStubID=ps.RowID

LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.`Category`='Loan Type' WHERE psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiLoan ON psiLoan.PayStubID=ps.RowID

LEFT JOIN (SELECT psi.*,p.PartNo AS ItemName FROM paystubitem psi INNER JOIN product p ON p.RowID=psi.ProductID AND p.OrganizationID=psi.OrganizationID AND p.PartNo='Holiday pay' WHERE psi.Undeclared=IsActual AND psi.OrganizationID=OrganizID AND psi.PayAmount!=0) psiHoli ON psiHoli.PayStubID=ps.RowID

LEFT JOIN (SELECT psa.RowID,psa.PayStubID,psa.PayAmount,p.PartNo AS ItemName FROM paystubadjustment psa INNER JOIN product p ON p.RowID=psa.ProductID WHERE IsActual=0 AND psa.OrganizationID=OrganizID AND psa.PayAmount!=0
                UNION
                SELECT psa.RowID,psa.PayStubID,psa.PayAmount,p.PartNo AS ItemName FROM paystubadjustmentactual psa INNER JOIN product p ON p.RowID=psa.ProductID WHERE IsActual=1 AND psa.OrganizationID=OrganizID AND psa.PayAmount!=0
                ) psa ON psa.PayStubID=ps.RowID

WHERE IF(EmployeeRowID IS NULL, TRUE, (ps.EmployeeID=EmployeeRowID))
AND ps.OrganizationID=OrganizID
AND ps.PayFromDate=PayDate_From
AND ps.PayToDate=PayDate_To;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_SSS_Monthly
DROP PROCEDURE IF EXISTS `RPT_SSS_Monthly`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_SSS_Monthly`(
	IN `OrganizID` INT,
	IN `paramDate` DATE
)
    DETERMINISTIC
BEGIN

    DECLARE year INT(10);
    DECLARE month INT(10);

    SET month = DATE_FORMAT(paramDate, '%m');
    SET year = DATE_FORMAT(paramDate, '%Y');

    SELECT
        employee.SSSNo `DatCol1`,
        CONCAT(
            employee.LastName,
            ', ',
            employee.FirstName,
            IF(
                employee.MiddleName = '',
                '',
                ' '
            ),
            INITIALS(employee.MiddleName, '. ', '1')
        ) AS `DatCol2`,
        paystubsummary.TotalEmpSSS  AS `DatCol3`,
        paysocialsecurity.EmployerContributionAmount AS `DatCol4`,
        paysocialsecurity.EmployeeECAmount AS `DatCol5`,
        (paystubsummary.TotalEmpSSS + paystubsummary.TotalCompSSS) AS `DatCol6`
    FROM employee
    INNER JOIN (
        SELECT
            SUM(paystub.TotalEmpSSS) AS TotalEmpSSS,
            SUM(paystub.TotalCompSSS) AS TotalCompSSS,
            paystub.EmployeeID
        FROM paystub
        INNER JOIN payperiod
        ON payperiod.RowID = paystub.PayPeriodID
        WHERE
            paystub.OrganizationID = OrganizID AND
            payperiod.Year = year AND
            payperiod.Month = month
        GROUP BY paystub.EmployeeID
    ) paystubsummary
    ON paystubsummary.EmployeeID = employee.RowID
    LEFT JOIN paysocialsecurity
    ON paysocialsecurity.EmployeeContributionAmount = paystubsummary.TotalEmpSSS
    WHERE employee.OrganizationID = OrganizID
    ORDER BY employee.LastName, employee.FirstName;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_Tardiness
DROP PROCEDURE IF EXISTS `RPT_Tardiness`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_Tardiness`(IN `OrganizID` INT, IN `DateLateFrom` DATE, IN `DateLateTo` DATE)
    DETERMINISTIC
BEGIN

DECLARE diffdate INT(11);

SELECT DATEDIFF(DateLateTo, DateLateFrom) INTO diffdate;

IF ISNULL(diffdate) = '0' THEN

    SET diffdate = diffdate + 1;

ELSE

    SET diffdate = 0;

END IF;

SELECT
e.EmployeeID
,CONCAT(e.LastName,',',e.FirstName, IF(e.MiddleName='','',','),INITIALS(e.MiddleName,'. ','1')) AS Fullname
,SUM(ete.HoursLate) TotalHrsLate
,COUNT(ete.`Date`) 'DateCount'
,diffdate
FROM employeetimeentry ete
INNER JOIN employee e ON e.RowID=ete.EmployeeID AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
WHERE ete.OrganizationID=OrganizID
AND ete.`Date` BETWEEN DateLateFrom AND DateLateTo
AND ete.HoursLate > 0.25
GROUP BY ete.EmployeeID;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.RPT_Tax_Monthly
DROP PROCEDURE IF EXISTS `RPT_Tax_Monthly`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `RPT_Tax_Monthly`(IN `OrganizID` INT, IN `paramDateFrom` DATE, IN `paramDateTo` DATE)
    DETERMINISTIC
BEGIN

SELECT
    ee.TINNo AS `DatCol1`,
    CONCAT(ee.LastName, ',', ee.FirstName, IF(ee.MiddleName = '', '', ','), INITIALS(ee.MiddleName, '. ', '1')) AS `DatCol2`,
    FORMAT(SUM(ps.TotalTaxableSalary), 2) AS `DatCol3`,
    FORMAT(SUM(ps.TotalEmpWithholdingTax), 2) AS `DatCol4`,
    (SELECT FORMAT(SUM(TotalTaxableSalary), 2)
     FROM paystub
     WHERE EmployeeID = ps.EmployeeID AND
        OrganizationID = OrganizID AND
        PayFromDate >= MAKEDATE(YEAR(paramDateTo), 1) AND
        PayToDate <= paramDateTo) AS `DatCol5`,
    (SELECT FORMAT(SUM(TotalEmpWithholdingTax), 2)
     FROM paystub
     WHERE EmployeeID = ps.EmployeeID AND
        OrganizationID = OrganizID AND
        PayFromDate >= MAKEDATE(YEAR(paramDateTo), 1) AND
        PayToDate <= paramDateTo) AS `DatCol6`
FROM paystub ps
INNER JOIN employee ee
ON ee.RowID = ps.EmployeeID AND
    ee.OrganizationID = ps.OrganizationID
    AND FIND_IN_SET(ee.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
INNER JOIN product pd
ON pd.OrganizationID = OrganizID AND
    pd.PartNo = 'Gross Income'
LEFT JOIN paystubitem psi
ON psi.PayStubID = ps.RowID AND
    psi.ProductID = pd.RowID AND
    psi.`Undeclared` = '0'
WHERE ps.OrganizationID = OrganizID AND
    ps.PayFromDate >= paramDateFrom AND
    ps.PayToDate <= paramDateTo
GROUP BY ps.EmployeeID
ORDER BY ee.LastName;


END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SaveAllowanceType
DROP PROCEDURE IF EXISTS `SaveAllowanceType`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SaveAllowanceType`(IN `ProductID` INT, IN `IsRegularDayProrated` INT, IN `IsRestDayProrated` INT, IN `IsSpecialHolidayProrated` INT)
BEGIN

    INSERT INTO allowancetype
    (
        allowancetype.ProductID,
        allowancetype.IsRegularDayProrated,
        allowancetype.IsRestDayProrated,
        allowancetype.IsSpecialHolidayProrated
    )
    VALUES
    (
        ProductID,
        IsRegularDayProrated,
        IsRestDayProrated,
        IsSpecialHolidayProrated
    );

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SEARCH_employeeprofile
DROP PROCEDURE IF EXISTS `SEARCH_employeeprofile`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `SEARCH_employeeprofile`(IN `og_id` INT, IN `emp_id` VARCHAR(50), IN `emp_fname` VARCHAR(50), IN `emp_lname` VARCHAR(50), IN `page_number` INT)
    DETERMINISTIC
BEGIN

DECLARE max_count_per_page INT(11) DEFAULT 50;

SELECT e.RowID
        ,e.EmployeeID                                   `Employee ID`
        ,e.FirstName                                    `First Name`
        ,e.MiddleName                                   `Middle Name`
        ,e.LastName                                     `Last Name`
        ,e.Surname
        ,e.Nickname
        ,e.MaritalStatus                                `Marital Status`
        ,IFNULL(e.NoOfDependents,0)             `No. Of Dependents`
        ,DATE_FORMAT(e.Birthdate,'%m-%d-%Y')    `Birthdate`
        ,DATE_FORMAT(e.Startdate,'%m-%d-%Y')    `Startdate`
        ,IFNULL(d.Name,'')                          `Job Title`
        ,IFNULL(pos.PositionName,'')                `Position`
        ,e.Salutation
        ,e.TINNo                                            `TIN`
        ,e.SSSNo                                            `SSS No.`
        ,e.HDMFNo                                       `PAGIBIG No.`
        ,e.PhilHealthNo                             `PhilHealth No.`
        ,e.WorkPhone                                    `Work Phone No.`
        ,e.HomePhone                                    `Home Phone No.`
        ,e.MobilePhone                                  `Mobile Phone No.`
        ,e.HomeAddress                                  `Home address`
        ,e.EmailAddress                             `Email address`
        ,IF(e.Gender='M','Male','Female')       `Gender`
        ,e.EmploymentStatus                         `Employment Status`
        ,IFNULL(pf.PayFrequencyType,'')         `Pay Frequency`
        ,e.UndertimeOverride
        ,e.OvertimeOverride
        ,IFNULL(DATE_FORMAT(e.Created
                                , '%m-%d-%Y'), '')  `Creation Date`
        ,CONCAT_WS(', '
                , u.FirstName, u.LastName)          `Created by`
        ,IFNULL(DATE_FORMAT(e.Created
                                , '%m-%d-%Y'), '')  `Last Update`
        ,CONCAT_WS(', '
                , uu.FirstName, uu.LastName)        `LastUpdate by`
        ,IFNULL(pos.RowID,'')                       `PositionID`
        ,IFNULL(e.PayFrequencyID,'')                `PayFrequencyID`
        ,e.EmployeeType
        ,IFNULL(vacationLeaveTransaction.Balance, 0) `LeaveBalance`
        ,IFNULL(sickLeaveTransaction.Balance, 0) `SickLeaveBalance`
        ,e.MaternityLeaveBalance
        ,e.LeaveAllowance
        ,e.SickLeaveAllowance
        ,e.MaternityLeaveAllowance
        ,e.LeavePerPayPeriod
        ,e.SickLeavePerPayPeriod
        ,e.MaternityLeavePerPayPeriod
        ,IFNULL(fstat.RowID,3)                          `fstatRowID`
        ,e.AlphaListExempted
        ,e.WorkDaysPerYear
        ,CHAR_TO_DAYOFWEEK(e.DayOfRest)         `DayOfRest`
        ,e.ATMNo
        ,e.BankName
        ,e.OtherLeavePerPayPeriod
        ,e.OtherLeaveAllowance
        ,e.OtherLeaveBalance
        ,e.CalcHoliday
        ,e.CalcSpecialHoliday
        ,e.CalcNightDiff
        ,e.CalcNightDiffOT
        ,e.CalcRestDay
        ,e.CalcRestDayOT
        ,IFNULL(e.LateGracePeriod,0)                `LateGracePeriod`
        ,IFNULL(e.RevealInPayroll,1)                `RevealInPayroll`
        ,IFNULL(e.OffsetBalance,0)                  `OffsetBalance`
        ,IFNULL(ag.AgencyName,'')                   `AgencyName`
        ,IFNULL(ag.RowID,'')                            `ag_RowID`

FROM (SELECT * FROM employee WHERE OrganizationID=og_id AND EmployeeID  =emp_id     AND LENGTH(emp_id) > 0
    UNION
        SELECT * FROM employee WHERE OrganizationID=og_id AND FirstName =emp_fname  AND LENGTH(emp_fname) > 0
    UNION
        SELECT * FROM employee WHERE OrganizationID=og_id AND LastName      =emp_lname  AND LENGTH(emp_lname) > 0
    UNION
        SELECT * FROM employee WHERE OrganizationID=og_id AND LENGTH(TRIM(emp_id))=0 AND LENGTH(TRIM(emp_fname))=0 AND LENGTH(TRIM(emp_lname))=0
        ) e

LEFT JOIN `user` u              ON e.CreatedBy=u.RowID
LEFT JOIN `user` uu             ON e.LastUpdBy=uu.RowID
LEFT JOIN `position` pos        ON e.PositionID=pos.RowID
LEFT JOIN payfrequency pf       ON e.PayFrequencyID=pf.RowID
LEFT JOIN filingstatus fstat    ON fstat.MaritalStatus=e.MaritalStatus AND fstat.Dependent=e.NoOfDependents
LEFT JOIN agency ag             ON ag.RowID=e.AgencyID
LEFT JOIN division d                ON d.RowID=pos.DivisionId
LEFT JOIN product vacationLeaveProduct
ON vacationLeaveProduct.PartNo = 'Vacation leave' AND
    vacationLeaveProduct.OrganizationID = og_id
LEFT JOIN leaveledger vacationLeaveLedger
ON vacationLeaveLedger.ProductID = vacationLeaveProduct.RowID AND
    vacationLeaveLedger.EmployeeID = e.RowID
LEFT JOIN leavetransaction vacationLeaveTransaction
ON vacationLeaveTransaction.RowID = vacationLeaveLedger.LastTransactionID
LEFT JOIN product sickLeaveProduct
ON sickLeaveProduct.PartNo = 'Sick leave' AND
    sickLeaveProduct.OrganizationID = og_id
LEFT JOIN leaveledger sickLeaveLedger
ON sickLeaveLedger.ProductID = sickLeaveProduct.RowID AND
    sickLeaveLedger.EmployeeID = e.RowID
LEFT JOIN leavetransaction sickLeaveTransaction
ON sickLeaveTransaction.RowID = sickLeaveLedger.LastTransactionID

ORDER BY e.LastName, e.FirstName
LIMIT page_number, max_count_per_page;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SEARCH_employeeshift
DROP PROCEDURE IF EXISTS `SEARCH_employeeshift`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `SEARCH_employeeshift`(IN `OrganizID` INT, IN `DivisionRowID` INT, IN `EmployeeIDString` VARCHAR(50), IN `EmployeeLastName` VARCHAR(50))
    DETERMINISTIC
BEGIN

IF DivisionRowID > 0 THEN

    SELECT
    CONCAT(e.LastName, ', ', e.FirstName, ' ', INITIALS(e.MiddleName, '.', '1')) AS name
    , e.EmployeeID
    , e.RowID
    ,(esh.esdRowID IS NOT NULL) AS IsByDayEncoding
    FROM (SELECT * FROM employee WHERE OrganizationID=OrganizID AND EmployeeID  =EmployeeIDString   AND LENGTH(EmployeeIDString) > 0
        UNION
            SELECT * FROM employee WHERE OrganizationID=OrganizID AND LastName  =EmployeeLastName   AND LENGTH(EmployeeLastName) > 0
        UNION
            SELECT * FROM employee WHERE OrganizationID=OrganizID AND LENGTH(TRIM(EmployeeIDString))=0 AND LENGTH(TRIM(EmployeeLastName))=0
            ) e
    LEFT JOIN (SELECT RowID AS esdRowID,EmployeeID FROM employeeshiftbyday WHERE OrganizationID=OrganizID GROUP BY EmployeeID) esh ON esh.EmployeeID=e.RowID
    INNER JOIN (SELECT * FROM `position` WHERE OrganizationID=OrganizID AND DivisionID=DivisionRowID) pos ON pos.RowID=e.PositionID

    ORDER BY e.LastName, e.FirstName, e.MiddleName;

ELSE

    SELECT
    CONCAT(e.LastName, ', ', e.FirstName, ' ', INITIALS(e.MiddleName, '.', '1')) AS name
    , e.EmployeeID
    , e.RowID
    ,(esh.esdRowID IS NOT NULL) AS IsByDayEncoding
    FROM (SELECT * FROM employee WHERE OrganizationID=OrganizID AND EmployeeID  =EmployeeIDString   AND LENGTH(EmployeeIDString) > 0
        UNION
            SELECT * FROM employee WHERE OrganizationID=OrganizID AND LastName  =EmployeeLastName   AND LENGTH(EmployeeLastName) > 0
        UNION
            SELECT * FROM employee WHERE OrganizationID=OrganizID AND LENGTH(TRIM(EmployeeIDString))=0 AND LENGTH(TRIM(EmployeeLastName))=0
            ) e
    LEFT JOIN (SELECT RowID AS esdRowID,EmployeeID FROM employeeshiftbyday WHERE OrganizationID=OrganizID GROUP BY EmployeeID) esh ON esh.EmployeeID=e.RowID

    ORDER BY e.LastName, e.FirstName, e.MiddleName;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SEARCH_employeetimeentry
DROP PROCEDURE IF EXISTS `SEARCH_employeetimeentry`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `SEARCH_employeetimeentry`(IN `og_id` INT, IN `emp_id` VARCHAR(50), IN `emp_fname` VARCHAR(50), IN `emp_lname` VARCHAR(50), IN `page_number` INT)
    DETERMINISTIC
BEGIN

DECLARE max_count_per_page INT(11) DEFAULT 20;

SELECT e.RowID
        ,e.EmployeeID                                   `Employee ID`
        ,e.FirstName                                    `First Name`
        ,e.MiddleName                                   `Middle Name`
        ,e.LastName                                     `Last Name`
        ,e.Surname
        ,e.Nickname
        ,e.MaritalStatus                                `Marital Status`
        ,IFNULL(e.NoOfDependents,0)             `No. Of Dependents`
        ,DATE_FORMAT(e.Birthdate,'%m-%d-%Y')    `Birthdate`
        ,DATE_FORMAT(e.Startdate,'%m-%d-%Y')    `Startdate`
        ,e.JobTitle                                     `Job Title`
        ,IFNULL(pos.PositionName,'')                `Position`
        ,e.Salutation
        ,e.TINNo                                            `TIN`
        ,e.SSSNo                                            `SSS No.`
        ,e.HDMFNo                                       `PAGIBIG No.`
        ,e.PhilHealthNo                             `PhilHealth No.`
        ,e.WorkPhone                                    `Work Phone No.`
        ,e.HomePhone                                    `Home Phone No.`
        ,e.MobilePhone                                  `Mobile Phone No.`
        ,e.HomeAddress                                  `Home address`
        ,e.EmailAddress                             `Email address`
        ,IF(e.Gender='M','Male','Female')       `Gender`
        ,e.EmploymentStatus                         `Employment Status`
        ,IFNULL(pf.PayFrequencyType,'')         `Pay Frequency`
        ,e.UndertimeOverride
        ,e.OvertimeOverride
        ,IFNULL(DATE_FORMAT(e.Created
                                , '%m-%d-%Y'), '')  `Creation Date`
        ,CONCAT_WS(', '
                , u.FirstName, u.LastName)          `Created by`
        ,IFNULL(DATE_FORMAT(e.Created
                                , '%m-%d-%Y'), '')  `Last Update`
        ,CONCAT_WS(', '
                , uu.FirstName, uu.LastName)        `LastUpdate by`
        ,IFNULL(pos.RowID,'')                       `PositionID`
        ,IFNULL(e.PayFrequencyID,'')                `PayFrequencyID`
        ,e.EmployeeType
        ,e.LeaveBalance
        ,e.SickLeaveBalance
        ,e.MaternityLeaveBalance
        ,e.LeaveAllowance
        ,e.SickLeaveAllowance
        ,e.MaternityLeaveAllowance
        ,e.LeavePerPayPeriod
        ,e.SickLeavePerPayPeriod
        ,e.MaternityLeavePerPayPeriod
        ,IFNULL(fstat.RowID,3)                          `fstatRowID`

FROM (SELECT * FROM employee WHERE OrganizationID=og_id AND EmployeeID  =emp_id     AND LENGTH(emp_id) > 0
    UNION
        SELECT * FROM employee WHERE OrganizationID=og_id AND FirstName =emp_fname  AND LENGTH(emp_fname) > 0
    UNION
        SELECT * FROM employee WHERE OrganizationID=og_id AND LastName      =emp_lname  AND LENGTH(emp_lname) > 0
    UNION
        SELECT * FROM employee WHERE OrganizationID=og_id AND LENGTH(TRIM(emp_id))=0 AND LENGTH(TRIM(emp_fname))=0 AND LENGTH(TRIM(emp_lname))=0
        ) e

LEFT JOIN `user` u              ON e.CreatedBy=u.RowID
LEFT JOIN `user` uu             ON e.LastUpdBy=uu.RowID
LEFT JOIN `position` pos        ON e.PositionID=pos.RowID
LEFT JOIN payfrequency pf       ON e.PayFrequencyID=pf.RowID
LEFT JOIN filingstatus fstat    ON fstat.MaritalStatus=e.MaritalStatus AND fstat.Dependent=e.NoOfDependents

ORDER BY e.LastName, e.FirstName
LIMIT page_number, max_count_per_page;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SEARCH_employee_paystub
DROP PROCEDURE IF EXISTS `SEARCH_employee_paystub`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `SEARCH_employee_paystub`(IN `og_rowid` INT, IN `unified_search_string` VARCHAR(50), IN `page_number` INT, IN `text_pay_freq_sched` VARCHAR(50))
    DETERMINISTIC
BEGIN

DECLARE max_count_per_page INT(11) DEFAULT 20;

SELECT e.RowID
        ,e.EmployeeID
        ,e.FirstName
        ,e.MiddleName
        ,e.LastName
        ,e.Surname
        ,e.Nickname
        ,e.MaritalStatus
        ,e.NoOfDependents
        ,e.Birthdate
        ,e.StartDate
        ,e.JobTitle
        ,pos.PositionName
        ,e.Salutation
        ,e.TINNo
        ,e.SSSNo
        ,e.HDMFNo
        ,e.PhilHealthNo
        ,e.WorkPhone
        ,e.HomePhone
        ,e.MobilePhone
        ,e.HomeAddress
        ,e.EmailAddress
        ,e.Gender
        ,e.EmploymentStatus

        ,pf.PayFrequencyType
        ,e.UndertimeOverride
        ,e.OvertimeOverride
        ,e.PositionID
        ,e.PayFrequencyID
        ,e.EmployeeType
        ,e.LeaveBalance
        ,e.SickLeaveBalance
        ,e.MaternityLeaveBalance
        ,e.LeaveAllowance
        ,e.SickLeaveAllowance
        ,e.MaternityLeaveAllowance

        ,e.LeavePerPayPeriod `LeavePerPayPeriod`
		  ,e.SickLeavePerPayPeriod `SickLeavePerPayPeriod`
		  ,e.MaternityLeavePerPayPeriod `MaternityLeavePerPayPeriod`
		  ,fstat.RowID `fstatRowID`
		  ,'' `Image`
		  ,e.Created`Created`
		  ,CONCAT_WS(u.LastName, u.FirstName) `Createdby`
		  ,e.LastUpd `LastUpd`
		  ,CONCAT_WS(uu.LastName, uu.FirstName) `LastUpdby`

FROM (SELECT * FROM employee WHERE OrganizationID=og_rowid AND EmployeeID   =unified_search_string  AND LENGTH(unified_search_string) > 0 AND FIND_IN_SET(EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
    UNION
        SELECT * FROM employee WHERE OrganizationID=og_rowid AND LastName       =unified_search_string  AND LENGTH(unified_search_string) > 0 AND FIND_IN_SET(EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
    UNION
        SELECT * FROM employee WHERE OrganizationID=og_rowid AND FirstName  =unified_search_string  AND LENGTH(unified_search_string) > 0 AND FIND_IN_SET(EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
    UNION
        SELECT * FROM employee WHERE OrganizationID=og_rowid AND LENGTH(TRIM(unified_search_string))=0 AND FIND_IN_SET(EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
        ) e

LEFT JOIN `user` u              ON e.CreatedBy=u.RowID
LEFT JOIN `user` uu             ON e.LastUpdBy=uu.RowID
LEFT JOIN `position` pos        ON e.PositionID=pos.RowID
INNER JOIN payfrequency pf       ON e.PayFrequencyID=pf.RowID AND pf.PayFrequencyType = text_pay_freq_sched
LEFT JOIN filingstatus fstat    ON fstat.MaritalStatus=e.MaritalStatus AND fstat.Dependent=e.NoOfDependents
LEFT JOIN agency ag             ON ag.RowID=e.AgencyID
LEFT JOIN division d                ON d.RowID=pos.DivisionId

ORDER BY e.LastName ASC, e.FirstName ASC
LIMIT page_number, max_count_per_page;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SET_govtcontribsched_payperiod
DROP PROCEDURE IF EXISTS `SET_govtcontribsched_payperiod`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SET_govtcontribsched_payperiod`(IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

DECLARE i INT(11) DEFAULT 1;

DECLARE initdate DATE DEFAULT '2015-01-07';

myloop : LOOP

    IF i > 0 THEN


        UPDATE payperiod
        SET SSSContribSched = '1'
        WHERE OrganizationID=OrganizID AND TotalGrossSalary=4 AND initdate BETWEEN PayFromDate AND PayToDate;

        SET initdate = ADDDATE(initdate, INTERVAL 4 WEEK);

        SELECT EXISTS(
        SELECT RowID
        FROM payperiod
        WHERE OrganizationID=OrganizID
        AND TotalGrossSalary=4
        AND initdate BETWEEN PayFromDate
                         AND PayToDate LIMIT 1) INTO i;

    ELSE
        LEAVE myloop;
    END IF;

END LOOP myloop;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SET_group_concat_max_len
DROP PROCEDURE IF EXISTS `SET_group_concat_max_len`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `SET_group_concat_max_len`()
    DETERMINISTIC
BEGIN

DECLARE _stmt VARCHAR(1024);

    SET @SQL := 'SET group_concat_max_len = 2048;';

    PREPARE _stmt FROM @SQL;

    EXECUTE _stmt;

    DEALLOCATE PREPARE _stmt;


    SET @SQL := 'SET GLOBAL group_concat_max_len = 2048;';

    PREPARE _stmt FROM @SQL;

    EXECUTE _stmt;

    DEALLOCATE PREPARE _stmt;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_Division
DROP PROCEDURE IF EXISTS `SP_Division`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Division`(IN `I_Name` VARCHAR(100), IN `I_TradeName` VARCHAR(100), IN `I_OrganizationID` INT(10), IN `I_MainPhone` VARCHAR(50), IN `I_FaxNumber` VARCHAR(50), IN `I_BusinessAddress` VARCHAR(1000), IN `I_ContactName` VARCHAR(200), IN `I_EmailAddress` VARCHAR(50), IN `I_AltEmailAddress` VARCHAR(50), IN `I_AltPhone` VARCHAR(50), IN `I_URL` VARCHAR(50), IN `I_TINNo` VARCHAR(50), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11), IN `I_DivisionType` VARCHAR(50), IN `I_GracePeriod` DECIMAL(11,2), IN `I_WorkDaysPerYear` INT(11), IN `I_PhHealthDeductSched` VARCHAR(100), IN `I_HDMFDeductSched` VARCHAR(100), IN `I_SSSDeductSched` VARCHAR(100), IN `I_WTaxDeductSched` VARCHAR(100), IN `I_DefaultVacationLeave` DECIMAL(11,2), IN `I_DefaultSickLeave` DECIMAL(11,2), IN `I_DefaultMaternityLeave` DECIMAL(11,2), IN `I_DefaultPaternityLeave` DECIMAL(11,2), IN `I_DefaultOtherLeave` DECIMAL(11,2), IN `I_PayFrequencyID` INT, IN `I_PhHealthDeductSchedNoAgent` VARCHAR(50), IN `I_HDMFDeductSchedNoAgent` VARCHAR(50), IN `I_SSSDeductSchedNoAgent` VARCHAR(50), IN `I_WTaxDeductSchedNoAgent` VARCHAR(50), IN `I_MinimumWageAmount` DECIMAL(11,2), IN `I_AutomaticOT` CHAR(1), IN `I_PhHealthDeductSchedWeekly` VARCHAR(50), IN `I_HDMFDeductSchedWeekly` VARCHAR(50), IN `I_SSSDeductSchedWeekly` VARCHAR(50), IN `I_WTaxDeductSchedWeekly` VARCHAR(50), IN `I_PhHealthDeductSchedwithAgentWeekly` VARCHAR(50), IN `I_HDMFDeductSchedwithAgentWeekly` VARCHAR(50), IN `I_SSSDeductSchedwithAgentWeekly` VARCHAR(50), IN `I_WTaxDeductSchedwithAgentWeekly` VARCHAR(50), IN `I_DivisionHeadID` INT(10), IN `I_ParentDivisionID` INT(10))
    DETERMINISTIC
BEGIN

DECLARE divisionRowID INT(11);

INSERT INTO `division`
(
	Name,
	TradeName,
	OrganizationID,
	MainPhone,
	FaxNumber,
	BusinessAddress,
	ContactName,
	EmailAddress,
	AltEmailAddress,
	AltPhone,
	URL,
	TINNo,
	Created,
	CreatedBy,
	LastUpd,
	LastUpdBy,
	DivisionType,
	GracePeriod,
	WorkDaysPerYear,
	PhHealthDeductSched,
	HDMFDeductSched,
	SSSDeductSched,
	WTaxDeductSched,
	DefaultVacationLeave,
	DefaultSickLeave,
	DefaultMaternityLeave,
	DefaultPaternityLeave,
	DefaultOtherLeave,
	PayFrequencyID,
	PhHealthDeductSchedAgency,
	HDMFDeductSchedAgency,
	SSSDeductSchedAgency,
	WTaxDeductSchedAgency,
	MinimumWageAmount,
	AutomaticOvertimeFiling
	
	,SSSDeductionWeekSchedule
	,PhilhealthDeductionWeekSchedule
	,PagIbigDeductionWeekSchedule
	,WithholdingTaxDeductionWeekSchedule
	,SSSDeductionWeekwithAgenSchedule
	,PhilhealthDeductionWeekwithAgenSchedule
	,PagIbigDeductionWeekwithAgenSchedule
	,WithholdingTaxDeductionWeekwithAgenSchedule
	,DivisionHeadID
	
	,ParentDivisionID
) VALUES (
	I_Name,
	I_TradeName,
	I_OrganizationID,
	I_MainPhone,
	I_FaxNumber,
	I_BusinessAddress,
	I_ContactName,
	I_EmailAddress,
	I_AltEmailAddress,
	I_AltPhone,
	I_URL,
	I_TINNo,
	I_Created,
	I_CreatedBy,
	I_LastUpd,
   I_LastUpdBy,
	I_DivisionType,
	I_GracePeriod,
	I_WorkDaysPerYear,
	I_PhHealthDeductSched,
	I_HDMFDeductSched,
	I_SSSDeductSched,
	I_WTaxDeductSched,
	I_DefaultVacationLeave,
	I_DefaultSickLeave,
	I_DefaultMaternityLeave,
	I_DefaultPaternityLeave,
	I_DefaultOtherLeave,
	I_PayFrequencyID,
	I_PhHealthDeductSchedNoAgent,
	I_HDMFDeductSchedNoAgent,
	I_SSSDeductSchedNoAgent,
	I_WTaxDeductSchedNoAgent,
	I_MinimumWageAmount,
	I_AutomaticOT
	
	,I_SSSDeductSchedWeekly
	,I_PhHealthDeductSchedWeekly
	,I_HDMFDeductSchedWeekly
	,I_WTaxDeductSchedWeekly
	,I_SSSDeductSchedwithAgentWeekly
	,I_PhHealthDeductSchedwithAgentWeekly
	,I_HDMFDeductSchedwithAgentWeekly
	,I_WTaxDeductSchedwithAgentWeekly
	,I_DivisionHeadID
	
	,I_ParentDivisionID);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_DivisionUpdate
DROP PROCEDURE IF EXISTS `SP_DivisionUpdate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DivisionUpdate`(IN `I_Name` VARCHAR(100), IN `I_TradeName` VARCHAR(100), IN `I_MainPhone` VARCHAR(50), IN `I_FaxNumber` VARCHAR(50), IN `I_BusinessAddress` VARCHAR(1000), IN `I_ContactName` VARCHAR(200), IN `I_EmailAddress` VARCHAR(50), IN `I_AltEmailAddress` VARCHAR(50), IN `I_AltPhone` VARCHAR(50), IN `I_URL` VARCHAR(50), IN `I_TINNo` VARCHAR(50), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11), IN `I_DivisionType` VARCHAR(50), IN `I_RowID` INT(11), IN `I_GracePeriod` DECIMAL(11,2), IN `I_WorkDaysPerYear` INT(11), IN `I_PhHealthDeductSched` VARCHAR(100), IN `I_HDMFDeductSched` VARCHAR(100), IN `I_SSSDeductSched` VARCHAR(100), IN `I_WTaxDeductSched` VARCHAR(100), IN `I_DefaultVacationLeave` DECIMAL(11,2), IN `I_DefaultSickLeave` DECIMAL(11,2), IN `I_DefaultMaternityLeave` DECIMAL(11,2), IN `I_DefaultPaternityLeave` DECIMAL(11,2), IN `I_DefaultOtherLeave` DECIMAL(11,2), IN `I_PayFrequencyID` INT, IN `I_PhHealthDeductSchedNoAgent` VARCHAR(50), IN `I_HDMFDeductSchedNoAgent` VARCHAR(50), IN `I_SSSDeductSchedNoAgent` VARCHAR(50), IN `I_WTaxDeductSchedNoAgent` VARCHAR(50), IN `I_MinimumWageAmount` DECIMAL(11,2), IN `I_AutomaticOT` CHAR(1), IN `I_PhHealthDeductSchedWeekly` VARCHAR(50), IN `I_HDMFDeductSchedWeekly` VARCHAR(50), IN `I_SSSDeductSchedWeekly` VARCHAR(50), IN `I_WTaxDeductSchedWeekly` VARCHAR(50), IN `I_PhHealthDeductSchedwithAgentWeekly` VARCHAR(50), IN `I_HDMFDeductSchedwithAgentWeekly` VARCHAR(50), IN `I_SSSDeductSchedwithAgentWeekly` VARCHAR(50), IN `I_WTaxDeductSchedwithAgentWeekly` VARCHAR(50), IN `I_DivisionHeadID` INT(10))
    DETERMINISTIC
BEGIN
UPDATE division 
SET
	Name = I_Name,
	TradeName = I_TradeName,
	MainPhone = I_MainPhone,
	FaxNumber = I_FaxNumber,
	BusinessAddress = I_BusinessAddress,
	ContactName = I_ContactName,
	EmailAddress = I_EmailAddress,
	AltEmailAddress = I_AltEmailAddress,
	AltPhone = I_AltPhone,
	URL = I_URL,
	TINNo = I_TINNo,
	LastUpd = I_LastUpd,
	LastUpdBy = I_LastUpdBy,
	DivisionType = I_DivisionType,
	GracePeriod = I_GracePeriod,
	WorkDaysPerYear = I_WorkDaysPerYear,
	PhHealthDeductSched = I_PhHealthDeductSched,
	HDMFDeductSched = I_HDMFDeductSched,
	SSSDeductSched = I_SSSDeductSched,
	WTaxDeductSched = I_WTaxDeductSched,
	DefaultVacationLeave = I_DefaultVacationLeave,
	DefaultSickLeave = I_DefaultSickLeave,
	DefaultMaternityLeave = I_DefaultMaternityLeave,
	DefaultPaternityLeave = I_DefaultPaternityLeave,
	DefaultOtherLeave = I_DefaultOtherLeave,
	PayFrequencyID = I_PayFrequencyID,
	PhHealthDeductSchedAgency = I_PhHealthDeductSchedNoAgent,
	HDMFDeductSchedAgency = I_HDMFDeductSchedNoAgent,
	SSSDeductSchedAgency = I_SSSDeductSchedNoAgent,
	WTaxDeductSchedAgency = I_WTaxDeductSchedNoAgent,
	MinimumWageAmount = I_MinimumWageAmount,
	AutomaticOvertimeFiling = I_AutomaticOT,
    DivisionHeadID = I_DivisionHeadID
	,SSSDeductionWeekSchedule = I_SSSDeductSchedWeekly
	,PhilhealthDeductionWeekSchedule = I_PhHealthDeductSchedWeekly
	,PagIbigDeductionWeekSchedule = I_HDMFDeductSchedWeekly
	,WithholdingTaxDeductionWeekSchedule = I_WTaxDeductSchedWeekly
	,SSSDeductionWeekwithAgenSchedule = I_SSSDeductSchedwithAgentWeekly
	,PhilhealthDeductionWeekwithAgenSchedule = I_PhHealthDeductSchedwithAgentWeekly
	,PagIbigDeductionWeekwithAgenSchedule = I_HDMFDeductSchedwithAgentWeekly
	,WithholdingTaxDeductionWeekwithAgenSchedule = I_WTaxDeductSchedwithAgentWeekly
WHERE RowID = I_RowID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.sp_employeedisciplinaryaction
DROP PROCEDURE IF EXISTS `sp_employeedisciplinaryaction`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employeedisciplinaryaction`(IN `I_OrganizationID` INT(10), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(10), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(10), IN `I_EmployeeID` INT(10), IN `I_DateFrom` DATE, IN `I_DateTo` DATE, IN `I_FindingID` INT(10), IN `I_FindingDescription` VARCHAR(2000), IN `I_Action` VARCHAR(100), IN `I_Comments` VARCHAR(500))
    DETERMINISTIC
BEGIN
INSERT INTO employeedisciplinaryaction
 (
    OrganizationID,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    EmployeeID,
    DateFrom,
    DateTo,
    FindingID,
    FindingDescription,
    `Action`,
    Comments
)
VALUES
(
    I_OrganizationID,
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_EmployeeID,
    I_DateFrom,
    I_DateTo,
    I_FindingID,
    I_FindingDescription,
    I_Action,
    I_Comments
);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_employeeeducation
DROP PROCEDURE IF EXISTS `SP_employeeeducation`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_employeeeducation`(IN `I_DateFrom` VARCHAR(100), IN `I_OrganizationID` INT(10), IN `I_EmployeeID` INT(10), IN `I_DateTo` VARCHAR(50), IN `I_School` VARCHAR(100), IN `I_Degree` VARCHAR(100), IN `I_Course` VARCHAR(100), IN `I_Minor` VARCHAR(100), IN `I_EducationType` VARCHAR(100), IN `I_Remarks` VARCHAR(1000), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11))
    DETERMINISTIC
BEGIN
INSERT INTO `employeeeducation` (
    DateFrom,
    OrganizationID,
    EmployeeID,
    DateTo,
    School,
    Degree,
    Course,
    Minor,
    EducationType,
    Remarks,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy
)
VALUES
(
    I_DateFrom,
    I_OrganizationID,
    I_EmployeeID,
    I_DateTo,
    I_School,
    I_Degree,
    I_Course,
    I_Minor,
    I_EducationType,
    I_Remarks,
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy
);


END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_employeeeducationUpdate
DROP PROCEDURE IF EXISTS `SP_employeeeducationUpdate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_employeeeducationUpdate`(IN `I_DateFrom` VARCHAR(100), IN `I_DateTo` VARCHAR(50), IN `I_School` VARCHAR(100), IN `I_Degree` VARCHAR(100), IN `I_Course` VARCHAR(100), IN `I_Minor` VARCHAR(100), IN `I_EducationType` VARCHAR(100), IN `I_Remarks` VARCHAR(1000), IN `I_RowID` INT(11))
    DETERMINISTIC
BEGIN
UPDATE `employeeeducation`
SET
    DateFrom = I_DateFrom,
    DateTo = I_DateTo,
    School = I_School,
    Degree = I_Degree,
    Course = I_Course,
    Minor = I_Minor,
    EducationType = I_EducationType,
    Remarks = I_Remarks
WHERE RowID = I_RowID;
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_EmployeePreviousEmployer
DROP PROCEDURE IF EXISTS `SP_EmployeePreviousEmployer`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_EmployeePreviousEmployer`(IN `I_Name` VARCHAR(100), IN `I_TradeName` VARCHAR(100), IN `I_OrganizationID` INT(10), IN `I_MainPhone` VARCHAR(50), IN `I_FaxNumber` VARCHAR(50), IN `I_JobTitle` VARCHAR(50), IN `I_ExperienceFromTo` VARCHAR(50), IN `I_BusinessAddress` VARCHAR(1000), IN `I_ContactName` VARCHAR(200), IN `I_EmailAddress` VARCHAR(50), IN `I_AltEmailAddress` VARCHAR(50), IN `I_AltPhone` VARCHAR(50), IN `I_URL` VARCHAR(50), IN `I_TINNo` VARCHAR(50), IN `I_JobFunction` VARCHAR(2000), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(10), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(10), IN `I_OrganizationType` VARCHAR(50), IN `I_EmployeeID` INT(10))
    DETERMINISTIC
BEGIN
INSERT INTO employeepreviousemployer
(
    Name,
    TradeName,
    OrganizationID,
    MainPhone,
    FaxNumber,
    JobTitle,
    ExperienceFromTo,
    BusinessAddress,
    ContactName,
    EmailAddress,
    AltEmailAddress,
    AltPhone,
    URL,
    TINNo,
    JobFunction,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    OrganizationType,
    EmployeeID
    )
    VALUES
    (
    I_Name,
    I_TradeName,
    I_OrganizationID,
    I_MainPhone,
    I_FaxNumber,
    I_JobTitle,
    I_ExperienceFromTo,
    I_BusinessAddress,
    I_ContactName,
    I_EmailAddress,
    I_AltEmailAddress,
    I_AltPhone,
    I_URL,
    I_TINNo,
    I_JobFunction,
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_OrganizationType,
    I_EmployeeID
    );
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_EmployeePreviousEmployerUpdate
DROP PROCEDURE IF EXISTS `SP_EmployeePreviousEmployerUpdate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_EmployeePreviousEmployerUpdate`(IN `I_Name` VARCHAR(100), IN `I_TradeName` VARCHAR(100), IN `I_MainPhone` VARCHAR(50), IN `I_FaxNumber` VARCHAR(50), IN `I_JobTitle` VARCHAR(50), IN `I_ExperienceFromTo` VARCHAR(50), IN `I_BusinessAddress` VARCHAR(1000), IN `I_ContactName` VARCHAR(200), IN `I_EmailAddress` VARCHAR(50), IN `I_AltEmailAddress` VARCHAR(50), IN `I_AltPhone` VARCHAR(50), IN `I_URL` VARCHAR(50), IN `I_TINNo` VARCHAR(50), IN `I_JobFunction` VARCHAR(2000), IN `I_OrganizationType` VARCHAR(50), IN `I_RowID` INT(10))
    DETERMINISTIC
BEGIN
UPDATE employeepreviousemployer
SET

    Name = I_Name,
    TradeName = I_TradeName,
    MainPhone = I_MainPhone,
    FaxNumber = I_FaxNumber,
    JobTitle = I_JobTitle,
    ExperienceFromTo = I_ExperienceFromTo,
    BusinessAddress = I_BusinessAddress,
    ContactName = I_ContactName,
    EmailAddress = I_EmailAddress,
    AltEmailAddress = I_AltEmailAddress,
    AltPhone = I_AltPhone,
    URL = I_URL,
    TINNo = I_TINNo,
    JobFunction = I_JobFunction,
    OrganizationType = I_OrganizationType
WHERE RowID = I_RowID;
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_employeesalary
DROP PROCEDURE IF EXISTS `SP_employeesalary`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_employeesalary`(IN `I_EmployeeID` INT(10), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(10), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(10), IN `I_OrganizationID` INT(10), IN `I_FilingStatusID` INT(10), IN `I_PaySocialSecurityID` INT(10), IN `I_PayPhilhealthID` INT(10), IN `I_HDMFAmount` DECIMAL(10,2), IN `I_BasicPay` DECIMAL(10,2), IN `I_NoofDependents` INT(10), IN `I_MaritalStatus` VARCHAR(50), IN `I_EffectiveDateFrom` DATE, IN `I_EffectiveDateTo` DATE)
    DETERMINISTIC
BEGIN
INSERT INTO employeesalary
(
    EmployeeID,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    OrganizationID,
    FilingStatusID,
    PaySocialSecurityID,
    PayPhilhealthID,
    HDMFAmount,
    BasicPay,
    NoofDependents,
    MaritalStatus,
    EffectiveDateFrom,
    EffectiveDateTo
)
VALUES
(
    I_EmployeeID,
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_OrganizationID,
    I_FilingStatusID,
    I_PaySocialSecurityID,
    I_PayPhilhealthID,
    I_HDMFAmount,
    I_BasicPay,
    I_NoofDependents,
    I_MaritalStatus,
    I_EffectiveDateFrom,
    I_EffectiveDateTo
);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.sp_employeeshiftentry
DROP PROCEDURE IF EXISTS `sp_employeeshiftentry`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employeeshiftentry`(IN `I_OrganizationID` INT(10), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(10), IN `I_LastUpd` DATETIME, IN `I_LastUpdby` INT(10), IN `I_EmployeeID` INT(10), IN `I_ShiftID` INT(10), IN `I_EffectiveFrom` DATE, IN `I_EffectiveTo` DATE, IN `I_NightShift` CHAR(50), IN `I_RestDay` CHAR(50))
    DETERMINISTIC
BEGIN
INSERT INTO `employeeshift`
(
    OrganizationID,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    EmployeeID,
    ShiftID,
    EffectiveFrom,
    EffectiveTo,
    NightShift,
    RestDay
)
VALUES
(
    I_OrganizationID,
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_EmployeeID,
    I_ShiftID,
    I_EffectiveFrom,
    I_EffectiveTo,
    I_NightShift,
    I_RestDay
);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.sp_emppromotion
DROP PROCEDURE IF EXISTS `sp_emppromotion`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_emppromotion`(IN `I_OrganizationID` INT(10), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(10), IN `I_LastUpd` DATETIME, IN `I_LastUpdby` INT(10), IN `I_EmployeeID` INT(10), IN `I_PositionFrom` VARCHAR(50), IN `I_PositionTo` VARCHAR(50), IN `I_EffectiveDate` DATE, IN `I_CompensationChange` CHAR(1), IN `I_EmployeeSalaryID` INT(11), IN `I_NewAmount` DECIMAL(11,2))
    DETERMINISTIC
BEGIN

DECLARE emp_numdepend INT(11);

DECLARE emp_maritstats VARCHAR(50);

INSERT INTO employeepromotions
 (
    OrganizationID,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    EmployeeID,
    PositionFrom,
    PositionTo,
    EffectiveDate,
    CompensationChange,
    EmployeeSalaryID,
    NewAmount
)
VALUES
(
    I_OrganizationID,
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_EmployeeID,
    I_PositionFrom,
    I_PositionTo,
    I_EffectiveDate,
    I_CompensationChange,
    IF(COALESCE(I_EmployeeSalaryID,0) = 0, NULL, I_EmployeeSalaryID),
    I_NewAmount
);END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.sp_empschedule
DROP PROCEDURE IF EXISTS `sp_empschedule`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_empschedule`(
    IN `I_OrganizationID` INT(10),
    IN `I_Created` DATETIME,
    IN `I_CreatedBy` INT(10),
    IN `I_Lastupd` DATETIME,
    IN `I_Lastupdby` INT(10),
    IN `I_EmployeeID` INT(10),
    IN `I_LoanNumber` VARCHAR(50),
    IN `I_DedEffectiveDateFrom` DATE,
    IN `I_DedEffectiveDateTo` DATE,
    IN `I_TotalLoanAmount` DECIMAL(10,2),
    IN `I_DeductionSchedule` VARCHAR(50),
    IN `I_TotalBalanceLeft` DECIMAL(10,2),
    IN `I_DeductionAmount` DECIMAL(10,2),
    IN `I_Status` VARCHAR(50),
    IN `I_DeductionPercentage` DECIMAL(10,2),
    IN `I_NoOfPayPeriod` DECIMAL(10,2),
    IN `I_Comments` VARCHAR(2000),
    IN `I_LoanTypeID` INT,
    IN `I_BonusID` INT



)
    DETERMINISTIC
BEGIN

DECLARE MAXLoanNumber VARCHAR(50) DEFAULT 0;

DECLARE strloantype TEXT;

DECLARE empPayFreqID INT(11);

DECLARE paypmonth TEXT;


SELECT PayFrequencyID FROM employee WHERE RowID=I_EmployeeID INTO empPayFreqID;

SELECT MAX(LoanNumber) FROM employeeloanschedule WHERE OrganizationID=I_OrganizationID AND EmployeeID=I_EmployeeID INTO MAXLoanNumber;

SELECT PartNo FROM product WHERE RowID=I_LoanTypeID INTO strloantype;



IF (strloantype IN ('Cash Advance','BIR') OR I_DeductionSchedule = 'End of the month')
    AND empPayFreqID = 4 THEN

    SELECT `Month` FROM payperiod WHERE OrganizationID=I_OrganizationID AND TotalGrossSalary=empPayFreqID AND I_DedEffectiveDateFrom BETWEEN PayFromDate AND PayToDate INTO paypmonth;

    SELECT PayToDate FROM payperiod WHERE OrganizationID=I_OrganizationID AND TotalGrossSalary=empPayFreqID AND `Month`=paypmonth AND `Year`=YEAR(I_DedEffectiveDateFrom) ORDER BY PayFromDate DESC, PayToDate DESC LIMIT 1 INTO I_DedEffectiveDateTo;

END IF;

INSERT INTO employeeloanschedule
(
    OrganizationID,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    EmployeeID,
    LoanNumber,
    DedEffectiveDateFrom,
    DedEffectiveDateTo,
    TotalLoanAmount,
    DeductionSchedule,
    TotalBalanceLeft,
    DeductionAmount,
    `Status`,
    DeductionPercentage,
    NoOfPayPeriod,
    Comments,
    LoanTypeID,
    LoanPayPeriodLeft,
    BonusID
)
VALUES
(
    I_OrganizationID,
    CURRENT_TIMESTAMP(),
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_EmployeeID,
    I_LoanNumber,
    I_DedEffectiveDateFrom,
    PAYTODATE_OF_NoOfPayPeriod(I_DedEffectiveDateFrom, I_NoOfPayPeriod, I_EmployeeID, I_DeductionSchedule),
    I_TotalLoanAmount,
    I_DeductionSchedule,
    I_TotalLoanAmount,
    I_DeductionAmount,
    I_Status,
    I_DeductionPercentage,
    I_NoOfPayPeriod,
    I_Comments,
    I_LoanTypeID,
    I_NoOfPayPeriod,
    I_BonusID
);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_filingstatus
DROP PROCEDURE IF EXISTS `SP_filingstatus`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_filingstatus`(IN `I_Created` DATETIME, IN `I_LastUpd` DATETIME, IN `I_CreatedBy` INT(10), IN `I_LastUpdBy` INT(10), IN `I_FilingStatus` VARCHAR(50), IN `I_MaritalStatus` VARCHAR(50), IN `I_Dependent` INT(11))
    DETERMINISTIC
BEGIN
INSERT INTO filingstatus
(
Created,
LastUpd,
CreatedBy,
LastUpdBy,
FilingStatus,
MaritalStatus,
Dependent

)
VALUES
(
I_Created,
I_LastUpd,
I_CreatedBy,
I_LastUpdBy,
I_FilingStatus,
I_MaritalStatus,
I_Dependent
);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.sp_finding
DROP PROCEDURE IF EXISTS `sp_finding`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_finding`(IN `I_OrganizationID` INT(10), IN `I_Description` VARCHAR(2000), IN `I_PartNo` VARCHAR(200), IN `I_Created` DATETIME, IN `I_LastUpd` DATETIME, IN `I_CreatedBy` INT(10), IN `I_LastUpdBy` INT(10), IN `I_CategoryID` INT(10))
BEGIN
INSERT INTO product
 (
    OrganizationID,
    Description,
    PartNo,
    Created,
    LastUpd,
    CreatedBy,
    LastUpdBy,
    CategoryID,
    Category
)
VALUES
(
    I_OrganizationID,
    I_Description,
    I_PartNo,
    I_Created,
    I_LastUpd,
    I_CreatedBy,
    I_LastUpdBy,
    I_CategoryID,
    (SELECT CategoryName FROM category WHERE RowID=I_CategoryID AND OrganizationID=I_OrganizationID LIMIT 1)
);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_GET_SumPayStubAdjustments
DROP PROCEDURE IF EXISTS `SP_GET_SumPayStubAdjustments`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_SumPayStubAdjustments`(IN `pa_EmployeeID` VARCHAR(50), IN `pa_PayPeriodID` INT)
    DETERMINISTIC
    COMMENT 'Josh'
BEGIN

DECLARE p_PaystubID INT;

SET p_PaystubID = FN_GetPaystubIDByEmployeeIDAndPayPeriodID(pa_EmployeeID, pa_PayPeriodID);

SELECT GET_SumPayStubAdjustments(p_PayStubID);

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_payfrequency
DROP PROCEDURE IF EXISTS `SP_payfrequency`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_payfrequency`(IN `I_CreatedBy` INT(10), IN `I_LastupdBy` INT(10), IN `I_Created` DATETIME, IN `I_LastUpd` DATETIME, IN `I_PayFrequencyType` VARCHAR(50), IN `I_PayFrequencyStartDate` DATE)
    DETERMINISTIC
BEGIN
INSERT INTO payfrequency
(
CreatedBy,
LastUpdby,
Created,
LastUpd,
`PayFrequencyType`,
PayFrequencyStartDate
)
VALUES
(
I_CreatedBy,
I_LastUpdby,
I_Created,
I_LastUpd,
I_PayFrequencyType,
I_PayFrequencyStartDate
);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_paywithholdingtax
DROP PROCEDURE IF EXISTS `SP_paywithholdingtax`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_paywithholdingtax`(IN `I_Created` DATETIME, IN `I_LastUpd` DATETIME, IN `I_CreatedBy` INT(10), IN `I_LastUpdBy` INT(10), IN `I_PayFrequencyID` INT(11), IN `I_FilingStatusID` INT(11), IN `I_EffectiveDateFrom` DATE, IN `I_EffectiveDateTo` DATE, IN `I_ExemptionAmount` DECIMAL(10,2), IN `I_ExemptionInExcessAmount` DECIMAL(10,2), IN `I_TaxableIncomeFromAmount` DECIMAL(10,2), IN `I_TaxableIncomeToAmount` DECIMAL(10,2))
    DETERMINISTIC
BEGIN
INSERT INTO paywithholdingtax
(
    Created,
    LastUpd,
    CreatedBy,
    LastUpdBy,
    PayFrequencyID,
    FilingStatusID,
    EffectiveDateFrom,
    EffectiveDateTo,
    ExemptionAmount,
    ExemptionInExcessAmount,
    TaxableIncomeFromAmount,
    TaxableIncomeToAmount
)
VALUES
(
    I_Created,
    I_LastUpd,
    I_CreatedBy,
    I_LastUpdBy,
    I_PayFrequencyID,
    I_FilingStatusID,
    I_EffectiveDateFrom,
    I_EffectiveDateTo,
    I_ExemptionAmount,
    I_ExemptionInExcessAmount,
    I_TaxableIncomeFromAmount,
    I_TaxableIncomeToAmount
);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.sp_shift
DROP PROCEDURE IF EXISTS `sp_shift`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_shift`(IN `I_OrganizationID` INT(10), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(10), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(10), IN `I_TimeFrom` TIME, IN `I_TimeTo` TIME)
    DETERMINISTIC
BEGIN
INSERT INTO  `shift`
(
    OrganizationID,
    Created,
    CreatedBy,
    LastUpd,
    LastUpdBy,
    TimeFrom,
    TimeTo
)
VALUES
(
    I_OrganizationID,
    I_Created,
    I_CreatedBy,
    I_LastUpd,
    I_LastUpdBy,
    I_TimeFrom,
    I_TimeTo
);
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.sp_updateemploan
DROP PROCEDURE IF EXISTS `sp_updateemploan`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_updateemploan`(IN `I_Lastupd` DATETIME, IN `I_Lastupdby` INT(10), IN `I_LoanNumber` INT(10), IN `I_DedEffectiveDateFrom` DATE, IN `I_DedEffectiveDateTo` DATE, IN `I_TotalLoanAmount` DECIMAL(10,2), IN `I_DeductionSchedule` VARCHAR(50), IN `I_DeductionAmount` DECIMAL(10,2), IN `I_Status` VARCHAR(50), IN `I_DeductionPercentage` DECIMAL(10,2), IN `I_NoOfPayPeriod` DECIMAL(10,2), IN `I_Comments` VARCHAR(2000), IN `I_RowID` INT(10), IN `I_LoanTypeID` INT, IN `I_BonusID` INT)
    DETERMINISTIC
BEGIN
UPDATE employeeloanschedule
SET
    LastUpd = CURRENT_TIMESTAMP(),
    LastUpdBy = I_LastUpdBy,
    LoanNumber = I_LoanNumber,
    DedEffectiveDateFrom = I_DedEffectiveDateFrom,
    DedEffectiveDateTo = I_DedEffectiveDateTo,
    TotalLoanAmount = I_TotalLoanAmount,
    DeductionSchedule = I_DeductionSchedule,
    DeductionAmount = I_DeductionAmount,
    `Status` = I_Status,
    DeductionPercentage = I_DeductionPercentage,
    NoOfPayPeriod = I_NoOfPayPeriod,
    Comments = I_Comments,
    LoanTypeID = I_LoanTypeID,
    BonusID = I_BonusID
WHERE RowID = I_RowID;
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.SP_UpdatePaystubAdjustment
DROP PROCEDURE IF EXISTS `SP_UpdatePaystubAdjustment`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UpdatePaystubAdjustment`(IN `pa_EmployeeID` VARCHAR(50), IN `pa_PayPeriodID` INT, IN `User_RowID` INT, IN `Og_RowID` INT)
    DETERMINISTIC
BEGIN


DECLARE SumPayStubAdjustments DECIMAL(11,6);
DECLARE ps_TotalUndeclaredSalary DECIMAL(11,6);
DECLARE taxableadjustmentamount DECIMAL(11,6);

DECLARE nontaxableadjustmentamount DECIMAL(11,6);

DECLARE ogRowID INT(11);

DECLARE p_PaystubID INT;
DECLARE p_TotalAdjustments DECIMAL(10, 2);

DECLARE psiRowID INT(11);

DECLARE paydatefrom DATE;

DECLARE paydateto DATE;

DECLARE empRowID INT(11);

DECLARE monthlytaxableincome DECIMAL(11,6);

DECLARE numofdependent INT(11);

DECLARE maritstat TEXT;

DECLARE payfreqRowID INT(11);

DECLARE ExemptAmt DECIMAL(11,6);

DECLARE TaxabIncomeFromAmt DECIMAL(11,6);

DECLARE ExemptInExcessAmt DECIMAL(11,6);

DECLARE emp_taxabsal DECIMAL(11,6);

DECLARE themonth VARCHAR(2);

DECLARE theyear INT(11);

DECLARE thehalf CHAR(1);

DECLARE prod_rowID INT(11);

DECLARE endofmonthpaypRowID INT(11);

DECLARE prev_adjamt DECIMAL(11,6) DEFAULT 0.0;

DECLARE viewRowID INT(11);

DECLARE taxableIncomeProductID INT(11);

DECLARE oldPayStubAdjustments DECIMAL(11, 6);


SET p_PaystubID = (SELECT FN_GetPayStubIDByEmployeeIDAndPayPeriodID(pa_EmployeeID, pa_PayPeriodID, OrganizationID)
                   FROM payperiod
                   WHERE RowID=pa_PayPeriodID);

SELECT ps.OrganizationID,
       pyp.PayFromDate,
       pyp.PayToDate,
       ps.EmployeeID,
       e.NoOfDependents,
       e.MaritalStatus,
       e.PayFrequencyID,
       pyp.`Month`,
       pyp.`Year`,
       pyp.`Half`
FROM paystub ps
INNER JOIN payperiod pyp
        ON pyp.RowID=ps.PayPeriodID
       AND pyp.OrganizationID=ps.OrganizationID
INNER JOIN employee e
        ON e.RowID=ps.EmployeeID
       AND e.OrganizationID=ps.OrganizationID
WHERE ps.RowID=p_PaystubID
LIMIT 1
INTO ogRowID,
     paydatefrom,
     paydateto,
     empRowID,
     numofdependent,
     maritstat,
     payfreqRowID,
     themonth,
     theyear,
     thehalf;



SELECT paystub.TotalAdjustments
FROM paystub
WHERE paystub.RowID = p_PaystubID
INTO oldPayStubAdjustments;

SELECT GET_paystubadjustmenttaxabornontaxab(p_PaystubID,'1')
INTO taxableadjustmentamount;

SELECT GET_paystubadjustmenttaxabornontaxab(p_PaystubID,'0')
INTO nontaxableadjustmentamount;

SET p_TotalAdjustments = IFNULL(taxableadjustmentamount, 0)
                         + IFNULL(nontaxableadjustmentamount, 0);

SELECT v.RowID
FROM `view` v
INNER JOIN paystub ps
        ON ps.RowID=p_PaystubID
WHERE v.OrganizationID=ps.OrganizationID
  AND v.ViewName='Employee Pay Slip'
INTO viewRowID;

SELECT RowID
FROM product p
WHERE p.PartNo='Taxable Income'
  AND p.OrganizationID=ogRowID
INTO taxableIncomeProductID;

SELECT aut.OldValue
FROM audittrail aut
WHERE aut.ViewID=viewRowID
  AND aut.FieldChanged='TotalAdjustments'
  AND aut.ActionPerformed='Update'
  AND aut.ChangedRowID=p_PaystubID
ORDER BY Created DESC
LIMIT 1
INTO prev_adjamt;

IF prev_adjamt IS NULL THEN
    SET prev_adjamt = 0.0;
END IF;

UPDATE paystub
SET paystub.TotalAdjustments = p_TotalAdjustments,
    paystub.TotalNetSalary = (paystub.TotalNetSalary - oldPayStubAdjustments)
                             + p_TotalAdjustments
WHERE paystub.RowID = p_PaystubID;






SELECT NULL INTO taxableadjustmentamount;

IF taxableadjustmentamount IS NOT NULL THEN
    UPDATE paystub ps
    INNER JOIN paystubitem psi
            ON psi.ProductID=taxableIncomeProductID
           AND psi.OrganizationID=ogRowID
           AND psi.PayStubID=p_PaystubID
    SET ps.TotalTaxableSalary=psi.PayAmount
    WHERE ps.RowID=p_PaystubID;

    SELECT `Half`
    ,`Month`
    ,`Year`
    ,OrganizationID
    FROM payperiod
    WHERE RowID = pa_PayPeriodID
    INTO thehalf
            ,themonth
            ,theyear
            ,ogRowID;

    IF thehalf = '0' THEN
        SELECT PayFromDate
        FROM payperiod
        WHERE OrganizationID=ogRowID AND `Month`=themonth AND `Year`=theyear AND TotalGrossSalary=payfreqRowID
        ORDER BY PayFromDate,PayToDate
        LIMIT 1 INTO paydatefrom;

        SELECT PayFromDate,
               RowID
        FROM payperiod
        WHERE OrganizationID=ogRowID
          AND `Month`=themonth
          AND `Year`=theyear
          AND TotalGrossSalary=payfreqRowID
        ORDER BY PayFromDate DESC,
                 PayToDate DESC
        LIMIT 1
        INTO paydateto,
             endofmonthpaypRowID;

        SELECT SUM(IFNULL(ps.TotalTaxableSalary, 0)),
               e.RowID
        FROM paystub ps
        INNER JOIN employee e
                ON e.EmployeeID=pa_EmployeeID
               AND e.OrganizationID=ogRowID
        WHERE (ps.PayFromDate >= paydatefrom OR ps.PayToDate >= paydatefrom)
          AND (ps.PayFromDate <= paydateto OR ps.PayToDate <= paydateto)
          AND ps.EmployeeID=e.RowID
          AND ps.OrganizationID=ogRowID
        INTO monthlytaxableincome,
             empRowID;

        SELECT pwt.ExemptionAmount,
               pwt.TaxableIncomeFromAmount,
               pwt.ExemptionInExcessAmount
        FROM paywithholdingtax pwt
        INNER JOIN employee e ON e.RowID=empRowID
        INNER JOIN filingstatus fs ON fs.MaritalStatus=e.MaritalStatus AND fs.Dependent=e.NoOfDependents
        WHERE pwt.FilingStatusID=fs.RowID
          AND pwt.PayFrequencyID=2
          AND (monthlytaxableincome BETWEEN pwt.TaxableIncomeFromAmount AND pwt.TaxableIncomeToAmount)
        LIMIT 1
        INTO ExemptAmt,
             TaxabIncomeFromAmt,
             ExemptInExcessAmt;

        SET emp_taxabsal = (ExemptAmt + ((monthlytaxableincome - TaxabIncomeFromAmt) * ExemptInExcessAmt));

        SELECT RowID
        FROM product
        WHERE PartNo='Withholding Tax'
        AND OrganizationID=ogRowID
        INTO prod_rowID;

        SELECT RowID
        FROM paystub
        WHERE EmployeeID=empRowID
        AND OrganizationID=ogRowID
        AND PayPeriodID=pa_PayPeriodID
        INTO p_PaystubID;

        UPDATE paystubitem
        SET PayAmount=emp_taxabsal
        WHERE PayStubID=p_PaystubID
        AND OrganizationID=ogRowID
        AND ProductID=prod_rowID;

        UPDATE paystub ps
        SET ps.TotalEmpWithholdingTax = emp_taxabsal
        WHERE ps.RowID=p_PaystubID;
    END IF;
END IF;

SELECT SUM(psa.PayAmount), ps.RowID
FROM paystubadjustment psa
INNER JOIN paystub ps
        ON ps.RowID=psa.PayStubID
       AND ps.OrganizationID=ogRowID
       AND ps.EmployeeID=empRowID
       AND ps.PayPeriodID=pa_PayPeriodID
INTO SumPayStubAdjustments, psiRowID;

SET SumPayStubAdjustments = IFNULL(SumPayStubAdjustments,0);

SELECT GET_employeeundeclaredsalarypercent(empRowID,ogRowID,pp.PayFromDate,pp.PayToDate)
FROM payperiod pp
WHERE pp.RowID=pa_PayPeriodID
INTO ps_TotalUndeclaredSalary;

SET ps_TotalUndeclaredSalary = IFNULL(ps_TotalUndeclaredSalary,0);

IF ps_TotalUndeclaredSalary < 1.0 THEN
    SET ps_TotalUndeclaredSalary = ps_TotalUndeclaredSalary + 1.000000;
ELSEIF ps_TotalUndeclaredSalary > 1.0 THEN
    SET ps_TotalUndeclaredSalary = ps_TotalUndeclaredSalary - 1.000000;
END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.UPDATE_employee_leavebalance
DROP PROCEDURE IF EXISTS `UPDATE_employee_leavebalance`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `UPDATE_employee_leavebalance`(
	IN `OrganizID` INT,
	IN `EmpID` INT,
	IN `PayPeriodRowID` INT,
	IN `UserRowID` INT
)
    DETERMINISTIC
BEGIN

DECLARE minimum_date DATE;

DECLARE maximum_date DATE;

DECLARE curr_year INT(11);

SELECT pp.`Year` FROM payperiod pp WHERE pp.RowID=PayPeriodRowID INTO curr_year;

SELECT MIN(ps.PayFromDate)
FROM paystub ps
INNER JOIN payperiod pp
ON pp.RowID=ps.PayPeriodID
    AND pp.`Year`=curr_year
    AND pp.OrganizationID=ps.OrganizationID
WHERE ps.OrganizationID=OrganizID
    AND ps.EmployeeID=EmpID INTO minimum_date;

SELECT MAX(pp.PayToDate)
FROM paystub ps
INNER JOIN payperiod pp
ON pp.RowID=ps.PayPeriodID
    AND pp.`Year`=curr_year
    AND pp.OrganizationID=ps.OrganizationID
INNER JOIN payperiod ppp
ON ppp.RowID=PayPeriodRowID
WHERE ps.OrganizationID=OrganizID
    AND ps.EmployeeID=EmpID INTO maximum_date;

SET minimum_date = IFNULL(minimum_date, MAKEDATE(curr_year, 1));

IF maximum_date IS NULL THEN
    SET maximum_date = ADDDATE(SUBDATE(minimum_date, INTERVAL 1 DAY), INTERVAL 1 YEAR);
END IF;

INSERT INTO paystubitem(
    OrganizationID,
    Created,
    CreatedBy,
    PayStubID,
    ProductID,
    PayAmount,
    Undeclared
)
SELECT
    p.OrganizationID,
    CURRENT_TIMESTAMP(),
    UserRowID,
    ps.RowID,
    p.RowID,
    IF(
        p.PartNo='Vacation leave',
        IFNULL(e.LeaveAllowance,0) - IFNULL(ete.VacationLeaveHours,0),
        IF(
            p.PartNo='Sick leave',
            IFNULL(e.SickLeaveAllowance, 0) - IFNULL(ete.SickLeaveHours, 0),
            IF(
                p.PartNo='Maternity/paternity leave',
                IFNULL(e.MaternityLeaveAllowance, 0) - IFNULL(ete.MaternityLeaveHours, 0),
                IFNULL(e.OtherLeaveAllowance, 0) - IFNULL(ete.OtherLeaveHours, 0)
            )
        )
    ),
    '0'
FROM product p
INNER JOIN paystub ps
ON (
    ps.EmployeeID = EmpID AND
    ps.OrganizationID = p.OrganizationID AND
    ps.PayPeriodID = PayPeriodRowID AND
    ps.RowID IS NOT NULL
)
INNER JOIN category c
ON c.CategoryName='Leave Type'
    AND c.OrganizationID=p.OrganizationID
    AND c.RowID=p.CategoryID
LEFT JOIN employee e
ON e.RowID = EmpID AND
    e.OrganizationID=OrganizID AND
    (ADDDATE(e.StartDate, INTERVAL 2 YEAR) <= ps.PayToDate OR ADDDATE(e.StartDate, INTERVAL 1 YEAR) BETWEEN minimum_date AND maximum_date)
LEFT JOIN (
    SELECT
        et.RowID,
        et.EmployeeID,
        SUM(et.VacationLeaveHours) AS VacationLeaveHours,
        SUM(et.SickLeaveHours) AS SickLeaveHours,
        SUM(et.MaternityLeaveHours) AS MaternityLeaveHours,
        SUM(et.OtherLeaveHours) AS OtherLeaveHours
    FROM employeetimeentry et
    WHERE et.OrganizationID=OrganizID
        AND (et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) > 0
        AND et.`Date` BETWEEN minimum_date AND maximum_date
    GROUP BY et.EmployeeID
) ete
ON ete.RowID IS NOT NULL AND
    ete.EmployeeID = e.RowID
WHERE p.OrganizationID = OrganizID
ON DUPLICATE KEY
UPDATE
    LastUpd = CURRENT_TIMESTAMP(),
    LastUpdBy = UserRowID,
    PayAmount = IF(
        p.PartNo='Vacation leave',
        IFNULL(e.LeaveAllowance, 0) - IFNULL(ete.VacationLeaveHours, 0),
        IF(
            p.PartNo='Sick leave',
            IFNULL(e.SickLeaveAllowance, 0) - IFNULL(ete.SickLeaveHours, 0),
            IF(
                p.PartNo='Maternity/paternity leave',
                IFNULL(e.MaternityLeaveAllowance, 0) - IFNULL(ete.MaternityLeaveHours, 0),
                IFNULL(e.OtherLeaveAllowance, 0) - IFNULL(ete.OtherLeaveHours, 0)
            )
        )
    );

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.UPD_employeeshift
DROP PROCEDURE IF EXISTS `UPD_employeeshift`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `UPD_employeeshift`(IN `esh_RowID` INT, IN `UserRowID` INT, IN `esh_DateFrom` DATE, IN `esh_DateTo` DATE, IN `esh_ShiftID` INT, IN `esh_NShift` TINYINT, IN `esh_IsRestDay` TINYINT)
    DETERMINISTIC
BEGIN

UPDATE employeeshift
SET
lastupd = CURRENT_TIMESTAMP()
, lastupdby = UserRowID
, EffectiveFrom = esh_DateFrom
, EffectiveTo = esh_DateTo
, ShiftID = IF(IFNULL(esh_ShiftID,0)=0, NULL, esh_ShiftID)
, NightShift = esh_NShift
, RestDay = esh_IsRestDay
WHERE RowID = esh_RowID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.UPD_leavebalance_newlyjoinedemployee
DROP PROCEDURE IF EXISTS `UPD_leavebalance_newlyjoinedemployee`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `UPD_leavebalance_newlyjoinedemployee`(IN `og_rowid` INT, IN `param_date` DATE, IN `e_rowid` INT, IN `user_rowid` INT)
BEGIN

DECLARE leave_type TEXT DEFAULT 'Leave type';

IF e_rowid IS NULL THEN

	/**/
	UPDATE employee e
	INNER JOIN (
	            SELECT
					# e.*
					e.RowID
					, pp.`Year`
					# , (@max_date := STR_TO_DATE(MAX(pyp.PayToDate), @@date_format)) `MaxPayToDate`
					, STR_TO_DATE(MAX(pyp.PayToDate), @@date_format) `MaxPayToDate`
					# , (e.DateRegularized BETWEEN param_date AND STR_TO_DATE(MAX(pyp.PayToDate), @@date_format)) `IsDateRegularizedThisYear`
					, (e.DateRegularized BETWEEN param_date AND MAX(pyp.PayToDate)) `IsDateRegularizedThisYear`
					
					, pp.OrdinalValue
					, pp.PayFromDate, pp.PayToDate

					# , (@_count := COUNT(pyp.RowID)) `CountRecord`
					, (@_count := MAX(pyp.OrdinalValue)) `CountRecord`
					
					, (@_ctr := ((@_count - pp.OrdinalValue) + 1)) `CountRec`
					
					, ROUND((e.LeaveAllowance * ( @_ctr / @_count )), 2) `VLeaveBal`
					, ROUND((e.SickLeaveAllowance * ( @_ctr / @_count )), 2) `SLeaveBal`
					, ROUND((e.OtherLeaveAllowance * ( @_ctr / @_count )), 2) `OLeaveBal`
					, ROUND((e.MaternityLeaveAllowance * ( @_ctr / @_count )), 2) `MLeaveBal`
					
					FROM employee e
					INNER JOIN payperiod pp ON pp.TotalGrossSalary = e.PayFrequencyID AND pp.OrganizationID = e.OrganizationID AND e.DateRegularized BETWEEN pp.PayFromDate AND pp.PayToDate
					
					# INNER JOIN payperiod ppd ON ppd.TotalGrossSalary = e.PayFrequencyID AND ppd.OrganizationID = e.OrganizationID AND param_date BETWEEN ppd.PayFromDate AND ppd.PayToDate
					
					INNER JOIN payperiod pyp ON pyp.OrganizationID = pp.OrganizationID AND pyp.TotalGrossSalary = pp.TotalGrossSalary AND pyp.`Year` = pp.`Year`
					
					WHERE e.DateRegularized IS NOT NULL
					AND e.OrganizationID = og_rowid
					AND YEAR(e.DateRegularized) = YEAR(param_date)
					AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
					GROUP BY e.RowID
	        /**/ ) ee ON ee.RowID = e.RowID #AND ee.`IsDateRegularizedThisYear` = TRUE
	
	SET
	e.LeaveBalance = ee.`VLeaveBal`
	, e.SickLeaveBalance = ee.`SLeaveBal`
	, e.OtherLeaveBalance = ee.`OLeaveBal`
	, e.MaternityLeaveBalance = ee.`MLeaveBal`
	WHERE e.OrganizationID = og_rowid
	;
	
	SET @curr_timestamp = CURRENT_TIMESTAMP();
	
	INSERT INTO leavetransaction(OrganizationID,Created,CreatedBy,EmployeeID,ReferenceID,LeaveLedgerID,PayPeriodID,TransactionDate,`Type`,Balance,Amount,Comments)
	SELECT
	p.OrganizationID
	, @curr_timestamp
	, user_rowid
	, ee.RowID
	, NULL
	, ll.RowID
	, ee.`PayPeriodID`
	, ee.PayFromDate
	, 'Credit'
	, IF(p.PartNo = 'Vacation leave'
	     , ee.`VLeaveBal`
		  , IF(p.PartNo = 'Sick leave'
		       , ee.`SLeaveBal`
				 , IF(p.PartNo = 'Maternity/paternity leave'
				      , ee.`MLeaveBal`
						, IF(p.PartNo = 'Others'
						     , ee.`OLeaveBal`
							  , 0) # 'Leave w/o Pay'
							  )))
	, 0
	, p.PartNo
	
	FROM product p
	
	INNER JOIN (
	            SELECT
					e.RowID
					, pp.`Year`
					, pp.RowID `PayPeriodID`
					, STR_TO_DATE(MAX(pyp.PayToDate), @@date_format) `MaxPayToDate`
					, (e.DateRegularized BETWEEN param_date AND MAX(pyp.PayToDate)) `IsDateRegularizedThisYear`
					
					, pp.OrdinalValue
					, pp.PayFromDate, pp.PayToDate

					, (@_count := MAX(pyp.OrdinalValue)) `CountRecord`
					
					, (@_ctr := ((@_count - pp.OrdinalValue) + 1)) `CountRec`
					
					, ROUND((e.LeaveAllowance * ( @_ctr / @_count )), 2) `VLeaveBal`
					, ROUND((e.SickLeaveAllowance * ( @_ctr / @_count )), 2) `SLeaveBal`
					, ROUND((e.OtherLeaveAllowance * ( @_ctr / @_count )), 2) `OLeaveBal`
					, ROUND((e.MaternityLeaveAllowance * ( @_ctr / @_count )), 2) `MLeaveBal`
					
					FROM employee e
					INNER JOIN payperiod pp ON pp.TotalGrossSalary = e.PayFrequencyID AND pp.OrganizationID = e.OrganizationID AND e.DateRegularized BETWEEN pp.PayFromDate AND pp.PayToDate
					
					INNER JOIN payperiod pyp ON pyp.OrganizationID = pp.OrganizationID AND pyp.TotalGrossSalary = pp.TotalGrossSalary AND pyp.`Year` = pp.`Year`
					
					WHERE e.DateRegularized IS NOT NULL
					AND e.OrganizationID = og_rowid
					AND YEAR(e.DateRegularized) = YEAR(param_date)
					AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
					GROUP BY e.RowID
	            ) ee ON ee.RowID > 0 #AND ee.`IsDateRegularizedThisYear` = TRUE
	
	INNER JOIN leaveledger ll
	        ON ll.OrganizationID = p.OrganizationID
			     AND ll.ProductID = p.RowID
			     AND ll.EmployeeID = ee.RowID
	
	WHERE p.OrganizationID=og_rowid
	AND p.`Category`=leave_type
	;
	
	UPDATE leaveledger ll
	INNER JOIN leavetransaction lt
	        ON lt.Created = @curr_timestamp
			     AND lt.OrganizationID=ll.OrganizationID
			     AND lt.EmployeeID = ll.EmployeeID
			     AND lt.LeaveLedgerID = ll.RowID
	SET
	ll.LastTransactionID = lt.RowID
	, ll.LastUpd = @curr_timestamp
	, ll.LastUpdBy = user_rowid
	WHERE ll.OrganizationID = og_rowid
	;
	
	/*
	TO DO : prioritize sick leave balance, always borrow from VL to fill sick leave balance
	*/
	INSERT INTO leavetransaction(OrganizationID,Created,CreatedBy,EmployeeID,ReferenceID,LeaveLedgerID,PayPeriodID,TransactionDate,`Type`,Balance,Amount,Comments)
	SELECT
	p.OrganizationID
	, ADDDATE(@curr_timestamp, INTERVAL 1 SECOND)
	, user_rowid
	, ee.RowID
	, NULL
	, ll.RowID
	, ee.`PayPeriodID`
	, ee.PayFromDate
	, IF(p.PartNo = 'Sick leave', 'Credit', 'Debit')
	, IF(p.PartNo = 'Vacation leave'
	     , ee.`VLeaveBal`
		  , ee.`SLeaveBal`)
	, ABS( (ee.`SLeaveBal` - ee.SickLeaveAllowance) )
	, p.PartNo
	
	FROM product p
	
	INNER JOIN (
	            SELECT
					e.RowID
					, pp.`Year`
					, pp.RowID `PayPeriodID`
					, STR_TO_DATE(MAX(pyp.PayToDate), @@date_format) `MaxPayToDate`
					, (e.DateRegularized BETWEEN param_date AND MAX(pyp.PayToDate)) `IsDateRegularizedThisYear`
					
					, pp.OrdinalValue
					, pp.PayFromDate, pp.PayToDate

					, (@_count := MAX(pyp.OrdinalValue)) `CountRecord`
					
					, (@_ctr := ((@_count - pp.OrdinalValue) + 1)) `CountRec`
					
					, e.LeaveAllowance
					, e.SickLeaveAllowance
					
					, ROUND((e.LeaveAllowance * ( @_ctr / @_count )), 2) `VLeaveBal`
					, ROUND((e.SickLeaveAllowance * ( @_ctr / @_count )), 2) `SLeaveBal`
					, ROUND((e.OtherLeaveAllowance * ( @_ctr / @_count )), 2) `OLeaveBal`
					, ROUND((e.MaternityLeaveAllowance * ( @_ctr / @_count )), 2) `MLeaveBal`
					
					FROM employee e
					INNER JOIN payperiod pp ON pp.TotalGrossSalary = e.PayFrequencyID AND pp.OrganizationID = e.OrganizationID AND e.DateRegularized BETWEEN pp.PayFromDate AND pp.PayToDate
					
					INNER JOIN payperiod pyp ON pyp.OrganizationID = pp.OrganizationID AND pyp.TotalGrossSalary = pp.TotalGrossSalary AND pyp.`Year` = pp.`Year`
					
					WHERE e.DateRegularized IS NOT NULL
					AND e.OrganizationID = og_rowid
					AND YEAR(e.DateRegularized) = YEAR(param_date)
					AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
					GROUP BY e.RowID
	            ) ee ON ee.RowID > 0 #AND ee.`IsDateRegularizedThisYear` = TRUE
	
	INNER JOIN leaveledger ll
	        ON ll.OrganizationID = p.OrganizationID
			     AND ll.ProductID = p.RowID
			     AND ll.EmployeeID = ee.RowID
	
	WHERE p.OrganizationID=og_rowid
	AND p.`Category`=leave_type
	AND p.PartNo IN ('Vacation leave', 'Sick leave')
	AND (IF(p.PartNo = 'Vacation leave', ee.`VLeaveBal`, ee.`SLeaveBal`) != 0
	     AND ABS( (ee.`SLeaveBal` - ee.SickLeaveAllowance) ) != 0)
	;
	
	UPDATE leaveledger ll
	INNER JOIN leavetransaction lt
	        ON lt.Created = ADDDATE(@curr_timestamp, INTERVAL 1 SECOND)
			     AND lt.OrganizationID=ll.OrganizationID
			     AND lt.EmployeeID = ll.EmployeeID
			     AND lt.LeaveLedgerID = ll.RowID
	SET
	ll.LastTransactionID = lt.RowID
	, ll.LastUpd = ADDDATE(@curr_timestamp, INTERVAL 1 SECOND)
	, ll.LastUpdBy = user_rowid
	WHERE ll.OrganizationID = og_rowid
	;
	
	# #######################################################################
	# #######################################################################
	
	/*
	- after credited pro-rated leave balances
	- gather all filed leaves and debit those to the credited leave balances
	- make an insert statement for leavetransaction
	- and update leaveledger to latest
	*/
	CALL UPD_leaveledger_newjoinedemployee(og_rowid, param_date, e_rowid, user_rowid);
	
ELSEIF e_rowid IS NOT NULL THEN

	UPDATE employee e
	INNER JOIN (
	            SELECT
					# e.*
					e.RowID
					, pp.`Year`
					, STR_TO_DATE(MAX(pyp.PayToDate), @@date_format) `MaxPayToDate`
					, (e.DateRegularized BETWEEN param_date AND MAX(pyp.PayToDate)) `IsDateRegularizedThisYear`
					
					, pp.OrdinalValue
					, pp.PayFromDate, pp.PayToDate

					, (@_count := COUNT(pyp.RowID)) `CountRecord`
					
					, (@_ctr := ((@_count - pp.OrdinalValue) + 1)) `CountRec`
					
					, ROUND((e.LeaveAllowance * ( @_ctr / @_count )), 2) `VLeaveBal`
					, ROUND((e.SickLeaveAllowance * ( @_ctr / @_count )), 2) `SLeaveBal`
					, ROUND((e.OtherLeaveAllowance * ( @_ctr / @_count )), 2) `OLeaveBal`
					, ROUND((e.MaternityLeaveAllowance * ( @_ctr / @_count )), 2) `MLeaveBal`
					
					FROM employee e
					INNER JOIN payperiod pp ON pp.TotalGrossSalary = e.PayFrequencyID AND pp.OrganizationID = e.OrganizationID AND e.DateRegularized BETWEEN pp.PayFromDate AND pp.PayToDate
					
					# INNER JOIN payperiod ppd ON ppd.TotalGrossSalary = e.PayFrequencyID AND ppd.OrganizationID = e.OrganizationID AND param_date BETWEEN ppd.PayFromDate AND ppd.PayToDate
					
					INNER JOIN payperiod pyp ON pyp.OrganizationID = pp.OrganizationID AND pyp.TotalGrossSalary = pp.TotalGrossSalary AND pyp.`Year` = pp.`Year`
					
					WHERE e.RowID = e_rowid
					AND e.DateRegularized IS NOT NULL
					AND e.OrganizationID = og_rowid
					AND YEAR(e.DateRegularized) = YEAR(param_date)
					AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
					GROUP BY e.RowID
	            ) ee ON ee.RowID = e.RowID #AND ee.`IsDateRegularizedThisYear` = TRUE
	
	SET
	e.LeaveBalance = ee.`VLeaveBal`
	, e.SickLeaveBalance = ee.`SLeaveBal`
	, e.OtherLeaveBalance = ee.`OLeaveBal`
	, e.MaternityLeaveBalance = ee.`MLeaveBal`
	WHERE e.OrganizationID = og_rowid
	;
	
	INSERT INTO leavetransaction(OrganizationID,Created,CreatedBy,EmployeeID,ReferenceID,LeaveLedgerID,PayPeriodID,TransactionDate,`Type`,Balance,Amount,Comments)
	SELECT
	p.OrganizationID
	, CURRENT_TIMESTAMP()
	, user_rowid
	, ee.RowID
	, NULL
	, ll.RowID
	, ee.`PayPeriodID`
	, ee.PayFromDate
	, 'Credit'
	, IF(p.PartNo = 'Vacation leave'
	     , ee.`VLeaveBal`
		  , IF(p.PartNo = 'Sick leave'
		       , ee.`SLeaveBal`
				 , IF(p.PartNo = 'Maternity/paternity leave'
				      , ee.`MLeaveBal`
						, IF(p.PartNo = 'Others'
						     , ee.`OLeaveBal`
							  , 0) # 'Leave w/o Pay'
							  )))
	, 0
	, p.PartNo
	
	FROM product p
	
	INNER JOIN (
	            SELECT
					e.RowID
					, pp.`Year`
					, pp.RowID `PayPeriodID`
					, STR_TO_DATE(MAX(pyp.PayToDate), @@date_format) `MaxPayToDate`
					, (e.DateRegularized BETWEEN param_date AND MAX(pyp.PayToDate)) `IsDateRegularizedThisYear`
					
					, pp.OrdinalValue
					, pp.PayFromDate, pp.PayToDate

					, (@_count := MAX(pyp.OrdinalValue)) `CountRecord`
					
					, (@_ctr := ((@_count - pp.OrdinalValue) + 1)) `CountRec`
					
					, ROUND((e.LeaveAllowance * ( @_ctr / @_count )), 2) `VLeaveBal`
					, ROUND((e.SickLeaveAllowance * ( @_ctr / @_count )), 2) `SLeaveBal`
					, ROUND((e.OtherLeaveAllowance * ( @_ctr / @_count )), 2) `OLeaveBal`
					, ROUND((e.MaternityLeaveAllowance * ( @_ctr / @_count )), 2) `MLeaveBal`
					
					FROM employee e
					INNER JOIN payperiod pp ON pp.TotalGrossSalary = e.PayFrequencyID AND pp.OrganizationID = e.OrganizationID AND e.DateRegularized BETWEEN pp.PayFromDate AND pp.PayToDate
					
					INNER JOIN payperiod pyp ON pyp.OrganizationID = pp.OrganizationID AND pyp.TotalGrossSalary = pp.TotalGrossSalary AND pyp.`Year` = pp.`Year`
					
					WHERE e.RowID = e_rowid
					AND e.DateRegularized IS NOT NULL
					AND e.OrganizationID = og_rowid
					AND YEAR(e.DateRegularized) = YEAR(param_date)
					AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
					GROUP BY e.RowID
	            ) ee ON ee.RowID > 0 #AND ee.`IsDateRegularizedThisYear` = TRUE
	
	INNER JOIN leaveledger ll
	        ON ll.OrganizationID = p.OrganizationID
			     AND ll.ProductID = p.RowID
			     AND ll.EmployeeID = ee.RowID
	
	WHERE p.OrganizationID=og_rowid
	AND p.`Category`=leave_type
	;
	
	UPDATE leaveledger ll
	INNER JOIN leavetransaction lt
	        ON lt.Created = @curr_timestamp
			     AND lt.OrganizationID=ll.OrganizationID
			     AND lt.EmployeeID = ll.EmployeeID
			     AND lt.EmployeeID = e_rowid
	SET
	ll.LastTransactionID = lt.RowID
	, ll.LastUpd = @curr_timestamp
	, ll.LastUpdBy = user_rowid
	WHERE ll.OrganizationID = og_rowid
	;
	
	# ###################################################################################
	/*
	UPDATE employee e
	INNER JOIN (
	            SELECT
					# e.*
					e.RowID
					, pp.`Year`
					, STR_TO_DATE(MAX(pyp.PayToDate), @@date_format) `MaxPayToDate`
					, (e.DateRegularized BETWEEN param_date AND MAX(pyp.PayToDate)) `IsDateRegularizedThisYear`
					
					, (@_count := COUNT(pyp.RowID)) `CountRecord`
					
					, e.LeaveAllowance `VLeaveBal`
					, e.SickLeaveAllowance `SLeaveBal`
					, e.OtherLeaveAllowance `OLeaveBal`
					, e.MaternityLeaveAllowance `MLeaveBal`
					
					FROM employee e
					INNER JOIN payperiod pp ON pp.TotalGrossSalary = e.PayFrequencyID AND pp.OrganizationID = e.OrganizationID AND e.DateRegularized BETWEEN pp.PayFromDate AND pp.PayToDate
					
					# INNER JOIN payperiod ppd ON ppd.TotalGrossSalary = e.PayFrequencyID AND ppd.OrganizationID = e.OrganizationID AND param_date BETWEEN ppd.PayFromDate AND ppd.PayToDate
					
					INNER JOIN payperiod pyp ON pyp.OrganizationID = pp.OrganizationID AND pyp.TotalGrossSalary = pp.TotalGrossSalary AND pyp.`Year` = pp.`Year`
					
					WHERE e.RowID = e_rowid
					AND e.DateRegularized IS NOT NULL
					AND e.OrganizationID = og_rowid
					AND YEAR(e.DateRegularized) < YEAR(param_date)
					GROUP BY e.RowID
	            ) ee ON ee.RowID = e.RowID
	
	SET
	e.LeaveBalance = ee.`VLeaveBal`
	, e.SickLeaveBalance = ee.`SLeaveBal`
	, e.OtherLeaveBalance = ee.`OLeaveBal`
	, e.MaternityLeaveBalance = ee.`MLeaveBal`
	WHERE e.OrganizationID = og_rowid
	;
	*/
END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.UPD_leaveledger_newjoinedemployee
DROP PROCEDURE IF EXISTS `UPD_leaveledger_newjoinedemployee`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `UPD_leaveledger_newjoinedemployee`(IN `og_rowid` INT, IN `param_date` DATE, IN `e_rowid` INT, IN `user_rowid` INT)
BEGIN

DECLARE leave_type TEXT DEFAULT 'Leave type';

DECLARE vl_text
        ,sl_text
        ,ml_text
        ,ol_text
        ,lwp_text TEXT;
   
DECLARE is_hyundai_sysown BOOL DEFAULT FALSE;
	
	SELECT EXISTS(SELECT so.RowID FROM systemowner so WHERE so.Name='Hyundai' AND so.IsCurrentOwner='1')
	INTO is_hyundai_sysown;

	SET vl_text = 'Vacation leave';
	SET sl_text = 'Sick leave';
	SET ml_text = 'Maternity/paternity leave';
	SET ol_text = 'Others';
	SET lwp_text = 'Leave w/o Pay';
	
	SET @curr_timestamp = CURRENT_TIMESTAMP();
	
	INSERT INTO leavetransaction(OrganizationID,Created,CreatedBy,EmployeeID,ReferenceID,LeaveLedgerID,PayPeriodID,TransactionDate,`Type`,Balance,Amount,Comments)
	SELECT
	p.OrganizationID
	, @curr_timestamp
	, user_rowid
	, ee.RowID
	, NULL
	, ll.RowID
	, ee.`PayPeriodID`
	, ee.PayFromDate
	, 'Debit'
	, ( lt.Balance + (lt.Amount * IF(lt.`Type`='Credit', 1, -1)) )
	, prdct.`LeaveHours`
	, p.PartNo
	
	FROM product p
	
	INNER JOIN (SELECT
					e.RowID
					, pp.`Year`
					, pp.RowID `PayPeriodID`
					, STR_TO_DATE(MAX(pyp.PayToDate), @@date_format) `MaxPayToDate`
					, (e.DateRegularized BETWEEN param_date AND MAX(pyp.PayToDate)) `IsDateRegularizedThisYear`
					
					, pp.OrdinalValue
					, pp.PayFromDate, pp.PayToDate
					
					FROM employee e
					INNER JOIN payperiod pp ON pp.TotalGrossSalary = e.PayFrequencyID AND pp.OrganizationID = e.OrganizationID AND e.DateRegularized BETWEEN pp.PayFromDate AND pp.PayToDate
					
					INNER JOIN payperiod pyp ON pyp.OrganizationID = pp.OrganizationID AND pyp.TotalGrossSalary = pp.TotalGrossSalary AND pyp.`Year` = pp.`Year`
					
					WHERE e.DateRegularized IS NOT NULL
					AND e.OrganizationID = og_rowid
					AND YEAR(e.DateRegularized) = YEAR(param_date)
					AND FIND_IN_SET(e.EmploymentStatus, UNEMPLOYEMENT_STATUSES()) = 0
					GROUP BY e.RowID
	            ) ee ON ee.RowID > 0 #AND ee.`IsDateRegularizedThisYear` = TRUE
	
	INNER JOIN leaveledger ll
	        ON ll.OrganizationID = p.OrganizationID
			     AND ll.ProductID = p.RowID
			     AND ll.EmployeeID = ee.RowID
	
	INNER JOIN leavetransaction lt ON lt.RowID=ll.LastTransactionID
	
	INNER JOIN (SELECT p.*
					, em.EmployeeID
					, em.`PayPeriodID`
					, em.`LeaveHours`
					FROM product p
					INNER JOIN (
									SELECT et.RowID
									, et.EmployeeID
									, ppd.RowID `PayPeriodID`
									, SUM(et.VacationLeaveHours) `LeaveHours`
									FROM employeetimeentry et
									INNER JOIN (
									            SELECT e.*
													, IF(is_hyundai_sysown, MAKEDATE(pp.`Year`, 1), pp.PayFromDate) `PayFromDate`
													, MAX(ppd.PayToDate) `PayToDate`
													, PROPERCASE(CONCAT_WS(', ', e.LastName, e.FirstName)) `FullName`
													FROM employee e
													INNER JOIN payperiod pp ON pp.OrganizationID=e.OrganizationID AND pp.TotalGrossSalary =e.PayFrequencyID AND e.DateRegularized BETWEEN pp.PayFromDate AND pp.PayToDate AND pp.`Year`=YEAR(param_date)
													
													INNER JOIN payperiod ppd ON ppd.OrganizationID=pp.OrganizationID AND ppd.TotalGrossSalary=pp.TotalGrossSalary AND ppd.`Year`=pp.`Year`
													GROUP BY e.RowID
									            ) ee ON ee.RowID = et.EmployeeID AND ee.OrganizationID = et.OrganizationID AND et.`Date` BETWEEN ee.PayFromDate AND ee.`PayToDate`
									
									INNER JOIN payperiod ppd ON ppd.OrganizationID=et.OrganizationID AND ppd.TotalGrossSalary=ee.PayFrequencyID AND et.`Date` BETWEEN ppd.PayFromDate AND ppd.PayToDate
									
									# WHERE (et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) > 0
									WHERE et.OrganizationID = og_rowid
									GROUP BY et.EmployeeID#, ppd.RowID
					            ) em ON em.EmployeeID > 0
					WHERE p.`Category` = leave_type
					AND p.OrganizationID = og_rowid
					AND p.PartNo = vl_text
				UNION
					SELECT p.*
					, em.EmployeeID
					, em.`PayPeriodID`
					, em.`LeaveHours`
					FROM product p
					INNER JOIN (
									SELECT et.RowID
									, et.EmployeeID
									, ppd.RowID `PayPeriodID`
									, SUM(et.SickLeaveHours) `LeaveHours`
									FROM employeetimeentry et
									INNER JOIN (
									            SELECT e.*
													, pp.PayFromDate
													, MAX(ppd.PayToDate) `PayToDate`
													, PROPERCASE(CONCAT_WS(', ', e.LastName, e.FirstName)) `FullName`
													FROM employee e
													INNER JOIN payperiod pp ON pp.OrganizationID=e.OrganizationID AND pp.TotalGrossSalary =e.PayFrequencyID AND e.DateRegularized BETWEEN pp.PayFromDate AND pp.PayToDate AND pp.`Year`=YEAR(param_date)
													
													INNER JOIN payperiod ppd ON ppd.OrganizationID=pp.OrganizationID AND ppd.TotalGrossSalary=pp.TotalGrossSalary AND ppd.`Year`=pp.`Year`
													GROUP BY e.RowID
									            ) ee ON ee.RowID = et.EmployeeID AND ee.OrganizationID = et.OrganizationID AND et.`Date` BETWEEN ee.PayFromDate AND ee.`PayToDate`
									
									INNER JOIN payperiod ppd ON ppd.OrganizationID=et.OrganizationID AND ppd.TotalGrossSalary=ee.PayFrequencyID AND et.`Date` BETWEEN ppd.PayFromDate AND ppd.PayToDate
									
									WHERE et.OrganizationID = og_rowid
									GROUP BY et.EmployeeID#, ppd.RowID
					            ) em ON em.EmployeeID > 0
					WHERE p.`Category` = leave_type
					AND p.OrganizationID = og_rowid
					AND p.PartNo = sl_text
				UNION
					SELECT p.*
					, em.EmployeeID
					, em.`PayPeriodID`
					, em.`LeaveHours`
					FROM product p
					INNER JOIN (
									SELECT et.RowID
									, et.EmployeeID
									, ppd.RowID `PayPeriodID`
									, SUM(et.MaternityLeaveHours) `LeaveHours`
									FROM employeetimeentry et
									INNER JOIN (
									            SELECT e.*
													, pp.PayFromDate
													, MAX(ppd.PayToDate) `PayToDate`
													, PROPERCASE(CONCAT_WS(', ', e.LastName, e.FirstName)) `FullName`
													FROM employee e
													INNER JOIN payperiod pp ON pp.OrganizationID=e.OrganizationID AND pp.TotalGrossSalary =e.PayFrequencyID AND e.DateRegularized BETWEEN pp.PayFromDate AND pp.PayToDate AND pp.`Year`=YEAR(param_date)
													
													INNER JOIN payperiod ppd ON ppd.OrganizationID=pp.OrganizationID AND ppd.TotalGrossSalary=pp.TotalGrossSalary AND ppd.`Year`=pp.`Year`
													GROUP BY e.RowID
									            ) ee ON ee.RowID = et.EmployeeID AND ee.OrganizationID = et.OrganizationID AND et.`Date` BETWEEN ee.PayFromDate AND ee.`PayToDate`
									
									INNER JOIN payperiod ppd ON ppd.OrganizationID=et.OrganizationID AND ppd.TotalGrossSalary=ee.PayFrequencyID AND et.`Date` BETWEEN ppd.PayFromDate AND ppd.PayToDate
									
									WHERE et.OrganizationID = og_rowid
									GROUP BY et.EmployeeID#, ppd.RowID
					            ) em ON em.EmployeeID > 0
					WHERE p.`Category` = leave_type
					AND p.OrganizationID = og_rowid
					AND p.PartNo = ml_text
				UNION
					SELECT p.*
					, em.EmployeeID
					, em.`PayPeriodID`
					, em.`LeaveHours`
					FROM product p
					INNER JOIN (
									SELECT et.RowID
									, et.EmployeeID
									, ppd.RowID `PayPeriodID`
									, SUM(et.OtherLeaveHours) `LeaveHours`
									FROM employeetimeentry et
									INNER JOIN (
									            SELECT e.*
													, pp.PayFromDate
													, MAX(ppd.PayToDate) `PayToDate`
													, PROPERCASE(CONCAT_WS(', ', e.LastName, e.FirstName)) `FullName`
													FROM employee e
													INNER JOIN payperiod pp ON pp.OrganizationID=e.OrganizationID AND pp.TotalGrossSalary =e.PayFrequencyID AND e.DateRegularized BETWEEN pp.PayFromDate AND pp.PayToDate AND pp.`Year`=YEAR(param_date)
													
													INNER JOIN payperiod ppd ON ppd.OrganizationID=pp.OrganizationID AND ppd.TotalGrossSalary=pp.TotalGrossSalary AND ppd.`Year`=pp.`Year`
													GROUP BY e.RowID
									            ) ee ON ee.RowID = et.EmployeeID AND ee.OrganizationID = et.OrganizationID AND et.`Date` BETWEEN ee.PayFromDate AND ee.`PayToDate`
									
									INNER JOIN payperiod ppd ON ppd.OrganizationID=et.OrganizationID AND ppd.TotalGrossSalary=ee.PayFrequencyID AND et.`Date` BETWEEN ppd.PayFromDate AND ppd.PayToDate
									
									WHERE et.OrganizationID = og_rowid
									GROUP BY et.EmployeeID#, ppd.RowID
					            ) em ON em.EmployeeID > 0
					WHERE p.`Category` = leave_type
					AND p.OrganizationID = og_rowid
					AND p.PartNo = ol_text
					
				/*UNION
					SELECT p.*
					FROM product p
					WHERE p.`Category` = leave_type
					AND p.OrganizationID = og_rowid
					AND p.PartNo = lwp_text*/
	           ) prdct ON ll.ProductID = prdct.RowID AND ll.EmployeeID = prdct.EmployeeID
	
	WHERE p.OrganizationID=og_rowid
	AND p.`Category`=leave_type
	AND  (( lt.Balance + (lt.Amount * IF(lt.`Type`='Credit', 1, -1)) ) != 0
	      AND prdct.`LeaveHours` != 0)
	;
	
	UPDATE leaveledger ll
	INNER JOIN leavetransaction lt
	        ON lt.Created = @curr_timestamp
			     AND lt.OrganizationID=ll.OrganizationID
			     AND lt.EmployeeID = ll.EmployeeID
			     AND lt.LeaveLedgerID = ll.RowID
	SET
	ll.LastTransactionID = lt.RowID
	, ll.LastUpd = CURRENT_TIMESTAMP()
	, ll.LastUpdBy = user_rowid
	WHERE ll.OrganizationID = og_rowid
	;
	
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.UPD_PreviousLoanId
DROP PROCEDURE IF EXISTS `UPD_PreviousLoanId`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `UPD_PreviousLoanId`(
	IN `organizationId` INT




)
BEGIN

DECLARE loanCount
        , indexNumber
		  , slpRowID
		  , loanId
		  , slpLoanId
		  , previousLoanId INT(11);

DECLARE ids TEXT;

SET loanId = NULL;
SET indexNumber = 0;

SELECT COUNT(slp.RowID)
, GROUP_CONCAT(slp.RowID)
FROM scheduledloansperpayperiod slp
WHERE slp.OrganizationID = organizationId
INTO loanCount
     , ids;

WHILE indexNumber < loanCount DO

	SELECT slp.RowID
	, slp.EmployeeLoanRecordID
	FROM scheduledloansperpayperiod slp
	INNER JOIN payperiod pp ON pp.RowID=slp.PayPeriodID
	WHERE slp.OrganizationID = organizationId
	AND FIND_IN_SET(slp.RowID, ids) > 0
	ORDER BY slp.EmployeeID, slp.EmployeeLoanRecordID, pp.`Year`, pp.OrdinalValue
	LIMIT indexNumber, 1
	INTO slpRowID
	     , slpLoanId;

	IF loanId = slpLoanId THEN
		UPDATE scheduledloansperpayperiod
		SET PreviousId = previousLoanId
		WHERE RowID = slpRowID;
		
		SET previousLoanId = slpRowID;
		
	ELSE
		SET loanId = slpLoanId;
		
		UPDATE scheduledloansperpayperiod
		SET PreviousId = NULL
		WHERE RowID = slpRowID;
		
		SET previousLoanId = slpRowID;
		
	END IF;
	
	SET indexNumber = indexNumber + 1;
END WHILE;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.UPD_WeeklyDeductionSched
DROP PROCEDURE IF EXISTS `UPD_WeeklyDeductionSched`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `UPD_WeeklyDeductionSched`(IN `og_rowid` INT, IN `is_employee_under_agency` BOOL, IN `text_benefit_deduction` VARCHAR(50), IN `benefit_weekly_deduction_sched` VARCHAR(50))
    DETERMINISTIC
    COMMENT 'is_employee_under_agency = (TRUE OR FALSE); text_benefit_deduction = (sss OR philhealth OR hdmf OR tax)'
BEGIN

DECLARE weekly_payfreq_id INT(11);


SELECT pf.RowID
FROM payfrequency pf
WHERE pf.PayFrequencyType = 'WEEKLY'
INTO weekly_payfreq_id;


# First week of the month,Second week of the month,Third week of the month,Last week of the month,Last Friday of the month

# text_benefit_deduction = (sss OR philhealth OR hdmf OR tax)


UPDATE payperiod pp
SET
pp.SSSWeeklyContribSched = 0
WHERE pp.TotalGrossSalary = weekly_payfreq_id
AND pp.OrganizationID = og_rowid
AND text_benefit_deduction = 'sss'
AND is_employee_under_agency = FALSE
;
UPDATE payperiod pp
SET
pp.PhHWeeklyContribSched = 0
WHERE pp.TotalGrossSalary = weekly_payfreq_id
AND pp.OrganizationID = og_rowid
AND text_benefit_deduction = 'philhealth'
AND is_employee_under_agency = FALSE
;
UPDATE payperiod pp
SET
pp.HDMFWeeklyContribSched = 0
WHERE pp.TotalGrossSalary = weekly_payfreq_id
AND pp.OrganizationID = og_rowid
AND text_benefit_deduction = 'hdmf'
AND is_employee_under_agency = FALSE
;
UPDATE payperiod pp
SET
pp.WTaxWeeklyContribSched = 0
WHERE pp.TotalGrossSalary = weekly_payfreq_id
AND pp.OrganizationID = og_rowid
AND text_benefit_deduction = 'tax'
AND is_employee_under_agency = FALSE
;

# ############################################################################################################

UPDATE payperiod pp
SET
pp.SSSWeeklyAgentContribSched = 0
WHERE pp.TotalGrossSalary = weekly_payfreq_id
AND pp.OrganizationID = og_rowid
AND text_benefit_deduction = 'sss'
AND is_employee_under_agency = TRUE
;
UPDATE payperiod pp
SET
pp.PhHWeeklyAgentContribSched = 0
WHERE pp.TotalGrossSalary = weekly_payfreq_id
AND pp.OrganizationID = og_rowid
AND text_benefit_deduction = 'philhealth'
AND is_employee_under_agency = TRUE
;
UPDATE payperiod pp
SET
pp.HDMFWeeklyAgentContribSched = 0
WHERE pp.TotalGrossSalary = weekly_payfreq_id
AND pp.OrganizationID = og_rowid
AND text_benefit_deduction = 'hdmf'
AND is_employee_under_agency = TRUE
;
UPDATE payperiod pp
SET
pp.WTaxWeeklyAgentContribSched = 0
WHERE pp.TotalGrossSalary = weekly_payfreq_id
AND pp.OrganizationID = og_rowid
AND text_benefit_deduction = 'tax'
AND is_employee_under_agency = TRUE
;


IF is_employee_under_agency THEN
	SET is_employee_under_agency = TRUE;
	
	IF benefit_weekly_deduction_sched = 'First week of the month' THEN
	
		IF text_benefit_deduction = 'sss' THEN
			
			UPDATE payperiod pp
			SET
			pp.SSSWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 1
			;
			
		ELSEIF text_benefit_deduction = 'philhealth' THEN
		
			UPDATE payperiod pp
			SET
			pp.PhHWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 1
			;
			
		ELSEIF text_benefit_deduction = 'hdmf' THEN
		
			UPDATE payperiod pp
			SET
			pp.HDMFWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 1
			;
			
		ELSEIF text_benefit_deduction = 'tax' THEN
		
			UPDATE payperiod pp
			SET
			pp.WTaxWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 1
			;
			
		END IF;
		
	ELSEIF benefit_weekly_deduction_sched = 'Second week of the month' THEN
	
		IF text_benefit_deduction = 'sss' THEN
			
			UPDATE payperiod pp
			SET
			pp.SSSWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 2
			;
			
		ELSEIF text_benefit_deduction = 'philhealth' THEN
		
			UPDATE payperiod pp
			SET
			pp.PhHWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 2
			;
			
		ELSEIF text_benefit_deduction = 'hdmf' THEN
		
			UPDATE payperiod pp
			SET
			pp.HDMFWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 2
			;
			
		ELSEIF text_benefit_deduction = 'tax' THEN
		
			UPDATE payperiod pp
			SET
			pp.WTaxWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 2
			;
			
		END IF;
		
	ELSEIF benefit_weekly_deduction_sched = 'Third week of the month' THEN
		
		IF text_benefit_deduction = 'sss' THEN
			
			UPDATE payperiod pp
			SET
			pp.SSSWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 3
			;
			
		ELSEIF text_benefit_deduction = 'philhealth' THEN
		
			UPDATE payperiod pp
			SET
			pp.PhHWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 3
			;
			
		ELSEIF text_benefit_deduction = 'hdmf' THEN
		
			UPDATE payperiod pp
			SET
			pp.HDMFWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 3
			;
			
		ELSEIF text_benefit_deduction = 'tax' THEN
		
			UPDATE payperiod pp
			SET
			pp.WTaxWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 3
			;
			
		END IF;
		
	ELSEIF benefit_weekly_deduction_sched = 'Last week of the month' THEN
	
		SET SESSION group_concat_max_len = 1024000;
		
		SET @row_ids = NULL;
		
		SELECT GROUP_CONCAT(pp.RowID) `Result`
		# SELECT pp.*
		FROM payperiod pp
		INNER JOIN (SELECT pp.*
						, MAX(pp.WeekOridnalValue) `MaxWeekOridnalValue`
						FROM payperiod pp
						WHERE pp.TotalGrossSalary = weekly_payfreq_id
						AND pp.OrganizationID = og_rowid
						GROUP BY pp.`Year`, pp.`Month`
						) i
						ON i.OrganizationID = pp.OrganizationID
						   AND i.`Year` = pp.`Year`
						   AND i.`Month` = pp.`Month`
						   AND i.`MaxWeekOridnalValue` = pp.WeekOridnalValue
		WHERE pp.TotalGrossSalary = weekly_payfreq_id
		AND pp.OrganizationID = og_rowid
		INTO @row_ids
		;

		IF text_benefit_deduction = 'sss' THEN
		
			UPDATE payperiod pp
			SET
			pp.SSSWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE FIND_IN_SET(pp.RowID, @row_ids) > 0
			;
			
		ELSEIF text_benefit_deduction = 'philhealth' THEN
		
			UPDATE payperiod pp
			SET
			pp.PhHWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE FIND_IN_SET(pp.RowID, @row_ids) > 0
			;
			
		ELSEIF text_benefit_deduction = 'hdmf' THEN
		
			UPDATE payperiod pp
			SET
			pp.HDMFWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE FIND_IN_SET(pp.RowID, @row_ids) > 0
			;
			
		ELSEIF text_benefit_deduction = 'tax' THEN
		
			UPDATE payperiod pp
			SET
			pp.WTaxWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE FIND_IN_SET(pp.RowID, @row_ids) > 0
			;
			
		END IF;
		
	ELSEIF benefit_weekly_deduction_sched = 'Last Friday of the month' THEN
		
		IF text_benefit_deduction = 'sss' THEN
		
			UPDATE payperiod pp
			SET
			pp.SSSWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.IsLastFridayOfMonthFallsHere = 1
			;
			
		ELSEIF text_benefit_deduction = 'philhealth' THEN
		
			UPDATE payperiod pp
			SET
			pp.PhHWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.IsLastFridayOfMonthFallsHere = 1
			;
			
		ELSEIF text_benefit_deduction = 'hdmf' THEN
		
			UPDATE payperiod pp
			SET
			pp.HDMFWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.IsLastFridayOfMonthFallsHere = 1
			;
			
		ELSEIF text_benefit_deduction = 'tax' THEN
		
			UPDATE payperiod pp
			SET
			pp.WTaxWeeklyAgentContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.IsLastFridayOfMonthFallsHere = 1
			;
			
		END IF;
		
	END IF;
	
	
	
ELSE # ####################################################################################################################



	SET is_employee_under_agency = FALSE;
	
	IF benefit_weekly_deduction_sched = 'First week of the month' THEN
	
		IF text_benefit_deduction = 'sss' THEN
			
			UPDATE payperiod pp
			SET
			pp.SSSWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 1
			;
			
		ELSEIF text_benefit_deduction = 'philhealth' THEN
		
			UPDATE payperiod pp
			SET
			pp.PhHWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 1
			;
			
		ELSEIF text_benefit_deduction = 'hdmf' THEN
		
			UPDATE payperiod pp
			SET
			pp.HDMFWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 1
			;
			
		ELSEIF text_benefit_deduction = 'tax' THEN
		
			UPDATE payperiod pp
			SET
			pp.WTaxWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 1
			;
			
		END IF;
		
	ELSEIF benefit_weekly_deduction_sched = 'Second week of the month' THEN
	
		IF text_benefit_deduction = 'sss' THEN
			
			UPDATE payperiod pp
			SET
			pp.SSSWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 2
			;
			
		ELSEIF text_benefit_deduction = 'philhealth' THEN
		
			UPDATE payperiod pp
			SET
			pp.PhHWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 2
			;
			
		ELSEIF text_benefit_deduction = 'hdmf' THEN
		
			UPDATE payperiod pp
			SET
			pp.HDMFWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 2
			;
			
		ELSEIF text_benefit_deduction = 'tax' THEN
		
			UPDATE payperiod pp
			SET
			pp.WTaxWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 2
			;
			
		END IF;
		
	ELSEIF benefit_weekly_deduction_sched = 'Third week of the month' THEN
		
		IF text_benefit_deduction = 'sss' THEN
			
			UPDATE payperiod pp
			SET
			pp.SSSWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 3
			;
			
		ELSEIF text_benefit_deduction = 'philhealth' THEN
		
			UPDATE payperiod pp
			SET
			pp.PhHWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 3
			;
			
		ELSEIF text_benefit_deduction = 'hdmf' THEN
		
			UPDATE payperiod pp
			SET
			pp.HDMFWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 3
			;
			
		ELSEIF text_benefit_deduction = 'tax' THEN
		
			UPDATE payperiod pp
			SET
			pp.WTaxWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.WeekOridnalValue = 3
			;
			
		END IF;
		
	ELSEIF benefit_weekly_deduction_sched = 'Last week of the month' THEN
	
		SET SESSION group_concat_max_len = 1024000;
		
		SET @row_ids = NULL;
		
		SELECT GROUP_CONCAT(pp.RowID) `Result`
		# SELECT pp.*
		FROM payperiod pp
		INNER JOIN (SELECT pp.*
						, MAX(pp.WeekOridnalValue) `MaxWeekOridnalValue`
						FROM payperiod pp
						WHERE pp.TotalGrossSalary = weekly_payfreq_id
						AND pp.OrganizationID = og_rowid
						GROUP BY pp.`Year`, pp.`Month`
						) i
						ON i.OrganizationID = pp.OrganizationID
						   AND i.`Year` = pp.`Year`
						   AND i.`Month` = pp.`Month`
						   AND i.`MaxWeekOridnalValue` = pp.WeekOridnalValue
		WHERE pp.TotalGrossSalary = weekly_payfreq_id
		AND pp.OrganizationID = og_rowid
		INTO @row_ids
		;

		IF text_benefit_deduction = 'sss' THEN
		
			UPDATE payperiod pp
			SET
			pp.SSSWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE FIND_IN_SET(pp.RowID, @row_ids) > 0
			;
			
		ELSEIF text_benefit_deduction = 'philhealth' THEN
		
			UPDATE payperiod pp
			SET
			pp.PhHWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE FIND_IN_SET(pp.RowID, @row_ids) > 0
			;
			
		ELSEIF text_benefit_deduction = 'hdmf' THEN
		
			UPDATE payperiod pp
			SET
			pp.HDMFWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE FIND_IN_SET(pp.RowID, @row_ids) > 0
			;
			
		ELSEIF text_benefit_deduction = 'tax' THEN
		
			UPDATE payperiod pp
			SET
			pp.WTaxWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE FIND_IN_SET(pp.RowID, @row_ids) > 0
			;
			
		END IF;
		
	ELSEIF benefit_weekly_deduction_sched = 'Last Friday of the month' THEN
	
		IF text_benefit_deduction = 'sss' THEN
		
			UPDATE payperiod pp
			SET
			pp.SSSWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.IsLastFridayOfMonthFallsHere = 1
			;
			
		ELSEIF text_benefit_deduction = 'philhealth' THEN
		
			UPDATE payperiod pp
			SET
			pp.PhHWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.IsLastFridayOfMonthFallsHere = 1
			;
			
		ELSEIF text_benefit_deduction = 'hdmf' THEN
		
			UPDATE payperiod pp
			SET
			pp.HDMFWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.IsLastFridayOfMonthFallsHere = 1
			;
			
		ELSEIF text_benefit_deduction = 'tax' THEN
		
			UPDATE payperiod pp
			SET
			pp.WTaxWeeklyContribSched = 1
			, pp.LastUpd = CURRENT_TIMESTAMP()
			, pp.LastUpdBy = IFNULL(pp.LastUpdBy, pp.CreatedBy)
			WHERE pp.TotalGrossSalary = weekly_payfreq_id
			AND pp.OrganizationID = og_rowid
			AND pp.IsLastFridayOfMonthFallsHere = 1
			;
			
		END IF;
		
	END IF;
	
END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.USER_dropdownposition
DROP PROCEDURE IF EXISTS `USER_dropdownposition`;
DELIMITER //
CREATE DEFINER=`root`@`%` PROCEDURE `USER_dropdownposition`(IN `organizid` INT, IN `userrowid` INT)
    DETERMINISTIC
BEGIN

    SELECT p.RowID,p.PositionName
    FROM `position` p
    INNER JOIN (SELECT p.PositionName FROM `user` u INNER JOIN `position` p ON p.RowID=u.PositionID WHERE u.RowID=userrowid) pp ON lcase(TRIM(p.PositionName))!=lcase(TRIM(pp.PositionName))
    WHERE p.OrganizationID=organizid
UNION
    SELECT p.RowID,p.PositionName
    FROM `user` u INNER JOIN `position` p ON p.RowID=u.PositionID
    WHERE u.RowID=userrowid;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.U_Image
DROP PROCEDURE IF EXISTS `U_Image`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `U_Image`(IN `I_RowID` int(10), IN `I_Image` LONGBLOB
)
    DETERMINISTIC
BEGIN
UPDATE product SET

Image = I_Image
Where RowID = I_RowID;END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.U_Listofvalue
DROP PROCEDURE IF EXISTS `U_Listofvalue`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `U_Listofvalue`(IN `U_RowID` INT, IN `U_DisplayValue` VARCHAR(50), IN `U_LIC` VARCHAR(50), IN `U_Type` VARCHAR(50), IN `U_ParentLIC` VARCHAR(50), IN `U_Active` VARCHAR(50), IN `U_Description` VARCHAR(500), IN `U_Created` DATETIME, IN `U_CreatedBy` VARCHAR(50), IN `U_LastUpd` DATETIME, IN `U_OrderBy` INT, IN `U_LastUpdBy` VARCHAR(50)
)
    DETERMINISTIC
BEGIN
UPDATE listofval
    Set
RowID = U_RowID,
 DisplayValue = U_DisplayValue,
 LIC = U_LIC,
 Type = U_Type,
 ParentLIC = U_ParentLIC,
 Active = U_Active,
 Description = U_Description,
 Created = U_Created,
 CreatedBy = U_CreatedBy,
 LastUpd = U_LastUpd,
 OrderBy = U_OrderBy,
 LastUpdBy = U_LastUpdBy

 WHERE RowID = U_RowID;END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.U_listofvalues
DROP PROCEDURE IF EXISTS `U_listofvalues`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `U_listofvalues`(IN `U_RowID` INT(10), IN `U_LastUpd` DATETIME, IN `U_LastUpdBy` VARCHAR(50)
, IN `U_DisplayValue` VARCHAR(100), IN `U_LIC` VARCHAR(100), IN `U_Type` VARCHAR(50), IN `U_ParentLIC` VARCHAR(50), IN `U_Status` VARCHAR(50), IN `U_Description` VARCHAR(2000), IN `U_SystemAccountFlg` CHAR(10), IN `U_DisplayAccountFlg` CHAR(10), IN `U_OrderBy` INT(10))
    DETERMINISTIC
BEGIN
UPDATE listofval Set
    LastUpd = U_LastUpd,
    LastUpdBy = U_LastUpdBy,
    DisplayValue = U_DisplayValue,
    LIC = U_LIC,
    Type = U_Type,
    ParentLIC = U_ParentLIC,
    Status = U_Status,
    Description = U_Description,
    SystemAccountFlg = U_SystemAccountFlg,
    DisplayAccountFlg = U_DisplayAccountFlg,
    OrderBy = U_OrderBy
WHERE RowID = U_RowID;
END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.U_PositionView
DROP PROCEDURE IF EXISTS `U_PositionView`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `U_PositionView`(IN `I_RowID` INT(11), IN `I_Creates` CHAR(1), IN `I_ReadOnly` CHAR(1), IN `I_Updates` CHAR(1), IN `I_Deleting` CHAR(1), IN `I_Created` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpd` DATETIME, IN `I_LastUpdBy` INT(11)
)
BEGIN
UPDATE position_view SET
    Creates = I_Creates,
    ReadOnly = I_ReadOnly,
    Updates = I_Updates,
    Deleting = I_Deleting,
    Created = I_Created,
    CreatedBy = I_CreatedBy,
    LastUpd = I_LastUpd,
    LastUpdBy = I_LastUpdBy
    WHERE RowID = I_RowID;END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.U_ProdProc
DROP PROCEDURE IF EXISTS `U_ProdProc`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `U_ProdProc`(IN `I_RowID` INT(10), IN `I_Name` VARCHAR(200), IN `I_Description` VARCHAR(500), IN `I_PartNo` VARCHAR(200), IN `I_Created` DATETIME, IN `I_LastUpd` DATETIME, IN `I_CreatedBy` INT(11), IN `I_LastUpdBy` INT(11), IN `I_Category` VARCHAR(50), IN `I_Catalog` VARCHAR(50), IN `I_Comments` VARCHAR(2000), IN `I_Status` VARCHAR(50), IN `I_UnitPrice` DECIMAL(10,2), IN `I_CostPrice` DECIMAL(10,2), IN `I_UnitOfMeasure` VARCHAR(50), IN `I_SKU` VARCHAR(50), IN `I_LeadTime` INT(10), IN `I_BarCode` VARCHAR(50), IN `I_BusinessUnitID` INT(11), IN `I_LastRcvdFromShipmentDate` DATE, IN `I_LastRcvdFromShipmentCount` INT(11), IN `I_BookPageNo` VARCHAR(10), IN `I_ReOrderPoint` INT(11), IN `I_AllocateBelowSafetyFlag` CHAR(1), IN `I_Strength` VARCHAR(30), IN `I_UnitsBackordered` INT(10), IN `I_UnitsBackorderAsOf` DATETIME, IN `I_DateLastInventoryCount` DATETIME
)
    DETERMINISTIC
BEGIN
UPDATE product SET
    Name = I_Name,
    Description = I_Description,
    PartNo = I_PartNo,
    Created = I_Created,
    LastUpd = I_LastUpd,
    CreatedBy = I_CreatedBy,
    LastUpdBy = I_LastUpdBy,
    Category = I_Category,
    Catalog = I_Catalog,
    Comments = I_Comments,
    Status = I_Status,
    UnitPrice = I_UnitPrice,
    CostPrice = I_CostPrice,
    UnitOfMeasure = I_UnitOfMeasure,
    SKU = I_SKU,
    LeadTime = I_LeadTime,
    BarCode = I_BarCode,
    BusinessUnitID = I_BusinessUnitID,
    LastRcvdFromShipmentDate = I_LastRcvdFromShipmentDate,
    LastRcvdFromShipmentCount = I_LastRcvdFromShipmentCount,
    BookPageNo = I_BookPageNo,
    ReOrderPoint = I_ReOrderPoint,
    AllocateBelowSafetyFlag = I_AllocateBelowSafetyFlag,
    Strength = I_Strength,
    UnitsBackordered = I_UnitsBackordered,
    UnitsBackorderAsOf = I_UnitsBackorderAsOf,
    DateLastInventoryCount = I_DateLastInventoryCount
WHERE RowID = I_RowID;END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.U_Products
DROP PROCEDURE IF EXISTS `U_Products`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `U_Products`(IN `I_RowID` INT(10), IN `I_Description` VARCHAR(500), IN `I_PartNo` VARCHAR(200), IN `I_Created` DATETIME, IN `I_LastUpd` DATETIME, IN `I_LastArrivedQty` INT(11), IN `I_CreatedBy` INT(11), IN `I_LastUpdBy` INT(11), IN `I_Category` VARCHAR(50), IN `I_Catalog` VARCHAR(50), IN `I_Comments` VARCHAR(2000), IN `I_Status` VARCHAR(50), IN `I_UnitPrice` DECIMAL(10,2), IN `I_CostPrice` DECIMAL(10,2), IN `I_UnitOfMeasure` VARCHAR(50), IN `I_SKU` VARCHAR(50), IN `I_LeadTime` INT(10), IN `I_BarCode` VARCHAR(50), IN `I_BusinessUnitID` INT(11), IN `I_LastRcvdFromShipmentDate` DATE, IN `I_LastRcvdFromShipmentCount` INT(11), IN `I_BookPageNo` VARCHAR(10), IN `I_ReOrderPoint` INT(10), IN `I_AllocateBelowSafetyFlag` CHAR(1), IN `I_Strength` VARCHAR(30), IN `I_UnitsBackordered` INT(10), IN `I_UnitsBackorderAsOf` DATETIME, IN `I_DateLastInventoryCount` DATETIME
, IN `I_SupplierID` INT(10))
    DETERMINISTIC
BEGIN
UPDATE product SET
    Description = I_Description,
    PartNo = I_PartNo,
    Created = I_Created,
    LastUpd = I_LastUpd,
    LastArrivedQty = I_LastArrivedQty,
    CreatedBy = I_CreatedBy,
    LastUpdBy = I_LastUpdBy,
    Category = I_Category,
    Catalog = I_Catalog,
    Comments = I_Comments,
    Status = I_Status,
    UnitPrice = I_UnitPrice,
    CostPrice = I_CostPrice,
    UnitOfMeasure = I_UnitOfMeasure,
    SKU = I_SKU,
    LeadTime = I_LeadTime,
    BarCode = I_BarCode,
    BusinessUnitID = I_BusinessUnitID,
    LastRcvdFromShipmentDate = I_LastRcvdFromShipmentDate,
    LastRcvdFromShipmentCount = I_LastRcvdFromShipmentCount,
    BookPageNo = I_BookPageNo,
    ReOrderPoint = I_ReOrderPoint,
    AllocateBelowSafetyFlag = I_AllocateBelowSafetyFlag,
    Strength = I_Strength,
    UnitsBackordered = I_UnitsBackordered,
    UnitsBackorderAsOf = I_UnitsBackorderAsOf,
    DateLastInventoryCount = I_DateLastInventoryCount,
    SupplierID = I_SupplierID
WHERE RowID = I_RowID;END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.U_ProductsProc
DROP PROCEDURE IF EXISTS `U_ProductsProc`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `U_ProductsProc`(IN `I_RowID` INT(10), IN `I_Description` VARCHAR(500), IN `I_PartNo` VARCHAR(200), IN `I_Created` DATETIME, IN `I_LastUpd` DATETIME, IN `I_LastArrivedQty` INT(11), IN `I_CreatedBy` INT(11), IN `I_LastUpdBy` INT(11), IN `I_Category` VARCHAR(50), IN `I_Catalog` VARCHAR(50), IN `I_Comments` VARCHAR(2000), IN `I_Status` VARCHAR(50), IN `I_UnitPrice` DECIMAL(10,2), IN `I_CostPrice` DECIMAL(10,2), IN `I_UnitOfMeasure` VARCHAR(50), IN `I_SKU` VARCHAR(50), IN `I_LeadTime` INT(10), IN `I_BarCode` VARCHAR(50), IN `I_BusinessUnitID` INT(11), IN `I_LastRcvdFromShipmentDate` DATE, IN `I_LastRcvdFromShipmentCount` INT(11), IN `I_BookPageNo` VARCHAR(10), IN `I_ReOrderPoint` INT(10), IN `I_AllocateBelowSafetyFlag` CHAR(1), IN `I_Strength` VARCHAR(30), IN `I_UnitsBackordered` INT(10), IN `I_UnitsBackorderAsOf` DATETIME, IN `I_DateLastInventoryCount` DATETIME
)
    DETERMINISTIC
BEGIN
UPDATE product SET
    Description = I_Description,
    PartNo = I_PartNo,
    Created = I_Created,
    LastUpd = I_LastUpd,
    LastArrivedQty = I_LastArrivedQty,
    CreatedBy = I_CreatedBy,
    LastUpdBy = I_LastUpdBy,
    Category = I_Category,
    Catalog = I_Catalog,
    Comments = I_Comments,
    Status = I_Status,
    UnitPrice = I_UnitPrice,
    CostPrice = I_CostPrice,
    UnitOfMeasure = I_UnitOfMeasure,
    SKU = I_SKU,
    Image = I_Image,
    LeadTime = I_LeadTime,
    BarCode = I_BarCode,
    BusinessUnitID = I_BusinessUnitID,
    LastRcvdFromShipmentDate = I_LastRcvdFromShipmentDate,
    LastRcvdFromShipmentCount = I_LastRcvdFromShipmentCount,
    BookPageNo = I_BookPageNo,
    ReOrderPoint = I_ReOrderPoint,
    AllocateBelowSafetyFlag = I_AllocateBelowSafetyFlag,
    Strength = I_Strength,
    UnitsBackordered = I_UnitsBackordered,
    UnitsBackorderAsOf = I_UnitsBackorderAsOf,
    DateLastInventoryCount = I_DateLastInventoryCount
WHERE RowID = I_RowID;END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.U_Users
DROP PROCEDURE IF EXISTS `U_Users`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `U_Users`(IN `I_RowID` INT(11), IN `I_LastName` VARCHAR(50), IN `I_FirstName` VARCHAR(50), IN `I_MiddleName` VARCHAR(50), IN `I_PositionID` INT(11), IN `I_Created` DATETIME, IN `I_LastUpdBy` INT(11), IN `I_CreatedBy` INT(11), IN `I_LastUpd` DATETIME, IN `I_Status` VARCHAR(10)
, IN `I_EmailAddress` VARCHAR(50), IN `enc_userid` VARCHAR(50), IN `enc_pword` VARCHAR(50))
    DETERMINISTIC
BEGIN

UPDATE user SET
    LastName = I_LastName,
    FirstName = I_FirstName,
    MiddleName = I_MiddleName,
    PositionID = I_PositionID,
    Created = I_Created,
    LastUpdBy = I_LastUpdBy,
    CreatedBy = I_CreatedBy,
    LastUpd = I_LastUpd,
    `Status` = I_Status,
    EmailAddress = I_EmailAddress
    ,`UserID` = enc_userid
    ,`Password` = enc_pword
WHERE RowID = I_RowID;END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VEIW_ref_employeeloanschedule
DROP PROCEDURE IF EXISTS `VEIW_ref_employeeloanschedule`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VEIW_ref_employeeloanschedule`(IN `ReferenceLoanRowID` INT, IN `OrganizID` INT)
    DETERMINISTIC
BEGIN

SELECT
els.RowID
,els.EmployeeID
,IFNULL(p.PartNo,'') AS LoanType
,els.LoanNumber
,els.TotalLoanAmount
,els.TotalBalanceLeft
,els.DedEffectiveDateFrom
,els.DedEffectiveDateTo
,els.NoOfPayPeriod
,els.LoanPayPeriodLeft
,els.DeductionAmount
,els.`Status`
,els.DeductionPercentage
,els.Comments
,els.DeductionSchedule
FROM employeeloanschedule els
LEFT JOIN product p ON p.RowID=els.LoanTypeID AND p.OrganizationID=els.OrganizationID

WHERE els.RowID = ReferenceLoanRowID
AND els.OrganizationID = OrganizID
GROUP BY els.RowID;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_address
DROP PROCEDURE IF EXISTS `VIEW_address`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_address`(IN `SearchValue` VARCHAR(150))
    DETERMINISTIC
BEGIN

SELECT RowID,StreetAddress1,StreetAddress2,Barangay,CityTown,State,Country,ZipCode FROM address;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_agency
DROP PROCEDURE IF EXISTS `VIEW_agency`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_agency`(IN `OrganizID` INT, IN `SearchText` VARCHAR(100))
    DETERMINISTIC
BEGIN

IF SearchText = '' THEN

    SELECT ag.RowID
    ,ag.AgencyName
    ,ag.AgencyFee
    ,IF(ag.AddressID IS NULL, '', CONCAT(ad.StreetAddress1,ad.StreetAddress2,ad.Barangay,ad.CityTown,ad.State,ad.Country)) AS AgencyAddress
    ,IFNULL(ag.AddressID,'') AS AddressID
    ,ag.IsActive
    FROM agency ag
    LEFT JOIN address ad ON ad.RowID=ag.AddressID
    WHERE ag.OrganizationID=OrganizID;

ELSE

    SELECT
        ag.RowID
        ,ag.AgencyName
        ,ag.AgencyFee
        ,IF(ag.AddressID IS NULL, '', CONCAT(ad.StreetAddress1,ad.StreetAddress2,ad.Barangay,ad.CityTown,ad.State,ad.Country)) AS AgencyAddress
        ,IFNULL(ag.AddressID,'') AS AddressID
        ,ag.IsActive
    FROM agency ag
    LEFT JOIN address ad
        ON ad.RowID=ag.AddressID
    WHERE ag.OrganizationID=OrganizID
        AND ag.AgencyName=SearchText;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_allowanceperday
DROP PROCEDURE IF EXISTS `VIEW_allowanceperday`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_allowanceperday`(IN `og_rowid` INT, IN `e_rowid` INT, IN `from_date` DATE, IN `to_date` DATE, IN `allowance_frequency` VARCHAR(50), IN `allowance_name` VARCHAR(50))
    DETERMINISTIC
BEGIN

DECLARE daily_frequency
        ,semi_mon_frequency
		  ,custom_date_format
		  ,allowance_category VARCHAR(50);

SET allowance_category = 'Allowance Type';

SET custom_date_format = '%c/%e/%Y';

SET daily_frequency = 'Daily';
SET semi_mon_frequency = 'Semi-monthly';

SELECT ii.*
FROM (SELECT i.*
		FROM (SELECT
				apd.RowID
				,ea.`AllowanceName`
				, DATE_FORMAT(apd.`Date`, custom_date_format) `Date`
				, apd.Amount
				, ea.AllowanceFrequency
				, 'Group 1' `Result`
				FROM allowanceperday apd
				INNER JOIN allowanceitem ai ON ai.RowID = apd.AllowanceItemID
				INNER JOIN (SELECT a.*
				            , p.PartNo `AllowanceName`
				            FROM employeeallowance a
				            INNER JOIN product p
								        ON p.OrganizationID = a.OrganizationID
										     AND p.RowID = a.ProductID
										     AND p.`Category` = allowance_category
										     AND p.ActiveData = 1
				            WHERE a.OrganizationID = og_rowid
				            AND a.EmployeeID = e_rowid
				            AND a.AllowanceFrequency = daily_frequency
				            AND LENGTH(allowance_name) = 0
				            
							UNION
				            SELECT a.*
				            , p.PartNo `AllowanceName`
				            FROM employeeallowance a
				            INNER JOIN product p
								        ON p.OrganizationID = a.OrganizationID
										     AND p.RowID = a.ProductID
										     AND p.`Category` = allowance_category
										     AND p.PartNo = allowance_name
										     AND p.ActiveData = 1
				            WHERE a.OrganizationID = og_rowid
				            AND a.EmployeeID = e_rowid
				            AND a.AllowanceFrequency = daily_frequency
				            AND LENGTH(allowance_name) > 0
								) ea ON ea.RowID = ai.AllowanceID
				WHERE apd.`Date` BETWEEN from_date AND to_date
				ORDER BY ea.`AllowanceName`, apd.`Date`
				) i
		
		# ########################################################################
		UNION
		SELECT i.*
		FROM (SELECT
				apd.RowID
				,ea.`AllowanceName`
				, DATE_FORMAT(apd.`Date`, custom_date_format) `Date`
				, apd.Amount
				, ea.AllowanceFrequency
				, 'Group 2' `Result`
				FROM allowanceperday apd
				INNER JOIN allowanceitem ai ON ai.RowID = apd.AllowanceItemID
				INNER JOIN (SELECT a.*
				            , p.PartNo `AllowanceName`
				            FROM employeeallowance a
				            INNER JOIN product p
								        ON p.OrganizationID = a.OrganizationID
										     AND p.RowID = a.ProductID
										     AND p.`Category` = allowance_category
										     AND p.ActiveData = 1
				            WHERE a.OrganizationID = og_rowid
				            AND a.EmployeeID = e_rowid
				            AND a.AllowanceFrequency = semi_mon_frequency
				            AND LENGTH(allowance_name) = 0
				            
							UNION
				            SELECT a.*
				            , p.PartNo `AllowanceName`
				            FROM employeeallowance a
				            INNER JOIN product p
								        ON p.OrganizationID = a.OrganizationID
										     AND p.RowID = a.ProductID
										     AND p.`Category` = allowance_category
										     AND p.PartNo = allowance_name
										     AND p.ActiveData = 1
				            WHERE a.OrganizationID = og_rowid
				            AND a.EmployeeID = e_rowid
				            AND a.AllowanceFrequency = semi_mon_frequency
				            AND LENGTH(allowance_name) > 0            
				            ) ea ON ea.RowID = ai.AllowanceID
				WHERE apd.`Date` BETWEEN from_date AND to_date
				AND apd.Amount != 0
				ORDER BY ea.`AllowanceName`, apd.`Date`
				) i
		) ii
ORDER BY ii.`AllowanceName`, STR_TO_DATE(ii.`Date`, custom_date_format)
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_area
DROP PROCEDURE IF EXISTS `VIEW_area`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_area`(IN `OrganizID` INT, IN `PageNumber` INT, IN `ar_RowID` INT)
    DETERMINISTIC
BEGIN

IF IFNULL(ar_RowID,0) = 0 THEN

    SELECT
    aa.RowID
    ,aa.Name
    FROM `area` aa
    WHERE aa.OrganizationID=OrganizID
    LIMIT PageNumber, 10;

ELSE

    SELECT
    aa.RowID
    ,aa.Name
    FROM `area` aa
    WHERE aa.OrganizationID=OrganizID
    AND LOCATE(ar_RowID,aa.RowID) > 0
    LIMIT PageNumber, 10;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_audittrail
DROP PROCEDURE IF EXISTS `VIEW_audittrail`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_audittrail`(IN `OrganizID` INT, IN `View_ID` INT, IN `UserID` INT, IN `pagenumber` INT)
    DETERMINISTIC
BEGIN

    SELECT aut.RowID
    ,aut.ViewID
    ,aut.ChangedRowID
    ,DATE_FORMAT(aut.Created,'%m/%d/%Y %h:%i %p') 'Created'
    ,PROPERCASE(CONCAT(COALESCE(u.FirstName,''),' ', COALESCE(u.LastName,''))) 'CreatedBy'
    ,v.ViewName,aut.FieldChanged, COALESCE(aut.OldValue,'') 'OldValue'
    ,COALESCE(aut.NewValue,'') 'NewValue'
    ,aut.ActionPerformed
    FROM audittrail aut
    LEFT JOIN USER u ON u.RowID=aut.CreatedBy
    LEFT JOIN `view` v ON v.RowID = aut.ViewID
    WHERE aut.OrganizationID=OrganizID
    AND aut.ViewID=View_ID
    AND aut.CreatedBy=UserID
    AND aut.ActionPerformed IN ('Insert','Update')
    ORDER BY aut.Created DESC
    LIMIT pagenumber,20;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_branch
DROP PROCEDURE IF EXISTS `VIEW_branch`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_branch`(IN `OrganizID` INT, IN `PageNumber` INT, IN `br_RowID` VARCHAR(150))
    DETERMINISTIC
BEGIN

IF IFNULL(br_RowID,0) = 0 THEN

    SELECT
    RowID
    ,BranchCode
    ,BranchName
    FROM branch
    WHERE OrganizationID=OrganizID
    LIMIT PageNumber, 10;

ELSE

    SELECT
    RowID
    ,BranchCode
    ,BranchName
    FROM branch
    WHERE OrganizationID=OrganizID
    AND LOCATE(BranchCode,br_RowID) > 0
    LIMIT PageNumber, 10;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_dates_weekly
DROP PROCEDURE IF EXISTS `VIEW_dates_weekly`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_dates_weekly`(IN `_year` INT)
    DETERMINISTIC
BEGIN

DECLARE daynameoffirstdateofyear CHAR(2);

DECLARE first_date DATE;

SELECT DAYOFWEEK(MAKEDATE(_year,1)) INTO daynameoffirstdateofyear;

SET @firstdate = MAKEDATE(_year,1);


    SELECT
    IF(daynameoffirstdateofyear=1,(SELECT @firstdate := MAKEDATE(_year,1)),ADDDATE(@firstdate, INTERVAL (1-daynameoffirstdateofyear) DAY)) AS Sun
    ,IF(daynameoffirstdateofyear=2,(SELECT @firstdate := MAKEDATE(_year,1)),ADDDATE(@firstdate, INTERVAL (2-daynameoffirstdateofyear) DAY)) AS Mon
    ,IF(daynameoffirstdateofyear=3,(SELECT @firstdate := MAKEDATE(_year,1)),ADDDATE(@firstdate, INTERVAL (3-daynameoffirstdateofyear) DAY)) AS Tue
    ,IF(daynameoffirstdateofyear=4,(SELECT @firstdate := MAKEDATE(_year,1)),ADDDATE(@firstdate, INTERVAL (4-daynameoffirstdateofyear) DAY)) AS Wed
    ,IF(daynameoffirstdateofyear=5,(SELECT @firstdate := MAKEDATE(_year,1)),ADDDATE(@firstdate, INTERVAL (5-daynameoffirstdateofyear) DAY)) AS Thu
    ,IF(daynameoffirstdateofyear=6,(SELECT @firstdate := MAKEDATE(_year,1)),ADDDATE(@firstdate, INTERVAL (6-daynameoffirstdateofyear) DAY)) AS Fri
    ,IF(daynameoffirstdateofyear=7,(SELECT @weeklastdate := MAKEDATE(_year,1)),(SELECT @weeklastdate := ADDDATE(@firstdate, INTERVAL (7-daynameoffirstdateofyear) DAY))) AS Sat
UNION
    SELECT d.DateValue AS Sun
    ,dd.DateValue AS Mon
    ,ddd.DateValue AS Tue
    ,d4.DateValue AS Wed
    ,dv.DateValue AS Thu
    ,dvi.DateValue AS Fri
    ,dvii.DateValue AS Sat
    FROM dates d
    LEFT JOIN dates dd ON ADDDATE(d.DateValue, INTERVAL 1 DAY)=dd.DateValue
    LEFT JOIN dates ddd ON ADDDATE(dd.DateValue, INTERVAL 1 DAY)=ddd.DateValue
    LEFT JOIN dates d4 ON ADDDATE(ddd.DateValue, INTERVAL 1 DAY)=d4.DateValue
    LEFT JOIN dates dv ON ADDDATE(d4.DateValue, INTERVAL 1 DAY)=dv.DateValue
    LEFT JOIN dates dvi ON ADDDATE(dv.DateValue, INTERVAL 1 DAY)=dvi.DateValue
    LEFT JOIN dates dvii ON ADDDATE(dvi.DateValue, INTERVAL 1 DAY)=dvii.DateValue
    WHERE d.DateValue > @weeklastdate
    AND YEAR(d.DateValue)=_year
    AND DAYOFWEEK(d.DateValue)=1;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_division
DROP PROCEDURE IF EXISTS `VIEW_division`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_division`(IN `OrganizID` INT, IN `SearchDivisionName` VARCHAR(100))
    DETERMINISTIC
BEGIN

IF SearchDivisionName = '' THEN

    SELECT
    d.Name
    ,d.DivisionType
    ,IFNULL(dd.Name,'') AS ParentDivName
    ,d.RowID
    ,d.TradeName
    ,d.MainPhone
    ,d.AltPhone
    ,d.EmailAddress
    ,d.AltEmailAddress
    ,d.FaxNumber
    ,d.TinNo
    ,d.URL
    ,d.ContactName
    ,d.BusinessAddress
    ,d.GracePeriod
    ,d.WorkDaysPerYear
    ,d.PhHealthDeductSched
    ,d.HDMFDeductSched
    ,d.SSSDeductSched
    ,d.WTaxDeductSched
    ,d.DefaultVacationLeave
    ,d.DefaultSickLeave
    ,d.DefaultMaternityLeave
    ,d.DefaultPaternityLeave
    ,d.DefaultOtherLeave
    ,pf.PayFrequencyType
    ,pf.RowID
    FROM `division` d
    LEFT JOIN payfrequency pf ON pf.RowID=d.PayFrequencyID
    LEFT JOIN `division` dd ON dd.RowID=d.ParentDivisionID
    WHERE d.OrganizationID=OrganizID;

ELSE

    SELECT
    d.Name
    ,d.DivisionType
    ,IFNULL(dd.Name,'') AS ParentDivName
    ,d.RowID
    ,d.TradeName
    ,d.MainPhone
    ,d.AltPhone
    ,d.EmailAddress
    ,d.AltEmailAddress
    ,d.FaxNumber
    ,d.TinNo
    ,d.URL
    ,d.ContactName
    ,d.BusinessAddress
    ,d.GracePeriod
    ,d.WorkDaysPerYear
    ,d.PhHealthDeductSched
    ,d.HDMFDeductSched
    ,d.SSSDeductSched
    ,d.WTaxDeductSched
    ,d.DefaultVacationLeave
    ,d.DefaultSickLeave
    ,d.DefaultMaternityLeave
    ,d.DefaultPaternityLeave
    ,d.DefaultOtherLeave
    ,pf.PayFrequencyType
    ,pf.RowID
    FROM `division` d
    LEFT JOIN payfrequency pf ON pf.RowID=d.PayFrequencyID
    LEFT JOIN `division` dd ON dd.RowID=d.ParentDivisionID
    WHERE d.OrganizationID=OrganizID
    AND d.Name=SearchDivisionName;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_divisionminimumwage
DROP PROCEDURE IF EXISTS `VIEW_divisionminimumwage`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_divisionminimumwage`(IN `OrganizID` INT, IN `DivisionRowID` INT)
    DETERMINISTIC
BEGIN

SELECT
RowID
,Amount
,EffectiveDateFrom
,EffectiveDateTo
FROM divisionminimumwage dmw
WHERE dmw.OrganizationID=OrganizID
AND dmw.DivisionID=DivisionRowID
ORDER BY dmw.EffectiveDateFrom,dmw.EffectiveDateTo;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_division_shift
DROP PROCEDURE IF EXISTS `VIEW_division_shift`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_division_shift`(IN `OrganizID` INT, IN `DivisionRowID` INT)
    DETERMINISTIC
BEGIN

DECLARE shift_startdate_thisyear DATE;

DECLARE shift_enddate_thisyear DATE;

DECLARE anyintiger INT(11) DEFAULT 0;

SELECT DateValue
FROM dates
WHERE YEAR(DateValue)=YEAR(CURDATE())
AND DAYOFWEEK(DateValue)=(@@default_week_format + 1)
ORDER BY DateValue
LIMIT 1 INTO
shift_startdate_thisyear;

SELECT CAST(@@default_week_format AS INT) INTO anyintiger;

SELECT IF(LAST_DAY(DATE_FORMAT(CURDATE(),'%Y-12-01')) > d.DateValue
           ,ADDDATE(d.DateValue, INTERVAL 1 WEEK)
           ,LAST_DAY(DATE_FORMAT(CURDATE(),'%Y-12-01'))) AS EndingDate
FROM dates d
WHERE YEAR(d.DateValue) <= YEAR(CURDATE())
AND DAYOFWEEK(d.DateValue) = IF(anyintiger - 1 < 0, 7, anyintiger)
AND WEEKOFYEAR(d.DateValue) > 50
ORDER BY d.DateValue DESC
LIMIT 1
INTO shift_enddate_thisyear;

SELECT sh.RowID AS shRowID
,TIME_FORMAT(sh.TimeFrom, '%l:%i %p') AS TimeFrom
,TIME_FORMAT(sh.TimeTo, '%l:%i %p') AS TimeTo
FROM employeeshiftbyday esd
LEFT JOIN shift sh ON sh.RowID=esd.ShiftID AND sh.OrganizationID=esd.OrganizationID
INNER JOIN (SELECT e.*
                FROM employee e
                INNER JOIN position pos ON pos.DivisionId=DivisionRowID AND pos.OrganizationID=e.OrganizationID AND pos.RowID=e.PositionID
                WHERE e.OrganizationID=OrganizID) e ON e.RowID = esd.EmployeeID
WHERE esd.OrganizationID=OrganizID
AND esd.SampleDate BETWEEN shift_startdate_thisyear AND shift_enddate_thisyear
GROUP BY esd.NameOfDay,esd.ShiftID
ORDER BY esd.OrderByValue;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employee
DROP PROCEDURE IF EXISTS `VIEW_employee`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employee`(IN `e_OrganizationID` INT, IN `pagination` INT)
    DETERMINISTIC
    COMMENT 'view all employee base on organization'
BEGIN

SELECT
e.RowID
,COALESCE(CAST(e.EmployeeID AS CHAR),'') 'Employee ID'
,COALESCE(e.FirstName,'') 'First Name'
,COALESCE(e.MiddleName,'') 'Middle Name'
,COALESCE(e.LastName,'') 'Last Name'
,COALESCE(e.Surname,'') 'Surname'
,COALESCE(e.Nickname,'') 'Nickname'
,COALESCE(e.MaritalStatus,'') 'Marital Status'
,COALESCE(e.NoOfDependents,0) 'No. Of Dependents'
,COALESCE(DATE_FORMAT(e.Birthdate,'%m/%d/%Y'),'') 'Birthdate'
,COALESCE(e.JobTitle,'') 'Job Title'
,COALESCE(pos.PositionName,'') 'Position'
,COALESCE(e.Salutation,'') 'Salutation'
,COALESCE(e.TINNo,'') 'TIN'
,COALESCE(e.SSSNo,'') 'SSS No.'
,COALESCE(e.HDMFNo,'') 'PAGIBIG No.'
,COALESCE(e.PhilHealthNo,'') 'PhilHealth No.'
,COALESCE(e.WorkPhone,'') 'Work Phone No.'
,COALESCE(e.HomePhone,'') 'Home Phone No.'
,COALESCE(e.MobilePhone,'') 'Mobile Phone No.'
,COALESCE(e.HomeAddress,'') 'Home address'
,COALESCE(e.EmailAddress,'') 'Email address'
,COALESCE(IF(e.Gender='M','Male','Female'),'') 'Gender'
,COALESCE(e.EmploymentStatus,'') 'Employment Status'
,COALESCE(pf.PayFrequencyType,'') 'Pay Frequency'
,COALESCE(e.UndertimeOverride,'') 'UndertimeOverride'
,COALESCE(e.OvertimeOverride,'') 'OvertimeOverride'
,DATE_FORMAT(e.Created,'%m/%d/%Y') 'Creation Date'
,CONCAT(CONCAT(UCASE(LEFT(u.FirstName, 1)), SUBSTRING(u.FirstName, 2)),' ',CONCAT(UCASE(LEFT(u.LastName, 1)), SUBSTRING(u.LastName, 2))) 'Created by',COALESCE(DATE_FORMAT(e.LastUpd,'%m/%d/%Y'),'') 'Last Update'
,(SELECT CONCAT(CONCAT(UCASE(LEFT(u.FirstName, 1)), SUBSTRING(u.FirstName, 2)),' ',CONCAT(UCASE(LEFT(u.LastName, 1)), SUBSTRING(u.LastName, 2)))  FROM user WHERE RowID=e.LastUpdBy) 'LastUpdate by'
,COALESCE(pos.RowID,'') 'PositionID'
,COALESCE(e.PayFrequencyID,'') 'PayFrequencyID'
,COALESCE(e.EmployeeType,'') 'EmployeeType'
,COALESCE(e.LeaveBalance,'') 'LeaveBalance'
,COALESCE(e.SickLeaveBalance,0) 'SickLeaveBalance'
,COALESCE(e.MaternityLeaveBalance,0) 'MaternityLeaveBalance'
,COALESCE(e.LeaveAllowance,'') 'LeaveAllowance'
,COALESCE(e.SickLeaveAllowance,0) 'SickLeaveAllowance'
,COALESCE(e.MaternityLeaveAllowance,0) 'MaternityLeaveAllowance'
,COALESCE(e.LeavePerPayPeriod,0) 'LeavePerPayPeriod'
,COALESCE(e.SickLeavePerPayPeriod,0) 'SickLeavePerPayPeriod'
,COALESCE(e.MaternityLeavePerPayPeriod,0) 'MaternityLeavePerPayPeriod'
,COALESCE(fstat.RowID,'') 'fstatRowID'
,COALESCE(e.Image,'') 'Image'
FROM employee e
LEFT JOIN user u ON e.CreatedBy=u.RowID
LEFT JOIN position pos ON e.PositionID=pos.RowID
LEFT JOIN payfrequency pf ON e.PayFrequencyID=pf.RowID
LEFT JOIN filingstatus fstat ON fstat.MaritalStatus=e.MaritalStatus AND fstat.Dependent=e.NoOfDependents
WHERE e.OrganizationID=e_OrganizationID
ORDER BY e.RowID DESC LIMIT pagination,100;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employee1
DROP PROCEDURE IF EXISTS `VIEW_employee1`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employee1`(IN `e_OrganizationID` INT, IN `pagination` INT, IN `SearchString` TEXT)
    COMMENT 'view all employee base on organization'
BEGIN

IF SearchString = '' THEN

	SELECT 
	e.RowID
	,IFNULL(e.EmployeeID,'') 'Employee ID'
	,IFNULL(e.FirstName,'') 'First Name'
	,IFNULL(e.MiddleName,'') 'Middle Name'
	,IFNULL(e.LastName,'') 'Last Name'
	,IFNULL(IF(e.Gender='M','Male','Female'),'') 'Gender'
	,IFNULL(e.EmploymentStatus,'') 'Employment Status'
	,IFNULL(pf.PayFrequencyType,'') 'Pay Frequency'
	,IFNULL(pos.PositionName,'') 'Position'
	,IFNULL(pos.RowID,'') 'PositionID'
	,IFNULL(e.PayFrequencyID,'') 'PayFrequencyID'
	,IFNULL(e.EmployeeType,'') 'Employee Type' 
	,IFNULL(e.OffsetBalance,'0.0') 'Offset Balance'
	,IF(IFNULL(e.MiddleName,'')='', CONCAT(e.LastName,', ',e.FirstName), CONCAT(e.LastName,', ',e.FirstName,', ',INITIALS(e.MiddleName,'.','1'))) 'Employee Fullname'
	,CONCAT('ID# ', e.EmployeeID, ', ', e.EmployeeType, ' salary') 'Details'
	,IFNULL(e.Image,'') 'Image' 
	FROM employee e 
	LEFT JOIN user u ON e.CreatedBy=u.RowID 
	LEFT JOIN position pos ON e.PositionID=pos.RowID 
	LEFT JOIN payfrequency pf ON e.PayFrequencyID=pf.RowID 
	LEFT JOIN filingstatus fstat ON fstat.MaritalStatus=e.MaritalStatus AND fstat.Dependent=e.NoOfDependents
	WHERE e.OrganizationID=e_OrganizationID
	ORDER BY e.RowID DESC LIMIT pagination,20;

ELSE

	SELECT 
	e.RowID
	,IFNULL(e.EmployeeID,'') 'Employee ID'
	,IFNULL(e.FirstName,'') 'First Name'
	,IFNULL(e.MiddleName,'') 'Middle Name'
	,IFNULL(e.LastName,'') 'Last Name'
	,IFNULL(IF(e.Gender='M','Male','Female'),'') 'Gender'
	,IFNULL(e.EmploymentStatus,'') 'Employment Status'
	,IFNULL(pf.PayFrequencyType,'') 'Pay Frequency'
	,IFNULL(pos.PositionName,'') 'Position'
	,IFNULL(pos.RowID,'') 'PositionID'
	,IFNULL(e.PayFrequencyID,'') 'PayFrequencyID'
	,IFNULL(e.EmployeeType,'') 'Employee Type' 
	,IFNULL(e.OffsetBalance,'0.0') 'Offset Balance'
	,IF(IFNULL(e.MiddleName,'')='', CONCAT(e.LastName,', ',e.FirstName), CONCAT(e.LastName,', ',e.FirstName,', ',INITIALS(e.MiddleName,'.','1'))) 'Employee Fullname'
	,CONCAT('ID# ', e.EmployeeID, ', ', e.EmployeeType, ' salary') 'Details'
	,IFNULL(e.Image,'') 'Image' 
	FROM employee e 
	LEFT JOIN user u ON e.CreatedBy=u.RowID 
	LEFT JOIN position pos ON e.PositionID=pos.RowID 
	LEFT JOIN payfrequency pf ON e.PayFrequencyID=pf.RowID 
	LEFT JOIN filingstatus fstat ON fstat.MaritalStatus=e.MaritalStatus AND fstat.Dependent=e.NoOfDependents
	WHERE e.OrganizationID=e_OrganizationID
	AND (e.EmployeeID=SearchString OR e.FirstName=SearchString OR e.LastName=SearchString)
	ORDER BY e.RowID DESC LIMIT pagination,20;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeallowance
DROP PROCEDURE IF EXISTS `VIEW_employeeallowance`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeallowance`(IN `eallow_EmployeeID` INT, IN `eallow_OrganizationID` INT)
    DETERMINISTIC
BEGIN


SELECT eall.RowID
,IFNULL(p.PartNo,'') 'Type'
,COALESCE(eall.AllowanceAmount,0) 'AllowanceAmount'
,IFNULL(eall.AllowanceFrequency,'') 'AllowanceFrequency'
,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
,IF(IFNULL(TaxableFlag,0) = 0,'No','Yes') 'TaxableFlag'
,IFNULL(eall.ProductID,'') 'ProductID'
 FROM employeeallowance eall
 LEFT JOIN product p ON eall.ProductID=p.RowID
 WHERE eall.EmployeeID=eallow_EmployeeID
 AND eall.OrganizationID=eallow_OrganizationID;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeallowancePerDay
DROP PROCEDURE IF EXISTS `VIEW_employeeallowancePerDay`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeallowancePerDay`(IN `OrganizID` INT, IN `PayPeriod_To` DATE, IN `IsTaxable` TEXT)
    DETERMINISTIC
BEGIN

DECLARE og_WorkDayPerYear INT(11);

DECLARE og_dayCountPerMonth DECIMAL(11,4);

DECLARE og_dayCountPerSemiMonth DECIMAL(11,4);


    SELECT og.WorkDaysPerYear FROM organization og WHERE og.RowID=OrganizID INTO og_WorkDayPerYear;

    SET og_dayCountPerMonth = og_WorkDayPerYear / 12;

    SET og_dayCountPerMonth = og_dayCountPerMonth / 2;



    SELECT *
    ,AllowanceAmount AS TotalAllowanceAmount
    FROM employeeallowance
    WHERE AllowanceFrequency IN ('Daily','One time')
    AND OrganizationID=OrganizID
    AND TaxableFlag=IsTaxable
    AND PayPeriod_To BETWEEN EffectiveStartDate AND EffectiveEndDate
UNION
    SELECT *
    ,(AllowanceAmount / og_dayCountPerMonth) AS TotalAllowanceAmount
    FROM employeeallowance WHERE
    AllowanceFrequency='Monthly'
    AND OrganizationID=OrganizID
    AND TaxableFlag=IsTaxable
    AND PayPeriod_To BETWEEN EffectiveStartDate AND EffectiveEndDate
UNION
    SELECT *
    ,(AllowanceAmount / og_dayCountPerMonth) AS TotalAllowanceAmount
    FROM employeeallowance
    WHERE AllowanceFrequency='Semi-monthly'
    AND OrganizationID=OrganizID
    AND TaxableFlag=IsTaxable
    AND PayPeriod_To BETWEEN EffectiveStartDate AND EffectiveEndDate;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeallowances
DROP PROCEDURE IF EXISTS `VIEW_employeeallowances`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeallowances`(IN `eallow_EmployeeID` INT, IN `eallow_OrganizationID` INT, IN `effective_datefrom` DATE, IN `effective_dateto` DATE, IN `ExceptThisAllowance` TEXT)
    DETERMINISTIC
BEGIN

DECLARE AllowanceFrequenzy VARCHAR(50) DEFAULT 'Daily';

DECLARE is_ecola_compress BOOL DEFAULT FALSE;

    /*
     * Breakdown of daily allowances
     */
    /*SELECT
        prd.PartNo AS `PartNo`,
        sum.Date AS `Date`,
        sum.TotalAllowanceAmt AS `Amount`
    # FROM paystubitem_sum_daily_allowance_group_prodid sum
    FROM paystubitem_sum_daily_allowance_group_prodid_compress sum    
    INNER JOIN product prd
    ON prd.RowID = sum.ProductID
    WHERE sum.EmployeeID = eallow_EmployeeID AND
        sum.Date BETWEEN effective_datefrom AND effective_dateto
    ORDER BY prd.PartNo, sum.Date;*/
    
    
SELECT
EXISTS(SELECT lv.RowID
		 FROM listofval lv
		 WHERE lv.LIC = 'EcolaCompressed'
		 AND lv.`Type` = 'MiscAllowance'
		 AND lv.DisplayValue = '1')
INTO is_ecola_compress;

IF AllowanceFrequenzy = 'Daily'
   AND is_ecola_compress = FALSE THEN

    SET @day_pay = 0.0;
    SET @day_pay1 = 0.0;
    SET @day_pay2 = 0.0;
	
	SELECT
	     ii.PartNo,
        ii.`Date`,
        ii.`TotalAllowanceAmount` `Amount`
	FROM (
        SELECT
            i.etRowID,
            i.EmployeeID,
            i.`Date`,
            0 AS Equatn,
            0 AS `timediffcount`,
            i.TotalAllowanceAmt AS TotalAllowanceAmount,
            NULL AS ShiftID,
            'First SELECT statement' AS Result,
            p.PartNo
        FROM paystubitem_sum_daily_allowance_group_prodid i
        INNER JOIN product p ON p.RowID=i.ProductID
        WHERE i.OrganizationID=eallow_OrganizationID AND
            # i.TaxableFlag=IsTaxable AND
            i.`Date` BETWEEN effective_datefrom AND effective_dateto AND
			i.EmployeeID = eallow_EmployeeID AND
            i.`Fixed` = 0
    UNION
        SELECT
            et.RowID,
            et.EmployeeID,
            et.`Date`,
            (@day_pay1 := GET_employeerateperday(et.EmployeeID,et.OrganizationID,et.`Date`)) AS Equatn,
            0 AS `timediffcount`,
            ea.AllowanceAmount * ((et.HolidayPayAmount + ((et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) * (@day_pay1 / sh.DivisorToDailyRate))) / @day_pay1) AS TotalAllowanceAmount,
            es.ShiftID,
            'Second SELECT statement' AS Result,
            p.PartNo
        FROM employeetimeentry et
        INNER JOIN payrate pr
        ON pr.RowID = et.PayRateID AND
            pr.PayType = 'Regular Holiday'
        INNER JOIN employee e
        ON e.OrganizationID = eallow_OrganizationID AND
            e.RowID = et.EmployeeID AND
			e.RowID = eallow_EmployeeID AND
            e.EmploymentStatus NOT IN ('Resigned', 'Terminated') AND
            e.CalcHoliday = '1'
        INNER JOIN employeeshift es
        ON es.RowID = et.EmployeeShiftID
        INNER JOIN shift sh
        ON sh.RowID = es.ShiftID
        INNER JOIN employeeallowance ea
        ON ea.AllowanceFrequency = AllowanceFrequenzy AND
            # ea.TaxableFlag = IsTaxable AND
            ea.EmployeeID = e.RowID AND
            ea.OrganizationID = eallow_OrganizationID AND
            et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
        INNER JOIN product p
        ON p.RowID = ea.ProductID AND
            p.`Fixed` = 0
        WHERE et.OrganizationID = eallow_OrganizationID AND
            et.`Date` BETWEEN effective_datefrom AND effective_dateto AND
            FALSE
    UNION
        SELECT
            et.RowID,
            et.EmployeeID,
            et.`Date`,
            (@day_pay1 := GET_employeerateperday(et.EmployeeID,et.OrganizationID,et.`Date`)) AS Equatn,
            0 AS `timediffcount`,
            ea.AllowanceAmount * ((et.HolidayPayAmount + ((et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) * (@day_pay1 / sh.DivisorToDailyRate))) / @day_pay1) AS TotalAllowanceAmount,
            es.ShiftID,
            'Third SELECT statement' AS Result,
            p.PartNo
        FROM employeetimeentry et
        INNER JOIN payrate pr
        ON pr.RowID = et.PayRateID AND
            pr.PayType = 'Special Non-Working Holiday'
        INNER JOIN employee e
        ON e.OrganizationID = eallow_OrganizationID AND
            e.RowID = et.EmployeeID AND
			e.RowID = eallow_EmployeeID AND
            e.EmploymentStatus NOT IN ('Resigned','Terminated') AND
            e.EmployeeType != 'Daily'
        INNER JOIN employeeshift es
        ON es.RowID = et.EmployeeShiftID
        INNER JOIN shift sh
        ON sh.RowID = es.ShiftID
        INNER JOIN employeeallowance ea
        ON ea.AllowanceFrequency = AllowanceFrequenzy AND
            # IF(IsTaxable = '1', (ea.TaxableFlag = IsTaxable), FALSE) AND
            ea.EmployeeID = e.RowID AND
            ea.OrganizationID = eallow_OrganizationID AND
            et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
        INNER JOIN product p
        ON p.RowID = ea.ProductID AND
            LOCATE('cola',p.PartNo) > 0
        WHERE et.OrganizationID = eallow_OrganizationID AND
            et.RegularHoursAmount = 0 AND
            et.TotalDayPay > 0 AND
            et.`Date` BETWEEN effective_datefrom AND effective_dateto
	      ) ii
	
;

ELSEIF AllowanceFrequenzy = 'Daily'
       AND is_ecola_compress = TRUE THEN

    SET @day_pay = 0.0;
    SET @day_pay1 = 0.0;
    SET @day_pay2 = 0.0;

	SELECT
	     ii.PartNo,
        ii.`Date`,
        ii.`TotalAllowanceAmount` `Amount`
	FROM (
        SELECT
            i.etRowID,
            i.EmployeeID,
            i.`Date`,
            0 AS Equatn,
            0 AS `timediffcount`,
            i.TotalAllowanceAmt AS TotalAllowanceAmount,
            NULL AS ShiftID,
            'First SELECT statement' AS Result,
            p.PartNo
        FROM paystubitem_sum_daily_allowance_group_prodid_compress i
        INNER JOIN product p ON p.RowID=i.ProductID
        WHERE i.OrganizationID=eallow_OrganizationID AND
            # i.TaxableFlag=IsTaxable AND
            i.`Date` BETWEEN effective_datefrom AND effective_dateto AND
			i.EmployeeID = eallow_EmployeeID AND
            i.`Fixed` = 0
    UNION
        SELECT
            et.RowID,
            et.EmployeeID,
            et.`Date`,
            (@day_pay1 := GET_employeerateperday(et.EmployeeID,et.OrganizationID,et.`Date`)) AS Equatn,
            0 AS `timediffcount`,
            ea.AllowanceAmount * ((et.HolidayPayAmount + ((et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) * (@day_pay1 / sh.DivisorToDailyRate))) / @day_pay1) AS TotalAllowanceAmount,
            es.ShiftID,
            'Second SELECT statement' AS Result,
            p.PartNo
        FROM employeetimeentry et
        INNER JOIN payrate pr
        ON pr.RowID = et.PayRateID AND
            pr.PayType = 'Regular Holiday'
        INNER JOIN employee e
        ON e.OrganizationID = eallow_OrganizationID AND
            e.RowID = et.EmployeeID AND
			e.RowID = eallow_EmployeeID AND
            e.EmploymentStatus NOT IN ('Resigned', 'Terminated') AND
            e.CalcHoliday = '1'
        INNER JOIN employeeshift es
        ON es.RowID = et.EmployeeShiftID
        INNER JOIN shift sh
        ON sh.RowID = es.ShiftID
        INNER JOIN employeeallowance ea
        ON ea.AllowanceFrequency = AllowanceFrequenzy AND
            # ea.TaxableFlag = IsTaxable AND
            ea.EmployeeID = e.RowID AND
            ea.OrganizationID = eallow_OrganizationID AND
            et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
        INNER JOIN product p
        ON p.RowID = ea.ProductID AND
            p.`Fixed` = 0
        WHERE et.OrganizationID = eallow_OrganizationID AND
            et.`Date` BETWEEN effective_datefrom AND effective_dateto AND
            FALSE
    UNION
        SELECT
            et.RowID,
            et.EmployeeID,
            et.`Date`,
            (@day_pay1 := GET_employeerateperday(et.EmployeeID,et.OrganizationID,et.`Date`)) AS Equatn,
            0 AS `timediffcount`,
            ea.AllowanceAmount * ((et.HolidayPayAmount + ((et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours) * (@day_pay1 / sh.DivisorToDailyRate))) / @day_pay1) AS TotalAllowanceAmount,
            es.ShiftID,
            'Third SELECT statement' AS Result,
            p.PartNo
        FROM employeetimeentry et
        INNER JOIN payrate pr
        ON pr.RowID = et.PayRateID AND
            pr.PayType = 'Special Non-Working Holiday'
        INNER JOIN employee e
        ON e.OrganizationID = eallow_OrganizationID AND
            e.RowID = et.EmployeeID AND
			e.RowID = eallow_EmployeeID AND
            e.EmploymentStatus NOT IN ('Resigned','Terminated') AND
            e.EmployeeType != 'Daily'
        INNER JOIN employeeshift es
        ON es.RowID = et.EmployeeShiftID
        INNER JOIN shift sh
        ON sh.RowID = es.ShiftID
        INNER JOIN employeeallowance ea
        ON ea.AllowanceFrequency = AllowanceFrequenzy AND
            # IF(IsTaxable = '1', (ea.TaxableFlag = IsTaxable), FALSE) AND
            ea.EmployeeID = e.RowID AND
            ea.OrganizationID = eallow_OrganizationID AND
            et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
        INNER JOIN product p
        ON p.RowID = ea.ProductID AND
            LOCATE('cola',p.PartNo) > 0
        WHERE et.OrganizationID = eallow_OrganizationID AND
            et.RegularHoursAmount = 0 AND
            et.TotalDayPay > 0 AND
            et.`Date` BETWEEN effective_datefrom AND effective_dateto

	      ) ii
;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeallowance_indate
DROP PROCEDURE IF EXISTS `VIEW_employeeallowance_indate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeallowance_indate`(IN `eallow_EmployeeID` INT, IN `eallow_OrganizationID` INT, IN `effectivedatefrom` DATE, IN `effectivedateto` DATE, IN `numweekdays` INT)
    DETERMINISTIC
BEGIN

DECLARE numofdaypresent INT(11);

DECLARE emppaytype VARCHAR(50);

DECLARE hourspresent DECIMAL(10,2);

DECLARE shifthoursworked DECIMAL(10,2);

DECLARE shifthoursID INT(11);

DECLARE orgpayfreqID INT(11);

DECLARE thislastdate DATE;

DECLARE minpresentdate DATE;

DECLARE maxpresentdate DATE;

DECLARE timelogcount INT(11);

DECLARE effectivallowance VARCHAR(2000);


SET thislastdate = LAST_DAY(effectivedateto);

SELECT COUNT(RowID) FROM employeetimeentrydetails WHERE OrganizationID=eallow_OrganizationID AND EmployeeID=eallow_EmployeeID AND Date BETWEEN effectivedatefrom AND effectivedateto INTO numofdaypresent;

SELECT EmployeeType FROM employee WHERE RowID=eallow_EmployeeID INTO emppaytype;

SELECT PayFrequencyID FROM organization WHERE RowID=(SELECT OrganizationID FROM employee WHERE RowID=eallow_EmployeeID) INTO orgpayfreqID;




        SELECT SUM((TIME_TO_SEC(TIMEDIFF(TimeOut,TimeIn)) / 60) / 60) FROM employeetimeentrydetails WHERE OrganizationID=eallow_OrganizationID AND EmployeeID=eallow_EmployeeID AND Date BETWEEN effectivedatefrom AND effectivedateto INTO hourspresent;

        SET hourspresent = IFNULL(hourspresent,0);

        SELECT ShiftID FROM employeeshift WHERE EmployeeID=eallow_EmployeeID AND OrganizationID=eallow_OrganizationID AND effectivedateto BETWEEN DATE(COALESCE(EffectiveFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) AND DATEDIFF(effectivedateto,EffectiveFrom) >= 0 AND COALESCE(RestDay,0)=0 ORDER BY DATEDIFF(DATE_FORMAT(effectivedateto,'%Y-%m-%d'),EffectiveFrom) LIMIT 1 INTO shifthoursID;

        SELECT ((TIME_TO_SEC(TIMEDIFF(IF(TimeFrom>TimeTo,ADDTIME(TimeTo,'24:00:00'),TimeTo),TimeFrom)) / 60) / 60) FROM shift WHERE RowID=shifthoursID INTO shifthoursworked;

        SET shifthoursworked = IF(IFNULL(shifthoursworked,0) > 8, (IFNULL(shifthoursworked,0) - 1), IFNULL(shifthoursworked,0));




IF orgpayfreqID = 1 THEN


    IF emppaytype = 'Fixed' THEN

        IF thislastdate = effectivedateto THEN

            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,eall.AllowanceAmount * numweekdays 'AllowanceAmount'
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='Daily'
            AND eall.OrganizationID=eallow_OrganizationID
            AND IF(EffectiveStartDate > effectivedatefrom AND EffectiveEndDate > effectivedateto
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate < effectivedatefrom AND EffectiveEndDate < effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate <= effectivedatefrom AND EffectiveEndDate >= effectivedateto
            , effectivedateto BETWEEN EffectiveStartDate AND EffectiveEndDate
            , IF(EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveEndDate IS NULL
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            )))))
            UNION
            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,eall.AllowanceAmount
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='Monthly'
            AND eall.OrganizationID=eallow_OrganizationID
            AND IF(EffectiveStartDate > effectivedatefrom AND EffectiveEndDate > effectivedateto
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate < effectivedatefrom AND EffectiveEndDate < effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate <= effectivedatefrom AND EffectiveEndDate >= effectivedateto
            , effectivedateto BETWEEN EffectiveStartDate AND EffectiveEndDate
            , IF(EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveEndDate IS NULL
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            )))))
            UNION
            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,eall.AllowanceAmount
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='One time'
            AND eall.OrganizationID=eallow_OrganizationID
            AND EffectiveStartDate
            BETWEEN effectivedatefrom
            AND effectivedateto
            UNION
            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,eall.AllowanceAmount * numweekdays 'AllowanceAmount'
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='Semi-monthly'
            AND eall.OrganizationID=eallow_OrganizationID
            AND IF(EffectiveStartDate > effectivedatefrom AND EffectiveEndDate > effectivedateto
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate < effectivedatefrom AND EffectiveEndDate < effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate <= effectivedatefrom AND EffectiveEndDate >= effectivedateto
            , effectivedateto BETWEEN EffectiveStartDate AND EffectiveEndDate
            , IF(EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveEndDate IS NULL
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            )))))
            ORDER BY RowID;

        ELSE

            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,eall.AllowanceAmount * numweekdays 'AllowanceAmount'
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='Daily'
            AND eall.OrganizationID=eallow_OrganizationID
            AND IF(EffectiveStartDate > effectivedatefrom AND EffectiveEndDate > effectivedateto
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate < effectivedatefrom AND EffectiveEndDate < effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate <= effectivedatefrom AND EffectiveEndDate >= effectivedateto
            , effectivedateto BETWEEN EffectiveStartDate AND EffectiveEndDate
            , IF(EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveEndDate IS NULL
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            )))))
            UNION
            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,eall.AllowanceAmount
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='One time'
            AND eall.OrganizationID=eallow_OrganizationID
            AND EffectiveStartDate
            BETWEEN effectivedatefrom
            AND effectivedateto
            UNION
            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,eall.AllowanceAmount * numweekdays 'AllowanceAmount'
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='Semi-monthly'
            AND eall.OrganizationID=eallow_OrganizationID
            AND IF(EffectiveStartDate > effectivedatefrom AND EffectiveEndDate > effectivedateto
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate < effectivedatefrom AND EffectiveEndDate < effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate <= effectivedatefrom AND EffectiveEndDate >= effectivedateto
            , effectivedateto BETWEEN EffectiveStartDate AND EffectiveEndDate
            , IF(EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveEndDate IS NULL
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            )))))
            ORDER BY RowID;

        END IF;




    ELSE




        IF thislastdate = effectivedateto THEN

            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,FORMAT((eall.AllowanceAmount / shifthoursworked) * GET_employeehoursworked_indate(eallow_EmployeeID,IF(eall.EffectiveStartDate > effectivedatefrom, eall.EffectiveStartDate, effectivedatefrom),IF(eall.EffectiveEndDate > effectivedateto, effectivedateto, eall.EffectiveEndDate),eallow_OrganizationID),2) 'AllowanceAmount'
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='Daily'
            AND eall.OrganizationID=eallow_OrganizationID
            AND IF(EffectiveStartDate > effectivedatefrom AND EffectiveEndDate > effectivedateto
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate < effectivedatefrom AND EffectiveEndDate < effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate <= effectivedatefrom AND EffectiveEndDate >= effectivedateto
            , effectivedateto BETWEEN EffectiveStartDate AND EffectiveEndDate
            , IF(EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveEndDate IS NULL
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            )))))
            UNION
            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,eall.AllowanceAmount
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='Monthly'
            AND eall.OrganizationID=eallow_OrganizationID
            AND IF(EffectiveStartDate > effectivedatefrom AND EffectiveEndDate > effectivedateto
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate < effectivedatefrom AND EffectiveEndDate < effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate <= effectivedatefrom AND EffectiveEndDate >= effectivedateto
            , effectivedateto BETWEEN EffectiveStartDate AND EffectiveEndDate
            , IF(EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveEndDate IS NULL
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            )))))
            UNION
            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,eall.AllowanceAmount
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='One time'
            AND eall.OrganizationID=eallow_OrganizationID
            AND EffectiveStartDate
            BETWEEN effectivedatefrom
            AND effectivedateto
            UNION
            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,FORMAT(((eall.AllowanceAmount / numweekdays) / shifthoursworked) * GET_employeehoursworked_indate(eallow_EmployeeID,IF(eall.EffectiveStartDate > effectivedatefrom, eall.EffectiveStartDate, effectivedatefrom),IF(eall.EffectiveEndDate > effectivedateto, effectivedateto, eall.EffectiveEndDate),eallow_OrganizationID),2) 'AllowanceAmount'
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='Semi-monthly'
            AND eall.OrganizationID=eallow_OrganizationID
            AND IF(EffectiveStartDate > effectivedatefrom AND EffectiveEndDate > effectivedateto
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate < effectivedatefrom AND EffectiveEndDate < effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate <= effectivedatefrom AND EffectiveEndDate >= effectivedateto
            , effectivedateto BETWEEN EffectiveStartDate AND EffectiveEndDate
            , IF(EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveEndDate IS NULL
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            )))))
            ORDER BY RowID;



        ELSE





            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,FORMAT((eall.AllowanceAmount / shifthoursworked) * GET_employeehoursworked_indate(eallow_EmployeeID,IF(eall.EffectiveStartDate > effectivedatefrom, eall.EffectiveStartDate, effectivedatefrom),IF(eall.EffectiveEndDate > effectivedateto, effectivedateto, eall.EffectiveEndDate),eallow_OrganizationID),2) 'AllowanceAmount'
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='Daily'
            AND eall.OrganizationID=eallow_OrganizationID
            AND IF(EffectiveStartDate > effectivedatefrom AND EffectiveEndDate > effectivedateto
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate < effectivedatefrom AND EffectiveEndDate < effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate <= effectivedatefrom AND EffectiveEndDate >= effectivedateto
            , effectivedateto BETWEEN EffectiveStartDate AND EffectiveEndDate
            , IF(EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveEndDate IS NULL
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            )))))
            UNION
            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,eall.AllowanceAmount
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='One time'
            AND eall.OrganizationID=eallow_OrganizationID
            AND EffectiveStartDate
            BETWEEN effectivedatefrom
            AND effectivedateto
            UNION
            SELECT eall.RowID
            ,p.PartNo 'Type'
            ,FORMAT(((eall.AllowanceAmount / numweekdays) / shifthoursworked) * GET_employeehoursworked_indate(eallow_EmployeeID,IF(eall.EffectiveStartDate > effectivedatefrom, eall.EffectiveStartDate, effectivedatefrom),IF(eall.EffectiveEndDate > effectivedateto, effectivedateto, eall.EffectiveEndDate),eallow_OrganizationID),2) 'AllowanceAmount'
            ,eall.AllowanceFrequency
            ,COALESCE(DATE_FORMAT(eall.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
            ,COALESCE(DATE_FORMAT(eall.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
            ,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
            ,eall.ProductID
            FROM employeeallowance eall
            LEFT JOIN product p ON eall.ProductID=p.RowID
            WHERE eall.EmployeeID=eallow_EmployeeID
            AND eall.AllowanceFrequency='Semi-monthly'
            AND eall.OrganizationID=eallow_OrganizationID
            AND IF(EffectiveStartDate > effectivedatefrom AND EffectiveEndDate > effectivedateto
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate < effectivedatefrom AND EffectiveEndDate < effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveStartDate <= effectivedatefrom AND EffectiveEndDate >= effectivedateto
            , effectivedateto BETWEEN EffectiveStartDate AND EffectiveEndDate
            , IF(EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            , EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
            , IF(EffectiveEndDate IS NULL
            , EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
            , EffectiveStartDate >= effectivedatefrom AND EffectiveEndDate <= effectivedateto
            )))))
            ORDER BY RowID;



        END IF;

    END IF;








END IF;





END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeattachments
DROP PROCEDURE IF EXISTS `VIEW_employeeattachments`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeattachments`(IN `EmpID` INT)
    DETERMINISTIC
BEGIN

SELECT RowID 'eatt_RowID'
,COALESCE(`Type`,'') 'eatt_Type'
,COALESCE(FileName,'') 'eatt_FileName'
,COALESCE(FileType,'') 'eatt_FileType'
,EmployeeID 'eatt_EmployeeID'
,Created 'eatt_Created'
,CreatedBy 'eatt_CreatedBy'
,COALESCE(LastUpd,'') 'eatt_LastUpd'
,COALESCE(LastUpdBy,'') 'eatt_LastUpdBy'
,COALESCE(AttachedFile,'') 'eatt_AttachedFile'
,'view this'
,COALESCE(`Type`,'')
FROM employeeattachments
WHERE EmployeeID=EmpID
AND LOCATE('@',`Type`) <= 0;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeawards
DROP PROCEDURE IF EXISTS `VIEW_employeeawards`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeawards`(IN `eawar_EmployeeID` INT, IN `eawar_OrganizationID` INT)
    DETERMINISTIC
    COMMENT 'view all employee''s award(s) base on employee RowID and organiztion'
BEGIN

SELECT
eawar.RowID
,eawar.EmployeeID
,COALESCE(eawar.AwardType,'') 'AwardType'
,COALESCE(eawar.AwardDescription,'') 'AwardDescription'
,COALESCE(eawar.AwardDate,'') 'AwardDate'
,DATE_FORMAT(eawar.Created,'%m-%d-%Y') 'Created'
,CONCAT(u.FirstName,' ',u.LastName) 'CreatedBy'
,COALESCE(DATE_FORMAT(eawar.LastUpd,'%m-%d-%Y'),'') 'LastUpd'
,COALESCE((SELECT CONCAT(FirstName,' ',LastName) FROM user WHERE RowID=eawar.LastUpdBy),'') 'LastUpdBy'
FROM employeeawards eawar
LEFT JOIN user u ON u.RowID=eawar.CreatedBy
WHERE eawar.OrganizationID=eawar_OrganizationID
AND eawar.EmployeeID=eawar_EmployeeID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeebonus
DROP PROCEDURE IF EXISTS `VIEW_employeebonus`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeebonus`(IN `ebon_EmployeeID` INT, IN `ebon_OrganizationID` INT)
    DETERMINISTIC
BEGIN

SELECT ebon.RowID
,IFNULL(p.PartNo,'') 'Type'
,COALESCE(ebon.BonusAmount,0) 'BonusAmount'
,IFNULL(ebon.AllowanceFrequency,'') 'AllowanceFrequency'
,COALESCE(DATE_FORMAT(ebon.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
,COALESCE(DATE_FORMAT(ebon.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
,IFNULL(ebon.ProductID,'') 'ProductID'
 FROM employeebonus ebon
 LEFT JOIN product p ON ebon.ProductID=p.RowID
 WHERE ebon.EmployeeID=ebon_EmployeeID
 AND ebon.OrganizationID=ebon_OrganizationID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeebonusforloan
DROP PROCEDURE IF EXISTS `VIEW_employeebonusforloan`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeebonusforloan`(IN `ebon_EmployeeID` INT, IN `ebon_OrganizationID` INT, IN `AssignBonusRowID` INT, IN `loan_startdate` DATE, IN `loan_enddate` DATE, IN `els_rowid` INT)
    DETERMINISTIC
BEGIN

DECLARE max_date_ofparamdate
       ,min_date_ofparamdate DATE;
       
SELECT
	MIN(pyp.PayFromDate)
	,MAX(pyp.PayToDate)
FROM payperiod pyp
INNER JOIN payperiod pp
        ON pp.OrganizationID=pyp.OrganizationID
		     AND (pp.PayFromDate >= loan_startdate OR pp.PayToDate >= loan_startdate)
			  AND (pp.PayFromDate <= loan_enddate OR pp.PayToDate <= loan_enddate)
WHERE pyp.OrganizationID=ebon_OrganizationID
AND pyp.`Year` = pp.`Year`
INTO min_date_ofparamdate
     ,max_date_ofparamdate;

SELECT i.*
FROM (
    SELECT TRUE
    ,ebon.RowID
    ,IFNULL(p.PartNo,'') AS `Type`
    ,IFNULL(ebon.BonusAmount,0) AS BonusAmount
    ,IFNULL(ebon.AllowanceFrequency,'') AS AllowanceFrequency
    ,IFNULL(DATE_FORMAT(ebon.EffectiveStartDate,'%m/%d/%Y'),'1/1/1900') AS EffectiveStartDate
    ,IFNULL(DATE_FORMAT(ebon.EffectiveEndDate,'%m/%d/%Y'),'1/1/1900') AS EffectiveEndDate
    ,IFNULL(ebon.ProductID,'') AS ProductID
    ,ebon.RemainingBalance
    ,els.Comments `Remarks` # ebon.Remarks
    ,els.LoanPayPeriodLeftForBonus `LoanPaymentPotential`
    ,'1st' `Grouping`
    FROM employeebonus ebon
    INNER JOIN employeeloanschedule els
            ON els.BonusID=ebon.RowID
               AND els.RowID=els_rowid
    INNER JOIN product p ON ebon.ProductID=p.RowID
    WHERE ebon.EmployeeID=ebon_EmployeeID
    AND ebon.OrganizationID=ebon_OrganizationID AND ebon.RowID=AssignBonusRowID
    
UNION
    SELECT FALSE
    ,ebon.RowID
    ,IFNULL(p.PartNo,'') AS `Type`
    ,IFNULL(ebon.BonusAmount,0) AS BonusAmount
    ,IFNULL(ebon.AllowanceFrequency,'') AS AllowanceFrequency
    ,IFNULL(DATE_FORMAT(ebon.EffectiveStartDate,'%m/%d/%Y'),'1/1/1900') AS EffectiveStartDate
    ,IFNULL(DATE_FORMAT(ebon.EffectiveEndDate,'%m/%d/%Y'),'1/1/1900') AS EffectiveEndDate
    ,IFNULL(ebon.ProductID,'') AS ProductID
    ,ebon.RemainingBalance
    ,ebon.Remarks
    ,0 `LoanPaymentPotential`
    ,'2nd' `Grouping`
    FROM employeebonus ebon
    INNER JOIN product p ON ebon.ProductID=p.RowID
    WHERE ebon.EmployeeID=ebon_EmployeeID
    AND ebon.OrganizationID=ebon_OrganizationID
	 AND (ebon.EffectiveStartDate >= loan_startdate OR ebon.EffectiveEndDate >= loan_startdate)
    AND (ebon.EffectiveStartDate <= loan_enddate OR ebon.EffectiveEndDate <= loan_enddate)
    AND ebon.RemainingBalance > 0
    
UNION
    SELECT FALSE
    ,ebon.RowID
    ,IFNULL(p.PartNo,'') AS `Type`
    ,IFNULL(ebon.BonusAmount,0) AS BonusAmount
    ,IFNULL(ebon.AllowanceFrequency,'') AS AllowanceFrequency
    ,IFNULL(DATE_FORMAT(ebon.EffectiveStartDate,'%m/%d/%Y'),'1/1/1900') AS EffectiveStartDate
    ,IFNULL(DATE_FORMAT(ebon.EffectiveEndDate,'%m/%d/%Y'),'1/1/1900') AS EffectiveEndDate
    ,IFNULL(ebon.ProductID,'') AS ProductID
    ,ebon.RemainingBalance
    ,ebon.Remarks
    ,0 `LoanPaymentPotential`
    ,'3rd' `Grouping`
    FROM employeebonus ebon
    INNER JOIN product p ON ebon.ProductID=p.RowID
    WHERE ebon.EmployeeID=ebon_EmployeeID
    AND ebon.OrganizationID=ebon_OrganizationID
	 # AND (ebon.EffectiveStartDate >= min_date_ofparamdate OR ebon.EffectiveEndDate >= min_date_ofparamdate)
    # AND (ebon.EffectiveStartDate <= max_date_ofparamdate OR ebon.EffectiveEndDate <= max_date_ofparamdate)
    AND ebon.RemainingBalance > 0
     ) i
GROUP BY i.RowID
;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeebonus_indate
DROP PROCEDURE IF EXISTS `VIEW_employeebonus_indate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeebonus_indate`(IN `ebon_EmployeeID` INT, IN `ebon_OrganizationID` INT, IN `effectivedatefrom` DATE, IN `effectivedateto` DATE)
    DETERMINISTIC
BEGIN


DECLARE numofdaypresent INT(11);

SELECT COUNT(RowID) FROM employeetimeentrydetails WHERE OrganizationID=ebon_OrganizationID AND EmployeeID=ebon_EmployeeID AND Date BETWEEN effectivedatefrom AND effectivedateto INTO numofdaypresent;


SELECT ebon.RowID
,p.PartNo 'Type'
,COALESCE(ebon.BonusAmount,0) * IF(ebon.AllowanceFrequency='Daily', numofdaypresent, 1) 'BonusAmount'
,ebon.AllowanceFrequency
,COALESCE(DATE_FORMAT(ebon.EffectiveStartDate,'%m/%d/%Y'),'') 'EffectiveStartDate'
,COALESCE(DATE_FORMAT(ebon.EffectiveEndDate,'%m/%d/%Y'),'') 'EffectiveEndDate'
,IF(TaxableFlag = 0,'No','Yes') 'TaxableFlag'
,ebon.ProductID
 FROM employeebonus ebon
 LEFT JOIN product p ON ebon.ProductID=p.RowID
 WHERE ebon.EmployeeID=ebon_EmployeeID
 AND ebon.OrganizationID=ebon_OrganizationID
AND IF(ebon.EffectiveStartDate > effectivedatefrom AND ebon.EffectiveEndDate > effectivedateto
, ebon.EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
, IF(ebon.EffectiveStartDate < effectivedatefrom AND ebon.EffectiveEndDate < effectivedateto
, ebon.EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
, IF(ebon.EffectiveStartDate <= effectivedatefrom AND ebon.EffectiveEndDate >= effectivedateto
, effectivedateto BETWEEN ebon.EffectiveStartDate AND ebon.EffectiveEndDate
, IF(ebon.EffectiveStartDate >= effectivedatefrom AND ebon.EffectiveEndDate <= effectivedateto
, ebon.EffectiveEndDate BETWEEN effectivedatefrom AND effectivedateto
, IF(ebon.EffectiveEndDate IS NULL
, ebon.EffectiveStartDate BETWEEN effectivedatefrom AND effectivedateto
, ebon.EffectiveStartDate >= effectivedatefrom AND ebon.EffectiveEndDate <= effectivedateto
)))));



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeecertification
DROP PROCEDURE IF EXISTS `VIEW_employeecertification`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeecertification`(IN `ecert_EmployeeID` INT, IN `ecert_OrganizationID` INT)
    DETERMINISTIC
    COMMENT 'view all employee''s certification(s) base on employee RowID and organization'
BEGIN

SELECT
ecer.RowID
,COALESCE(ecer.EmployeeID,'') 'EmployeeID'
,COALESCE(ecer.CertificationType,'') 'CertificationType'
,COALESCE(ecer.IssuingAuthority,'') 'IssuingAuthority'
,COALESCE(ecer.CertificationNo,'') 'CertificationNo'
,COALESCE(DATE_FORMAT(ecer.IssueDate,'%m-%d-%Y'),'') 'IssueDate'
,COALESCE(DATE_FORMAT(ecer.ExpirationDate,'%m-%d-%Y'),'') 'ExpirationDate'
,COALESCE(ecer.Comments,'') 'Comments'
,DATE_FORMAT(ecer.Created,'%m-%d-%Y') 'Created'
,CONCAT(u.FirstName,' ',u.LastName) 'CreatedBy'
,COALESCE(DATE_FORMAT(ecer.LastUpd,'%m-%d-%Y'),'') 'LastUpd'
,COALESCE((SELECT CONCAT(FirstName,' ',LastName) FROM user WHERE RowID=ecer.LastUpdBy),'') 'LastUpdBy'
FROM employeecertification ecer
LEFT JOIN user u ON u.RowID=ecer.CreatedBy
WHERE ecer.OrganizationID=ecert_OrganizationID
AND ecer.EmployeeID=ecert_EmployeeID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeechecklist
DROP PROCEDURE IF EXISTS `VIEW_employeechecklist`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeechecklist`(IN `echk_EmployeeID` INT, IN `echk_OrganizationID` INT)
    DETERMINISTIC
BEGIN

SELECT
RowID
,EmployeeID
,'      Performance appraisal'
,COALESCE(PerformanceAppraisal,0) 'val_PerformanceAppraisal'
,'      BIR TIN'
,COALESCE(BIRTIN,0) 'val_BIRTIN'
,'      Diploma'
,COALESCE(Diploma,0) 'val_Diploma'
,'      ID Info slip'
,COALESCE(IDInfoSlip,0) 'val_IDInfoSlip'
,'      Philhealth ID'
,COALESCE(PhilhealthID,0) 'val_PhilhealthID'
,'      HDMF ID'
,COALESCE(HDMFID,0) 'val_HDMFID'
,'      SSS No'
,COALESCE(SSSNo,0) 'val_SSSNo'
,'      Transcript of record'
,COALESCE(TranscriptOfRecord,0) 'val_TranscriptOfRecord'
,'      Birth certificate'
,COALESCE(BirthCertificate,0) 'val_BirthCertificate'
,'      Employee contract'
,COALESCE(EmployeeContract,0) 'val_EmployeeContract'
,'      Medical exam'
,COALESCE(MedicalExam,0) 'val_MedicalExam'
,'      NBI clearance'
,COALESCE(NBIClearance,0) 'val_NBIClearance'
,'      COE employer'
,COALESCE(COEEmployer,0) 'val_COEEmployer'
,'      Marriage contract'
,COALESCE(MarriageContract,0) 'val_MarriageContract'
,'      House sketch'
,COALESCE(HouseSketch,0) 'val_HouseSketch'
,'      2305'
,COALESCE(TrainingAgreement,0) 'val_TrainingAgreement'
,'      Health permit'
,COALESCE(HealthPermit,0) 'val_HealthPermit'
,'      SSS loan certificate'
,COALESCE(ValidID,0) 'val_ValidID'
,'      Resume'
,COALESCE(Resume,0) 'val_Resume'
,'      HDMF Loan'
,COALESCE(PAGIBIGLoan,0) 'val_PAGIBIGLoan'
,'      Clearance'
,COALESCE(Clearance,0) 'val_Clearance'
FROM employeechecklist
WHERE EmployeeID=echk_EmployeeID
AND OrganizationID=echk_OrganizationID
ORDER BY RowID DESC
LIMIT 1;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeedependents
DROP PROCEDURE IF EXISTS `VIEW_employeedependents`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeedependents`(IN `edep_ParentEmployeeID` INT, IN `edep_OrganizationID` INT)
    DETERMINISTIC
    COMMENT 'view all employee''s dependent(s) base on emloyee RowID and organization'
BEGIN

SELECT edep.RowID
,edep.ParentEmployeeID
,COALESCE(edep.Salutation,'') 'Salutation'
,edep.FirstName
,COALESCE(edep.MiddleName,'') 'MiddleName'
,edep.LastName
,COALESCE(edep.Surname,'') 'Surname'
,COALESCE(edep.RelationToEmployee,'') 'RelationToEmployee'
,COALESCE(edep.TINNo,'') 'TINNo'
,COALESCE(edep.SSSNo,'') 'SSSNo'
,COALESCE(edep.HDMFNo,'') 'HDMFNo'
,COALESCE(edep.PhilHealthNo,'') 'PhilHealthNo'
,COALESCE(edep.EmailAddress,'') 'EmailAddress'
,COALESCE(edep.WorkPhone,'') 'WorkPhone'
,COALESCE(edep.HomePhone,'') 'HomePhone'
,COALESCE(edep.MobilePhone,'') 'MobilePhone'
,COALESCE(edep.HomeAddress,'') 'HomeAddress'
,COALESCE(edep.Nickname,'') 'Nickname'
,COALESCE(edep.JobTitle,'') 'JobTitle'
,COALESCE(edep.Gender,'') 'Gender'
,IF(edep.ActiveFlag='Y',TRUE,FALSE) 'ActiveFlag'
,COALESCE(DATE_FORMAT(edep.Birthdate,'%m/%d/%Y'),'') 'Birthdate'
,CONCAT(u.FirstName,' ',u.LastName) 'CreatedBy'
,DATE_FORMAT(edep.Created,'%m-%d-%Y') 'Created'
,COALESCE((SELECT CONCAT(FirstName,' ',LastName) FROM user WHERE RowID=edep.LastUpdBy),'') 'LastUpdBy'
,COALESCE(DATE_FORMAT(edep.LastUpd,'%m-%d-%Y'),'') 'LastUpd'
FROM employeedependents edep
LEFT JOIN user u ON u.RowID=edep.CreatedBy
WHERE edep.OrganizationID=edep_OrganizationID
AND edep.ParentEmployeeID=edep_ParentEmployeeID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeleave
DROP PROCEDURE IF EXISTS `VIEW_employeeleave`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeleave`(IN `elv_EmployeeID` INT, IN `elv_OrganizationID` INT)
    DETERMINISTIC
BEGIN

SELECT
elv.RowID
,COALESCE(elv.LeaveType,'') 'LeaveType'
,IF(elv.LeaveStartTime IS NULL,'',CONCAT(SUBSTRING_INDEX(TIME_FORMAT(elv.LeaveStartTime,'%h:%i:%s'),':',2),RIGHT(TIME_FORMAT(elv.LeaveStartTime,'%r'),3))) 'LeaveStartTime'
,IF(elv.LeaveEndTime IS NULL,'',CONCAT(SUBSTRING_INDEX(TIME_FORMAT(elv.LeaveEndTime,'%h:%i:%s'),':',2),RIGHT(TIME_FORMAT(elv.LeaveEndTime,'%r'),3))) 'LeaveEndTime'
,COALESCE(DATE_FORMAT(elv.LeaveStartDate,'%m/%d/%Y'),'') 'LeaveStartDate'
,COALESCE(DATE_FORMAT(elv.LeaveEndDate,'%m/%d/%Y'),'') 'LeaveEndDate'
,COALESCE(elv.Reason,'') 'Reason'
,COALESCE(elv.Comments,'') 'Comments'
,COALESCE(elv.Image,'') 'Image'
,'view this'
,COALESCE((SELECT FileName FROM employeeattachments WHERE EmployeeID=elv.EmployeeID AND `Type`=CONCAT('Employee Leave@',elv.RowID)),'') 'FileName'
,COALESCE((SELECT FileType FROM employeeattachments WHERE EmployeeID=elv.EmployeeID AND `Type`=CONCAT('Employee Leave@',elv.RowID)),'') 'FileExtens'
,elv.`Status`
FROM employeeleave elv
WHERE elv.OrganizationID=elv_OrganizationID
AND elv.EmployeeID=elv_EmployeeID;




END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeloanhistory
DROP PROCEDURE IF EXISTS `VIEW_employeeloanhistory`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeloanhistory`(
    IN `ehist_EmployeeID` INT,
    IN `ehist_OrganizationID` INT,
    IN `ehist_LoanType` VARCHAR(50)
)
    DETERMINISTIC
BEGIN

SELECT
    COALESCE(DATE_FORMAT(pyp.PayToDate, '%m/%d/%Y'), '') AS `DeductionDate`,
    COALESCE(ROUND(slp.DeductionAmount, 2), 0) AS `DeductionAmount`,
    COALESCE(els.Status, '') AS `Status`,
    COALESCE(prd.PartNo, '') AS `LoanType`,
    slp.RowID
FROM scheduledloansperpayperiod slp
INNER JOIN employeeloanschedule els
ON els.RowID = slp.EmployeeLoanRecordID
INNER JOIN payperiod pyp
ON pyp.RowiD = slp.PayPeriodID
INNER JOIN product prd
ON prd.RowID = els.LoanTypeID
WHERE els.EmployeeID = ehist_EmployeeID AND
    els.OrganizationID = ehist_OrganizationID AND
    (ehist_LoanType IS NULL) OR prd.PartNo = ehist_LoanType
ORDER BY pyp.PayToDate DESC;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeloan_indate
DROP PROCEDURE IF EXISTS `VIEW_employeeloan_indate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeloan_indate`(
    IN `eloan_EmployeeID` INT,
    IN `eloan_OrganizationID` INT,
    IN `effectivedatefrom` DATE,
    IN `effectivedateto` DATE
)
    DETERMINISTIC
BEGIN

DECLARE isEndOfMonth CHAR(1);
DECLARE month_type VARCHAR(150);
DECLARE payPeriodID INT;

SELECT pp.RowID, pp.`Half`
FROM payperiod pp
WHERE pp.OrganizationID = eloan_OrganizationID AND
    pp.PayFromDate = effectivedatefrom AND
    pp.PayToDate = effectivedateto AND
    pp.TotalGrossSalary = 1
INTO payPeriodID, isEndOfMonth;

SET month_type = IF(isEndOfMonth = '0', 'End of the month', 'First half');

SELECT
    IFNULL(l.LoanNumber, '') `LoanNumber`,
    IFNULL(FORMAT(l.TotalLoanAmount, 2), 0.00) `TotalLoanAmount`,
    IFNULL(FORMAT(s.TotalBalanceLeft, 2), 0.00) `TotalBalanceLeft`,
    IFNULL(FORMAT(s.DeductionAmount, 2), 0.00) `DeductionAmount`,
    IFNULL(FORMAT(l.DeductionPercentage, 2), 0.00) `DeductionPercentage`,
    IFNULL(l.DeductionSchedule, '') `DeductionSchedule`,
    IFNULL(l.NoOfPayPeriod, 0) `NoOfPayPeriod`,
    IFNULL(l.Comments, '') `Comments`,
    l.RowID,
    IFNULL(l.`Status`, '') `Status`,
    p.PartNo
FROM scheduledloansperpayperiod s
INNER JOIN employeeloanschedule l
ON l.RowID = s.EmployeeLoanRecordID
LEFT JOIN product p
ON p.RowID = l.LoanTypeID
WHERE s.EmployeeID = eloan_EmployeeID AND
    s.PayPeriodID = payPeriodID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeemedicalrecord
DROP PROCEDURE IF EXISTS `VIEW_employeemedicalrecord`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeemedicalrecord`(IN `emedr_RowID` INT, IN `emedr_OrganizationID` INT)
    DETERMINISTIC
    COMMENT 'view the employee''s medical record(s) base on date from-to, employee RowID and organization'
BEGIN

SELECT
COALESCE(DATE_FORMAT(emed.DateFrom,'%m/%d/%Y'),'') 'DateFrom'
,COALESCE(DATE_FORMAT(emed.DateTo,'%m/%d/%Y'),'') 'DateTo'
,emed.EmployeeID
FROM employeemedicalrecord emed
WHERE emed.EmployeeID=emedr_RowID
AND emed.OrganizationID=emedr_OrganizationID
GROUP BY emed.DateFrom,emed.DateTo;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeoffbusi
DROP PROCEDURE IF EXISTS `VIEW_employeeoffbusi`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeoffbusi`(IN `obf_EmployeeID` INT, IN `obf_OrganizationID` INT)
    DETERMINISTIC
BEGIN



SELECT
obf.RowID
,COALESCE(obf.OffBusType,'') 'LeaveType'
,IF(obf.OffBusStartTime IS NULL,'',CONCAT(SUBSTRING_INDEX(TIME_FORMAT(obf.OffBusStartTime,'%h:%i:%s'),':',2),RIGHT(TIME_FORMAT(obf.OffBusStartTime,'%r'),3))) 'OffBusStartTime'
,IF(obf.OffBusEndTime IS NULL,'',CONCAT(SUBSTRING_INDEX(TIME_FORMAT(obf.OffBusEndTime,'%h:%i:%s'),':',2),RIGHT(TIME_FORMAT(obf.OffBusEndTime,'%r'),3))) 'OffBusEndTime'
,COALESCE(DATE_FORMAT(obf.OffBusStartDate,'%m/%d/%Y'),'') 'OTStartDate'
,COALESCE(DATE_FORMAT(obf.OffBusEndDate,'%m/%d/%Y'),'') 'OTEndDate'
,COALESCE(OffBusStatus,'') 'OffBusStatus'
,COALESCE(obf.Reason,'') 'Reason'
,COALESCE(obf.Comments,'') 'Comments'
,COALESCE(obf.Image,'') 'Image'
,'view this'
,COALESCE((SELECT FileName FROM employeeattachments WHERE EmployeeID=obf.EmployeeID AND Type=CONCAT('Official Business@',obf.RowID)),'') 'FileName'
,COALESCE((SELECT FileType FROM employeeattachments WHERE EmployeeID=obf.EmployeeID AND Type=CONCAT('Official Business@',obf.RowID)),'') 'FileExtens'
FROM employeeofficialbusiness obf
WHERE obf.OrganizationID=obf_OrganizationID
AND obf.EmployeeID=obf_EmployeeID;


END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeoffset
DROP PROCEDURE IF EXISTS `VIEW_employeeoffset`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeoffset`(IN `OrganizID` INT, IN `EmpRowID` INT, IN `pagenumber` INT)
BEGIN

SELECT eos.RowID
,eos.`Type`
,IFNULL(TIME_FORMAT(eos.StartTime,'%h:%i %p'),'')
,IFNULL(TIME_FORMAT(eos.EndTime,'%h:%i %p'),'')
,IFNULL(eos.StartDate,'')
,IFNULL(eos.EndDate,'')
,IFNULL(eos.`Status`,'')
,eos.Reason
,eos.Comments
FROM employeeoffset eos
WHERE eos.EmployeeID=EmpRowID
AND eos.OrganizationID=OrganizID
ORDER BY eos.StartDate, eos.EndDate
LIMIT pagenumber, 20;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeOT
DROP PROCEDURE IF EXISTS `VIEW_employeeOT`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeOT`(IN `eot_EmployeeID` INT, IN `eot_OrganizationID` INT, IN `pagenumber` INT)
    DETERMINISTIC
BEGIN

SELECT
eot.RowID
,COALESCE(eot.OTType,'') 'LeaveType'
,IF(eot.OTStartTime IS NULL,'',CONCAT(SUBSTRING_INDEX(TIME_FORMAT(eot.OTStartTime,'%h:%i:%s'),':',2),RIGHT(TIME_FORMAT(eot.OTStartTime,'%r'),3))) 'OTStartTime'
,IF(eot.OTEndTime IS NULL,'',CONCAT(SUBSTRING_INDEX(TIME_FORMAT(eot.OTEndTime,'%h:%i:%s'),':',2),RIGHT(TIME_FORMAT(eot.OTEndTime,'%r'),3))) 'OTEndTime'
,COALESCE(DATE_FORMAT(eot.OTStartDate,'%m/%d/%Y'),'') 'OTStartDate'
,COALESCE(DATE_FORMAT(eot.OTEndDate,'%m/%d/%Y'),'') 'OTEndDate'
,COALESCE(eot.OTStatus,'') 'Status'
,COALESCE(eot.Reason,'') 'Reason'
,COALESCE(eot.Comments,'') 'Comments'
,COALESCE(eot.Image,'') 'Image'
,'view this'
,COALESCE((SELECT FileName FROM employeeattachments WHERE EmployeeID=eot.EmployeeID AND Type=CONCAT('Employee Overtime@',eot.RowID)),'') 'FileName'
,COALESCE((SELECT FileType FROM employeeattachments WHERE EmployeeID=eot.EmployeeID AND Type=CONCAT('Employee Overtime@',eot.RowID)),'') 'FileExtens'
FROM employeeovertime eot
WHERE eot.OrganizationID=eot_OrganizationID
AND eot.EmployeeID=eot_EmployeeID
ORDER BY eot.OTStartDate,eot.OTEndDate
LIMIT pagenumber, 10;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeesalary
DROP PROCEDURE IF EXISTS `VIEW_employeesalary`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeesalary`(IN `esal_OrganizationID` INT, IN `esal_EmployeeID` INT, IN `esal_Date` DATE)
    DETERMINISTIC
BEGIN

SELECT
esal.RowID
,esal.EmployeeID
,esal.FilingStatusID
,COALESCE((SELECT FilingStatus FROM filingstatus WHERE RowID=esal.FilingStatusID),'') 'FilingStatus'
,COALESCE(esal.PaySocialSecurityID,'') 'PaySocialSecurityID'
,COALESCE((SELECT EmployeeContributionAmount FROM paysocialsecurity WHERE RowID=esal.PaySocialSecurityID),'') 'EmployeeContributionAmount'
,esal.PayPhilhealthID
,COALESCE((SELECT EmployeeShare FROM payphilhealth WHERE RowID=esal.PayPhilhealthID),'') 'EmployeeShare'
,COALESCE(esal.HDMFAmount,50) 'HDMFAmount'
,esal.BasicPay
,esal.NoofDependents
,COALESCE(esal.MaritalStatus,'') 'MaritalStatus'
,COALESCE(esal.PositionID,'') 'PositionID'
,COALESCE((SELECT PositionName FROM position WHERE RowID=esal.PositionID),'') 'Position'
,esal.EffectiveDateFrom
,COALESCE(IF(DATEDIFF(NOW(),esal.EffectiveDateFrom)<0,'tomorrow',COALESCE(esal.EffectiveDateTo,'present')),'') 'EffectiveDateTo'
FROM employeesalary esal
WHERE esal.OrganizationID=esal_OrganizationID
AND esal.EmployeeID=esal_EmployeeID
ORDER BY DATEDIFF(CURDATE(),esal.EffectiveDateFrom) ASC;




END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeeshift
DROP PROCEDURE IF EXISTS `VIEW_employeeshift`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeeshift`(IN `OrganizID` INT, IN `EmpRowID` INT, IN `pagenumber` INT)
    DETERMINISTIC
BEGIN

SELECT
    ee.EmployeeID,
    CONCAT(ee.LastName,',',ee.FirstName,',',INITIALS(ee.MiddleName,'.','1')) AS Name,
    es.RowID,
    es.EffectiveFrom,
    IF(es.EffectiveTo != es.EffectiveFrom, es.EffectiveTo, NULL),
    COALESCE(TIME_FORMAT(s.TimeFrom, '%H:%i'), '') timef,
    COALESCE(TIME_FORMAT(s.TimeTo, '%H:%i'), '') timet,
    TIME_FORMAT(s.BreaktimeFrom, '%H:%i'),
    TIME_FORMAT(s.BreaktimeTo, '%H:%i')
FROM employeeshift es
LEFT JOIN shift s ON es.ShiftID = s.RowID
INNER JOIN employee ee ON es.EmployeeID = ee.RowID
WHERE es.OrganizationID = OrganizID AND
    ee.RowID = EmpRowID
ORDER BY es.EffectiveTo DESC, es.EffectiveFrom DESC
LIMIT pagenumber, 50;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeetimeentrydetails
DROP PROCEDURE IF EXISTS `VIEW_employeetimeentrydetails`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeetimeentrydetails`(
	IN `etentd_TimeentrylogsImportID` VARCHAR(100),
	IN `etentd_OrganizationID` INT,
	IN `etd_EmployeeNumber` VARCHAR(50)
,
	IN `e_FirstName` VARCHAR(50)
,
	IN `e_LastName` VARCHAR(50)

)
    DETERMINISTIC
BEGIN

IF etd_EmployeeNumber IS NULL THEN
    SET etd_EmployeeNumber = '';
END IF;

IF etd_EmployeeNumber = '' THEN

    SELECT etentd.RowID
    ,COALESCE(etentd.EmployeeID,'') 'empRowID'
    ,COALESCE(e.EmployeeID,'') 'EmployeeID'
    ,CONCAT(e.LastName,',',e.FirstName, IF(e.MiddleName='','',','),INITIALS(e.MiddleName,'. ','1')) 'Fullname'
    ,COALESCE((SELECT CONCAT(COALESCE(CONCAT(SUBSTRING_INDEX(TIME_FORMAT(shft.TimeFrom,'%r'),':',2),' ',SUBSTRING_INDEX(TIME_FORMAT(shft.TimeFrom,'%r'),' ',-1)),''),' to ',COALESCE(CONCAT(SUBSTRING_INDEX(TIME_FORMAT(shft.TimeTo,'%r'),':',2),' ',SUBSTRING_INDEX(TIME_FORMAT(shft.TimeTo,'%r'),' ',-1)),'')) FROM shift shft LEFT JOIN employeeshift esh ON esh.ShiftID=shft.RowID WHERE esh.EmployeeID=etentd.EmployeeID AND etentd.`Date` BETWEEN DATE(COALESCE(esh.EffectiveFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(esh.EffectiveTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) ORDER BY DATEDIFF(DATE_FORMAT(NOW(),'%Y-%m-%d'),esh.EffectiveFrom) LIMIT 1),'') 'EmployeeShift'
    ,COALESCE(CONCAT(SUBSTRING_INDEX(TIME_FORMAT(etentd.TimeIn,'%r'),':',2),TIME_FORMAT(etentd.TimeIn,' %p')),'') 'TimeIn'
    ,CAST(IFNULL(etentd.`Date`,'1900-01-01') AS DATE) AS `Date`
    ,COALESCE(CONCAT(SUBSTRING_INDEX(TIME_FORMAT(etentd.TimeOut,'%r'),':',2),TIME_FORMAT(etentd.TimeOut,' %p')),'') 'TimeOut'
    ,CAST(IF(DATE(etentd.`TimeStampIn`) <> DATE(etentd.`TimeStampOut`),DATE(etentd.`TimeStampOut`),"") as DATE) AS `Date`
    ,COALESCE(etentd.TimeScheduleType,'') 'TimeScheduleType'
    ,COALESCE(etentd.TimeEntryStatus,'') 'TimeEntryStatus'
    FROM employeetimeentrydetails etentd
    LEFT JOIN employee e ON e.RowID=etentd.EmployeeID
    WHERE etentd.TimeentrylogsImportID =etentd_TimeentrylogsImportID
        AND (e.FirstName LIKE CONCAT('%', e_FirstName, '%') OR e_FirstName = '')
        AND (e.LastName LIKE CONCAT('%', e_LastName, '%') OR e_LastName = '')
    AND etentd.OrganizationID=etentd_OrganizationID
    ORDER BY etentd.EmployeeID,etentd.`Date`;

ELSE

    SELECT etentd.RowID
    ,COALESCE(etentd.EmployeeID,'') 'empRowID'
    ,COALESCE(e.EmployeeID,'') 'EmployeeID'
    ,CONCAT(e.LastName,',',e.FirstName, IF(e.MiddleName='','',','),INITIALS(e.MiddleName,'. ','1')) 'Fullname'
    ,COALESCE((SELECT CONCAT(COALESCE(CONCAT(SUBSTRING_INDEX(TIME_FORMAT(shft.TimeFrom,'%r'),':',2),' ',SUBSTRING_INDEX(TIME_FORMAT(shft.TimeFrom,'%r'),' ',-1)),''),' to ',COALESCE(CONCAT(SUBSTRING_INDEX(TIME_FORMAT(shft.TimeTo,'%r'),':',2),' ',SUBSTRING_INDEX(TIME_FORMAT(shft.TimeTo,'%r'),' ',-1)),'')) FROM shift shft LEFT JOIN employeeshift esh ON esh.ShiftID=shft.RowID WHERE esh.EmployeeID=etentd.EmployeeID AND etentd.`Date` BETWEEN DATE(COALESCE(esh.EffectiveFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(esh.EffectiveTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) ORDER BY DATEDIFF(DATE_FORMAT(NOW(),'%Y-%m-%d'),esh.EffectiveFrom) LIMIT 1),'') 'EmployeeShift'
    ,COALESCE(CONCAT(SUBSTRING_INDEX(TIME_FORMAT(etentd.TimeIn,'%r'),':',2),TIME_FORMAT(etentd.TimeIn,' %p')),'') 'TimeIn'
    ,CAST(IFNULL(etentd.`Date`,'1900-01-01') AS DATE) AS `Date`
    ,COALESCE(CONCAT(SUBSTRING_INDEX(TIME_FORMAT(etentd.TimeOut,'%r'),':',2),TIME_FORMAT(etentd.TimeOut,' %p')),'') 'TimeOut'
	 ,CAST(IF(DATE(etentd.`TimeStampIn`) <> DATE(etentd.`TimeStampOut`),DATE(etentd.`TimeStampOut`),"") as DATE) AS `Date`
    ,COALESCE(etentd.TimeScheduleType,'') 'TimeScheduleType'
    ,COALESCE(etentd.TimeEntryStatus,'') 'TimeEntryStatus'
    FROM employeetimeentrydetails etentd
    INNER JOIN employee e ON e.EmployeeID=etd_EmployeeNumber AND e.OrganizationID=etentd_OrganizationID
    WHERE etentd.TimeentrylogsImportID = etentd_TimeentrylogsImportID
    AND etentd.OrganizationID=etentd_OrganizationID
    AND etentd.EmployeeID=e.RowID
    ORDER BY etentd.EmployeeID,etentd.`Date`;

END IF;


END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeetimeentry_genpayroll
DROP PROCEDURE IF EXISTS `VIEW_employeetimeentry_genpayroll`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeetimeentry_genpayroll`()
    DETERMINISTIC
BEGIN


END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeetimeentry_SEMIMON
DROP PROCEDURE IF EXISTS `VIEW_employeetimeentry_SEMIMON`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeetimeentry_SEMIMON`(IN `etent_OrganizationID` INT, IN `etent_EmployeeID` INT, IN `etent_Date` DATE)
    DETERMINISTIC
BEGIN

DECLARE paypFrom DATE;

DECLARE paypTo DATE;

DECLARE salRowID INT(11);

DECLARE day_ofrest CHAR(1);

DECLARE payrateRowID INT(11);
DECLARE commonrate DECIMAL(10,2);
DECLARE otrate DECIMAL(10,2);
DECLARE ndiffrate DECIMAL(10,2);
DECLARE ndiffotrate DECIMAL(10,2);
DECLARE restday_rate DECIMAL(10,2);
DECLARE restdayot_rate DECIMAL(10,2);
DECLARE pr_DayBefore DATE;
DECLARE pr_PayType VARCHAR(50);

DECLARE custom_dateformat VARCHAR(8) DEFAULT '%c/%e/%Y';
DECLARE custom_timeformat VARCHAR(8) DEFAULT '%h:%i %p';

SELECT e.DayOfRest,pp.PayFromDate,pp.PayToDate FROM employee e INNER JOIN payperiod pp ON pp.OrganizationID=e.OrganizationID AND pp.TotalGrossSalary=e.PayFrequencyID AND pp.`Month` = MONTH(etent_Date) AND pp.`Year` = YEAR(etent_Date) AND pp.Half = (DATE_FORMAT(etent_Date, '%d') <= 15) WHERE e.RowID=etent_EmployeeID INTO day_ofrest, paypFrom, paypTo;

SELECT RowID FROM employeesalary WHERE EmployeeID=etent_EmployeeID AND OrganizationID=etent_OrganizationID AND etent_Date BETWEEN DATE(COALESCE(EffectiveDateFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveDateTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) AND DATEDIFF(etent_Date,EffectiveDateFrom) >= 0 ORDER BY DATEDIFF(DATE_FORMAT(etent_Date,'%Y-%m-%d'),EffectiveDateFrom) LIMIT 1 INTO salRowID;

    SELECT DATE(CONCAT(YEAR(etent_Date),'-',MONTH(etent_Date),'-',IF(DAY(etent_Date) <= 15,1,16))) INTO paypFrom;

    SELECT DATE(CONCAT(YEAR(etent_Date),'-',MONTH(etent_Date),'-',IF(DAY(etent_Date) <= 15,15,DAY(LAST_DAY(DATE(etent_Date)))))) INTO paypTo;



SELECT
etent.RowID
,etent.OrganizationID
,etent.Created
,etent.CreatedBy
,IFNULL(etent.LastUpd,'') 'LastUpd'
,IFNULL(etent.LastUpdBy,'') 'LastUpdBy'
,IFNULL(DATE(etent.`Date`),'') 'Date'
,IFNULL(etent.EmployeeShiftID,'') 'EmployeeShiftID'
,etent.EmployeeID
,IFNULL(etent.EmployeeSalaryID,salRowID) 'EmployeeSalaryID'
,IFNULL(etent.EmployeeFixedSalaryFlag,0) 'EmployeeFixedSalaryFlag'
,IFNULL(etent.TotalHoursWorked,0) 'TotalHoursWorked'
,IFNULL(etent.RegularHoursWorked,0) 'RegularHoursWorked'
,IFNULL(etent.RegularHoursAmount,0) 'RegularHoursAmount'
,IFNULL(etent.OvertimeHoursWorked,0) 'OvertimeHoursWorked'
,IFNULL(etent.OvertimeHoursAmount,0) 'OvertimeHoursAmount'
,IFNULL(etent.UndertimeHours,0) 'UndertimeHours'
,IFNULL(etent.UndertimeHoursAmount,0) * IFNULL(prt.CommonRate,1) 'UndertimeHoursAmount'
,IFNULL(etent.NightDifferentialHours,0) 'NightDifferentialHours'
,IFNULL(etent.NightDiffHoursAmount,0) 'NightDiffHoursAmount'
,IFNULL(etent.NightDifferentialOTHours,0) 'NightDifferentialOTHours'
,IFNULL(etent.NightDiffOTHoursAmount,0) 'NightDiffOTHoursAmount'
,IFNULL(etent.HoursLate,0) 'HoursLate'
,IFNULL(etent.HoursLateAmount,0) * IFNULL(prt.CommonRate,1) 'HoursLateAmount'
,IFNULL(etent.LateFlag,0) 'LateFlag'
,IFNULL(etent.PayRateID,0) 'PayRateID'
,IFNULL(etent.VacationLeaveHours,0) 'VacationLeaveHours'
,IFNULL(etent.SickLeaveHours,0) 'SickLeaveHours'
,IFNULL(etent.MaternityLeaveHours,0) 'MaternityLeaveHours'
,IFNULL(etent.OtherLeaveHours,0) 'OtherLeaveHours'
,IFNULL(etent.TotalDayPay,0) 'TotalDayPay'
,etent.Absent
,IFNULL(TIME_FORMAT(sh.TimeFrom, custom_timeformat),    IFNULL(TIME_FORMAT(emsh.TimeFrom, custom_timeformat),'')) AS DutyStartTime
,IFNULL(TIME_FORMAT(sh.TimeTo, custom_timeformat),  IFNULL(TIME_FORMAT(emsh.TimeTo, custom_timeformat),'')) AS DutyEndTime
,IFNULL(DATE_FORMAT(esh.EffectiveFrom, custom_dateformat),  IFNULL(DATE_FORMAT(ems.EffectiveFrom, custom_dateformat),'')) AS ShiftEffectiveDateFrom
,IFNULL(DATE_FORMAT(esh.EffectiveTo, custom_dateformat),    IFNULL(DATE_FORMAT(ems.EffectiveTo, custom_dateformat),'')) AS ShiftEffectiveDateTo
,IFNULL(esh.RestDay,(DAYOFWEEK(etent.`Date`) = prt.DayOfRest)) AS IsDayOfRest
,IFNULL(es.BasicPay,0) AS BasicPay
,IFNULL(TIME_FORMAT(det.TimeIn, custom_timeformat), '') AS TimeIn
,IFNULL(TIME_FORMAT(det.TimeOut, custom_timeformat), '') AS TimeOut

FROM employeetimeentry etent

INNER JOIN employee e ON e.RowID=etent.EmployeeID

LEFT JOIN employeesalary es ON es.RowID=etent.EmployeeSalaryID

LEFT JOIN employeetimeentrydetails det ON det.RowID = (
        SELECT MAX(RowID)
        FROM employeetimeentrydetails
        WHERE `Date` = etent.`Date`
        AND EmployeeID = etent.EmployeeID
        ORDER BY Created DESC
        LIMIT 1
    )
LEFT JOIN (
    SELECT
        pr.RowID
        ,IF(pr.PayType = 'Special Non-Working Holiday', IF(e.CalcSpecialHoliday = '1', pr.`PayRate`, 1), IF(pr.PayType = 'Regular Holiday', IF(e.CalcHoliday = '1', pr.`PayRate`, 1), pr.`PayRate`)) AS CommonRate
        ,IF(e.OvertimeOverride = '1',pr.OvertimeRate,1) AS OverTimeRate
        ,IF(e.CalcNightDiff = '1', pr.NightDifferentialRate, 1) AS NDiffRate
        ,IF(e.CalcNightDiffOT = '1', pr.NightDifferentialOTRate, 1) AS NDiffOTRate
        ,IF(e.CalcRestDay = '1', pr.RestDayRate, 1) AS RestDayRate
        ,IF(e.CalcRestDayOT = '1', pr.RestDayOvertimeRate, 1) AS RestDayOTRate
        ,e.DayOfRest
    FROM payrate pr
    INNER JOIN employee e ON e.RowID=etent_EmployeeID AND e.OrganizationID=etent_OrganizationID
    WHERE pr.OrganizationID=etent_OrganizationID
    AND pr.`Date` BETWEEN paypFrom AND paypTo) prt ON prt.RowID=etent.PayRateID

LEFT JOIN employeeshift esh ON esh.RowID=etent.EmployeeShiftID

LEFT JOIN shift sh ON sh.RowID=esh.ShiftID

LEFT OUTER JOIN employeeshift ems ON ems.EmployeeID=etent.EmployeeID AND ems.OrganizationID=etent.OrganizationID AND etent.`Date` BETWEEN ems.EffectiveFrom AND ems.EffectiveTo AND e.DayOfRest = DAYOFWEEK(etent.`Date`) AND etent.EmployeeShiftID IS NULL

LEFT JOIN shift emsh ON emsh.RowID=ems.ShiftID

WHERE etent.OrganizationID=etent_OrganizationID
AND etent.EmployeeID=etent_EmployeeID
AND etent.`Date` BETWEEN paypFrom AND paypTo;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeetimeentry_SUM
DROP PROCEDURE IF EXISTS `VIEW_employeetimeentry_SUM`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_employeetimeentry_SUM`(IN `etent_OrganizationID` INT, IN `etent_EmployeeID` INT, IN `etent_Date` DATE, IN `etent_DateTo` DATE)
    DETERMINISTIC
BEGIN

DECLARE paypFrom DATE;

DECLARE paypTo DATE;

DECLARE salRowID INT(11);

DECLARE EmpPayFreqID INT(11);

DECLARE employee_datehire DATE;

SELECT PayFrequencyID,StartDate FROM employee WHERE RowID=etent_EmployeeID INTO EmpPayFreqID,employee_datehire;



SELECT RowID FROM employeesalary WHERE EmployeeID=etent_EmployeeID AND OrganizationID=etent_OrganizationID AND etent_Date BETWEEN DATE(COALESCE(EffectiveDateFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveDateTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) AND DATEDIFF(etent_Date,EffectiveDateFrom) >= 0 ORDER BY DATEDIFF(DATE_FORMAT(etent_Date,'%Y-%m-%d'),EffectiveDateFrom) LIMIT 1 INTO salRowID;


IF EmpPayFreqID = 1 THEN


    SET paypFrom = etent_Date;

    IF employee_datehire IS NOT NULL THEN

        SET paypFrom = IF(employee_datehire > etent_Date, employee_datehire, etent_Date);

    END IF;

    SET paypTo = etent_DateTo;

ELSEIF EmpPayFreqID = 2 THEN

    SELECT DATE(CONCAT(YEAR(etent_Date),'-',MONTH(etent_Date),'-01')) INTO paypFrom;

    SELECT DATE(CONCAT(YEAR(etent_Date),'-',MONTH(etent_Date),'-',IF(DAY(etent_Date) <= 15,15,DAY(LAST_DAY(DATE(etent_Date)))))) INTO paypTo;

ELSEIF EmpPayFreqID = 3 THEN

    SELECT DATE(CONCAT(YEAR(etent_Date),'-',MONTH(etent_Date),'-',IF(DAY(etent_Date) <= 15,15,DAY(LAST_DAY(DATE(etent_Date)))))) INTO paypTo;

    SET paypFrom = paypTo;

ELSEIF EmpPayFreqID = 4 THEN


    SET paypFrom = etent_Date;

    IF employee_datehire IS NOT NULL THEN

        SET paypFrom = IF(employee_datehire > etent_Date, employee_datehire, etent_Date);

    END IF;

    SET paypTo = etent_DateTo;

END IF;







SELECT
COALESCE(etent.RowID,'') 'RowID'
,COALESCE(DATE(COALESCE(etent.Date,'')),'') 'Date'
,COALESCE(etent.EmployeeShiftID,(SELECT RowID FROM employeeshift WHERE EmployeeID=etent_EmployeeID AND OrganizationID=etent_OrganizationID AND DATE(etent_Date) BETWEEN COALESCE(EffectiveFrom,DATE_ADD(DATE(etent_Date), INTERVAL -1 MONTH)) AND COALESCE(EffectiveTo,DATE_ADD(DATE(etent_Date), INTERVAL 1 MONTH)) LIMIT 1)) 'EmployeeShiftID'
,COALESCE(etent.EmployeeID,'') 'EmployeeID'
,COALESCE(etent.EmployeeSalaryID,salRowID) 'EmployeeSalaryID'
,COALESCE(etent.EmployeeFixedSalaryFlag,0) 'EmployeeFixedSalaryFlag'
,IFNULL(SUM(IFNULL(etent.TotalHoursWorked,0)) - SUM(IFNULL(etent.OvertimeHoursWorked,0)), 0) 'TotalHoursWorked'
,COALESCE(SUM(COALESCE(etent.RegularHoursWorked,0)),0) 'RegularHoursWorked'
,SUM(COALESCE(etent.TotalDayPay,0)) - SUM(COALESCE(etent.OvertimeHoursAmount,0)) - SUM(COALESCE(etent.NightDiffHoursAmount,0)) - SUM(COALESCE(etent.NightDiffOTHoursAmount,0)) + SUM(IFNULL(etent.HoursLateAmount,0)) + SUM(IFNULL(etent.UndertimeHoursAmount,0)) 'RegularHoursAmount'
,COALESCE(SUM(COALESCE(etent.OvertimeHoursWorked,0)),0) 'OvertimeHoursWorked'
,COALESCE(SUM(COALESCE(etent.OvertimeHoursAmount,0)),0) 'OvertimeHoursAmount'
,COALESCE(SUM(COALESCE(etent.UndertimeHours,0)),0) 'UndertimeHours'
,COALESCE(SUM(COALESCE(etent.UndertimeHoursAmount,0)),0) 'UndertimeHoursAmount'
,COALESCE(SUM(COALESCE(etent.NightDifferentialHours,0)),0) 'NightDifferentialHours'
,COALESCE(SUM(COALESCE(etent.NightDiffHoursAmount,0)),0) 'NightDiffHoursAmount'
,COALESCE(SUM(COALESCE(etent.NightDifferentialOTHours,0)),0) 'NightDifferentialOTHours'
,COALESCE(SUM(COALESCE(etent.NightDiffOTHoursAmount,0)),0) 'NightDiffOTHoursAmount'
,COALESCE(SUM(COALESCE(etent.HoursLate,0)),0) 'HoursLate'
,COALESCE(SUM(COALESCE(etent.HoursLateAmount,0)),0) 'HoursLateAmount'
,COALESCE(etent.LateFlag,0) 'LateFlag'
,COALESCE(etent.PayRateID,0) 'PayRateID'
,COALESCE(SUM(COALESCE(etent.VacationLeaveHours,0)),0) 'VacationLeaveHours'
,COALESCE(SUM(COALESCE(etent.SickLeaveHours,0)),0) 'SickLeaveHours'
,COALESCE(SUM(COALESCE(etent.TotalDayPay,0)),0) 'TotalDayPay'
FROM employeetimeentry etent
WHERE etent.OrganizationID=etent_OrganizationID
AND etent.EmployeeID=etent_EmployeeID
AND Date BETWEEN paypFrom AND paypTo;




END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeetimeentry_this_month
DROP PROCEDURE IF EXISTS `VIEW_employeetimeentry_this_month`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_employeetimeentry_this_month`(IN `OrganizID` INT, IN `EmpRowID` INT, IN `ParamDate` DATE)
    DETERMINISTIC
BEGIN

DECLARE custom_date TEXT;

DECLARE monthfirstdate DATE;

DECLARE monthlastdate DATE;

SET custom_date = DATE_FORMAT(ParamDate,'%Y%c');


SELECT MIN(pp.PayFromDate), MAX(pp.PayToDate)
FROM payperiod pp
INNER JOIN employee e ON e.RowID=EmpRowID AND e.PayFrequencyID=pp.TotalGrossSalary
WHERE pp.OrganizationID=OrganizID
AND CONCAT(pp.`Year`,pp.`Month`)=custom_date# ORDER BY pp.PayFromDate, pp.PayToDate LIMIT 1
INTO monthfirstdate, monthlastdate;

/*SELECT
MIN(PayFromDate)
,MAX(PayToDate)
FROM payperiod
WHERE OrganizationID=OrganizID
AND ParamDate IN (PayFromDate,PayToDate)
ORDER BY PayFromDate,PayToDate
INTO monthfirstdate
        ,monthlastdate;*/

SELECT ete.*
,DATE_FORMAT(ete.`Date`,'%e') AS DateDay
FROM employeetimeentry ete
WHERE ete.EmployeeID=EmpRowID
AND ete.OrganizationID=OrganizID
AND ete.Absent!=0
AND ete.`Date` BETWEEN monthfirstdate AND monthlastdate
ORDER BY ete.`Date`;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employeewiththisagency
DROP PROCEDURE IF EXISTS `VIEW_employeewiththisagency`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_employeewiththisagency`(IN `OrganizID` INT, IN `Agency_ID` INT)
    DETERMINISTIC
BEGIN



SELECT e.RowID
,e.EmployeeID
,e.LastName
,e.FirstName
,e.MiddleName
,d.Name 'Name'
,p.PositionName 'PositionName'
FROM employee e
LEFT JOIN position p ON p.RowID=e.PositionID
LEFT JOIN `division` d ON d.RowID=p.DivisionId
WHERE e.OrganizationID=OrganizID
AND e.AgencyID=Agency_ID;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_employee_for_payroll
DROP PROCEDURE IF EXISTS `VIEW_employee_for_payroll`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_employee_for_payroll`(IN `OrganizID` INT, IN `Page_Number` INT, IN `SearchString` VARCHAR(20))
    DETERMINISTIC
BEGIN

SELECT
e.RowID
,e.EmployeeID AS `Employee ID`
,e.FirstName AS `First Name`
,e.MiddleName AS `Middle Name`
,e.LastName AS `Last Name`
,e.TINNo AS `TIN No.`
,e.SSSNo AS `SSS No.`
,e.HDMFNo AS `HDMF No.`
,e.PhilHealthNo AS `PhilHealth No.`
,e.EmploymentStatus AS `Employment status`
,pos.PositionName AS `Position name`








,e.EmployeeType AS `Employee Type`










































FROM (
    SELECT *
    FROM employee
    WHERE LENGTH(SearchString) = 0 AND OrganizationID=OrganizID
UNION
    SELECT e.*
    FROM employee e
    INNER JOIN employeesearchstring ess ON ess.EmpPrimaKey=e.RowID AND LOCATE(SearchString,ess.searchstring) > 0
    WHERE LENGTH(SearchString) > 0 AND e.OrganizationID=OrganizID

) e
LEFT JOIN position pos ON pos.RowID=e.PositionID
ORDER BY RowID DESC
LIMIT Page_Number,20;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_esal_dattab
DROP PROCEDURE IF EXISTS `VIEW_esal_dattab`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_esal_dattab`(IN `OrganizID` INT, IN `PayPerFrom` DATE, IN `PayPerTo` DATE)
    DETERMINISTIC
BEGIN

SELECT
es.RowID
,es.EmployeeID
,es.Created
,es.CreatedBy
,es.LastUpd
,es.LastUpdBy
,es.OrganizationID
,es.FilingStatusID
,es.PaySocialSecurityID
,es.PayPhilhealthID
,es.HDMFAmount
,IF(e.StartDate BETWEEN PayPerFrom AND PayPerTo, ROUND(DATEDIFF(LAST_DAY(e.StartDate),e.StartDate) / DATEDIFF(LAST_DAY(e.StartDate),DATE_FORMAT(e.StartDate,'%Y-%m-16')) * 13) * GET_employeerateperday(es.EmployeeID, es.OrganizationID, PayPerTo), es.BasicPay) AS BasicPay
,es.Salary
,es.BasicDailyPay
,es.BasicHourlyPay
,es.NoofDependents
,es.MaritalStatus
,es.PositionID
,es.EffectiveDateFrom
,es.EffectiveDateTo
,IFNULL(pss.EmployeeContributionAmount,0.0) AS EmployeeContributionAmount
,IFNULL(pss.EmployerContributionAmount,0.0) AS EmployerContributionAmount
,IFNULL(phh.EmployeeShare,0.0) AS EmployeeShare
,IFNULL(phh.EmployerShare,0.0) AS EmployerShare
FROM employeesalary es
INNER JOIN organization og ON og.RowID=es.OrganizationID
INNER JOIN employee e ON e.RowID=es.EmployeeID
LEFT JOIN paysocialsecurity pss ON pss.RowID=es.PaySocialSecurityID
LEFT JOIN payphilhealth phh ON phh.RowID=es.PayPhilhealthID
WHERE es.OrganizationID=OrganizID
AND es.EffectiveDateTo IS NULL
GROUP BY es.EmployeeID
ORDER BY DATEDIFF(DATE_FORMAT(NOW(),'%Y-%m-%d'),es.EffectiveDateFrom);



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_payp
DROP PROCEDURE IF EXISTS `VIEW_payp`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_payp`(IN `payp_OrganizationID` INT, IN `param_Date` DATE, IN `isotherformat` CHAR(1), IN `PayFreqType` TEXT)
    DETERMINISTIC
BEGIN

IF param_Date IS NULL THEN

    SET param_Date = MAKEDATE(YEAR(CURDATE()), 1);

END IF;

IF isotherformat = '0' THEN



    IF PayFreqType = 'SEMI-MONTHLY' THEN

        SELECT payp.RowID
        ,payp.PayFromDate
        ,payp.PayToDate
        ,COALESCE(DATE_FORMAT(payp.PayFromDate,'%c/%e/%Y'),'') 'Pay period from'
        ,COALESCE(DATE_FORMAT(payp.PayToDate,'%c/%e/%Y'),'') 'Pay period to'
        ,COALESCE(payp.TotalGrossSalary,0) 'TotalGrossSalary'
        # ,COALESCE(payp.TotalNetSalary,0) 'TotalNetSalary'
        ,payp.`Month` `TotalNetSalary`
        ,COALESCE(payp.TotalEmpSSS,0) 'TotalEmpSSS'
        ,COALESCE(payp.TotalEmpWithholdingTax,0) 'TotalEmpWithholdingTax'
        ,COALESCE(payp.TotalCompSSS,0) 'TotalCompSSS'
        ,COALESCE(payp.TotalEmpPhilhealth,0) 'TotalEmpPhilhealth'
        ,COALESCE(payp.TotalCompPhilhealth,0) 'TotalCompPhilhealth'
        ,COALESCE(payp.TotalEmpHDMF,0) 'TotalEmpHDMF'
        ,COALESCE(payp.TotalCompHDMF,0) 'TotalCompHDMF'
        ,IF(DATE_FORMAT(NOW(),'%Y-%m-%d') BETWEEN payp.PayFromDate AND payp.PayToDate,'0',IF(DATE_FORMAT(NOW(),'%Y-%m-%d') > payp.PayFromDate,'-1','1')) 'now_origin'
        ,payp.`Half` AS eom
        ,SSSContribSched
		  ,PhHContribSched
		  ,HDMFContribSched
		  ,payp.MinWageValue
        FROM payperiod payp
        WHERE payp.OrganizationID=payp_OrganizationID
        AND TotalGrossSalary=1
        AND `Year` = YEAR(param_Date)
        ORDER BY payp.PayFromDate;




    ELSEIF PayFreqType = 'WEEKLY' THEN

        SELECT payp.RowID
        ,payp.PayFromDate
        ,payp.PayToDate
        ,COALESCE(DATE_FORMAT(payp.PayFromDate,'%c/%e/%Y'),'') 'Pay period from'
        ,COALESCE(DATE_FORMAT(payp.PayToDate,'%c/%e/%Y'),'') 'Pay period to'
        ,COALESCE(payp.TotalGrossSalary,0) 'TotalGrossSalary'
        # ,COALESCE(payp.TotalNetSalary,0) 'TotalNetSalary'
        ,payp.`Month` `TotalNetSalary`
        ,COALESCE(payp.TotalEmpSSS,0) 'TotalEmpSSS'
        ,COALESCE(payp.TotalEmpWithholdingTax,0) 'TotalEmpWithholdingTax'
        ,COALESCE(payp.TotalCompSSS,0) 'TotalCompSSS'
        ,COALESCE(payp.TotalEmpPhilhealth,0) 'TotalEmpPhilhealth'
        ,COALESCE(payp.TotalCompPhilhealth,0) 'TotalCompPhilhealth'
        ,COALESCE(payp.TotalEmpHDMF,0) 'TotalEmpHDMF'
        ,COALESCE(payp.TotalCompHDMF,0) 'TotalCompHDMF'
        ,IF(DATE_FORMAT(NOW(),'%Y-%m-%d') BETWEEN payp.PayFromDate AND payp.PayToDate,'0',IF(DATE_FORMAT(NOW(),'%Y-%m-%d') > payp.PayFromDate,'-1','1')) 'now_origin'
        ,IF(payp.Half = '0', '1', IF(payp.Half = '2', payp.Half, '0')) AS eom
        ,SSSContribSched
		  ,PhHContribSched
		  ,HDMFContribSched
        ,payp.MinWageValue
        FROM payperiod payp
        WHERE payp.OrganizationID=payp_OrganizationID
        AND TotalGrossSalary=4
        AND `Year` = YEAR(param_Date)
        ORDER BY payp.PayFromDate;



    END IF;

ELSE

    IF PayFreqType = 'SEMI-MONTHLY' THEN

        SELECT
        FALSE 'CheckBox'
        ,payp.PayFromDate
        ,payp.PayToDate
        ,COALESCE(DATE_FORMAT(payp.PayFromDate,'%c/%e/%Y'),'') 'Pay period from'
        ,COALESCE(DATE_FORMAT(payp.PayToDate,'%c/%e/%Y'),'') 'Pay period to'
        ,payp.RowID
        ,COALESCE(payp.TotalGrossSalary,0) 'TotalGrossSalary'
        FROM payperiod payp
        WHERE payp.OrganizationID=payp_OrganizationID
        AND TotalGrossSalary=1
        AND `Year` = YEAR(param_Date)
        ORDER BY payp.PayFromDate;



    ELSEIF PayFreqType = 'WEEKLY' THEN

        SELECT
        FALSE 'CheckBox'
        ,payp.PayFromDate
        ,payp.PayToDate
        ,COALESCE(DATE_FORMAT(payp.PayFromDate,'%c/%e/%Y'),'') 'Pay period from'
        ,COALESCE(DATE_FORMAT(payp.PayToDate,'%c/%e/%Y'),'') 'Pay period to'
        ,payp.RowID
        ,COALESCE(payp.TotalGrossSalary,0) 'TotalGrossSalary'
        FROM payperiod payp
        WHERE payp.OrganizationID=payp_OrganizationID
        AND TotalGrossSalary=4
        AND `Year` = YEAR(param_Date)
        ORDER BY payp.PayFromDate;



    END IF;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_payperiod
DROP PROCEDURE IF EXISTS `VIEW_payperiod`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_payperiod`(IN `payp_OrganizationID` INT, IN `param_Date` DATE, IN `PayFreqType` TEXT)
    DETERMINISTIC
BEGIN

IF PayFreqType = 'SEMI-MONTHLY' THEN

    SELECT RowID
    ,COALESCE(DATE_FORMAT(PayFromDate,'%m/%d/%Y'),'') 'Pay period from'
    ,COALESCE(DATE_FORMAT(PayToDate,'%m/%d/%Y'),'') 'Pay period to'
    ,COALESCE(TotalGrossSalary,0) 'TotalGrossSalary'
    ,COALESCE(TotalNetSalary,0) 'TotalNetSalary'
    ,COALESCE(TotalEmpSSS,0) 'TotalEmpSSS'
    ,COALESCE(TotalEmpWithholdingTax,0) 'TotalEmpWithholdingTax'
    ,COALESCE(TotalCompSSS,0) 'TotalCompSSS'
    ,COALESCE(TotalEmpPhilhealth,0) 'TotalEmpPhilhealth'
    ,COALESCE(TotalCompPhilhealth,0) 'TotalCompPhilhealth'
    ,COALESCE(TotalEmpHDMF,0) 'TotalEmpHDMF'
    ,COALESCE(TotalCompHDMF,0) 'TotalCompHDMF'
    ,IF(DATE_FORMAT(NOW(),'%Y-%m-%d') BETWEEN PayFromDate AND PayToDate,'0',IF(DATE_FORMAT(NOW(),'%Y-%m-%d') > PayFromDate,'-1','1')) 'now_origin' FROM payperiod
    WHERE OrganizationID=payp_OrganizationID
    AND TotalGrossSalary=1
    AND `Month` = MONTH(param_Date)
    AND `Year` = YEAR(param_Date)
    ORDER BY PayFromDate,PayToDate;



ELSEIF PayFreqType = 'WEEKLY' THEN

    SELECT RowID
    ,COALESCE(DATE_FORMAT(PayFromDate,'%m/%d/%Y'),'') 'Pay period from'
    ,COALESCE(DATE_FORMAT(PayToDate,'%m/%d/%Y'),'') 'Pay period to'
    ,COALESCE(TotalGrossSalary,0) 'TotalGrossSalary'
    ,COALESCE(TotalNetSalary,0) 'TotalNetSalary'
    ,COALESCE(TotalEmpSSS,0) 'TotalEmpSSS'
    ,COALESCE(TotalEmpWithholdingTax,0) 'TotalEmpWithholdingTax'
    ,COALESCE(TotalCompSSS,0) 'TotalCompSSS'
    ,COALESCE(TotalEmpPhilhealth,0) 'TotalEmpPhilhealth'
    ,COALESCE(TotalCompPhilhealth,0) 'TotalCompPhilhealth'
    ,COALESCE(TotalEmpHDMF,0) 'TotalEmpHDMF'
    ,COALESCE(TotalCompHDMF,0) 'TotalCompHDMF'
    ,IF(DATE_FORMAT(NOW(),'%Y-%m-%d') BETWEEN PayFromDate AND PayToDate,'0',IF(DATE_FORMAT(NOW(),'%Y-%m-%d') > PayFromDate,'-1','1')) 'now_origin' FROM payperiod
    WHERE OrganizationID=payp_OrganizationID
    AND TotalGrossSalary=4
    AND `Month` = MONTH(param_Date)
    AND `Year` = YEAR(param_Date)
    ORDER BY PayFromDate;

END IF;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_payperiodofyear
DROP PROCEDURE IF EXISTS `VIEW_payperiodofyear`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_payperiodofyear`(IN `payp_OrganizationID` INT, IN `param_Date` DATE, IN `FormatNumber` INT)
    DETERMINISTIC
BEGIN
SET param_Date = IFNULL(STR_TO_DATE(param_Date,@@date_format),CURDATE());
SELECT payp.RowID AS ppRowID
,DATE_FORMAT(payp.PayFromDate,'%c/%e/%Y') AS `Pay from date`
,DATE_FORMAT(payp.PayToDate,'%c/%e/%Y') AS `Pay to date`
,payp.PayFromDate
,payp.PayToDate
,COALESCE(payp.TotalGrossSalary,0) 'TotalGrossSalary'
,COALESCE(payp.TotalNetSalary,0) 'TotalNetSalary'
,COALESCE(payp.TotalEmpSSS,0) 'TotalEmpSSS'
,COALESCE(payp.TotalEmpWithholdingTax,0) 'TotalEmpWithholdingTax'
,COALESCE(payp.TotalCompSSS,0) 'TotalCompSSS'
,COALESCE(payp.TotalEmpPhilhealth,0) 'TotalEmpPhilhealth'
,COALESCE(payp.TotalCompPhilhealth,0) 'TotalCompPhilhealth'
,COALESCE(payp.TotalEmpHDMF,0) 'TotalEmpHDMF'
# ,IF(payp.TotalGrossSalary = 4, 'WEEKLY', 'SEMI-MONTHLY') 'TotalCompHDMF'
, pf.PayFrequencyType `TotalCompHDMF`
,IF(DATE_FORMAT(NOW(),'%Y-%m-%d') BETWEEN payp.PayFromDate AND payp.PayToDate,'0',IF(DATE_FORMAT(NOW(),'%Y-%m-%d') > payp.PayFromDate,'-1','1')) 'now_origin'
,payp.Half AS eom

FROM payperiod payp
INNER JOIN (    SELECT ps.RowID, ps.PayPeriodID, FormatNumber AS FormatNum, e.PayFrequencyID FROM paystub ps
                INNER JOIN employee e ON e.RowID=ps.EmployeeID
				    WHERE FormatNumber = 0 AND ps.OrganizationID=payp_OrganizationID
            UNION
                SELECT ps.RowID, ps.PayPeriodID, FormatNumber AS FormatNum, e.PayFrequencyID FROM paystubbonus ps
                INNER JOIN employee e ON e.RowID=ps.EmployeeID
                WHERE FormatNumber = 1 AND ps.OrganizationID=payp_OrganizationID
                ) payst ON payst.PayPeriodID=payp.RowID
INNER JOIN payfrequency pf ON pf.RowID=payp.TotalGrossSalary
WHERE payp.OrganizationID=payp_OrganizationID
AND payp.`Year`=YEAR(param_Date)
AND payp.TotalGrossSalary = payst.PayFrequencyID
GROUP BY payst.PayPeriodID
ORDER BY payp.PayFromDate DESC,payp.PayToDate DESC;









END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_paystub
DROP PROCEDURE IF EXISTS `VIEW_paystub`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_paystub`(IN `paystb_OrganizationID` INT, IN `paystb_EmployeeID` INT, IN `paystb_PayPeriodID` INT)
    DETERMINISTIC
BEGIN

SELECT paystb.RowID 'paystbID'
,DATE_FORMAT(paystb.Created,'%m-%d-%Y') 'Created'
,CONCAT(u.FirstName,' ',u.LastName) 'CreatedBy'
,paystb.PayPeriodID 'PayPeriodID'
,paystb.EmployeeID 'EmployeeID'
,paystb.TimeEntryID 'TimeEntryID'
,paystb.PayFromDate 'PayFromDate'
,paystb.PayToDate 'PayToDate'
,paystb.TotalGrossSalary 'TotalGrossSalary'
,paystb.TotalNetSalary 'TotalNetSalary'
,paystb.TotalTaxableSalary 'TotalTaxableSalary'
,paystb.TotalEmpSSS 'TotalEmpSSS'
,paystb.TotalEmpWithholdingTax 'TotalEmpWithholdingTax'
,paystb.TotalCompSSS 'TotalCompSSS'
,paystb.TotalEmpPhilhealth 'TotalEmpPhilhealth'
,paystb.TotalCompPhilhealth 'TotalCompPhilhealth'
,paystb.TotalEmpHDMF 'TotalEmpHDMF'
,paystb.TotalCompHDMF 'TotalCompHDMF'
,paystb.TotalVacationDaysLeft 'TotalVacationDaysLeft'
,paystb.TotalLoans 'TotalLoans'
,paystb.TotalBonus 'TotalBonus'
,paystb.TotalAllowance 'TotalAllowance'
,paystb.TotalAdjustments 'TotalAdjustments'
FROM paystub paystb
LEFT JOIN user u ON u.RowID=paystb.CreatedBy
WHERE paystb.OrganizationID=paystb_OrganizationID
AND paystb.EmployeeID=paystb_EmployeeID
AND paystb.PayPeriodID=paystb_PayPeriodID
GROUP BY paystb.PayPeriodID;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_paystubadjustment
DROP PROCEDURE IF EXISTS `VIEW_paystubadjustment`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_paystubadjustment`(IN `pa_EmployeeID` VARCHAR(50), IN `pa_PayPeriodID` INT, IN `pa_OrganizationID` INT, IN `pa_IsActual` TINYINT)
    DETERMINISTIC
BEGIN

SELECT psj.*
FROM (SELECT * FROM paystubadjustment WHERE pa_IsActual=0 AND OrganizationID=pa_OrganizationID
        UNION
        SELECT * FROM paystubadjustmentactual WHERE pa_IsActual=1 AND OrganizationID=pa_OrganizationID
        ) psj
INNER JOIN product p ON p.RowID=psj.ProductID
WHERE psj.PayStubID = FN_GetPayStubIDByEmployeeIDAndPayPeriodID(pa_EmployeeID, pa_PayPeriodID, pa_OrganizationID);

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_paystubbonus
DROP PROCEDURE IF EXISTS `VIEW_paystubbonus`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_paystubbonus`(IN `OrganizID` INT, IN `EmpRowID` INT, IN `PayPeriodRowID` INT)
    DETERMINISTIC
BEGIN

SELECT psb.*
FROM paystubbonus psb
WHERE psb.EmployeeID=EmpRowID
AND psb.OrganizationID=OrganizID
AND psb.PayPeriodID=PayPeriodRowID;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_paystubitem
DROP PROCEDURE IF EXISTS `VIEW_paystubitem`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_paystubitem`(IN `paystitm_PayStubID` INT)
    DETERMINISTIC
BEGIN

SELECT paystitm.RowID 'paystitmID'
,paystitm.PayStubID 'PayStubID'
,paystitm.ProductID 'ProductID'
,SUBSTRING_INDEX(p.PartNo,'.',-1) 'Item'
,paystitm.PayAmount 'PayAmount'
FROM paystubitem paystitm
LEFT JOIN product p ON p.RowID=paystitm.ProductID
WHERE PayStubID=paystitm_PayStubID
AND Undeclared = '0';

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_paystubitemundeclared
DROP PROCEDURE IF EXISTS `VIEW_paystubitemundeclared`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_paystubitemundeclared`(IN `paystitm_PayStubID` INT)
    DETERMINISTIC
BEGIN


    SELECT paystitm.RowID 'paystitmID'
    ,paystitm.PayStubID 'PayStubID'
    ,paystitm.ProductID 'ProductID'
    ,SUBSTRING_INDEX(p.PartNo,'.',-1) 'Item'
    ,paystitm.PayAmount 'PayAmount'
    FROM paystubitem paystitm
    INNER JOIN product p ON p.RowID=paystitm.ProductID AND p.`Category`!='Leave Type'
    WHERE PayStubID=paystitm_PayStubID
    AND Undeclared = '1'
UNION ALL
    SELECT paystitm.RowID 'paystitmID'
    ,paystitm.PayStubID 'PayStubID'
    ,paystitm.ProductID 'ProductID'
    ,p.PartNo 'Item'
    ,paystitm.PayAmount 'PayAmount'
    FROM paystubitem paystitm
    INNER JOIN paystub ps ON ps.RowID=paystitm.PayStubID AND ps.RowID=paystitm_PayStubID
    INNER JOIN product p ON p.RowID=paystitm.ProductID AND p.`Category`='Leave Type' AND p.OrganizationID=ps.OrganizationID
    WHERE paystitm.Undeclared='0';



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_paystubitem_actual
DROP PROCEDURE IF EXISTS `VIEW_paystubitem_actual`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_paystubitem_actual`(
	IN `OrganizID` INT,
	IN `EmpRowID` INT,
	IN `pay_date_from` DATE,
	IN `pay_date_to` DATE
)
    DETERMINISTIC
BEGIN

SELECT
    psa.RowID,
    psa.PayPeriodID,
    pstb.RegularHours,
    psa.RegularPay,
    ete.OvertimeHoursWorked `OvertimeHours`,
    psa.OvertimePay `OvertimePay`,
    psa.OvertimePay `OvertimeHoursAmount`,
    pstb.NightDiffHours,
    psa.NightDiffPay,
    pstb.NightDiffOvertimeHours,
    psa.NightDiffOvertimePay,
    pstb.RestDayHours,
    psa.RestDayPay,
    pstb.LateHours,
    psa.LateDeduction,
    pstb.UndertimeHours,
    psa.UndertimeDeduction,
    psa.TotalGrossSalary,
    psa.TotalNetSalary,
    psa.TotalTaxableSalary,
    psa.TotalEmpSSS,
    psa.TotalEmpWithholdingTax,
    psa.TotalCompSSS,
    psa.TotalEmpPhilhealth,
    psa.TotalCompPhilhealth,
    psa.TotalEmpHDMF,
    psa.TotalCompHDMF,
    psa.TotalVacationDaysLeft,
    psa.RestDayPay,
    psa.TotalLoans,
    psa.TotalBonus,
    psa.TotalAllowance,
    psa.TotalTaxableAllowance,
    psa.TotalAdjustments,
    psa.ThirteenthMonthInclusion,
    psa.FirstTimeSalary,
    psa.PayPeriodID,
    psa.PayFromDate,
    psa.PayToDate,
    psa.TotalGrossSalary,
    psa.TotalNetSalary,
    psa.TotalTaxableSalary,
    psa.TotalEmpSSS,
    psa.TotalEmpWithholdingTax,
    psa.TotalCompSSS,
    psa.TotalEmpPhilhealth,
    psa.TotalCompPhilhealth,
    psa.TotalEmpHDMF,
    psa.TotalCompHDMF,
    psa.TotalVacationDaysLeft,
    psa.TotalLoans,
    psa.TotalBonus,
    psa.TotalAllowance,
    psa.TotalAdjustments,
    psa.ThirteenthMonthInclusion,
    psa.FirstTimeSalary,
    psa.HolidayPay,
    es.BasicPay * (es.TrueSalary / es.Salary) AS `BasicPay`,
    es.TrueSalary,
    IF(e.EmployeeType='Daily',PAYFREQUENCY_DIVISOR(e.EmployeeType),PAYFREQUENCY_DIVISOR(pf.PayFrequencyType)) AS PAYFREQUENCYDIVISOR,
    ete.*,
    e.EmployeeType,
    (e.StartDate BETWEEN pay_date_from AND pay_date_to) AS FirstTimeSalary,
    SUM(IFNULL(ete.Leavepayment,0)) `PaidLeaveAmount`,
    thirteenthmonthpay.Amount AS 'ThirteenthMonthPay',
    psa.SpecialHolidayOTPay,
    psa.RegularHolidayOTPay,
    psa.RegularHolidayPay
FROM paystubactual psa
INNER JOIN paystub pstb
ON pstb.OrganizationID = psa.OrganizationID AND
    pstb.EmployeeID = psa.EmployeeID AND
    pstb.PayPeriodID = psa.PayPeriodID
INNER JOIN employee e
ON e.RowID = psa.EmployeeID AND
    e.OrganizationID = psa.OrganizationID
INNER JOIN payfrequency pf
ON pf.RowID = e.PayFrequencyID
INNER JOIN employeesalary es
ON es.EmployeeID = psa.EmployeeID AND
    es.OrganizationID = psa.OrganizationID AND
    (es.EffectiveDateFrom >= psa.PayFromDate OR IFNULL(es.EffectiveDateTo, CURDATE()) >= psa.PayFromDate) AND
    (es.EffectiveDateFrom <= psa.PayToDate OR IFNULL(es.EffectiveDateTo, CURDATE()) <= psa.PayToDate)
LEFT JOIN thirteenthmonthpay
ON thirteenthmonthpay.PaystubID = psa.RowID
LEFT JOIN (
    SELECT
        etea.RowID `eteRowID`,
        SUM(etea.RegularHoursWorked) `RegularHoursWorked`,
        SUM(etea.RegularHoursAmount) `RegularHoursAmount`,
        SUM(etea.TotalHoursWorked) `TotalHoursWorked`,
        SUM(etea.OvertimeHoursWorked) `OvertimeHoursWorked`,
        SUM(etea.OvertimeHoursAmount) `OvertimeHoursAmount`,
        SUM(etea.UndertimeHours) `UndertimeHours`,
        SUM(etea.UndertimeHoursAmount) `UndertimeHoursAmount`,
        SUM(etea.NightDifferentialHours) `NightDifferentialHours`,
        SUM(etea.NightDiffHoursAmount) `NightDiffHoursAmount`,
        SUM(etea.NightDifferentialOTHours) `NightDifferentialOTHours`,
        SUM(etea.NightDiffOTHoursAmount) `NightDiffOTHoursAmount`,
        SUM(etea.HoursLate) `HoursLate`,
        SUM(etea.HoursLateAmount) `HoursLateAmount`,
        SUM(etea.VacationLeaveHours) `VacationLeaveHours`,
        SUM(etea.SickLeaveHours) `SickLeaveHours`,
        SUM(etea.MaternityLeaveHours) `MaternityLeaveHours`,
        SUM(etea.OtherLeaveHours) `OtherLeaveHours`,
        SUM(etea.TotalDayPay) `TotalDayPay`,
        SUM(etea.Absent) `Absent`,
        SUM(etea.Leavepayment) `Leavepayment`,
        SUM(agencyfee.DailyFee) `TotalAgencyFee`,
        SUM(etea.SpecialHolidayPay) `SpecialHolidayPay`,
        SUM(etea.SpecialHolidayOTPay) `SpecialHolidayOTPay`,
        SUM(etea.RestDayOTPay) `RestDayOTPay`,
        SUM(et.RegularHolidayOTHours) `RegularHolidayOTHours`,
        SUM(et.SpecialHolidayOTHours) `SpecialHolidayOTHours`,
        SUM(et.RestDayOTHours) `RestDayOTHours`,
        SUM(IFNULL(et.RegularHolidayHours, 0)) `RegularHolidayHours`,
        SUM(IFNULL(et.SpecialHolidayHours, 0)) `SpecialHolidayHours`,
        SUM(IFNULL(et.RestDayHours, 0)) `RestDayHours`
    FROM employeetimeentryactual etea
    INNER JOIN employeetimeentry et
    ON et.EmployeeID = etea.EmployeeID AND
        et.OrganizationID = etea.OrganizationID AND
        et.`Date` = etea.`Date`
    LEFT JOIN agencyfee
    ON agencyfee.EmployeeID = etea.EmployeeID AND
        agencyfee.TimeEntryDate = etea.`Date`
    WHERE etea.EmployeeID = EmpRowID AND
        etea.OrganizationID=OrganizID AND
        etea.`Date` BETWEEN pay_date_from AND pay_date_to
) ete
ON ete.eteRowID IS NOT NULL
WHERE psa.EmployeeID = EmpRowID AND
    psa.OrganizationID = OrganizID AND
    psa.PayFromDate = pay_date_from AND
    psa.PayToDate = pay_date_to
ORDER BY es.EffectiveDateFrom DESC
LIMIT 1;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_paystubitem_declared
DROP PROCEDURE IF EXISTS `VIEW_paystubitem_declared`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_paystubitem_declared`(
	IN `OrganizID` INT,
	IN `EmpRowID` INT,
	IN `pay_date_from` DATE,
	IN `pay_date_to` DATE




)
    DETERMINISTIC
BEGIN

DECLARE themonth INT(11);
DECLARE theyear INT(11);

DECLARE startdate_ofpreviousmonth DATE;
DECLARE enddate_ofpreviousmonth DATE;

SELECT
    pp.`Month`,
    pp.`Year`
FROM payperiod pp
INNER JOIN employee e
ON e.RowID = EmpRowID AND
    e.OrganizationID = OrganizID
WHERE pp.OrganizationID = OrganizID AND
    pp.TotalGrossSalary = e.PayFrequencyID AND
    pp.PayFromDate = pay_date_from AND
    pp.PayToDate = pay_date_to
INTO
    themonth,
    theyear;

SELECT
    pp.PayFromDate,
    pp.PayToDate
FROM payperiod pp
INNER JOIN employee e
ON e.RowID = EmpRowID AND
    e.OrganizationID = OrganizID
WHERE pp.OrganizationID = OrganizID AND
    pp.TotalGrossSalary = e.PayFrequencyID AND
    pp.`Month` = MONTH(SUBDATE(DATE(CONCAT('2016-', themonth, '-01')), INTERVAL 1 DAY)) AND
    pp.`Year` = theyear
ORDER BY pp.PayFromDate DESC,
    pp.PayToDate DESC
LIMIT 1
INTO
    startdate_ofpreviousmonth,
    enddate_ofpreviousmonth;

SELECT
    psa.RowID,
    psa.PayPeriodID,
    psa.RegularHours,
    psa.RegularPay,
	 ete.OvertimeHoursWorked `OvertimeHours`,
    psa.OvertimePay `OvertimePay`,
    psa.OvertimePay `OvertimeHoursAmount`,
    psa.NightDiffHours,
    psa.NightDiffPay,
    psa.NightDiffOvertimeHours,
    psa.NightDiffOvertimePay,
    psa.RestDayHours,
    psa.RestDayPay,
    psa.LateHours,
    psa.LateDeduction,
    psa.UndertimeHours,
    psa.UndertimeDeduction,
    psa.TotalGrossSalary,
    psa.TotalNetSalary,
    psa.TotalTaxableSalary,
    psa.TotalEmpSSS,
    psa.TotalEmpWithholdingTax,
    psa.TotalCompSSS,
    psa.TotalEmpPhilhealth,
    psa.TotalCompPhilhealth,
    psa.TotalEmpHDMF,
    psa.TotalCompHDMF,
    psa.TotalVacationDaysLeft,
    psa.TotalUndeclaredSalary,
    psa.TotalLoans,
    psa.TotalBonus,
    psa.TotalAllowance,
    psa.TotalTaxableAllowance,
    psa.TotalAdjustments,
    psa.ThirteenthMonthInclusion,
    psa.FirstTimeSalary,
    psa.PayPeriodID,
    psa.PayFromDate,
    psa.PayToDate,
    psa.TotalGrossSalary,
    psa.TotalNetSalary,
    IF(
        e.AgencyID IS NULL,
        IF(BINARY `PAYMENT_SCHED_TO_CHAR`(d.WTaxDeductSched) = BINARY pp.`Half`, psa.TotalTaxableSalary, 0),
        IF(BINARY `PAYMENT_SCHED_TO_CHAR`(d.WTaxDeductSchedAgency) = BINARY pp.`Half`, psa.TotalTaxableSalary, 0)
    ) AS TotalTaxableSalary,
    psa.TotalEmpSSS,
    psa.TotalEmpWithholdingTax,
    psa.TotalCompSSS,
    psa.TotalEmpPhilhealth,
    psa.TotalCompPhilhealth,
    psa.TotalEmpHDMF,
    psa.TotalCompHDMF,
    psa.TotalVacationDaysLeft,
    psa.TotalUndeclaredSalary,
    psa.TotalLoans,
    psa.TotalBonus,
    psa.TotalAllowance,
    psa.TotalAdjustments,
    psa.ThirteenthMonthInclusion,
    psa.FirstTimeSalary,
    es.BasicPay,
    es.Salary AS TrueSalary,
    IF(
        e.EmployeeType = 'Daily',
        PAYFREQUENCY_DIVISOR(e.EmployeeType),
        PAYFREQUENCY_DIVISOR(pf.PayFrequencyType)
    ) AS PAYFREQUENCYDIVISOR,
    ete.*,
    e.EmployeeType,
    (e.StartDate BETWEEN pay_date_from AND pay_date_to) AS FirstTimeSalary,
    SUM(IFNULL(ete.Leavepayment,0)) `PaidLeaveAmount`,
    thirteenthmonthpay.Amount AS 'ThirteenthMonthPay',
    psa.HolidayPay,
    psa.SpecialHolidayOTPay,
    psa.RegularHolidayOTPay,
    psa.RegularHolidayPay
FROM paystub psa
INNER JOIN employee e
ON e.RowID = psa.EmployeeID AND
    e.OrganizationID = psa.OrganizationID
INNER JOIN payperiod pp
ON pp.RowID = psa.PayPeriodID
LEFT JOIN position pos
ON pos.RowID = e.PositionID
LEFT JOIN `division` d
ON d.RowID = pos.DivisionId
INNER JOIN payfrequency pf
ON pf.RowID = e.PayFrequencyID
INNER JOIN employeesalary es
ON es.EmployeeID = psa.EmployeeID AND
    es.OrganizationID = psa.OrganizationID AND
    (es.EffectiveDateFrom >= psa.PayFromDate OR IFNULL(es.EffectiveDateTo,CURDATE()) >= psa.PayFromDate) AND
    (es.EffectiveDateFrom <= psa.PayToDate OR IFNULL(es.EffectiveDateTo,CURDATE()) <= psa.PayToDate)
LEFT JOIN thirteenthmonthpay
ON thirteenthmonthpay.PaystubID = psa.RowID
LEFT JOIN (
    SELECT
        etea.RowID AS eteRowID,
        SUM(etea.RegularHoursWorked) AS RegularHoursWorked,
        SUM(etea.RegularHoursAmount) AS RegularHoursAmount,
        SUM(etea.TotalHoursWorked) AS TotalHoursWorked,
        SUM(etea.OvertimeHoursWorked) AS OvertimeHoursWorked,
        SUM(etea.OvertimeHoursAmount) AS OvertimeHoursAmount,
        SUM(etea.UndertimeHours) AS UndertimeHours,
        SUM(etea.UndertimeHoursAmount) AS UndertimeHoursAmount,
        SUM(etea.NightDifferentialHours) AS NightDifferentialHours,
        SUM(etea.NightDiffHoursAmount) AS NightDiffHoursAmount,
        SUM(etea.NightDifferentialOTHours) AS NightDifferentialOTHours,
        SUM(etea.NightDiffOTHoursAmount) AS NightDiffOTHoursAmount,
        SUM(etea.HoursLate) AS HoursLate,
        SUM(etea.HoursLateAmount) AS HoursLateAmount,
        SUM(etea.VacationLeaveHours) AS VacationLeaveHours,
        SUM(etea.SickLeaveHours) AS SickLeaveHours,
        SUM(etea.MaternityLeaveHours) AS MaternityLeaveHours,
        SUM(etea.OtherLeaveHours) AS OtherLeaveHours,
        SUM(etea.TotalDayPay) AS TotalDayPay,
        SUM(etea.Absent) AS Absent,
        SUM(etea.Leavepayment) AS Leavepayment,
        SUM(agencyfee.DailyFee) `TotalAgencyFee`,
        SUM(etea.SpecialHolidayPay) `SpecialHolidayPay`,
        SUM(etea.SpecialHolidayOTPay) `SpecialHolidayOTPay`,
        SUM(etea.RestDayOTPay) `RestDayOTPay`,
        SUM(etea.RegularHolidayOTHours) `RegularHolidayOTHours`,
        SUM(etea.SpecialHolidayOTHours) `SpecialHolidayOTHours`,
        SUM(etea.RestDayOTHours) `RestDayOTHours`,
        SUM(IFNULL(etea.RegularHolidayHours, 0)) `RegularHolidayHours`,
        SUM(IFNULL(etea.SpecialHolidayHours,0)) `SpecialHolidayHours`,
        SUM(IFNULL(etea.RestDayHours,0)) `RestDayHours`
    FROM employeetimeentry etea
    LEFT JOIN agencyfee
    ON agencyfee.EmployeeID = etea.EmployeeID AND
        agencyfee.TimeEntryDate = etea.Date
    WHERE etea.EmployeeID = EmpRowID AND
        etea.OrganizationID = OrganizID AND
        etea.`Date` BETWEEN pay_date_from AND pay_date_to
) ete
ON ete.eteRowID > 0
WHERE psa.EmployeeID = EmpRowID AND
    psa.OrganizationID = OrganizID AND
    psa.PayFromDate = pay_date_from AND
    psa.PayToDate = pay_date_to
ORDER BY es.EffectiveDateFrom DESC
LIMIT 1;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_paywithholdingtax
DROP PROCEDURE IF EXISTS `VIEW_paywithholdingtax`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_paywithholdingtax`(IN `Taxable_Income` DECIMAL(10,6), IN `e_EmployeeID` INT, IN `e_OrganizationID` INT)
    DETERMINISTIC
BEGIN

DECLARE fstat_MaritalStatus VARCHAR(50);

DECLARE fstat_Dependent INT(11) DEFAULT 1;

DECLARE pfq_RowID INT(11) DEFAULT 1;

DECLARE empBasicPay DECIMAL(11,6) DEFAULT 1;

DECLARE wtax_taxabinc DECIMAL(11,6) DEFAULT 1;

DECLARE p_phhealth DECIMAL(11,6) DEFAULT 1;

DECLARE p_sss DECIMAL(11,6) DEFAULT 1;

DECLARE p_hdmf DECIMAL(11,6) DEFAULT 50;

SELECT MaritalStatus FROM employee WHERE RowID=e_EmployeeID AND OrganizationID=e_OrganizationID INTO fstat_MaritalStatus;

SELECT NoOfDependents FROM employee WHERE RowID=e_EmployeeID AND OrganizationID=e_OrganizationID INTO fstat_Dependent;

SELECT COALESCE(PayFrequencyID,1) FROM employee WHERE RowID=e_EmployeeID AND OrganizationID=e_OrganizationID INTO pfq_RowID;

SELECT BasicPay FROM employeesalary WHERE EmployeeID=e_EmployeeID AND OrganizationID=e_OrganizationID AND DATE(DATE_FORMAT(NOW(),'%Y-%m-%d')) BETWEEN DATE(COALESCE(EffectiveDateFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveDateTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) INTO empBasicPay;

SELECT IF(pfq_RowID = 1,EmployeeShare / 2,EmployeeShare) FROM payphilhealth WHERE empBasicPay BETWEEN SalaryRangeFrom AND SalaryRangeTo INTO p_phhealth;

SELECT IF(pfq_RowID = 1,EmployeeContributionAmount / 2,EmployeeContributionAmount) FROM paysocialsecurity WHERE empBasicPay BETWEEN RangeFromAmount AND RangeToAmount INTO p_sss;

SET p_hdmf = IF(pfq_RowID = 1,IF(empBasicPay * 0.02 > 50,p_hdmf,empBasicPay * 0.02),IF(empBasicPay * 0.02 > 50,100,empBasicPay * 0.02));

SET wtax_taxabinc = (empBasicPay) - (p_phhealth + p_sss + p_hdmf);

SELECT pwtax.RowID 'pwtax_RowID'
,pwtax.Created 'pwtax_Created'
,COALESCE(pwtax.LastUpd,'') 'pwtax_LastUpd'
,pwtax.CreatedBy 'pwtax_CreatedBy'
,COALESCE(pwtax.LastUpdBy,'') 'pwtax_LastUpdBy'
,pwtax.PayFrequencyID 'pwtax_PayFrequencyID'
,pwtax.FilingStatusID 'pwtax_FilingStatusID'
,fstat.FilingStatus  'fstat_FilingStatus'
,fstat.MaritalStatus 'fstat_MaritalStatus'
,fstat.Dependent 'fstat_Dependent'
,COALESCE(pwtax.EffectiveDateFrom,NOW()) 'pwtax_EffectiveDateFrom'
,COALESCE(pwtax.EffectiveDateTo,NOW()) 'pwtax_EffectiveDateTo'
,pwtax.ExemptionAmount 'pwtax_ExemptionAmount'
,pwtax.ExemptionInExcessAmount 'pwtax_ExemptionInExcessAmount'
,pwtax.TaxableIncomeFromAmount 'pwtax_TaxableIncomeFromAmount'
,pwtax.TaxableIncomeToAmount 'pwtax_TaxableIncomeToAmount'
,Taxable_Income - (pwtax.ExemptionAmount + ((Taxable_Income - pwtax.TaxableIncomeFromAmount) * pwtax.ExemptionInExcessAmount)) 'computed_wtax'
,wtax_taxabinc - (pwtax.ExemptionAmount + ((wtax_taxabinc - pwtax.TaxableIncomeFromAmount) * pwtax.ExemptionInExcessAmount)) 'partial_computed_wtax'
 FROM paywithholdingtax pwtax
 LEFT JOIN filingstatus fstat ON fstat.RowID=pwtax.FilingStatusID
 WHERE Taxable_Income BETWEEN pwtax.TaxableIncomeFromAmount AND pwtax.TaxableIncomeToAmount
AND fstat.MaritalStatus=fstat_MaritalStatus
AND fstat.Dependent=fstat_Dependent
AND pwtax.PayFrequencyID=pfq_RowID
AND NOW() BETWEEN COALESCE(pwtax.EffectiveDateFrom,NOW()) AND COALESCE(pwtax.EffectiveDateTo,NOW());




END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_position_organization_user
DROP PROCEDURE IF EXISTS `VIEW_position_organization_user`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_position_organization_user`(IN `pos_OrganizationID` INT, IN `pagination` INT, IN `current_userID` INT)
    DETERMINISTIC
BEGIN

DECLARE userPositionID INT(11);

DECLARE userPositionName VARCHAR(50);

DECLARE user_ogRowID INT(11);

SELECT u.PositionID
,p.PositionName
,u.OrganizationID
FROM user u
INNER JOIN position p ON p.RowID=u.PositionID
WHERE u.RowID=current_userID
INTO userPositionID
        ,userPositionName
        ,user_ogRowID;


    SELECT
    p.RowID
    ,p.PositionName
    ,COALESCE(p.ParentPositionID,'') 'ParentPositionID'
    ,COALESCE(p.DivisionId,'') 'DivisionId'
    ,p.OrganizationID
    ,p.CreatedBy
    ,COALESCE(p.LastUpd,'') 'LastUpd'
    ,COALESCE(p.LastUpdBy,'') 'LastUpdBy'
    FROM position p
    WHERE p.OrganizationID=pos_OrganizationID AND p.PositionName!=userPositionName
UNION
    SELECT
    RowID
    ,CONCAT(PositionName,' (your position)') AS PositionName
    ,COALESCE(ParentPositionID,'') 'ParentPositionID'
    ,COALESCE(DivisionId,'') 'DivisionId'
    ,OrganizationID
    ,CreatedBy
    ,COALESCE(LastUpd,'') 'LastUpd'
    ,COALESCE(LastUpdBy,'') 'LastUpdBy'
    FROM position
    WHERE RowID=userPositionID
ORDER BY PositionName
LIMIT pagination,100;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_position_view
DROP PROCEDURE IF EXISTS `VIEW_position_view`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_position_view`(IN `pv_OrganizationID` INT, IN `pv_PositionID` INT)
    DETERMINISTIC
BEGIN

SELECT
pv.RowID 'pv_RowID'
,v.ViewName
,IF(COALESCE(pv.Creates,'N')='Y',1,0) 'Creates'
,IF(COALESCE(pv.Updates,'N')='Y',1,0) 'Updates'
,IF(COALESCE(pv.Deleting,'N')='Y',1,0) 'Deleting'
,IF(COALESCE(pv.ReadOnly,'N')='Y',1,0) 'ReadOnly'
,v.RowID 'vw_RowID'
FROM position_view pv
INNER JOIN `view` v ON v.RowID=pv.ViewID
WHERE pv.OrganizationID=pv_OrganizationID
AND pv.PositionID=pv_PositionID
ORDER BY v.ViewName;



END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.view_proc
DROP PROCEDURE IF EXISTS `view_proc`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `view_proc`(IN `I_ViewName` VARCHAR(100), IN `I_OrganizationID` INT(10)
)
BEGIN
INSERT INTO `view`
(
    ViewName,
    OrganizationID
)
VALUES
(
    I_ViewName,
    I_OrganizationID
);END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_productmedrec
DROP PROCEDURE IF EXISTS `VIEW_productmedrec`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_productmedrec`(IN `pmed_OrganizationID` INT, IN `pmed_CategoryID` INT)
    DETERMINISTIC
    COMMENT 'view the medical illness of an employee according to date from-to of employee''s medical record(s) and organization'
BEGIN

SELECT
p.RowID
,p.PartNo
FROM product p
LEFT JOIN category cat ON cat.RowID=p.CategoryID
WHERE cat.OrganizationID=pmed_OrganizationID
AND p.CategoryID=pmed_CategoryID
ORDER BY p.PartNo ASC;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_related_loan_cancelled
DROP PROCEDURE IF EXISTS `VIEW_related_loan_cancelled`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_related_loan_cancelled`(IN `OrganizID` INT, IN `LoanCancelledRowID` INT)
    DETERMINISTIC
BEGIN

SELECT
els.RowID
,IFNULL(p.PartNo,'') AS PartNo
,els.LoanNumber
,els.TotalLoanAmount
,els.TotalBalanceLeft
,els.DedEffectiveDateFrom
,els.DeductionSchedule
,els.NoOfPayPeriod
,els.DedEffectiveDateTo
,els.LoanPayPeriodLeft
,els.DeductionAmount
,els.`Status`
,els.DeductionPercentage
,els.Comments
FROM employeeloanschedule els
LEFT JOIN product p ON p.RowID=els.LoanTypeID AND p.OrganizationID=els.OrganizationID
WHERE els.ReferenceLoanID=LoanCancelledRowID
AND els.OrganizationID=OrganizID
ORDER BY els.DedEffectiveDateFrom
			,els.DedEffectiveDateTo;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_specificemployeesalary
DROP PROCEDURE IF EXISTS `VIEW_specificemployeesalary`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_specificemployeesalary`(IN `esal_EmployeeID` INT, IN `esal_OrganizationID` INT, IN `esal_Date` DATE)
    DETERMINISTIC
BEGIN

SELECT
esal.RowID
,esal.EmployeeID
,esal.FilingStatusID
,COALESCE((SELECT FilingStatus FROM filingstatus WHERE RowID=esal.FilingStatusID),'') 'FilingStatus'
,COALESCE(esal.PaySocialSecurityID,'') 'PaySocialSecurityID'
,COALESCE((SELECT EmployeeContributionAmount FROM paysocialsecurity WHERE RowID=esal.PaySocialSecurityID),'') 'EmployeeContributionAmount'
,esal.PayPhilhealthID
,COALESCE((SELECT EmployeeShare FROM payphilhealth WHERE RowID=esal.PayPhilhealthID),'') 'EmployeeShare'
,COALESCE(esal.HDMFAmount,50) 'HDMFAmount'
,esal.BasicPay
,esal.NoofDependents
,COALESCE(esal.MaritalStatus,'') 'MaritalStatus'
,COALESCE(esal.PositionID,'') 'PositionID'
,COALESCE((SELECT PositionName FROM position WHERE RowID=esal.PositionID),'') 'Position'
,esal.EffectiveDateFrom
,COALESCE(IF(DATEDIFF(NOW(),esal.EffectiveDateFrom)<0,'tomorrow',COALESCE(esal.EffectiveDateTo,ADDDATE(CURRENT_DATE(),INTERVAL 100 YEAR))),'') 'EffectiveDateTo'
FROM employeesalary esal
WHERE esal.OrganizationID=esal_OrganizationID
AND esal.EmployeeID=esal_EmployeeID
AND esal_Date BETWEEN DATE(COALESCE(EffectiveDateFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d')))
AND DATE(COALESCE(EffectiveDateTo,ADDDATE(esal_Date, INTERVAL 1 MONTH)))
AND DATEDIFF(esal_Date,EffectiveDateFrom) >= 0
ORDER BY DATEDIFF(DATE_FORMAT(esal_Date,'%Y-%m-%d'),EffectiveDateFrom) LIMIT 1;




END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_timeentrydetails
DROP PROCEDURE IF EXISTS `VIEW_timeentrydetails`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `VIEW_timeentrydetails`(
	IN `OrganizID` INT,
	IN `Page_Number` INT



)
    DETERMINISTIC
BEGIN

SELECT

DATE_FORMAT(etdet.Created,'%m/%d/%Y %h:%i %p') 'Created'
,DATE_FORMAT(etdet.Created,'%Y-%m-%d %H:%i:%s') 'createdmilit'
,COALESCE(CONCAT(CONCAT(UCASE(LEFT(u.FirstName, 1)), SUBSTRING(u.FirstName, 2)),' ',CONCAT(UCASE(LEFT(u.LastName, 1))
,SUBSTRING(u.LastName, 2))),'') 'Created by'
,COALESCE(DATE_FORMAT(etdet.LastUpd,'%b-%d-%Y'),'') 'Last Update'
,COALESCE((SELECT CONCAT(CONCAT(UCASE(LEFT(FirstName, 1)), SUBSTRING(FirstName, 2)),' ',CONCAT(UCASE(LEFT(LastName, 1))
,SUBSTRING(LastName, 2))) FROM user WHERE RowID=etdet.LastUpdBy),'') 'Last update by'
,etdet.TimeentrylogsImportID



FROM employeetimeentrydetails etdet
LEFT JOIN user u ON etdet.CreatedBy=u.RowID
LEFT JOIN employee e ON etdet.EmployeeID = e.RowID
WHERE etdet.OrganizationID=OrganizID
GROUP BY etdet.TimeentrylogsImportID
ORDER BY etdet.RowID DESC LIMIT Page_Number,100;

END//
DELIMITER ;

-- Dumping structure for procedure accupaydb_cinema2k.VIEW_view_of_organization
DROP PROCEDURE IF EXISTS `VIEW_view_of_organization`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `VIEW_view_of_organization`(IN `vw_OrganizationID` INT)
    DETERMINISTIC
BEGIN

SELECT '' pv_RowID,ViewName,0,0,0,0,`view`.RowID vw_RowID FROM `view`  WHERE OrganizationID=vw_OrganizationID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.CHAR_TO_DAYOFWEEK
DROP FUNCTION IF EXISTS `CHAR_TO_DAYOFWEEK`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `CHAR_TO_DAYOFWEEK`(`param_char` CHAR(50)) RETURNS text CHARSET latin1
    DETERMINISTIC
BEGIN

DECLARE returnvalue TEXT DEFAULT '';

IF param_char = 1 THEN
    SET returnvalue = 'Sunday';
ELSEIF param_char = 2 THEN
    SET returnvalue = 'Monday';
ELSEIF param_char = 3 THEN
    SET returnvalue = 'Tuesday';
ELSEIF param_char = 4 THEN
    SET returnvalue = 'Wednesday';
ELSEIF param_char = 5 THEN
    SET returnvalue = 'Thursday';
ELSEIF param_char = 6 THEN
    SET returnvalue = 'Friday';
ELSEIF param_char = 7 THEN
    SET returnvalue = 'Saturday';
ELSEIF LENGTH(param_char) = 0
       OR param_char = 0 THEN
    SET returnvalue = '';
END IF;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.ComputeNightDiffHours
DROP FUNCTION IF EXISTS `ComputeNightDiffHours`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `ComputeNightDiffHours`(
    `$dutyStart` DATETIME,
    `$dutyEnd` DATETIME,
    `$nightDiffRangeStart` DATETIME,
    `$nightDiffRangeEnd` DATETIME,
    `$breaktimeStart` DATETIME,
    `$breaktimeEnd` DATETIME
) RETURNS decimal(15,4)
    DETERMINISTIC
BEGIN

    DECLARE nightDiffDutyStart DATETIME;
    DECLARE nightDiffDutyEnd DATETIME;
    DECLARE isDutyOverlappingNightDifferential TINYINT(1);
    DECLARE nightDiffHours DECIMAL(15, 4) DEFAULT 0.0;
    DECLARE hasBreaktime BOOLEAN DEFAULT FALSE;

    /*
     * Let's first check if the employee even worked during the night
     * differential hours. If not, we can skip computing and just return zero.
     */
    SET isDutyOverlappingNightDifferential = (
        ($dutyStart < $nightDiffRangeEnd) AND
        ($dutyEnd > $nightDiffRangeStart)
    );

    IF isDutyOverlappingNightDifferential THEN
        SET nightDiffDutyStart = GREATEST($dutyStart, $nightDiffRangeStart);
        SET nightDiffDutyEnd = LEAST($dutyEnd, $nightDiffRangeEnd);

        SET hasBreaktime =
            ($breaktimeStart IS NOT NULL AND $breaktimeEnd IS NOT NULL) AND
            (nightDiffDutyStart < $breaktimeEnd AND $breaktimeStart < nightDiffDutyEnd);

        IF hasBreaktime THEN
            SET nightDiffHours =
                COMPUTE_TimeDifference(TIME(nightDiffDutyStart), TIME($breaktimeStart)) +
                COMPUTE_TimeDifference(TIME($breaktimeEnd), TIME(nightDiffDutyEnd));
        ELSE
            SET nightDiffHours = COMPUTE_TimeDifference(TIME(nightDiffDutyStart), TIME(nightDiffDutyEnd));
        END IF;
    END IF;

    RETURN IFNULL(nightDiffHours, 0);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.COMPUTE_employeeovertimeofthisdate
DROP FUNCTION IF EXISTS `COMPUTE_employeeovertimeofthisdate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `COMPUTE_employeeovertimeofthisdate`(`ot_EmployeeID` INT, `ot_OrganizationID` INT, `ot_Date` DATE, `timelogout` TIME, `ValueAsNightDiff` CHAR(1)) RETURNS decimal(11,4)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,4) DEFAULT 0.0;

DECLARE emp_OTTimeIn TIME;

DECLARE emp_OTTimeOut TIME;

DECLARE ndiffStartTime TIME;

DECLARE ndiffEndTime TIME;

DECLARE ndiffValue DECIMAL(11,4) DEFAULT 0.0;


SELECT og.NightDifferentialTimeFrom
, og.NightDifferentialTimeTo
FROM organization og
WHERE og.RowID=ot_OrganizationID
INTO ndiffStartTime, ndiffEndTime;


SELECT
OTStartTime
,OTEndTime
FROM employeeovertime
WHERE EmployeeID=ot_EmployeeID
AND OrganizationID=ot_OrganizationID
AND ot_Date
BETWEEN OTStartDate
AND COALESCE(OTEndDate,OTStartDate)
AND DATEDIFF(ot_Date,COALESCE(OTEndDate,OTStartDate)) >= 0
AND OTStatus='Approved'
ORDER BY DATEDIFF(ot_Date,COALESCE(OTEndDate,OTStartDate))
LIMIT 1
INTO emp_OTTimeIn
      ,emp_OTTimeOut;

IF emp_OTTimeIn IS NULL AND timelogout IS NULL THEN
    SET returnvalue = 0;
ELSE

    IF emp_OTTimeIn > timelogout THEN
        SET returnvalue = 0;
    ELSE

        IF timelogout > emp_OTTimeOut THEN
            SET timelogout = emp_OTTimeOut;
        END IF;

        IF TIME_FORMAT(emp_OTTimeIn,'%p') = 'PM' AND
            TIME_FORMAT(timelogout,'%p') = 'AM' THEN

            SELECT ((TIME_TO_SEC(TIMEDIFF(ADDTIME(timelogout,'24:00'),emp_OTTimeIn)) / 60) / 60) INTO returnvalue;

            IF TIME_FORMAT(timelogout,'%p') = 'PM' AND ValueAsNightDiff ='1' THEN

                IF timelogout >= ndiffStartTime
                    AND timelogout <= ndiffEndTime THEN

                    SELECT ((TIME_TO_SEC(TIMEDIFF(timelogout,ndiffStartTime)) / 60) / 60) INTO ndiffValue;

                ELSE

                    SET ndiffValue = 0;

                END IF;



            ELSE

                IF ndiffEndTime >= timelogout AND ValueAsNightDiff ='1' THEN

                    SELECT ((TIME_TO_SEC(TIMEDIFF(ADDTIME(timelogout,'24:00'),ndiffStartTime)) / 60) / 60) INTO ndiffValue;

                ELSE

                    SET ndiffValue = 0;

                END IF;

            END IF;

        ELSE

            SELECT ((TIME_TO_SEC(TIMEDIFF(timelogout,emp_OTTimeIn)) / 60) / 60) INTO returnvalue;


        END IF;

    END IF;

END IF;

IF ValueAsNightDiff = '1' THEN
    SET returnvalue = IFNULL(ndiffValue, 0.0);

ELSE
    IF ndiffValue IS NULL THEN
        SET returnvalue = 0;

    END IF;

END IF;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.COMPUTE_employeetimeentry
DROP FUNCTION IF EXISTS `COMPUTE_employeetimeentry`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `COMPUTE_employeetimeentry`(`etent_EmployeeID` INT, `etent_OrganizationID` INT, `etent_Date` DATE, `etent_CreatedBy` INT, `etent_LastUpdBy` INT, `EmployeeStartDate` DATE) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE etentID INT(11);

SELECT GENERATE_employeetimeentry(etent_EmployeeID,etent_OrganizationID,etent_Date,etent_CreatedBy) INTO etentID;

RETURN etentID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.COMPUTE_TimeDifference
DROP FUNCTION IF EXISTS `COMPUTE_TimeDifference`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `COMPUTE_TimeDifference`(`TimeOne` TIME, `TimeTwo` TIME) RETURNS decimal(11,6)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,6);

IF TimeOne IS NULL
    OR TimeTwo IS NULL THEN

    SET returnvalue = 0;

ELSE

    IF HOUR(TimeOne) >= 24 THEN
        SET TimeOne = TIME_FORMAT(TimeOne,'00:%i:%s');
    END IF;

    IF HOUR(TimeTwo) >= 24 THEN
        SET TimeTwo = TIME_FORMAT(TimeTwo,'00:%i:%s');
    END IF;

    IF DATE_FORMAT(TimeOne,'%p') = 'PM'
        AND DATE_FORMAT(TimeTwo,'%p') = 'AM' THEN

        SET returnvalue = ((TIME_TO_SEC(TIMEDIFF(ADDTIME(TimeTwo,'24:00'), TimeOne)) / 60) / 60);

    ELSEIF DATE_FORMAT(TimeTwo,'%p') = 'PM'
             AND DATE_FORMAT(TimeOne,'%p') = 'AM' THEN

        SET returnvalue = ((TIME_TO_SEC(TIMEDIFF(TimeTwo, TimeOne)) / 60) / 60);

    ELSE

        IF TimeTwo > TimeOne THEN

            SET returnvalue = ((TIME_TO_SEC(TIMEDIFF(TimeTwo, TimeOne)) / 60) / 60);

        ELSE

            SET returnvalue = ((TIME_TO_SEC(TIMEDIFF(TimeOne, TimeTwo)) / 60) / 60);

        END IF;

    END IF;

END IF;


RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.CONCAT_DATETIME
DROP FUNCTION IF EXISTS `CONCAT_DATETIME`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `CONCAT_DATETIME`(`p_date` DATE, `p_time` TIME) RETURNS datetime
    DETERMINISTIC
BEGIN

RETURN ADDTIME(TIMESTAMP(p_date), p_time);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.COUNTTHEWEEKS
DROP FUNCTION IF EXISTS `COUNTTHEWEEKS`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `COUNTTHEWEEKS`(`paramDate` DATE) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

DECLARE daythisdate INT(11);



DECLARE one_mon INT(11);

DECLARE one_fri INT(11);

DECLARE count_week INT(11);

DECLARE indx INT(11);

DECLARE lastday INT(11);

DECLARE loop_date DATE;



SET count_week = DAYOFYEAR(DATE_FORMAT(paramDate,'%Y-%m-01')) / 7;

SET returnvalue = DAYOFYEAR(LAST_DAY(paramDate)) / 7;

SET count_week = returnvalue - count_week;

RETURN count_week;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.COUNT_employeeabsent
DROP FUNCTION IF EXISTS `COUNT_employeeabsent`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `COUNT_employeeabsent`(`EmpID` INT, `OrgID` INT, `EmpStartDate` DATE, `payperiodDateFrom` DATE, `payperiodDateTo` DATE) RETURNS decimal(11,2)
    DETERMINISTIC
BEGIN

DECLARE absentcount DECIMAL(11,2);

DECLARE isNightShift CHAR(1);

DECLARE daterange DATE;

DECLARE shiftRowID INT(11);

DECLARE timedifference TIME;

DECLARE hoursofduty DECIMAL(11,3);

DECLARE yes_else INT(1);

SELECT IF(EmpStartDate > payperiodDateFrom, EmpStartDate, payperiodDateFrom) INTO daterange;

SELECT COALESCE(NightShift,0),ShiftID FROM employeeshift WHERE EmployeeID=EmpID AND OrganizationID=OrgID AND payperiodDateFrom BETWEEN DATE(COALESCE(EffectiveFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) AND DATEDIFF(payperiodDateFrom,EffectiveFrom) >= 0 AND COALESCE(RestDay,0)=0 ORDER BY DATEDIFF(DATE_FORMAT(payperiodDateFrom,'%Y-%m-%d'),EffectiveFrom) LIMIT 1 INTO isNightShift,shiftRowID;

SELECT SUBSTRING_INDEX(TIMEDIFF(TimeFrom,IF(TimeFrom>TimeTo,ADDTIME(TimeTo,'24:00:00'),TimeTo)),'-',-1) FROM shift WHERE RowID=shiftRowID INTO timedifference;

SET hoursofduty = ((TIME_TO_SEC(COALESCE(timedifference,'00:00:00')) / 60) / 60);

IF COALESCE(isNightShift,0) = 1 THEN
SET yes_else = 0;
    SELECT COUNT(RowID) FROM employeetimeentry WHERE EmployeeID=EmpID AND OrganizationID=OrgID AND COALESCE(UndertimeHours,0)=COALESCE(NightDifferentialHours,0) AND COALESCE(UndertimeHours,0)!=0 AND Date BETWEEN daterange AND payperiodDateTo INTO absentcount;

ELSE
SET yes_else = 1;
    SELECT COUNT(RowID) FROM employeetimeentry WHERE EmployeeID=EmpID AND OrganizationID=OrgID AND COALESCE(UndertimeHours,0)=COALESCE(RegularHoursWorked,0) AND COALESCE(UndertimeHours,0)!=0 AND Date BETWEEN daterange AND payperiodDateTo INTO absentcount;

END IF;

SET absentcount = COALESCE(absentcount,0.00) * COALESCE(hoursofduty,0.00);

RETURN hoursofduty;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.COUNT_payperiodthisyear
DROP FUNCTION IF EXISTS `COUNT_payperiodthisyear`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `COUNT_payperiodthisyear`(`organization_ID` INT, `PayFrequencyID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE payp_count INT(11) DEFAULT 24;

IF PayFrequencyID = 2 THEN

    SELECT COUNT(RowID) FROM payperiod WHERE YEAR(COALESCE(PayFromDate,YEAR(NOW())))=YEAR(NOW()) AND OrganizatioNID=organization_ID AND DATEDIFF(PayToDate,PayFromDate)!=4 INTO payp_count;

ELSEIF PayFrequencyID = 3 THEN

    SELECT COUNT(RowID) FROM payperiod WHERE YEAR(COALESCE(PayFromDate,YEAR(NOW())))=YEAR(NOW()) AND OrganizatioNID=organization_ID AND DATEDIFF(PayToDate,PayFromDate)!=4 INTO payp_count;

ELSEIF PayFrequencyID = 4 THEN



    SELECT COUNT(RowID) FROM payperiod WHERE OrganizationID=organization_ID AND TotalGrossSalary=PayFrequencyID AND `Year`=YEAR(CURDATE()) INTO payp_count;

ELSE



    SELECT COUNT(RowID) FROM payperiod WHERE OrganizationID=organization_ID AND TotalGrossSalary=PayFrequencyID AND `Year`=YEAR(CURDATE()) INTO payp_count;

END IF;

RETURN payp_count;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.COUNT_pay_period
DROP FUNCTION IF EXISTS `COUNT_pay_period`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `COUNT_pay_period`(`paramDateFrom` DATE, `paramDateTo` DATE) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnval INT(11);

DECLARE indx INT(11) DEFAULT 1;

DECLARE cnt INT(11) DEFAULT 0;

DECLARE dateloop DATE;

SET dateloop = paramDateFrom;

    date_loop : LOOP

        IF dateloop < paramDateTo THEN

            IF DATE_ADD(paramDateFrom,INTERVAL indx MONTH) > LAST_DAY(dateloop) THEN

                IF DAY(dateloop) < 16 THEN

                    SET cnt = cnt + 2;

                END IF;

            END IF;

            SELECT DATE_ADD(paramDateFrom,INTERVAL indx MONTH) INTO dateloop;

            SET indx = indx + 1;

        ELSE

            LEAVE date_loop;

        END IF;


    END LOOP;

    IF DAY(paramDateTo) <= 15 THEN

        SET cnt = cnt - 1;

    ELSEIF DATE_ADD(CONCAT(YEAR(NOW()),'-01-01'), INTERVAL 0 DAY) = paramDateFrom
        AND DATE_ADD(CONCAT(YEAR(NOW()),'-12-31'), INTERVAL 0 DAY) = paramDateTo THEN

        SET cnt = cnt + 2;

    END IF;

    SET returnval = cnt;

RETURN returnval;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.DEFAULT_internal_sys_user
DROP FUNCTION IF EXISTS `DEFAULT_internal_sys_user`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `DEFAULT_internal_sys_user`() RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE default_zero INT(11) DEFAULT 0;

DECLARE default_internal_sys_user_rowid INT(11);

SELECT RowID FROM `user` WHERE RowID=default_zero INTO default_internal_sys_user_rowid;

IF default_internal_sys_user_rowid IS NULL THEN

	INSERT INTO `user` (`RowID`, `LastName`, `FirstName`, `MiddleName`, `UserID`, `Password`, `OrganizationID`, `PositionID`, `Created`, `LastUpdBy`, `CreatedBy`, `LastUpd`, `Status`, `EmailAddress`, `AllowLimitedAccess`, `Column 16`, `InSession`) VALUES (0, 'user', 'user', 'user', '????????????', '??????????', 1, 1, '2017-03-09 00:00:00', 1, 1, '2017-10-06 09:33:49', 'Active', 'user@email.com.ph', '1', NULL, '1'); SELECT @@identity INTO default_internal_sys_user_rowid;

   UPDATE `user` SET RowID=default_zero WHERE RowID=default_internal_sys_user_rowid;

END IF;

RETURN default_zero;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.FN_GetPaystubIDByEmployeeIDAndPayPeriodID
DROP FUNCTION IF EXISTS `FN_GetPaystubIDByEmployeeIDAndPayPeriodID`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `FN_GetPaystubIDByEmployeeIDAndPayPeriodID`(`ps_EmployeeID` VARCHAR(50), `ps_PayPeriodID` INT, `OrganizID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

RETURN
IFNULL(
(
    SELECT
        RowID
    FROM
        PayStub
    WHERE
        EmployeeID = (
                            SELECT
                                RowID
                            FROM
                                employee
                            WHERE
                                EmployeeID = ps_EmployeeID
                            AND
                                OrganizationID = OrganizID
                          ) AND
        PayPeriodID = ps_PayPeriodID
    AND
        OrganizationID = OrganizID
)
, NULL);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GENERATE_employeetimeentry
DROP FUNCTION IF EXISTS `GENERATE_employeetimeentry`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GENERATE_employeetimeentry`(`ete_EmpRowID` INT, `ete_OrganizID` INT, `ete_Date` DATE, `ete_UserRowID` INT
) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE DAYTYPE_REGULAR_WORKING_DAY VARCHAR(50) DEFAULT 'Regular Working Day';
DECLARE DAYTYPE_SPECIAL_NON_WORKING_HOLIDAY VARCHAR(50) DEFAULT 'Special Non-Working Holiday';
DECLARE DAYTYPE_REGULAR_HOLIDAY VARCHAR(50) DEFAULT 'Regular Holiday';

DECLARE STANDARD_WORKING_HOURS DECIMAL(10, 4) DEFAULT 8.0;

DECLARE SECONDS_PER_HOUR INT(11) DEFAULT 3600;

/*
 * The standard rate is 100% or a multiplier of 1.0.
 */
DECLARE BASIC_RATE DECIMAL(15, 4) DEFAULT 1.0;

DECLARE returnvalue INT(11);

DECLARE isRestDay TEXT;
DECLARE isWorkingDay BOOLEAN;

DECLARE yester_TotDayPay DECIMAL(11,2);
DECLARE yester_TotHrsWorkd DECIMAL(11,2);

DECLARE e_EmpStatus TEXT;

DECLARE e_EmpType TEXT;

DECLARE e_MaritStatus TEXT;

DECLARE e_StartDate DATE;

DECLARE e_PayFreqID INT(11);

DECLARE e_NumDependent INT(11);

DECLARE e_UTOverride CHAR(1);

DECLARE e_OTOverride CHAR(1);

DECLARE e_DaysPerYear INT(11);

DECLARE isEntitledToNightDiff BOOLEAN;
DECLARE isEntitledToNightDiffOvertime BOOLEAN;
DECLARE isEntitledToRegularHoliday BOOLEAN;
DECLARE isEntitledToSpecialNonWorkingHoliday BOOLEAN;
DECLARE isEntitledToHoliday BOOLEAN;
DECLARE isEntitledToRestDay BOOLEAN;
DECLARE isEntitledToRestDayOvertime BOOLEAN;
DECLARE isCalculatingRegularHoliday BOOLEAN DEFAULT FALSE;
DECLARE isCalculatingSpecialNonWorkingHoliday BOOLEAN DEFAULT FALSE;

DECLARE isDayMatchRestDay BOOLEAN DEFAULT FALSE;

DECLARE yes_true CHAR(1) DEFAULT '0';

DECLARE anytime TIME;

DECLARE timeEntryID INT(11);

DECLARE hourlyRate DECIMAL(11,6);
DECLARE dailyRate DECIMAL(11,6);

DECLARE commonrate DECIMAL(11,6);

DECLARE otrate DECIMAL(11,6);

DECLARE ndiffrate DECIMAL(11,6);

DECLARE ndiffotrate DECIMAL(11,6);

DECLARE restday_rate DECIMAL(11,6);

DECLARE restdayot_rate DECIMAL(11,6);
DECLARE _restDayNDRate DECIMAL(10, 4) DEFAULT 0.0;
DECLARE _restDayNDOTRate DECIMAL(10, 4) DEFAULT 0.0;


DECLARE employeeShiftID INT(11);

DECLARE esalRowID INT(11);

DECLARE payrateRowID INT(11);

DECLARE totalHours DECIMAL(15, 4) DEFAULT 0.0;
DECLARE totalDayPay DECIMAL(11,6) DEFAULT 0.0;

DECLARE OTCount INT(11) DEFAULT 0;

DECLARE aftershiftOTRowID INT(11) DEFAULT 0;

DECLARE anotherOTHours DECIMAL(11,6);

DECLARE e_LateGracePeriod DECIMAL(11,2);

DECLARE e_PositionID INT(11);
DECLARE shiftID INT(11);

DECLARE workingHours DECIMAL(11,6) DEFAULT 0;#INT(10)

DECLARE requiredToWorkLastWorkingDay BOOLEAN DEFAULT FALSE;
DECLARE allowAbsenceOnHoliday BOOLEAN DEFAULT FALSE;
DECLARE timeInOnly BOOLEAN DEFAULT FALSE;
DECLARE $requireWorkLastDayForFullPay BOOLEAN DEFAULT FALSE;

DECLARE dateToday DATE;
DECLARE dateTomorrow DATE;
DECLARE dateYesterday DATE;

DECLARE etd_TimeIn TIME;
DECLARE actualTimeIn TIME;
DECLARE fullTimeIn DATETIME;
DECLARE fullTimeOut DATETIME;
DECLARE hasTimeLogs BOOLEAN DEFAULT FALSE;

DECLARE officialBusStartTime TIME;
DECLARE officialBusEndTime TIME;
DECLARE offBusinessStart DATETIME;
DECLARE offBusinessEnd DATETIME;

DECLARE shifttimefrom TIME;
DECLARE shifttimeto TIME;
DECLARE shiftStart DATETIME;
DECLARE shiftEnd DATETIME;
DECLARE shiftHours DECIMAL(15, 4) DEFAULT 0.0;
DECLARE hasShift BOOLEAN DEFAULT FALSE;
DECLARE breaktimeStart DATETIME;
DECLARE breaktimeEnd DATETIME;
DECLARE hasBreaktime BOOLEAN DEFAULT FALSE;
DECLARE isNightShift BOOLEAN DEFAULT FALSE;

DECLARE isRegularDay BOOLEAN DEFAULT FALSE;
DECLARE isSpecialNonWorkingHoliday BOOLEAN DEFAULT FALSE;
DECLARE isRegularHoliday BOOLEAN DEFAULT FALSE;
DECLARE isHoliday BOOLEAN DEFAULT FALSE;

DECLARE dutyStart DATETIME;
DECLARE dutyEnd DATETIME;

DECLARE regularHoursBeforeBreak DECIMAL(11, 6) DEFAULT 0.0;
DECLARE regularHoursAfterBreak DECIMAL(11, 6) DEFAULT 0.0;
DECLARE regularHours DECIMAL(11, 6) DEFAULT 0.0;
DECLARE regularAmount DECIMAL(11, 6) DEFAULT 0.0;
DECLARE hasWorked BOOLEAN DEFAULT FALSE;

DECLARE nightDiffTimeFrom TIME;
DECLARE nightDiffTimeTo TIME;
DECLARE nightDiffRangeStart DATETIME;
DECLARE nightDiffRangeEnd DATETIME;
DECLARE dawnNightDiffRangeStart DATETIME;
DECLARE dawnNightDiffRangeEnd DATETIME;

DECLARE nightDiffHours DECIMAL(11, 6) DEFAULT 0.0;
DECLARE nightDiffAmount DECIMAL(11, 6) DEFAULT 0.0;
DECLARE isDutyOverlappedWithNightDifferential BOOLEAN DEFAULT FALSE;
DECLARE shouldCalculateNightDifferential BOOLEAN DEFAULT FALSE;

DECLARE otstartingtime TIME DEFAULT NULL;
DECLARE otendingtime TIME DEFAULT NULL;
DECLARE overtimeStart DATETIME;
DECLARE overtimeEnd DATETIME;
DECLARE overtimeDate DATE;
DECLARE hasOvertime BOOLEAN DEFAULT FALSE;

DECLARE overtimeDutyStart DATETIME;
DECLARE overtimeDutyEnd DATETIME;
DECLARE overtimeHours DECIMAL(12, 6) DEFAULT 0.0;
DECLARE overtimeAmount DECIMAL(11, 6) DEFAULT 0.0;
DECLARE restDayOvertimeHours DECIMAL(15, 4) DEFAULT 0.0;

DECLARE nightDiffOTDutyStart DATETIME;
DECLARE nightDiffOTDutyEnd DATETIME;
DECLARE nightDiffOTHours DECIMAL(11, 6) DEFAULT 0.0;
DECLARE nightDiffOTAmount DECIMAL(11, 6) DEFAULT 0.0;
DECLARE isOvertimeOverlappedNightDifferential BOOLEAN DEFAULT FALSE;
DECLARE shouldCalculateNightDifferentialOvertime BOOLEAN DEFAULT FALSE;

DECLARE isDefaultRestDay BOOLEAN DEFAULT FALSE;
DECLARE isShiftRestDay BOOLEAN DEFAULT FALSE;
DECLARE restDayHours DECIMAL(15, 4) DEFAULT 0.0;
DECLARE restDayAmount DECIMAL(15, 4) DEFAULT 0.0;
DECLARE restDayOTHours DECIMAL(15, 4) DEFAULT 0.0;
DECLARE restDayOTPay DECIMAL(15, 4) DEFAULT 0.0;

DECLARE _holidayCalculationType VARCHAR(50);
DECLARE regularHolidayHours DECIMAL(15, 4) DEFAULT 0.0;
DECLARE regularHolidayPay DECIMAL(15, 4) DEFAULT 0.0;
DECLARE _regularHolidayOTHours DECIMAL(15, 4) DEFAULT 0.0;
DECLARE _regularHolidayOTPay DECIMAL(15, 4) DEFAULT 0.0;
DECLARE specialHolidayHours DECIMAL(15, 4) DEFAULT 0.0;
DECLARE specialHolidayPay DECIMAL(15, 4) DEFAULT 0.0;
DECLARE _specialHolidayOTHours DECIMAL(15, 4) DEFAULT 0.0;
DECLARE _specialHolidayOTPay DECIMAL(15, 4) DEFAULT 0.0;
DECLARE _basicHolidayPay DECIMAL(15, 4) DEFAULT 0.0;
DECLARE holidayPay DECIMAL(15, 4) DEFAULT 0.0;
DECLARE isExemptForHoliday BOOLEAN DEFAULT FALSE;
DECLARE isHolidayPayInclusive BOOLEAN DEFAULT FALSE;

DECLARE lateHoursBeforeBreak DECIMAL(11, 6) DEFAULT 0.0;
DECLARE lateHoursAfterBreak DECIMAL(11, 6) DEFAULT 0.0;
DECLARE lateHours DECIMAL(11, 6) DEFAULT 0.0;
DECLARE lateAmount DECIMAL(15, 4) DEFAULT 0.0;

DECLARE undertimeHoursBeforeBreak DECIMAL(11, 6) DEFAULT 0.0;
DECLARE undertimeHoursAfterBreak DECIMAL(11, 6) DEFAULT 0.0;
DECLARE undertimeHours DECIMAL(11, 6) DEFAULT 0.0;
DECLARE undertimeAmount DECIMAL(15, 4) DEFAULT 0.0;

DECLARE absentHours DECIMAL(15, 4) DEFAULT 0.0;
DECLARE absentAmount DECIMAL(15, 4) DEFAULT 0.0;

DECLARE hasLeave BOOLEAN DEFAULT FALSE;
DECLARE leaveStartTime TIME;
DECLARE leaveEndTime TIME;
DECLARE leaveStart DATETIME;
DECLARE leaveEnd DATETIME;
DECLARE leaveType VARCHAR(50);

DECLARE leaveHoursBeforeBreak DECIMAL(15, 4) DEFAULT 0.0;
DECLARE leaveHoursAfterBreak DECIMAL(15, 4) DEFAULT 0.0;
DECLARE leaveHours DECIMAL(15, 4) DEFAULT 0.0;
DECLARE leavePay DECIMAL(15, 4) DEFAULT 0.0;

DECLARE _basicHours DECIMAL(15, 4) DEFAULT 0.0;
DECLARE basicDayPay DECIMAL(15, 4) DEFAULT 0.0;

DECLARE hasWorkedLastWorkingDay BOOLEAN DEFAULT FALSE;

DECLARE applicableHolidayRate DECIMAL(11, 6) DEFAULT 0.0;

DECLARE isRestDayInclusive BOOLEAN DEFAULT FALSE;

SELECT
    e.EmploymentStatus,
    e.EmployeeType,
    e.MaritalStatus,
    e.StartDate,
    e.PayFrequencyID,
    e.NoOfDependents,
    e.UndertimeOverride,
    e.OvertimeOverride,
    e.WorkDaysPerYear,
    (e.CalcHoliday = 1),
    (e.CalcSpecialHoliday = 1),
    (e.CalcNightDiff = 1),
    (e.CalcNightDiffOT = 1),
    (e.CalcRestDay = 1),
    (e.CalcRestDayOT = 1),
    e.LateGracePeriod,
    e.PositionID,
    og.NightDifferentialTimeFrom,
    og.NightDifferentialTimeTo
FROM employee e
INNER JOIN organization og
ON og.RowID = e.OrganizationID
WHERE e.RowID = ete_EmpRowID
INTO
    e_EmpStatus,
    e_EmpType,
    e_MaritStatus,
    e_StartDate,
    e_PayFreqID,
    e_NumDependent,
    e_UTOverride,
    e_OTOverride,
    e_DaysPerYear,
    isEntitledToRegularHoliday,
    isEntitledToSpecialNonWorkingHoliday,
    isEntitledToNightDiff,
    isEntitledToNightDiffOvertime,
    isEntitledToRestDay,
    isEntitledToRestDayOvertime,
    e_LateGracePeriod,
    e_PositionID,
    nightDiffTimeFrom,
    nightDiffTimeTo;

SET timeInOnly = GetListOfValueOrDefault(
    'Payroll Policy', 'timeinonly', FALSE
);

SET requiredToWorkLastWorkingDay = GetListOfValueOrDefault(
    'Payroll Policy', 'HolidayLastWorkingDayOrAbsent', FALSE
);

SET isRestDayInclusive = GetListOfValueOrDefault(
    'Payroll Policy', 'restday.inclusiveofbasicpay', FALSE
);

SET allowAbsenceOnHoliday = GetListOfValueOrDefault(
    'Payroll Policy', 'holiday.allowabsence', FALSE
);

SET _holidayCalculationType = GetListOfValueOrDefault(
    'Payroll Policy', 'HolidayPay', 'Daily'
);

SET $requireWorkLastDayForFullPay = GetListOfValueOrDefault(
    'HolidayPolicy', 'RequireWorkLastDayForFullPay', FALSE
);

SELECT
    RowID,
    IF(
        PayType = 'Special Non-Working Holiday',
        IF(
            isEntitledToSpecialNonWorkingHoliday,
            PayRate,
            BASIC_RATE
        ),
        IF(
            PayType = 'Regular Holiday',
            IF(
                isEntitledToRegularHoliday,
                `PayRate`,
                BASIC_RATE
            ),
            `PayRate`
        )
    ),
    IF(e_OTOverride = '1', OvertimeRate, 1),
    IF(isEntitledToNightDiff, NightDifferentialRate, 1),
    IF(isEntitledToNightDiffOvertime, NightDifferentialOTRate, 1),
    IF(isEntitledToRestDay, RestDayRate, 1),
    IF(isEntitledToRestDayOvertime, RestDayOvertimeRate, OvertimeRate),
    RestDayNDRate,
    RestDayNDOTRate,
    (PayType = 'Regular Holiday'),
    (PayType = 'Special Non-Working Holiday')
FROM payrate
WHERE `Date` = ete_Date
    AND OrganizationID = ete_OrganizID
INTO
    payrateRowID,
    commonrate,
    otrate,
    ndiffrate,
    ndiffotrate,
    restday_rate,
    restdayot_rate,
    _restDayNDRate,
    _restDayNDOTRate,
    isRegularHoliday,
    isSpecialNonWorkingHoliday;

SET isCalculatingRegularHoliday = isRegularHoliday AND isEntitledToRegularHoliday;
SET isCalculatingSpecialNonWorkingHoliday = isSpecialNonWorkingHoliday AND isEntitledToSpecialNonWorkingHoliday;
SET isHoliday = isRegularHoliday OR isSpecialNonWorkingHoliday;
SET isHolidayPayInclusive = (e_EmpType = 'Monthly' OR e_EmpType = 'Fixed');
SET isRegularDay = NOT isHoliday;

SELECT COUNT(RowID)
FROM employeeovertime
WHERE EmployeeID = ete_EmpRowID AND
    OrganizationID = ete_OrganizID AND
    ete_Date BETWEEN OTStartDate AND OTEndDate AND
    OTStatus = 'Approved'
INTO OTCount;

SELECT COALESCE(DAYOFWEEK(ete_Date) = e.DayOfRest, FALSE)
FROM employee e
WHERE e.RowID = ete_EmpRowID
INTO isDefaultRestDay;

SELECT
    esh.RowID,
    sh.RowID,
    sh.TimeFrom,
    sh.TimeTo,
    sh.BreakTimeFrom,
    sh.BreakTimeTo,
    IFNULL(esh.NightShift = '1', FALSE),
    COALESCE(esh.RestDay, TRUE),
    sh.DivisorToDailyRate
FROM employeeshift esh
LEFT JOIN shift sh
ON sh.RowID = esh.ShiftID
WHERE esh.EmployeeID = ete_EmpRowID AND
    esh.OrganizationID = ete_OrganizID AND
    ete_Date BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
ORDER BY DATEDIFF(ete_Date, esh.EffectiveFrom)
LIMIT 1
INTO
    employeeShiftID,
    shiftID,
    shifttimefrom,
    shifttimeto,
    @sh_brktimeFr,
    @sh_brktimeTo,
    isNightShift,
    isShiftRestDay,
    workingHours;

SET hasShift = (shifttimefrom IS NOT NULL) AND (shifttimeto IS NOT NULL);

IF hasShift THEN
    SET shifttimefrom = TIME_FORMAT(shifttimefrom, "%H:%i:00");
    SET shifttimeto =  TIME_FORMAT(shifttimeto, "%H:%i:00");
END IF;

SET isRestDay = isShiftRestDay;
SET isWorkingDay = NOT isRestDay;

SET workingHours = IF(hasShift, workingHours, STANDARD_WORKING_HOURS);

IF OTCount = 1 THEN

    SELECT
        OTStartTime,
        OTEndTime,
        RowID
    FROM employeeovertime
    WHERE EmployeeID = ete_EmpRowID AND
        OrganizationID = ete_OrganizID AND
        -- OTStartTime >= shifttimeto AND
        OTStatus = 'Approved' AND
        (ete_Date BETWEEN OTStartDate AND OTEndDate)
    ORDER BY OTStartTime DESC
    LIMIT 1
    INTO
        otstartingtime,
        otendingtime,
        aftershiftOTRowID;

ELSE

    SELECT
        OTStartTime,
        OTEndTime,
        RowID
    FROM employeeovertime
    WHERE EmployeeID = ete_EmpRowID
        AND OrganizationID = ete_OrganizID
        AND ete_Date BETWEEN OTStartDate AND COALESCE(OTEndDate,OTStartDate)
        AND OTStatus = 'Approved'
    ORDER BY OTStartTime DESC
    LIMIT 1
    INTO
        otstartingtime,
        otendingtime,
        aftershiftOTRowID;

END IF;

IF otstartingtime IS NULL AND otendingtime IS NOT NULL THEN
    SET otstartingtime = shifttimeto;
END IF;

IF otendingtime IS NULL AND otstartingtime IS NOT NULL THEN
    SET otendingtime = shifttimefrom;
END IF;

SELECT
    etd.TimeIn,
    etd.TimeStampIn,
    etd.TimeStampOut
FROM employeetimeentrydetails etd
INNER JOIN employee e ON e.RowID=etd.EmployeeID
LEFT JOIN employeeshift esh
ON esh.OrganizationID = etd.OrganizationID AND
    esh.EmployeeID = etd.EmployeeID AND
    etd.`Date` BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
LEFT JOIN shift sh
ON sh.RowID = esh.ShiftID
WHERE etd.EmployeeID = ete_EmpRowID AND
    etd.OrganizationID = ete_OrganizID AND
    etd.`Date` = ete_Date
ORDER BY IFNULL(etd.LastUpd, etd.Created) DESC
LIMIT 1
INTO
    actualTimeIn,
    fullTimeIn,
    fullTimeOut;

SET dateToday = ete_Date;
SET dateTomorrow = DATE_ADD(dateToday, INTERVAL 1 DAY);
SET dateYesterday = DATE_SUB(dateToday, INTERVAL 1 DAY);

SELECT
    MIN(ofb.OffBusStartTime),
    MAX(ofb.OffBusEndTime)
FROM employeeofficialbusiness ofb
WHERE ofb.OffBusStartDate = dateToday AND
    ofb.EmployeeID = ete_EmpRowID AND
    ofb.OffBusStatus = 'Approved'
INTO
    officialBusStartTime,
    officialBusEndTime;

SET offBusinessStart = TIMESTAMP(dateToday, officialBusStartTime);
SET offBusinessEnd = TIMESTAMP(IF(officialBusEndTime > officialBusStartTime OR ISNULL(officialBusStartTime), dateToday, dateTomorrow), officialBusEndTime);

IF NOT ISNULL(offBusinessStart) THEN
    SET fullTimeIn = IF(fullTimeIn IS NULL, offBusinessStart, LEAST(fullTimeIn, offBusinessStart));    
END IF;

IF NOT ISNULL(offBusinessEnd) THEN
    SET fullTimeOut = IF(fullTimeOut IS NULL, offBusinessEnd, GREATEST(fullTimeOut, offBusinessEnd));
END IF;

SET actualTimeIn = COALESCE(LEAST(actualTimeIn, officialBusStartTime), actualTimeIn, officialBusStartTime);

/* Apply grace period to the time in */
SELECT TIMESTAMP(DATE(fullTimeIn), GRACE_PERIOD(TIME(fullTimeIn), shifttimefrom, e_LateGracePeriod))
INTO fullTimeIn;

SET shiftStart = TIMESTAMP(dateToday, shifttimefrom);
SET shiftEnd = TIMESTAMP(IF(shifttimeto > shifttimefrom, dateToday, dateTomorrow), shifttimeto);

SET breaktimeStart = TIMESTAMP(IF(@sh_brktimeFr > shifttimefrom, dateToday, dateTomorrow), @sh_brktimeFr);
SET breaktimeEnd = TIMESTAMP(IF(@sh_brktimeTo > shifttimefrom, dateToday, dateTomorrow), @sh_brktimeTo);

SET hasBreaktime = (@sh_brktimeFr IS NOT NULL) AND (@sh_brktimeTo IS NOT NULL);

IF hasShift THEN
    IF hasBreaktime THEN
        SET shiftHours =
            COMPUTE_TimeDifference(TIME(shiftStart), TIME(breaktimeStart)) +
            COMPUTE_TimeDifference(TIME(breaktimeEnd), TIME(shiftEnd));
    ELSE
        SET shiftHours = COMPUTE_TimeDifference(TIME(shiftStart), TIME(shiftEnd));
    END IF;
ELSE
    SET shiftHours = STANDARD_WORKING_HOURS;
END IF;

SELECT
    COUNT(elv.RowID) > 0,
    elv.LeaveStartTime,
    elv.LeaveEndTime,
    elv.LeaveType
FROM employeeleave elv
WHERE elv.EmployeeID = ete_EmpRowID AND
    elv.`Status` = 'Approved' AND
    elv.OrganizationID = ete_OrganizID AND
    ete_Date BETWEEN elv.LeaveStartDate AND elv.LeaveEndDate AND
    elv.LeaveType != 'Leave w/o Pay'
LIMIT 1
INTO
    hasLeave,
    leaveStartTime,
    leaveEndTime,
    leaveType;

IF hasLeave THEN
    SET leaveStartTime = COALESCE(leaveStartTime, shifttimefrom);
    SET leaveEndTime = COALESCE(leaveEndTime, shifttimeto);

    SET leaveStart = TIMESTAMP(dateToday, leaveStartTime);
    SET leaveEnd = TIMESTAMP(IF(leaveEndTime > leaveStartTime, dateToday, dateTomorrow), leaveEndTime);
END IF;

/*
 * The official work start is the time that is considered the employee has started working.
 * In this case, the work start is the time in, unless the employee went in early, then it should
 * just be the start of the shift.
 */
SET dutyStart = GREATEST(fullTimeIn, shiftStart);
/*
 * The official work end is the time that is considered the employee has stopped working.
 * It should be the end of the shift, unless the employee timed out early, then it should be the
 * time out.
 */
SET dutyEnd = LEAST(fullTimeOut, shiftEnd);

SET @coveredStart = IF(leaveStart IS NULL, dutyStart, LEAST(dutyStart, leaveStart));
SET @coveredEnd = IF(leaveEnd IS NULL, dutyEnd, GREATEST(dutyEnd, leaveEnd));

/******************************************************************************
 ******************************************************************************
 * Compute the Regular hours
 ******************************************************************************
 ******************************************************************************/

/*
 * Calculate the regular hours worked for the day.
 */
IF hasBreaktime THEN
    /*
     * If there is a breaktime, split the computation between the work done before breaktime,
     * and the work done after breaktime.
     */
    IF dutyStart < breaktimeStart THEN
        SET @lastWorkBeforeBreaktime = LEAST(dutyEnd, breaktimeStart);

        SET regularHoursBeforeBreak = COMPUTE_TimeDifference(TIME(dutyStart), TIME(@lastWorkBeforeBreaktime));
    END IF;

    IF dutyEnd > breaktimeEnd THEN
        /*
         * Let's make sure that we calculate the correct work hours after breaktime by ensuring that we don't choose the
         * breaktime's end when the employee started work after breaktime.
         */
        SET @workStartAfterBreaktime = GREATEST(breaktimeEnd, dutyStart);

        SET regularHoursAfterBreak = COMPUTE_TimeDifference(TIME(@workStartAfterBreaktime), TIME(dutyEnd));
    END IF;

    SET regularHours = regularHoursBeforeBreak + regularHoursAfterBreak;
ELSE
    /*
     * If there is no breaktime, just compute the time spanning from the duty start and end.
     */
    SET regularHours = COMPUTE_TimeDifference(TIME(dutyStart), TIME(dutyEnd));
END IF;

SET hasWorked = regularHours > 0;

/******************************************************************************
 ******************************************************************************
 * Compute the Late hours
 ******************************************************************************
 ******************************************************************************/

/*
 * First check if the duty start is above shift start to check if the employee is late.
 */
IF @coveredStart > shiftStart THEN

    IF hasBreaktime THEN

        IF shiftStart < breaktimeStart THEN
            /*
             * Make sure that the late period doesn't include part of the breaktime since that is not
             * part of the required work hours.
             */
            SET @latePeriodEndBeforeBreaktime = LEAST(@coveredStart, breaktimeStart);

            SET lateHoursBeforeBreak = COMPUTE_TimeDifference(TIME(shiftStart), TIME(@latePeriodEndBeforeBreaktime));
        END IF;

        IF @coveredStart > breaktimeEnd THEN
            SET lateHoursAfterBreak = COMPUTE_TimeDifference(TIME(breaktimeEnd), TIME(@coveredStart));
        END IF;

        SET lateHours = lateHoursBeforeBreak + lateHoursAfterBreak;
    ELSE
        SET lateHours = COMPUTE_TimeDifference(TIME(shiftStart), TIME(@coveredStart));
    END IF;

END IF;

/******************************************************************************
 ******************************************************************************
 * Compute the Undertime hours
 ******************************************************************************
 ******************************************************************************/

/*
 * First check if the duty ends before the shift ends to check if the employee committed undertime.
 */
IF @coveredEnd < shiftEnd THEN

    IF hasBreaktime THEN

        IF @coveredEnd < breaktimeStart THEN
            SET undertimeHoursBeforeBreak = COMPUTE_TimeDifference(TIME(@coveredEnd), TIME(breaktimeStart));
        END IF;

        /*
         * Calculate the remaining undertime that happened after breaktime.
         */
        SET @undertimePeriodStartAfterBreaktime = GREATEST(@coveredEnd, breaktimeEnd);

        SET undertimeHoursAfterBreak = COMPUTE_TimeDifference(TIME(@undertimePeriodStartAfterBreaktime), TIME(shiftEnd));

        SET undertimeHours = undertimeHoursBeforeBreak + undertimeHoursAfterBreak;
    ELSE
        SET undertimeHours = COMPUTE_TimeDifference(TIME(@coveredEnd), TIME(shiftEnd));
    END IF;

END IF;

/******************************************************************************
 ******************************************************************************
 * Compute the Night Differential hours
 ******************************************************************************
 ******************************************************************************/
SET nightDiffRangeStart = TIMESTAMP(dateToday, nightDiffTimeFrom);
SET nightDiffRangeEnd = TIMESTAMP(IF(nightDiffTimeTo > nightDiffTimeFrom, ete_Date, dateTomorrow), nightDiffTimeTo);

SET dawnNightDiffRangeStart = TIMESTAMP(dateYesterday, nightDiffTimeFrom);
SET dawnNightDiffRangeEnd = TIMESTAMP(IF(nightDiffTimeTo > nightDiffTimeFrom, dateYesterday, dateToday), nightDiffTimeTo);

SET shouldCalculateNightDifferential = (
    isNightShift AND
    isEntitledToNightDiff
);

IF shouldCalculateNightDifferential THEN
    SET nightDiffHours =
        ComputeNightDiffHours(dutyStart, dutyEnd, nightDiffRangeStart, nightDiffRangeEnd, breaktimeStart, breaktimeEnd) +
        ComputeNightDiffHours(dutyStart, dutyEnd, dawnNightDiffRangeStart, dawnNightDiffRangeEnd, breaktimeStart, breaktimeEnd);
END IF;

/******************************************************************************
 ******************************************************************************
 * Compute the Overtime and Night Differential Overtime hours
 ******************************************************************************
 ******************************************************************************/
SET hasOvertime = (otstartingtime IS NOT NULL) AND (otendingtime IS NOT NULL);

IF hasOvertime THEN

    SET overtimeDate = DATE(shiftEnd);

    SET overtimeStart = TIMESTAMP(overtimeDate, otstartingtime);
    SET overtimeEnd = TIMESTAMP(IF(otendingtime > otstartingtime, overtimeDate, dateTomorrow), otendingtime);

    SET @preShiftOvertimeHours = 0;

    /*
     * Compute the overtime hours for pre-shift work.
     */
    IF overtimeStart < shiftStart THEN

        /*
         * Ensure that the overtime hours are not calculated until the employee has clocked in.
         */
        SET overtimeDutyStart = GREATEST(overtimeStart, fullTimeIn);

        /*
         * Ensure that the overtime hours stop computing when either the overtime has ended,
         * the employee has clocked out, or the regular shift has already started.
         */
        SET overtimeDutyEnd = LEAST(overtimeEnd, fullTimeOut, shiftStart);

        SET @preShiftOvertimeHours = COMPUTE_TimeDifference(TIME(overtimeDutyStart), TIME(overtimeDutyEnd));

        IF shouldCalculateNightDifferential THEN
            SET nightDiffOTHours =
                ComputeNightDiffHours(overtimeDutyStart, overtimeDutyEnd, nightDiffRangeStart, nightDiffRangeEnd, NULL, NULL) +
                ComputeNightDiffHours(overtimeDutyStart, overtimeDutyEnd, dawnNightDiffRangeStart, dawnNightDiffRangeEnd, NULL, NULL);
        END IF;

    END IF;

    SET @postShiftOvertimeHours = 0;

    /*
     * Compute the overtime hours for post-shift work.
     */
    IF overtimeEnd > shiftEnd THEN

        SET overtimeDutyStart = LEAST(
            GREATEST(overtimeStart, fullTimeIn, shiftEnd),
            fullTimeOut
        );
        SET overtimeDutyEnd = LEAST(overtimeEnd, fullTimeOut);

        SET @postShiftOvertimeHours = COMPUTE_TimeDifference(TIME(overtimeDutyStart), TIME(overtimeDutyEnd));

        IF shouldCalculateNightDifferential THEN
            SET nightDiffOTHours = nightDiffOTHours +
                ComputeNightDiffHours(overtimeDutyStart, overtimeDutyEnd, nightDiffRangeStart, nightDiffRangeEnd, NULL, NULL) +
                ComputeNightDiffHours(overtimeDutyStart, overtimeDutyEnd, dawnNightDiffRangeStart, dawnNightDiffRangeEnd, NULL, NULL);
        END IF;

    END IF;

END IF;

SET overtimeHours = GetOvertimeHours(ete_OrganizID, ete_EmpRowID, ete_Date);

/******************************************************************************
 ******************************************************************************
 * Compute the Holiday hours
 ******************************************************************************
 ******************************************************************************/
SET hasWorkedLastWorkingDay = HasWorkedLastWorkingDay(ete_EmpRowID, dateToday);

IF isCalculatingRegularHoliday OR isCalculatingSpecialNonWorkingHoliday THEN
    SET lateHours = 0.0;
    Set undertimeHours = 0.0;

    IF isRegularHoliday THEN
        SET regularHolidayHours = regularHours;
        SET _regularHolidayOTHours = overtimeHours;
    ELSEIF isSpecialNonWorkingHoliday THEN
        SET specialHolidayHours = regularHours;
        SET _specialHolidayOTHours = overtimeHours;
    END IF;

    SET regularHours = 0.0;
    SET overtimeHours = 0.0;
END IF;

/******************************************************************************
 ******************************************************************************
 * Compute the Rest day hours
 ******************************************************************************
 ******************************************************************************/
IF isRestDay AND isEntitledToRestDay THEN
    SET restDayHours = regularHours;
    SET regularHours = 0.0;

    SET restDayOTHours = overtimeHours;
    SET overtimeHours = 0.0;

    SET undertimeHours = 0.0;
    SET lateHours = 0.0;
END IF;

/*
 * If the hours worked is in excess of the working hours, put that extra hours into
 * overtime.
 */
IF isRestDay AND (regularHours > workingHours) THEN
    SET @excessHours = regularHours - workingHours;
    SET regularHours = workingHours;

    SET overtimeHours = @excessHours;
END IF;

IF isDefaultRestDay AND (NOT hasWorked) THEN
    SET employeeShiftID = NULL;
    SET hasShift = FALSE;
END IF;

/******************************************************************************
 ******************************************************************************
 * Compute the Leave hours
 ******************************************************************************
 ******************************************************************************/
IF hasLeave THEN
    IF hasBreaktime THEN
        IF leaveStart < breaktimeStart THEN
            SET @leavePeriodEndBeforeBreaktime = LEAST(leaveEnd, breaktimeStart);

            SET leaveHoursBeforeBreak = COMPUTE_TimeDifference(TIME(leaveStart), TIME(@leavePeriodEndBeforeBreaktime));

        END IF;

        IF leaveEnd > breaktimeEnd THEN
            SET @leavePeriodStartAfterBreaktime = GREATEST(breaktimeEnd, leaveStart);

            SET leaveHoursAfterBreak = COMPUTE_TimeDifference(TIME(@leavePeriodStartAfterBreaktime), TIME(leaveEnd));

        END IF;

        SET leaveHours = leaveHoursBeforeBreak + leaveHoursAfterBreak;
    ELSE
        # SET leaveHours = COMPUTE_TimeDifference(TIME(leaveStart), TIME(leaveEnd));
        SET leaveHours = TIMESTAMPDIFF(SECOND
		                                 , CONCAT_DATETIME(ete_Date, leaveStartTime)
													, CONCAT_DATETIME(ADDDATE(ete_Date
											                                , INTERVAL IS_TIMERANGE_REACHTOMORROW(leaveStartTime, leaveEndTime) DAY)
																			, leaveEndTime)) / SECONDS_PER_HOUR;

    END IF;
END IF;

SET _basicHours = leaveHours + regularHours + regularHolidayHours + specialHolidayHours + lateHours + undertimeHours;

/******************************************************************************
 ******************************************************************************
 * Compute the Absent hours
 ******************************************************************************
 ******************************************************************************/
SET isExemptForHoliday = (
    (
        (isHoliday AND (NOT requiredToWorkLastWorkingDay)) OR
        (isHoliday AND hasWorkedLastWorkingDay)
    ) AND
    (
        isCalculatingRegularHoliday OR
        isCalculatingSpecialNonWorkingHoliday OR
        (NOT allowAbsenceOnHoliday)
    )
);

IF (NOT hasShift) OR hasWorked OR isRestDay OR isExemptForHoliday OR hasLeave THEN
    SET absentHours = 0;
ELSE
    SET absentHours = shiftHours;
END IF;

/*
 * If the employee filed a leave for a day for which the leave hours is not enough,
 * file the unaccounted hours as absent hours.
 */
IF hasLeave AND (_basicHours < shiftHours) THEN
    SET absentHours = shiftHours - _basicHours;
END IF;

/******************************************************************************
 ******************************************************************************
 * Compute the Absent hours
 ******************************************************************************
 ******************************************************************************/
SET regularHours = IFNULL(regularHours, 0);
SET overtimeHours =IFNULL(overtimeHours, 0);
SET nightDiffHours = IFNULL(nightDiffHours, 0);
SET nightDiffOTHours = IFNULL(nightDiffOTHours, 0);
SET lateHours = IFNULL(lateHours, 0);
SET undertimeHours = IFNULL(undertimeHours, 0);

SELECT RowID
FROM employeetimeentry
WHERE EmployeeID = ete_EmpRowID AND
    OrganizationID = ete_OrganizID AND
    `Date` = ete_Date
LIMIT 1
INTO timeEntryID;

SELECT RowID
FROM employeesalary
WHERE EmployeeID = ete_EmpRowID AND
    OrganizationID = ete_OrganizID AND
    ete_Date BETWEEN DATE(COALESCE(EffectiveDateFrom, DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveDateTo, ete_Date)) AND
    DATEDIFF(ete_Date,EffectiveDateFrom) >= 0
ORDER BY DATEDIFF(DATE_FORMAT(ete_Date,'%Y-%m-%d'),EffectiveDateFrom)
LIMIT 1
INTO esalRowID;

IF timeInOnly THEN
    IF actualTimeIn IS NOT NULL THEN
        SET regularHours = STANDARD_WORKING_HOURS;
        SET lateHours = 0;
        SET undertimeHours = 0;
    END IF;
END IF;

/******************************************************************************
 ******************************************************************************
 * COMPUTE PAY
 ******************************************************************************
 ******************************************************************************/
SET ndiffrate = ndiffrate - commonrate;
SET ndiffotrate = ndiffotrate - otrate;

SET _restDayNDRate = _restDayNDRate - restday_rate;
SET _restDayNDOTRate = _restDayNDOTRate - restdayot_rate;

SET dailyRate = GET_employeerateperday(ete_EmpRowID, ete_OrganizID, dateToday);
SET hourlyRate = dailyRate / workingHours;
SET basicDayPay = (regularHours + restDayHours + specialHolidayHours + regularHolidayHours) * hourlyRate;

SET absentAmount = absentHours * hourlyRate;

IF hasLeave AND isWorkingDay THEN
    SET leavePay = IFNULL(leaveHours * hourlyRate, 0);
END IF;

-- b. If current day is before employment hiring date.
IF ete_Date < e_StartDate THEN

    SET totalDayPay = 0.0;

    SELECT INSUPD_employeetimeentries(
        timeEntryID,
        ete_OrganizID,
        ete_UserRowID,
        ete_UserRowID,
        ete_Date,
        employeeShiftID,
        ete_EmpRowID,
        esalRowID,
        '0',
        regularHours,
        overtimeHours,
        undertimeHours,
        nightDiffHours,
        nightDiffOTHours,
        lateHours,
        payrateRowID,
        totalDayPay,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        NULL,
        0,
        0,
        0,
        0
    )
    INTO timeEntryID;

ELSEIF isRegularDay THEN

    IF isWorkingDay THEN
        SET regularAmount = (regularHours * hourlyRate) * commonrate;
        SET overtimeAmount = (overtimeHours * hourlyRate) * otrate;

        SET lateAmount = lateHours * hourlyRate;
        SET undertimeAmount = undertimeHours * hourlyRate;

        SET nightDiffAmount = (nightDiffHours * hourlyRate) * ndiffrate;
        SET nightDiffOTAmount = (nightDiffOTHours * hourlyRate) * ndiffotrate;
    ELSEIF isRestDay THEN

        IF isRestDayInclusive AND e_EmpType = 'Monthly' THEN
            SET restDayAmount = (restDayHours * hourlyRate) * (restday_rate - 1);
        ELSE
            SET restDayAmount = (restDayHours * hourlyRate) * restday_rate;
        END IF;

        SET overtimeAmount = (overtimeHours * hourlyRate) * restdayot_rate;

        SET nightDiffAmount = (nightDiffHours * hourlyRate) * _restDayNDRate;
        SET nightDiffOTAmount = (nightDiffOTHours * hourlyRate) * _restDayNDOTRate;
    END IF;

    SET restDayOTPay = restDayOTHours * hourlyRate * restdayot_rate;

    SET totalHours = regularHours + overtimeHours +
                     restDayHours + restDayOTHours;

    SET totalDayPay = regularAmount + overtimeAmount +
                      nightDiffAmount + nightDiffOTAmount +
                      restDayAmount + restDayOTPay +
                      leavePay;

    SELECT INSUPD_employeetimeentries(
        timeEntryID,
        ete_OrganizID,
        ete_UserRowID,
        ete_UserRowID,
        ete_Date,
        employeeShiftID,
        ete_EmpRowID,
        esalRowID,
        '0',
        regularHours,
        overtimeHours,
        undertimeHours,
        nightDiffHours,
        nightDiffOTHours,
        lateHours,
        payrateRowID,
        totalDayPay,
        totalHours,
        regularAmount,
        overtimeAmount,
        undertimeAmount,
        nightDiffAmount,
        nightDiffOTAmount,
        lateAmount,
        restDayHours,
        restDayAmount,
        restDayOTHours,
        restDayOTPay,
        specialHolidayHours,
        specialHolidayPay,
        _specialHolidayOTHours,
        _specialHolidayOTPay,
        regularHolidayHours,
        regularHolidayPay,
        _regularHolidayOTHours,
        _regularHolidayOTPay,
        0,
        basicDayPay,
        5,
        leaveType,
        leaveHours,
        leavePay,
        absentHours,
        absentAmount
    )
    INTO timeEntryID;

ELSEIF isHoliday THEN

    IF isWorkingDay THEN
        SET applicableHolidayRate = commonrate;

        SET nightDiffAmount = (nightDiffHours * hourlyRate) * ndiffrate;
        SET nightDiffOTAmount = (nightDiffOTHours * hourlyRate) * ndiffotrate;

        SET _specialHolidayOTPay = (_specialHolidayOTHours * hourlyRate) * otrate;
        SET _regularHolidayOTPay = (_regularHolidayOTHours * hourlyRate) * otrate;
    ELSEIF isRestDay THEN
        SET applicableHolidayRate = restday_rate;

        SET nightDiffAmount = (nightDiffHours * hourlyRate) * _restDayNDRate;
        SET nightDiffOTAmount = (nightDiffOTHours * hourlyRate) * _restDayNDOTRate;

        SET _specialHolidayOTPay = (_specialHolidayOTHours * hourlyRate) * restdayot_rate;
        SET _regularHolidayOTPay = (_regularHolidayOTHours * hourlyRate) * restdayot_rate;
    END IF;

    SET regularAmount = regularHours * hourlyRate;
    SET restDayAmount = restDayHours * hourlyRate * restday_rate;

    IF isCalculatingSpecialNonWorkingHoliday THEN
        SET applicableHolidayRate = IF(isHolidayPayInclusive, applicableHolidayRate - 1, applicableHolidayRate);

        SET specialHolidayPay = specialHolidayHours * hourlyRate * applicableHolidayRate;
        SET leavePay = leaveHours * hourlyRate * applicableHolidayRate;
    END IF;

    IF isCalculatingRegularHoliday THEN
        SET regularHolidayPay = regularHolidayHours * hourlyRate * (applicableHolidayRate - 1);
        SET leavePay = leaveHours * hourlyRate;

        IF _holidayCalculationType = 'Hourly' THEN
            SET _basicHolidayPay = shiftHours * hourlyRate;
        ELSE
            SET _basicHolidayPay = dailyRate;
        END IF;

        IF NOT isHolidayPayInclusive THEN
            SET regularHolidayPay = regularHolidayPay + IF(
                (hasWorkedLastWorkingDay OR (NOT $requireWorkLastDayForFullPay)),
                _basicHolidayPay,
                0);
        END IF;
    END IF;

    SET holidayPay = specialHolidayPay + regularHolidayPay;

    /** DEPRECATE: to be replaced with _special and _regular holiday ot pay */
    SET overtimeAmount = (overtimeHours * hourlyRate) * otrate;

    SET restDayOTPay = (restDayOTHours * hourlyRate) * restdayot_rate;

    SET totalDayPay = COALESCE(regularAmount, 0) +
                      COALESCE(overtimeAmount, 0) +
                      COALESCE(nightDiffAmount, 0) +
                      COALESCE(nightDiffOTAmount, 0) +
                      COALESCE(restDayOTPay, 0) +
                      COALESCE(_specialHolidayOTPay, 0) +
                      COALESCE(_regularHolidayOTPay, 0) +
                      COALESCE(holidayPay, 0) +
                      COALESCE(leavePay, 0);

    SELECT INSUPD_employeetimeentries(
        timeEntryID,
        ete_OrganizID,
        ete_UserRowID,
        ete_UserRowID,
        ete_Date,
        employeeShiftID,
        ete_EmpRowID,
        esalRowID,
        '0',
        regularHours,
        overtimeHours,
        undertimeHours,
        nightDiffHours,
        nightDiffOTHours,
        lateHours,
        payrateRowID,
        totalDayPay,
        regularHours + overtimeHours,
        regularAmount,
        overtimeAmount,
        (undertimeHours * hourlyRate),
        nightDiffAmount,
        nightDiffOTAmount,
        (lateHours * hourlyRate),
        restDayHours,
        restDayAmount,
        restDayOTHours,
        restDayOTPay,
        specialHolidayHours,
        specialHolidayPay,
        _specialHolidayOTHours,
        _specialHolidayOTPay,
        regularHolidayHours,
        regularHolidayPay,
        _regularHolidayOTHours,
        _regularHolidayOTPay,
        holidayPay,
        basicDayPay,
        7,
        leaveType,
        leaveHours,
        leavePay,
        absentHours,
        absentAmount
    )
    INTO timeEntryID;

END IF;

SET returnvalue = timeEntryID;

RETURN yes_true;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GetActualDailyRate
DROP FUNCTION IF EXISTS `GetActualDailyRate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GetActualDailyRate`(`EmpID` INT, `OrgID` INT, `paramDate` DATE) RETURNS decimal(15,4)
    DETERMINISTIC
BEGIN

DECLARE PAYFREQUENCY_SEMIMONTHLY INT(11) DEFAULT 1;
DECLARE PAYFREQUENCY_MONTHLY INT(11) DEFAULT 2;
DECLARE PAYFREQUENCY_DAILY INT(11) DEFAULT 3;
DECLARE PAYFREQUENCY_WEEKLY INT(11) DEFAULT 4;

DECLARE hoursofduty DECIMAL(10,4);

DECLARE empBasicPay DECIMAL(15, 4);
DECLARE dailyrate DECIMAL(15, 4);

DECLARE numofweekthisyear INT(11) DEFAULT 53;

DECLARE shiftRowID INT(11);

DECLARE PayFreqID INT(11);

DECLARE emptype VARCHAR(100);

DECLARE _workDaysPerYear DECIMAL(10, 4);
DECLARE workDaysInMonth DECIMAL(10, 4);

DECLARE basicSalary DECIMAL(15, 4);
DECLARE allowanceSalary DECIMAL(15, 4);
DECLARE fullSalary DECIMAL(15, 4);

DECLARE month_count_peryear INT(11) DEFAULT 12;

SELECT ShiftID
FROM employeeshift
WHERE EmployeeID = EmpID AND
    OrganizationID = OrgID AND
    paramDate BETWEEN DATE(COALESCE(EffectiveFrom, DATE_FORMAT(CURRENT_TIMESTAMP(), '%Y-%m-%d'))) AND DATE(COALESCE(EffectiveTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 3 MONTH))) AND
    DATEDIFF(paramDate, EffectiveFrom) >= 0 AND
    COALESCE(RestDay, 0) = 0
ORDER BY DATEDIFF(DATE_FORMAT(paramDate, '%Y-%m-%d'), EffectiveFrom)
LIMIT 1
INTO shiftRowID;

SELECT COMPUTE_TimeDifference(TimeFrom, TimeTo) * 1.0
FROM shift
WHERE RowID = shiftRowID
INTO hoursofduty;

IF hoursofduty > 8.00 OR hoursofduty IS NULL OR hoursofduty <= 0 THEN
    IF hoursofduty IS NULL THEN
        SET hoursofduty = 8;
    ELSE
        SET hoursofduty = hoursofduty - 1;
    END IF;
END IF;

SELECT
    BasicPay * 1.0,
    Salary * 1.0,
    UndeclaredSalary
FROM employeesalary
WHERE EmployeeID = EmpID AND
    OrganizationID = OrgID AND
    paramDate BETWEEN EffectiveDateFrom AND IFNULL(EffectiveDateTo,paramDate) AND
    DATEDIFF(paramDate,EffectiveDateFrom) >= 0
ORDER BY DATEDIFF(DATE_FORMAT(paramDate,'%Y-%m-%d'), EffectiveDateFrom)
LIMIT 1
INTO
    empBasicPay,
    basicSalary,
    allowanceSalary;

SET fullSalary = basicSalary + allowanceSalary;

SET empBasicPay = COALESCE(empBasicPay, 0);

SELECT
    PayFrequencyID,
    EmployeeType,
    WorkDaysPerYear
FROM employee
WHERE RowID = EmpID
INTO
    PayFreqID,
    emptype,
    _workDaysPerYear;

SELECT
    PayFrequencyID,
    WEEKOFYEAR(LAST_DAY(CONCAT(YEAR(paramDate), '-12-01')))
FROM organization
WHERE RowID = OrgID
INTO
    PayFreqID,
    numofweekthisyear;

IF emptype IN ('Fixed', 'Monthly') THEN

    IF PayFreqID = PAYFREQUENCY_SEMIMONTHLY THEN

        SET workDaysInMonth = _workDaysPerYear / 12.0;

        SET dailyrate = fullSalary / workDaysInMonth;

    ELSEIF PayFreqID = PAYFREQUENCY_MONTHLY THEN

        SELECT (basicSalary / (e.WorkDaysPerYear / month_count_peryear)) `Result`
        FROM employee e
        WHERE e.RowID = EmpID
        INTO dailyrate;

    ELSEIF PayFreqID = PAYFREQUENCY_DAILY THEN

        SET dailyrate = empBasicPay;

    ELSEIF PayFreqID = PAYFREQUENCY_WEEKLY THEN

        SET dailyrate = IF(
            DAY(
                LAST_DAY(
                    ADDDATE(
                        MAKEDATE(YEAR(paramDate), 1),
                        INTERVAL 1 MONTH
                    )
                )
            ) <= 28,
            (empBasicPay * numofweekthisyear) / _workDaysPerYear,
            (empBasicPay * numofweekthisyear) / (_workDaysPerYear + 1)
        );

    END IF;

ELSEIF emptype = 'Daily' THEN

    SET dailyrate = fullSalary;

ELSEIF emptype = 'Hourly' THEN

    SET dailyrate = empBasicPay * hoursofduty;

END IF;

RETURN dailyrate;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GetBasicPay
DROP FUNCTION IF EXISTS `GetBasicPay`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GetBasicPay`(`employeeID` INT, `payDateFrom` DATE, `payDateTo` DATE, `isActual` TINYINT(1), `workHours` DECIMAL(10, 4)) RETURNS decimal(15,4)
    DETERMINISTIC
BEGIN

DECLARE PAYFREQUENCY_SEMIMONTHLY INT(11) DEFAULT 1;
DECLARE PAYFREQUENCY_MONTHLY INT(11) DEFAULT 2;
DECLARE PAYFREQUENCY_DAILY INT(11) DEFAULT 3;
DECLARE PAYFREQUENCY_WEEKLY INT(11) DEFAULT 4;

DECLARE MONTHS_IN_YEAR INT(10) DEFAULT 12;
DECLARE SEMIMONTHLY_PAYPERIODS_PER_MONTH INT(10) DEFAULT 2;

DECLARE salary DECIMAL(15, 4) DEFAULT 0.0;
DECLARE workDaysPerYear INT(10) DEFAULT 0;
DECLARE workDaysPerMonth DECIMAL(10, 4);
DECLARE workDaysPerPayPeriod DECIMAL(10, 4);
DECLARE employeeType VARCHAR(50);
DECLARE payFrequency INT(10) DEFAULT 0;

SELECT
    ee.EmployeeType,
    ee.PayFrequencyID,
    ee.WorkDaysPerYear
FROM employee ee
WHERE ee.RowID = employeeID
INTO
    employeeType,
    payFrequency,
    workDaysPerYear;

SELECT IF(
    isActual,
    es.TrueSalary,
    es.Salary
)
FROM employeesalary es
WHERE es.EmployeeID = employeeID AND
    (
        ((es.EffectiveDateTo IS NULL) AND payDateFrom > es.EffectiveDateFrom) OR
        (
            payDateFrom BETWEEN es.EffectiveDateFrom AND es.EffectiveDateTo OR
            payDateTo BETWEEN es.EffectiveDateFrom AND es.EffectiveDateTo
        )
    )
ORDER BY es.EffectiveDateFrom DESC, es.EffectiveDateTo
LIMIT 1
INTO salary;

IF (employeeType = 'Monthly') OR (employeeType = 'Fixed') THEN

    IF payFrequency = PAYFREQUENCY_MONTHLY THEN
        RETURN salary;
    ELSEIF payFrequency = PAYFREQUENCY_SEMIMONTHLY THEN
        RETURN salary / SEMIMONTHLY_PAYPERIODS_PER_MONTH;
    ELSEIF payFrequency = PAYFREQUENCY_WEEKLY THEN
        SIGNAL SQLSTATE '01000'
            SET MESSAGE_TEXT = '`GetBasicPay()` has not been implemented for weekly pay frequency of monthly/fixed employees.';
    ELSEIF payFrequency = PAYFREQUENCY_DAILY THEN
        SIGNAL SQLSTATE '01000'
            SET MESSAGE_TEXT = '`GetBasicPay()` has not been implemented for daily pay frequency of monthly/fixed employees.';
    END IF;

ELSEIF employeeType = 'Daily' THEN

    SET workDaysPerMonth = workDaysPerYear / MONTHS_IN_YEAR;

    IF payFrequency = PAYFREQUENCY_MONTHLY THEN
        RETURN (salary / 8) * workHours;
    ELSEIF payFrequency = PAYFREQUENCY_SEMIMONTHLY THEN
        SET workDaysPerPayPeriod = workDaysPerMonth / SEMIMONTHLY_PAYPERIODS_PER_MONTH;

        RETURN (salary / 8) * workHours;
    ELSEIF payFrequency = PAYFREQUENCY_WEEKLY THEN
	     
        RETURN (salary / 8) * workHours;
        /*SIGNAL SQLSTATE '01000'
            SET MESSAGE_TEXT = '`GetBasicPay()` has not been implemented for weekly pay frequency of daily employees.';*/
    ELSEIF payFrequency = PAYFREQUENCY_DAILY THEN
        SIGNAL SQLSTATE '01000'
            SET MESSAGE_TEXT = '`GetBasicPay()` has not been implemented for daily pay frequency of daily employees.';
    END IF;

END IF;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GetListOfValueOrDefault
DROP FUNCTION IF EXISTS `GetListOfValueOrDefault`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GetListOfValueOrDefault`(
	`$Type` VARCHAR(50),
	`$LIC` VARCHAR(50),
	`$Default` VARCHAR(50)
) RETURNS varchar(50) CHARSET utf8
BEGIN

    DECLARE $displayValue VARCHAR(50);

    SELECT l.DisplayValue
    FROM listofval l
    WHERE l.`Type` = $Type AND
        l.LIC = $LIC
    LIMIT 1
    INTO $displayValue;
    
    RETURN IF(ISNULL($displayValue), $Default, $displayValue);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GetOvertimeHours
DROP FUNCTION IF EXISTS `GetOvertimeHours`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GetOvertimeHours`(`org_rowid` INT, `emp_rowid` INT, `param_date` daTE) RETURNS decimal(15,4)
    DETERMINISTIC
BEGIN

DECLARE approve_status VARCHAR(50) DEFAULT 'Approved';

DECLARE sec_per_hour INT(11) DEFAULT 3600;

DECLARE returnvalue
        ,returnvalue1 DECIMAL(15,4);

DECLARE datetime1
        ,datetime2
        
        ,datetime3
        ,datetime4
        
        ,datetime5
        ,datetime6 DATETIME;

DECLARE row_ids VARCHAR(255);


SET @_istrue = FALSE;
SET @_istrue1 = FALSE;

SET @shstarttime = NULL;
SET @shstarttime1 = NULL;

SET @shendtime = NULL;
SET @shendtime1 = NULL;

SET @starttime = NULL;
SET @starttime1 = NULL;

SET @endtime = NULL;
SET @endtime1 = NULL;

/* PRE SHIFT OVERTIME */
SELECT SUM(i.`Result`)
, GROUP_CONCAT(i.RowID)
# SELECT i.*
FROM (
      SELECT ot.*
      FROM (SELECT
				ot.RowID, 'Query1' `Group`, d.DateValue,

				@shstarttime := CONCAT_DATETIME(d.DateValue, sh.TimeFrom) `ShiftTimeFrom`
				,@shendtime := CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL IS_TIMERANGE_REACHTOMORROW(sh.TimeFrom, sh.TimeTo) DAY), sh.TimeTo) `ShiftTimeTo`

				,@starttime := IF(sh.TimeFrom >= ot.OTStartTime
									  AND sh.TimeFrom >= IFNULL(ot.OTEndTime, sh.TimeFrom)
									  
											 , CONCAT_DATETIME(DATE(@shstarttime), ot.OTStartTime)
											 , IF(sh.TimeTo <= ot.OTStartTime
								      AND sh.TimeTo <= IFNULL(ot.OTEndTime, sh.TimeFrom)
									  
									  , CONCAT_DATETIME(DATE(@shendtime), ot.OTStartTime)
									  , CONCAT_DATETIME(d.DateValue, ot.OTStartTime)))
				`StartTime`
				,@endtime := IF(sh.TimeFrom >= ot.OTStartTime
									  AND sh.TimeFrom >= IFNULL(ot.OTEndTime, sh.TimeFrom)
									  
											 , CONCAT_DATETIME(DATE(@shstarttime), IFNULL(ot.OTEndTime, sh.TimeFrom))
											 , IF(sh.TimeTo <= ot.OTStartTime
								    AND sh.TimeTo <= IFNULL(ot.OTEndTime, sh.TimeFrom)
									  
									  , CONCAT_DATETIME(DATE(@shendtime), IFNULL(ot.OTEndTime, sh.TimeFrom))
							  
									  , CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL IS_TIMERANGE_REACHTOMORROW(ot.OTStartTime, IFNULL(ot.OTEndTime, sh.TimeFrom)) DAY), IFNULL(ot.OTEndTime, sh.TimeFrom)))
											 )
				`EndTime`

				, @g := DATE_FORMAT(GREATEST(etd.TimeStampIn, TIMESTAMP(@starttime)), @@datetime_format) `G`
				, @l := DATE_FORMAT(LEAST(etd.TimeStampOut, TIMESTAMP(@endtime)), @@datetime_format) `L`

				,   (TIMESTAMPDIFF(SECOND
								   , TIMESTAMP(@g)
										 , TIMESTAMP(@l)
										 ) / sec_per_hour) `Result`

				,ot.OTStartTime
				,IFNULL(ot.OTEndTime, sh.TimeFrom)

				,sh.TimeFrom
				,sh.TimeTo

				,etd.TimeStampIn
				,etd.TimeStampOut

				,( @_istrue := STR_TO_DATE(DATE(@shstarttime), @@date_format) < STR_TO_DATE(DATE(@shendtime), @@date_format) ) `CustomColumn`

				FROM employeeovertime ot

				INNER JOIN dates d
						ON d.DateValue BETWEEN ot.OTStartDate AND ot.OTEndDate
						
				INNER JOIN employeeshift esh
						ON esh.EmployeeID=ot.EmployeeID
							 AND esh.OrganizationID=ot.OrganizationID
							 AND d.DateValue BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
							 
				INNER JOIN shift sh
						ON sh.RowID=esh.ShiftID
				INNER JOIN employeetimeentrydetails etd
						ON etd.EmployeeID=ot.EmployeeID
						   AND etd.OrganizationID=ot.OrganizationID
						   AND etd.`Date`=d.DateValue
						   
				WHERE ot.EmployeeID = emp_rowid
				AND ot.OrganizationID = org_rowid
				AND ot.OTStatus = approve_status
				AND param_date BETWEEN ot.OTStartDate AND ot.OTEndDate
				# AND @_istrue = TRUE

			UNION

				SELECT
				ot.RowID, 'Query2' `Group`, d.DateValue,

				@shstarttime1 := CONCAT_DATETIME(d.DateValue, sh.TimeFrom) `ShiftTimeFrom`
				,@shendtime1 := CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL IS_TIMERANGE_REACHTOMORROW(sh.TimeFrom, sh.TimeTo) DAY), sh.TimeTo) `ShiftTimeTo`

				,@starttime1 := IF(sh.TimeFrom >= ot.OTStartTime
									  AND sh.TimeFrom >= IFNULL(ot.OTEndTime, sh.TimeFrom)
									  
											 , CONCAT_DATETIME(DATE(@shstarttime1), ot.OTStartTime)
											 , IF(sh.TimeTo <= ot.OTStartTime
								      AND sh.TimeTo <= IFNULL(ot.OTEndTime, sh.TimeFrom)
									  
									  , CONCAT_DATETIME(DATE(@shendtime1), ot.OTStartTime)
									  , CONCAT_DATETIME(d.DateValue, ot.OTStartTime)))
				`StartTime`
				,@endtime1 := IF(sh.TimeFrom >= ot.OTStartTime
									  AND sh.TimeFrom >= IFNULL(ot.OTEndTime, sh.TimeFrom)
									  
											 , CONCAT_DATETIME(DATE(@shstarttime1), IFNULL(ot.OTEndTime, sh.TimeFrom))
											 , IF(sh.TimeTo <= ot.OTStartTime
								    AND sh.TimeTo <= IFNULL(ot.OTEndTime, sh.TimeFrom)
									  
									  , CONCAT_DATETIME(DATE(@shendtime1), IFNULL(ot.OTEndTime, sh.TimeFrom))
							  
									  , CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL IS_TIMERANGE_REACHTOMORROW(ot.OTStartTime, IFNULL(ot.OTEndTime, sh.TimeFrom)) DAY), IFNULL(ot.OTEndTime, sh.TimeFrom)))
											 )
				`EndTime`

				, @g := DATE_FORMAT(GREATEST(etd.TimeStampIn, TIMESTAMP(@starttime1)), @@datetime_format) `G`
				, @l := DATE_FORMAT(LEAST(etd.TimeStampOut, TIMESTAMP(@endtime1)), @@datetime_format) `L`

				,   (TIMESTAMPDIFF(SECOND
								   , TIMESTAMP(@g)
										 , TIMESTAMP(@l)
										 ) / sec_per_hour) `Result`

				,ot.OTStartTime
				,IFNULL(ot.OTEndTime, sh.TimeFrom)

				,sh.TimeFrom
				,sh.TimeTo

				,etd.TimeStampIn
				,etd.TimeStampOut

				,( @_istrue1 := STR_TO_DATE(DATE(@shstarttime1), @@date_format) = STR_TO_DATE(DATE(@shendtime1), @@date_format) ) `CustomColumn`

				FROM employeeovertime ot

				INNER JOIN dates d
						ON d.DateValue BETWEEN ot.OTStartDate AND ot.OTEndDate
						
				INNER JOIN employeeshift esh
						ON esh.EmployeeID=ot.EmployeeID
							 AND esh.OrganizationID=ot.OrganizationID
							 AND d.DateValue BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
							 
				INNER JOIN shift sh
						ON sh.RowID=esh.ShiftID
				INNER JOIN employeetimeentrydetails etd
						ON etd.EmployeeID=ot.EmployeeID
						   AND etd.OrganizationID=ot.OrganizationID
						   AND etd.`Date`=d.DateValue
						   
				WHERE ot.EmployeeID = emp_rowid
				AND ot.OrganizationID = org_rowid
				AND ot.OTStatus = approve_status
				AND param_date BETWEEN ot.OTStartDate AND ot.OTEndDate
				# AND @_istrue1 = TRUE
		      ) ot
		WHERE ot.`Result` > 0
		GROUP BY ot.RowID
		ORDER BY ot.DateValue) i

# WHERE i.`CustomColumn` = TRUE
HAVING SUM(i.`Result`) > 0
INTO returnvalue
     ,row_ids
;

# ##############################################################################

/* POST SHIFT OVERTIME */
SELECT SUM(i.`Result`)
# SELECT i.*
FROM (
      SELECT ot.*
      FROM (SELECT
				ot.RowID, 'Query1' `Group`, d.DateValue,

				@shstarttime := CONCAT_DATETIME(d.DateValue, sh.TimeFrom) `ShiftTimeFrom`
				,@shendtime := CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL IS_TIMERANGE_REACHTOMORROW(sh.TimeFrom, sh.TimeTo) DAY), sh.TimeTo) `ShiftTimeTo`

				,@starttime := IF(sh.TimeTo <= IFNULL(ot.OTStartTime, sh.TimeTo)
								      AND sh.TimeTo <= ot.OTEndTime
									  
									  , CONCAT_DATETIME(DATE(@shendtime), IFNULL(ot.OTStartTime, sh.TimeTo))
									  , IF(sh.TimeFrom >= IFNULL(ot.OTStartTime, sh.TimeTo)
									  AND sh.TimeFrom >= ot.OTEndTime
									  
											 , CONCAT_DATETIME(DATE(@shstarttime), IFNULL(ot.OTStartTime, sh.TimeTo))
											 , CONCAT_DATETIME(d.DateValue, IFNULL(ot.OTStartTime, sh.TimeTo))))
				`StartTime`
				,@endtime := IF(sh.TimeTo <= IFNULL(ot.OTStartTime, sh.TimeTo)
								    AND sh.TimeTo <= ot.OTEndTime
									  
									  , CONCAT_DATETIME(DATE(@shendtime), ot.OTEndTime)
									  , IF(sh.TimeFrom >= IFNULL(ot.OTStartTime, sh.TimeTo)
									  AND sh.TimeFrom >= ot.OTEndTime
									  
											 , CONCAT_DATETIME(DATE(@shstarttime), ot.OTEndTime)
											 , CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL IS_TIMERANGE_REACHTOMORROW(IFNULL(ot.OTStartTime, sh.TimeTo), ot.OTEndTime) DAY), ot.OTEndTime)))
				`EndTime`

				, @g := DATE_FORMAT(GREATEST(etd.TimeStampIn, TIMESTAMP(@starttime)), @@datetime_format) `G`
				, @l := DATE_FORMAT(LEAST(etd.TimeStampOut, TIMESTAMP(@endtime)), @@datetime_format) `L`

				,   (TIMESTAMPDIFF(SECOND
								   , TIMESTAMP(@g)
										 , TIMESTAMP(@l)
										 ) / 3600) `Result`

				,IFNULL(ot.OTStartTime, sh.TimeTo)
				,ot.OTEndTime

				,sh.TimeFrom
				,sh.TimeTo

				,etd.TimeStampIn
				,etd.TimeStampOut

				,( @_istrue := STR_TO_DATE(DATE(@shstarttime), @@date_format) < STR_TO_DATE(DATE(@shendtime), @@date_format) ) `CustomColumn`

				FROM employeeovertime ot

				INNER JOIN dates d
						ON d.DateValue BETWEEN ot.OTStartDate AND ot.OTEndDate
						
				INNER JOIN employeeshift esh
						ON esh.EmployeeID=ot.EmployeeID
							 AND esh.OrganizationID=ot.OrganizationID
							 AND d.DateValue BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
							 
				INNER JOIN shift sh
						ON sh.RowID=esh.ShiftID
				INNER JOIN employeetimeentrydetails etd
						ON etd.EmployeeID=ot.EmployeeID
						   AND etd.OrganizationID=ot.OrganizationID
						   AND etd.`Date`=d.DateValue
						   
				WHERE ot.EmployeeID = emp_rowid
				AND ot.OrganizationID = org_rowid
				AND ot.OTStatus = approve_status
				AND param_date BETWEEN ot.OTStartDate AND ot.OTEndDate
				# AND @_istrue = TRUE

			UNION

				SELECT
				ot.RowID, 'Query2' `Group`, d.DateValue,

				@shstarttime1 := CONCAT_DATETIME(d.DateValue, sh.TimeFrom) `ShiftTimeFrom`
				,@shendtime1 := CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL IS_TIMERANGE_REACHTOMORROW(sh.TimeFrom, sh.TimeTo) DAY), sh.TimeTo) `ShiftTimeTo`

				,@starttime1 := IF(sh.TimeTo <= IFNULL(ot.OTStartTime, sh.TimeTo)
								      AND sh.TimeTo <= ot.OTEndTime
									  
									  , CONCAT_DATETIME(DATE(@shendtime1), IFNULL(ot.OTStartTime, sh.TimeTo))
									  , IF(sh.TimeFrom >= IFNULL(ot.OTStartTime, sh.TimeTo)
									  AND sh.TimeFrom >= ot.OTEndTime
									  
											 , CONCAT_DATETIME(DATE(@shstarttime1), IFNULL(ot.OTStartTime, sh.TimeTo))
											 , CONCAT_DATETIME(d.DateValue, IFNULL(ot.OTStartTime, sh.TimeTo))))
				`StartTime`
				,@endtime1 := IF(sh.TimeTo <= IFNULL(ot.OTStartTime, sh.TimeTo)
								    AND sh.TimeTo <= ot.OTEndTime
									  
									  , CONCAT_DATETIME(DATE(@shendtime1), ot.OTEndTime)
									  , IF(sh.TimeFrom >= IFNULL(ot.OTStartTime, sh.TimeTo)
									  AND sh.TimeFrom >= ot.OTEndTime
									  
											 , CONCAT_DATETIME(DATE(@shstarttime1), ot.OTEndTime)
											 , CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL IS_TIMERANGE_REACHTOMORROW(IFNULL(ot.OTStartTime, sh.TimeTo), ot.OTEndTime) DAY), ot.OTEndTime)))
				`EndTime`

				, @g := DATE_FORMAT(GREATEST(etd.TimeStampIn, TIMESTAMP(@starttime1)), @@datetime_format) `G`
				, @l := DATE_FORMAT(LEAST(etd.TimeStampOut, TIMESTAMP(@endtime1)), @@datetime_format) `L`

				,   (TIMESTAMPDIFF(SECOND
								   , TIMESTAMP(@g)
										 , TIMESTAMP(@l)
										 ) / 3600) `Result`

				,IFNULL(ot.OTStartTime, sh.TimeTo)
				,ot.OTEndTime

				,sh.TimeFrom
				,sh.TimeTo

				,etd.TimeStampIn
				,etd.TimeStampOut

				,( @_istrue1 := STR_TO_DATE(DATE(@shstarttime1), @@date_format) = STR_TO_DATE(DATE(@shendtime1), @@date_format) ) `CustomColumn`

				FROM employeeovertime ot

				INNER JOIN dates d
						ON d.DateValue BETWEEN ot.OTStartDate AND ot.OTEndDate
						
				INNER JOIN employeeshift esh
						ON esh.EmployeeID=ot.EmployeeID
							 AND esh.OrganizationID=ot.OrganizationID
							 AND d.DateValue BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
							 
				INNER JOIN shift sh
						ON sh.RowID=esh.ShiftID
				INNER JOIN employeetimeentrydetails etd
						ON etd.EmployeeID=ot.EmployeeID
						   AND etd.OrganizationID=ot.OrganizationID
						   AND etd.`Date`=d.DateValue
						   
				WHERE ot.EmployeeID = emp_rowid
				AND ot.OrganizationID = org_rowid
				AND ot.OTStatus = approve_status
				AND param_date BETWEEN ot.OTStartDate AND ot.OTEndDate
		      ) ot
		WHERE ot.`Result` > 0
		GROUP BY ot.RowID
		ORDER BY ot.DateValue) i

WHERE FIND_IN_SET(i.RowID, IFNULL(row_ids, '')) = 0
HAVING SUM(i.`Result`) > 0
INTO returnvalue1
;

# ##############################################################################

RETURN ( IFNULL(returnvalue, 0) + IFNULL(returnvalue1, 0) );

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GetPayPeriodsPerMonth
DROP FUNCTION IF EXISTS `GetPayPeriodsPerMonth`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GetPayPeriodsPerMonth`(
	`$PayFrequencyID` INT






) RETURNS int(11)
BEGIN

	
	IF $PayFrequencyID = 1 THEN
		RETURN 2;
	ELSE
		RETURN NULL;
	END IF;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_dateonly_in_datetime
DROP FUNCTION IF EXISTS `GET_dateonly_in_datetime`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `GET_dateonly_in_datetime`(`ParamDateTime` DATETIME) RETURNS date
    DETERMINISTIC
BEGIN

DECLARE returnvalue DATE;

SET returnvalue = DATE_FORMAT(ParamDateTime,'%Y-%m-%d');

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_employeeallowance
DROP FUNCTION IF EXISTS `GET_employeeallowance`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_employeeallowance`(`payp_From` DATE, `payp_To` DATE, `EmployeeRowID` INT, `OrganizationRowID` INT, `Taxable` VARCHAR(1), `Frequency` VARCHAR(50)) RETURNS decimal(10,2)
    DETERMINISTIC
BEGIN

DECLARE date_diff INT(11);

DECLARE dayofwik DATE;

DECLARE dateloop DATE;

DECLARE emphourworked DECIMAL(10,2) DEFAULT 0;

DECLARE dutyhours DECIMAL(10,2) DEFAULT 0;

DECLARE empallowancecount INT(11);

DECLARE empallowanceamounts DECIMAL(10,2) DEFAULT 0;

DECLARE totalAllowanceWork DECIMAL(10,2) DEFAULT 0;

DECLARE indx INT(11) DEFAULT 0;

DECLARE ii INT(11) DEFAULT 0;

SELECT DATEDIFF(payp_To,payp_From) INTO date_diff;

indx_loop : LOOP

    IF indx < date_diff THEN

        SELECT ADDDATE(payp_From,INTERVAL indx DAY) INTO dateloop;

        SELECT ((TIME_TO_SEC(TIMEDIFF(IF(TimeIn>TimeOut,ADDTIME(TimeOut,'24:00:00'),TimeOut),TimeIn)) / 60) / 60) 'HrsWorked' FROM employeetimeentrydetails WHERE EmployeeID=EmployeeRowID AND OrganizationID=OrganizationRowID AND Date=dateloop INTO emphourworked;

        SET emphourworked = IF(emphourworked IS NULL, 0, IFNULL(emphourworked,0));

        IF emphourworked != 0 THEN

            SELECT ((TIME_TO_SEC(TIMEDIFF(IF(sh.TimeFrom>sh.TimeTo,ADDTIME(sh.TimeTo,'24:00:00'),sh.TimeTo),sh.TimeFrom)) / 60) / 60) 'DutyHrs' FROM employeeshift esh LEFT JOIN shift sh ON sh.RowID=esh.ShiftID WHERE esh.EmployeeID=EmployeeRowID AND esh.OrganizationID=OrganizationRowID AND dateloop BETWEEN DATE(COALESCE(esh.EffectiveFrom, DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(esh.EffectiveTo, ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) AND DATEDIFF(dateloop,esh.EffectiveFrom) >= 0 AND COALESCE(esh.RestDay,0)='0' ORDER BY DATEDIFF(DATE_FORMAT(dateloop,'%Y-%m-%d'),esh.EffectiveFrom) LIMIT 1 INTO dutyhours;

            SET dutyhours = IF(dutyhours IS NULL, 0, IFNULL(dutyhours,0));

            SET dutyhours = IF(dutyhours > 8, (dutyhours - 1), dutyhours);


            IF dutyhours != 0 THEN

                    SELECT COUNT(RowID) FROM employeeallowance WHERE EmployeeID=EmployeeRowID AND OrganizationID=OrganizationRowID AND TaxableFlag=Taxable AND AllowanceFrequency=Frequency AND dateloop BETWEEN EffectiveStartDate AND EffectiveEndDate INTO empallowancecount;

                    IF empallowancecount != 0 THEN

                        countallowance : LOOP

                                IF ii < empallowancecount THEN


                                    SELECT IFNULL(AllowanceAmount,0) FROM employeeallowance WHERE EmployeeID=EmployeeRowID AND OrganizationID=OrganizationRowID AND TaxableFlag=Taxable AND AllowanceFrequency=Frequency AND dateloop BETWEEN EffectiveStartDate AND EffectiveEndDate ORDER BY EffectiveStartDate LIMIT ii,1 INTO empallowanceamounts;

                                    SET empallowanceamounts = IFNULL(empallowanceamounts,0);


                                    SET totalAllowanceWork = totalAllowanceWork + ((empallowanceamounts / dutyhours) * emphourworked);


                                    SET ii = ii + 1;

                                ELSE

                                    LEAVE countallowance;

                                END IF;


                        END LOOP;

                    END IF;


            END IF;


        END IF;

        SET ii = 0;

        SET indx = indx  + 1;

    ELSE

        LEAVE indx_loop;

    END IF;

END LOOP;

RETURN totalAllowanceWork;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_employeeallowancePerDay
DROP FUNCTION IF EXISTS `GET_employeeallowancePerDay`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_employeeallowancePerDay`(`OrganizID` INT, `EmpRowID` INT, `IsTaxable` CHAR(1), `PayPeriod_To` DATE) RETURNS decimal(11,4)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,4) DEFAULT 0.0;

DECLARE og_WorkDayPerYear INT(11);

DECLARE og_dayCountPerMonth DECIMAL(11,4);

DECLARE og_dayCountPerSemiMonth DECIMAL(11,4);



    SELECT GET_empworkdaysperyear(EmpRowID) INTO og_WorkDayPerYear;

    SET og_dayCountPerMonth = og_WorkDayPerYear / 12;

    SET og_dayCountPerMonth = og_dayCountPerMonth / 2;



SELECT
SUM(TotalAllowanceAmount)
FROM
(
    SELECT
    EmployeeID
    ,AllowanceAmount AS TotalAllowanceAmount
    FROM employeeallowance
    WHERE AllowanceFrequency IN ('Daily','One time')
    AND OrganizationID=OrganizID
    AND EmployeeID=EmpRowID
    AND TaxableFlag=IsTaxable
    AND PayPeriod_To BETWEEN EffectiveStartDate AND EffectiveEndDate
UNION
    SELECT
    EmployeeID
    ,(AllowanceAmount / og_dayCountPerMonth) AS TotalAllowanceAmount
    FROM employeeallowance WHERE
    AllowanceFrequency='Monthly'
    AND OrganizationID=OrganizID
    AND EmployeeID=EmpRowID
    AND TaxableFlag=IsTaxable
    AND PayPeriod_To BETWEEN EffectiveStartDate AND EffectiveEndDate
UNION
    SELECT
    EmployeeID
    ,(AllowanceAmount / og_dayCountPerMonth) AS TotalAllowanceAmount
    FROM employeeallowance
    WHERE AllowanceFrequency='Semi-monthly'
    AND OrganizationID=OrganizID
    AND EmployeeID=EmpRowID
    AND TaxableFlag=IsTaxable
    AND PayPeriod_To BETWEEN EffectiveStartDate AND EffectiveEndDate
) employeeallowanceperday
GROUP BY EmployeeID
INTO returnvalue;




RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_employeedaysworked_indate
DROP FUNCTION IF EXISTS `GET_employeedaysworked_indate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_employeedaysworked_indate`(`employee_ID` INT, `d_from` DATE, `d_to` DATE, `organiz_ID` INT) RETURNS decimal(10,2)
    DETERMINISTIC
BEGIN

DECLARE returnval DECIMAL(10,2) DEFAULT 0;

SELECT COUNT(uni_ete.RowID)
FROM (SELECT ete.RowID
        FROM employeetimeentry ete
        LEFT JOIN employeeshift esh ON esh.RowID=ete.EmployeeShiftID
        WHERE ete.EmployeeID=employee_ID
        AND ete.OrganizationID=organiz_ID
        AND ete.Date BETWEEN d_from AND d_to
        AND esh.RestDay='0'
        AND ete.TotalDayPay!=0
            UNION ALL
        SELECT ete.RowID
        FROM employeetimeentry ete
        LEFT JOIN payrate pr ON pr.Date=ete.Date AND pr.OrganizationID=organiz_ID
        WHERE ete.EmployeeID=employee_ID
        AND ete.OrganizationID=organiz_ID
        AND ete.Date BETWEEN d_from AND d_to
        AND ete.TotalDayPay!=0
        AND pr.PayType='Regular Holiday') uni_ete
INTO returnval;

SET returnval = IFNULL(returnval,0);

RETURN returnval;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_employeedeclaredsalarypercent
DROP FUNCTION IF EXISTS `GET_employeedeclaredsalarypercent`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_employeedeclaredsalarypercent`(`EmpRowID` INT, `OrganizID` INT, `PayPFrom` DATE, `PayPTo` DATE) RETURNS decimal(11,6)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,6) DEFAULT 0;

SELECT es.Salary / es.TrueSalary AS UndeclaredPercent
FROM employeesalary es
WHERE es.EmployeeID=EmpRowID
AND es.OrganizationID=OrganizID
AND (es.EffectiveDateFrom >= PayPFrom OR IFNULL(es.EffectiveDateTo,PayPTo) >= PayPFrom)
AND (es.EffectiveDateFrom <= PayPTo OR IFNULL(es.EffectiveDateTo,PayPTo) <= PayPTo)
LIMIT 1
INTO returnvalue;

SET returnvalue = IFNULL(returnvalue,0.0);

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_employeehoursworked_indate
DROP FUNCTION IF EXISTS `GET_employeehoursworked_indate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_employeehoursworked_indate`(`employee_ID` INT, `d_from` DATE, `d_to` DATE, `organiz_ID` INT) RETURNS decimal(10,2)
    DETERMINISTIC
BEGIN

DECLARE returnval DECIMAL(10,2) DEFAULT 0;

SELECT SUM(IF(esh.NightShift = '1', ete.NightDifferentialHours, ete.RegularHoursWorked))
FROM employeetimeentry ete
LEFT JOIN employeeshift esh ON esh.RowID=ete.EmployeeShiftID
WHERE ete.EmployeeID=employee_ID
AND ete.OrganizationID=organiz_ID
AND ete.Date BETWEEN d_from AND d_to
INTO returnval;

SET returnval = IFNULL(returnval,0);

RETURN returnval;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_employeerateperday
DROP FUNCTION IF EXISTS `GET_employeerateperday`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_employeerateperday`(`EmpID` INT, `OrgID` INT, `paramDate` DATE) RETURNS decimal(15,6)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(15, 4);

DECLARE hoursofduty DECIMAL(15, 4);

DECLARE empBasicPay DECIMAL(15, 4);

DECLARE dailyrate DECIMAL(15, 6);

DECLARE rateperhour DECIMAL(15, 4);

DECLARE numofweekthisyear INT(11) DEFAULT 53;

DECLARE shiftRowID INT(11);

DECLARE PayFreqID INT(11);

DECLARE minnumday DECIMAL(15,4);

DECLARE emptype VARCHAR(100);

DECLARE timedifference TIME;

DECLARE org_workdaysofyear INT(11);

DECLARE emp_sal DECIMAL(15,4);

DECLARE month_count_peryear INT(11) DEFAULT 12;

/*SELECT ShiftID
FROM employeeshift
WHERE EmployeeID = EmpID AND
      OrganizationID = OrgID AND
      paramDate BETWEEN DATE(COALESCE(EffectiveFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 3 MONTH))) AND
      DATEDIFF(paramDate,EffectiveFrom) >= 0 AND
      COALESCE(RestDay, 0) = 0
ORDER BY DATEDIFF(DATE_FORMAT(paramDate, '%Y-%m-%d'), EffectiveFrom)
LIMIT 1
INTO shiftRowID;

SELECT SUBSTRING_INDEX(TIMEDIFF(TimeFrom, IF(TimeFrom > TimeTo, ADDTIME(TimeTo, '24:00:00'), TimeTo)), '-', -1)
FROM shift
WHERE RowID = shiftRowID
INTO timedifference;

SELECT COMPUTE_TimeDifference(TimeFrom, TimeTo) * 1.0
FROM shift
WHERE RowID = shiftRowID
INTO hoursofduty;

IF hoursofduty > 8.00 OR hoursofduty IS NULL OR hoursofduty <= 0 THEN

    IF hoursofduty IS NULL THEN
        SET hoursofduty = 8;
    ELSE
        SET hoursofduty = hoursofduty - 1;
    END IF;

END IF;

SELECT
    BasicPay * 1.0,
    Salary * 1.0
FROM employeesalary
WHERE EmployeeID = EmpID AND
    OrganizationID = OrgID AND
    paramDate BETWEEN EffectiveDateFrom AND IFNULL(EffectiveDateTo,paramDate) AND
    DATEDIFF(paramDate,EffectiveDateFrom) >= 0
ORDER BY DATEDIFF(DATE_FORMAT(paramDate,'%Y-%m-%d'),EffectiveDateFrom)
LIMIT 1
INTO
    empBasicPay,
    emp_sal;

SET empBasicPay = COALESCE(empBasicPay,0);

SELECT PayFrequencyID, EmployeeType
FROM employee
WHERE RowID=EmpID
INTO PayFreqID, emptype;

SELECT
    PayFrequencyID,
    WEEKOFYEAR(LAST_DAY(CONCAT(YEAR(paramDate),'-12-01')))
FROM organization
WHERE RowID=OrgID
INTO
    PayFreqID,
    numofweekthisyear;

IF DAY(paramDate) <= 15 THEN
    SET minnumday = 15;
ELSE
    SET minnumday = DAY(LAST_DAY(paramDate)) - 15;
END IF;

SELECT GET_empworkdaysperyear(EmpID) * 1.0
INTO org_workdaysofyear;

IF emptype IN ('Fixed','Monthly') THEN

    IF PayFreqID = 1 THEN

        SET dailyrate = org_workdaysofyear / 12.0;
        SET dailyrate = dailyrate / 2.0;
        SET dailyrate = empBasicPay / dailyrate;
        SET dailyrate = dailyrate * 1.0;
        SET dailyrate = ROUND(dailyrate, 1);

    ELSEIF PayFreqID = 2 THEN

        SELECT (emp_sal / (e.WorkDaysPerYear / month_count_peryear)) `Result`
		  FROM employee e
		  WHERE e.RowID=EmpID
		  INTO dailyrate;

    ELSEIF PayFreqID = 3 THEN

        SET dailyrate = empBasicPay;

    ELSEIF PayFreqID = 4 THEN

        SET dailyrate = IF(
            DAY(
                LAST_DAY(
                    ADDDATE(
                        MAKEDATE(YEAR(paramDate), 1),
                        INTERVAL 1 MONTH
                    )
                )
            ) <= 28,
            (empBasicPay * numofweekthisyear) / org_workdaysofyear,
            (empBasicPay * numofweekthisyear) / (org_workdaysofyear + 1)
        );

    END IF;

ELSEIF emptype = 'Daily' THEN

    SET dailyrate = empBasicPay;

ELSEIF emptype = 'Hourly' THEN

    SET rateperhour = empBasicPay * hoursofduty;
    SET dailyrate = rateperhour;

END IF;*/

SELECT i.DailyRate
# FROM employeesalary_withdailyrate i
FROM (SELECT esa.*
		 ,ROUND(
		 (esa.Salary
		  / (e.WorkDaysPerYear
		     / 12 # count of months per year
			  )), 6) `DailyRate`
		FROM employeesalary esa
		INNER JOIN employee e ON e.RowID=esa.EmployeeID AND e.EmployeeType IN ('Monthly', 'Fixed') AND e.RowID=EmpID AND e.OrganizationID=OrgID

	UNION
		SELECT esa.*
	   , ROUND(esa.BasicPay, 6) `DailyRate`
		FROM employeesalary esa
		INNER JOIN employee e ON e.RowID=esa.EmployeeID AND e.EmployeeType = 'Daily' AND e.RowID=EmpID AND e.OrganizationID=OrgID
      ) i
WHERE /*i.EmployeeID = EmpID
AND i.OrganizationID = OrgID
AND */
paramDate BETWEEN i.EffectiveDateFrom AND IFNULL(i.EffectiveDateTo, paramDate)
AND DATEDIFF(paramDate, i.EffectiveDateFrom) >= 0
ORDER BY DATEDIFF(DATE_FORMAT(paramDate, @@date_format), i.EffectiveDateFrom)
LIMIT 1
INTO dailyrate;

RETURN IFNULL(dailyrate, 0);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_employeerateperhour
DROP FUNCTION IF EXISTS `GET_employeerateperhour`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_employeerateperhour`(
    `EmpID` INT,
    `OrgID` INT,
    `paramDate` DATE

) RETURNS decimal(12,6)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,11);

DECLARE hoursofduty DECIMAL(11,10);

DECLARE empBasicPay DECIMAL(11,7);

DECLARE dailyrate DECIMAL(11,7);

DECLARE rateperhour DECIMAL(11,11);

DECLARE numofweekthisyear INT(11) DEFAULT 53;

DECLARE shiftRowID INT(11);

DECLARE PayFreqID INT(11);

DECLARE minnumday DECIMAL(11,7);

DECLARE emptype VARCHAR(100);

DECLARE timedifference TIME;

DECLARE org_workdaysofyear INT(11);

DECLARE emp_sal DECIMAL(11,6);


SELECT ShiftID FROM employeeshift WHERE EmployeeID=EmpID AND OrganizationID=OrgID AND paramDate BETWEEN DATE(COALESCE(EffectiveFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 3 MONTH))) AND DATEDIFF(paramDate,EffectiveFrom) >= 0 AND COALESCE(RestDay,0)=0 ORDER BY DATEDIFF(DATE_FORMAT(paramDate,'%Y-%m-%d'),EffectiveFrom) LIMIT 1 INTO shiftRowID;

SELECT SUBSTRING_INDEX(TIMEDIFF(TimeFrom,IF(TimeFrom>TimeTo,ADDTIME(TimeTo,'24:00:00'),TimeTo)),'-',-1) FROM shift WHERE RowID=shiftRowID INTO timedifference;

SELECT COMPUTE_TimeDifference(TimeFrom,TimeTo) * 1.00000000000 FROM shift WHERE RowID=shiftRowID INTO hoursofduty;



IF hoursofduty > 8.00 OR hoursofduty IS NULL OR hoursofduty<=0 THEN

    IF hoursofduty IS NULL THEN

        SET hoursofduty = 8;

    ELSE

        SET hoursofduty = hoursofduty - 1;

    END IF;

END IF;

SELECT BasicPay * 1.00000000000,Salary * 1.00000000000 FROM employeesalary WHERE EmployeeID=EmpID AND OrganizationID=OrgID AND paramDate BETWEEN EffectiveDateFrom AND IFNULL(EffectiveDateTo,paramDate) AND DATEDIFF(paramDate,EffectiveDateFrom) >= 0 ORDER BY DATEDIFF(DATE_FORMAT(paramDate,'%Y-%m-%d'),EffectiveDateFrom) LIMIT 1 INTO empBasicPay,emp_sal;

SET empBasicPay = COALESCE(empBasicPay,0);

SELECT PayFrequencyID,EmployeeType FROM employee WHERE RowID=EmpID INTO PayFreqID,emptype;

SELECT PayFrequencyID,WEEKOFYEAR(LAST_DAY(CONCAT(YEAR(paramDate),'-12-01'))) FROM organization WHERE RowID=OrgID INTO PayFreqID,numofweekthisyear;


IF DAY(paramDate) <= 15 THEN

    SET minnumday = 15;

ELSE

    SET minnumday = DAY(LAST_DAY(paramDate)) - 15;

END IF;





SELECT GET_empworkdaysperyear(EmpID) * 1.00000000000 INTO org_workdaysofyear;



SET @perfecthrs = (SELECT sh.DivisorToDailyRate - COMPUTE_TimeDifference(sh.BreakTimeFrom,sh.BreakTimeTo) FROM employeeshift esh LEFT JOIN shift sh ON sh.RowID=esh.ShiftID WHERE esh.EmployeeID=EmpID AND esh.OrganizationID=OrgID AND paramDate BETWEEN esh.EffectiveFrom AND esh.EffectiveTo ORDER BY esh.EffectiveFrom, esh.EffectiveTo LIMIT 1);
SET @perfecthrs = IFNULL(@perfecthrs,8);

IF emptype IN ('Fixed','Monthly') THEN

    IF PayFreqID = 1 THEN

        SET dailyrate = org_workdaysofyear / 12.00000000000;

        SET dailyrate = dailyrate / 2.00000000000;

        SET dailyrate = empBasicPay / dailyrate;
        SET dailyrate = dailyrate * 1.00000000000;
        SET dailyrate = ROUND(dailyrate,1);

    ELSEIF PayFreqID = 2 THEN


        SET dailyrate = (empBasicPay * 12.00000000000) / org_workdaysofyear;

    ELSEIF PayFreqID = 3 THEN
        SET dailyrate = empBasicPay;

    ELSEIF PayFreqID = 4 THEN
        SET dailyrate = IF(DAY(LAST_DAY(ADDDATE(MAKEDATE(YEAR(paramDate),1), INTERVAL 1 MONTH))) <= 28, (empBasicPay * numofweekthisyear) / org_workdaysofyear, (empBasicPay * numofweekthisyear) / (org_workdaysofyear + 1));

    END IF;



ELSEIF emptype = 'Daily' THEN

    SET dailyrate = empBasicPay;



ELSEIF emptype = 'Hourly' THEN

    SET rateperhour = empBasicPay * hoursofduty;

    SET dailyrate = rateperhour;

END IF;

RETURN dailyrate / @perfecthrs;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_employeeStartingAttendanceCount
DROP FUNCTION IF EXISTS `GET_employeeStartingAttendanceCount`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `GET_employeeStartingAttendanceCount`(`EmpRowID` INT, `Date_From` DATE, `Date_To` DATE) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

SELECT COUNT(ete.RowID)
FROM employeetimeentry ete
INNER JOIN employee e ON e.RowID=EmpRowID
WHERE ete.TotalDayPay!=0
AND ete.EmployeeID=ete.EmployeeID
AND ete.OrganizationID=e.OrganizationID
AND ete.`Date` BETWEEN IF(e.StartDate < Date_From, Date_From, e.StartDate) AND Date_To
INTO returnvalue;

IF returnvalue IS NULL THEN
    SET returnvalue = 0;
END IF;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_employeetaxableincome
DROP FUNCTION IF EXISTS `GET_employeetaxableincome`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_employeetaxableincome`(`ps_EmployeeID` INT, `ps_OrganizID` INT, `ps_Date` DATE, `addvalue` DECIMAL(12,2)) RETURNS text CHARSET latin1
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(12,2);

DECLARE month_year TEXT;

DECLARE wtax_value DECIMAL(12,2);

DECLARE fstat_ID INT(11);

DECLARE payfreqID_conversion INT(11);

SET month_year = DATE_FORMAT(ps_Date,'%m%Y');



SELECT ps.TotalTaxableSalary
FROM paystub ps
LEFT JOIN payperiod pyp ON ps.PayPeriodID=pyp.RowID
WHERE DATE_FORMAT(pyp.PayToDate,'%m%Y')=month_year
AND ps.EmployeeID=ps_EmployeeID
AND ps.OrganizationID=ps_OrganizID
ORDER BY ps.PayPeriodID
LIMIT 1
INTO returnvalue;

SET returnvalue = IFNULL(returnvalue,0) + addvalue;


SELECT fs.RowID
,e.PayFrequencyID
FROM filingstatus fs
LEFT JOIN employee e ON e.MaritalStatus=fs.MaritalStatus AND e.NoOfDependents=fs.Dependent
WHERE e.RowID=ps_EmployeeID
LIMIT 1
INTO fstat_ID
      ,payfreqID_conversion;

IF payfreqID_conversion = 1 THEN

    SET payfreqID_conversion = 2;

ELSE

    SET payfreqID_conversion = 2;

END IF;

SELECT
((returnvalue - tx.TaxableIncomeFromAmount) * tx.ExemptionInExcessAmount) + tx.ExemptionAmount
FROM paywithholdingtax tx
WHERE tx.FilingStatusID=fstat_ID
AND returnvalue BETWEEN tx.TaxableIncomeFromAmount AND tx.TaxableIncomeToAmount
AND DATEDIFF(CURRENT_DATE(), COALESCE(tx.EffectiveDateTo, COALESCE(tx.EffectiveDateFrom, CURRENT_DATE()))) >= 0
AND tx.PayFrequencyID=payfreqID_conversion
ORDER BY DATEDIFF(CURRENT_DATE(), COALESCE(tx.EffectiveDateTo, COALESCE(tx.EffectiveDateFrom, CURRENT_DATE())))
LIMIT 1
INTO wtax_value;

SET wtax_value = IFNULL(wtax_value,0);



RETURN CONCAT(returnvalue,';',wtax_value);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_employeeundeclaredsalarypercent
DROP FUNCTION IF EXISTS `GET_employeeundeclaredsalarypercent`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_employeeundeclaredsalarypercent`(`EmpRowID` INT, `OrganizID` INT, `PayPFrom` DATE, `PayPTo` DATE) RETURNS decimal(11,6)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,6) DEFAULT 0;

SELECT es.TrueSalary / es.Salary AS UndeclaredPercent
FROM employeesalary es
WHERE es.EmployeeID=EmpRowID
AND es.OrganizationID=OrganizID
AND (es.EffectiveDateFrom >= PayPFrom OR IFNULL(es.EffectiveDateTo,PayPTo) >= PayPFrom)
AND (es.EffectiveDateFrom <= PayPTo OR IFNULL(es.EffectiveDateTo,PayPTo) <= PayPTo)
LIMIT 1
INTO returnvalue;

SET returnvalue = IFNULL(returnvalue,0.0);

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_empPerfectDayCount
DROP FUNCTION IF EXISTS `GET_empPerfectDayCount`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_empPerfectDayCount`(`OrganizID` INT, `EmpRowID` INT, `FirstDate` DATE, `LastDate` DATE) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11) DEFAULT 0;

DECLARE emp_HireDate DATE;

DECLARE orgMinWorkDays INT(11);

SELECT GET_empworkdaysperyear(EmpRowID) INTO orgMinWorkDays;



SELECT e.StartDate FROM employee e WHERE e.RowID=EmpRowID INTO emp_HireDate;


IF emp_HireDate < FirstDate THEN
    SET emp_HireDate = FirstDate;
END IF;


IF orgMinWorkDays BETWEEN 310 AND 320 THEN

    SELECT COUNT(*)
    FROM (
        SELECT pr.RowID
        FROM payrate pr
        LEFT JOIN employeetimeentry ete ON ete.Date=pr.Date AND ete.EmployeeID=EmpRowID AND ete.OrganizationID=OrganizID
        WHERE pr.OrganizationID=OrganizID
        AND pr.Date BETWEEN emp_HireDate AND LastDate
        AND DAYOFWEEK(pr.Date) != 1
        AND pr.PayType!='Regular Holiday'
    UNION
        SELECT pr.RowID
        FROM payrate pr
        LEFT JOIN employeetimeentry ete ON ete.Date=pr.Date AND ete.EmployeeID=EmpRowID AND ete.OrganizationID=OrganizID
        WHERE pr.OrganizationID=OrganizID
        AND pr.Date BETWEEN emp_HireDate AND LastDate
        AND DAYOFWEEK(pr.Date) != 1
        AND pr.PayType='Regular Holiday'
    ) dd
    INTO returnvalue;

ELSEIF orgMinWorkDays BETWEEN 255 AND 265 THEN

    SELECT COUNT(*)
    FROM (
        SELECT pr.RowID
        FROM payrate pr
        LEFT JOIN employeetimeentry ete ON ete.Date=pr.Date AND ete.EmployeeID=EmpRowID AND ete.OrganizationID=OrganizID
        WHERE pr.OrganizationID=OrganizID
        AND pr.Date BETWEEN emp_HireDate AND LastDate
        AND DAYOFWEEK(pr.Date) NOT IN(1,7)
        AND pr.PayType!='Regular Holiday'
    UNION
        SELECT pr.RowID
        FROM payrate pr
        LEFT JOIN employeetimeentry ete ON ete.Date=pr.Date AND ete.EmployeeID=EmpRowID AND ete.OrganizationID=OrganizID
        WHERE pr.OrganizationID=OrganizID
        AND pr.Date BETWEEN emp_HireDate AND LastDate
        AND DAYOFWEEK(pr.Date) NOT IN(1,7)
        AND pr.PayType='Regular Holiday'
    ) dd
    INTO returnvalue;

END IF;


RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_empPerfectMonthCount
DROP FUNCTION IF EXISTS `GET_empPerfectMonthCount`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_empPerfectMonthCount`(`OrganizID` INT, `EmpRowID` INT, `FirstDate` DATE, `LastDate` DATE) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11) DEFAULT 0;

DECLARE orgMinWorkDays INT(11);

DECLARE og_MinDaysPerMonth DECIMAL(11,5) DEFAULT 0;

SELECT GET_empworkdaysperyear(EmpRowID) INTO orgMinWorkDays;


SET og_MinDaysPerMonth = orgMinWorkDays / 12;

SELECT GET_empPerfectDayCount(OrganizID, EmpRowID, FirstDate, LastDate) INTO returnvalue;

SET returnvalue = returnvalue / og_MinDaysPerMonth;

RETURN ROUND(returnvalue);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_empworkdaysperyear
DROP FUNCTION IF EXISTS `GET_empworkdaysperyear`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_empworkdaysperyear`(`emp_RowID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

SELECT e.WorkDaysPerYear FROM employee e WHERE e.RowID=emp_RowID INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_HDMFAmount
DROP FUNCTION IF EXISTS `GET_HDMFAmount`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_HDMFAmount`(`emp_MonthlyCompensation` DECIMAL(11,2)) RETURNS decimal(11,2)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,2) DEFAULT 0;

SELECT EmployeeShare FROM paypagibig WHERE emp_MonthlyCompensation BETWEEN SalaryRangeFrom AND SalaryRangeTo LIMIT 1 INTO returnvalue;
IF returnvalue IS NULL THEN
    SET returnvalue = 0.0;
END IF;
IF returnvalue < 0 THEN

    SET returnvalue = emp_MonthlyCompensation * returnvalue;

END IF;

RETURN IFNULL(returnvalue,0);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_lastdateofdayname
DROP FUNCTION IF EXISTS `GET_lastdateofdayname`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `GET_lastdateofdayname`(`ParamDate` DATE, `DayNameIndex` CHAR(2)) RETURNS date
    DETERMINISTIC
BEGIN

DECLARE returnvalue DATE;

DECLARE loopindex INT(11) DEFAULT 0;

DECLARE catchdate DATE;

IF DayNameIndex < 0 THEN

    SET loopindex = loopindex * (-1);

    thisloop: LOOP

        SET catchdate = ADDDATE(ParamDate, INTERVAL loopindex DAY);

        IF CONCAT('-',DAYOFWEEK(catchdate)) = DayNameIndex THEN

            SET returnvalue = catchdate;

            LEAVE thisloop;

        END IF;

        SET loopindex = loopindex - 1;

        IF loopindex <= -31 THEN

            LEAVE thisloop;

        END IF;

    END LOOP thisloop;

ELSE

    thisloop: LOOP

        SET catchdate = ADDDATE(ParamDate, INTERVAL loopindex DAY);

        IF DAYOFWEEK(catchdate) = DayNameIndex THEN

            SET returnvalue = catchdate;

            LEAVE thisloop;

        END IF;

        SET loopindex = loopindex + 1;

        IF loopindex <= -31 THEN

            LEAVE thisloop;

        END IF;

    END LOOP thisloop;

END IF;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_MinimumWageRate
DROP FUNCTION IF EXISTS `GET_MinimumWageRate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_MinimumWageRate`() RETURNS decimal(11,2)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,2);

SELECT DisplayValue FROM listofval WHERE `Type`='Minimum Wage Rate' LIMIT 1 INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_OrgProRatedCountOfDays
DROP FUNCTION IF EXISTS `GET_OrgProRatedCountOfDays`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_OrgProRatedCountOfDays`(`Org_WorkDays` INT, `Effective_DateFrom` DATE, `Effective_DateTo` DATE, `Frequency` TEXT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11) DEFAULT 0;

DECLARE betweenfrom DATE;

DECLARE betweento DATE;

    IF Effective_DateFrom < MAKEDATE(YEAR(CURDATE()), 1) THEN

        SET Effective_DateFrom = MAKEDATE(YEAR(CURDATE()), 1);

    END IF;

    IF Effective_DateTo > LAST_DAY(CONCAT(YEAR(CURDATE()),'-12-01')) THEN

        SET Effective_DateTo = LAST_DAY(CONCAT(YEAR(CURDATE()),'-12-01'));

    END IF;

    IF Frequency = 'Daily' THEN

        IF Org_WorkDays BETWEEN 310 AND 320 THEN

            SELECT COUNT(d.DateValue)
            FROM dates d
            WHERE DAYOFWEEK(d.DateValue)!=7
            AND d.DateValue BETWEEN Effective_DateFrom AND Effective_DateTo
            INTO returnvalue;

        ELSE

            SELECT COUNT(d.DateValue)
            FROM dates d
            WHERE DAYOFWEEK(d.DateValue) NOT IN (6,7)
            AND d.DateValue BETWEEN Effective_DateFrom AND Effective_DateTo
            INTO returnvalue;

        END IF;

    ELSEIF Frequency = 'Monthly' THEN

        SELECT COUNT(DISTINCT(MONTH(d.DateValue)))
        FROM dates d
        WHERE d.DateValue BETWEEN Effective_DateFrom AND Effective_DateTo
        INTO returnvalue;

    END IF;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_paystubadjustmenttaxabornontaxab
DROP FUNCTION IF EXISTS `GET_paystubadjustmenttaxabornontaxab`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `GET_paystubadjustmenttaxabornontaxab`(`PayStubRowID` INT, `IsTaxable` CHAR(50)) RETURNS decimal(11,6)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,6);

SELECT SUM(IFNULL(psa.PayAmount,0))
FROM paystubadjustment psa
INNER JOIN product p ON p.RowID=psa.ProductID
WHERE psa.PayStubID=PayStubRowID
AND p.`Status`=IsTaxable
INTO returnvalue;

RETURN IFNULL(returnvalue,0);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_paystubitemallowanceecola
DROP FUNCTION IF EXISTS `GET_paystubitemallowanceecola`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_paystubitemallowanceecola`(`OrganizID` INT, `EmpRowID` INT, `PayPeriodRowID` INT) RETURNS decimal(11,2)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,2) DEFAULT 0.0;

SELECT SUM(psi.PayAmount)
FROM paystubitem psi
INNER JOIN paystub ps ON ps.EmployeeID=EmpRowID AND ps.OrganizationID=OrganizID AND ps.PayPeriodID=PayPeriodRowID
INNER JOIN product p ON p.RowID=psi.ProductID
WHERE psi.PayStubID=ps.RowID
AND p.Category='Allowance Type'
AND p.PartNo='Ecola'
INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_paystubitemallowancenotecola
DROP FUNCTION IF EXISTS `GET_paystubitemallowancenotecola`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_paystubitemallowancenotecola`(`OrganizID` INT, `EmpRowID` INT, `PayPeriodRowID` INT) RETURNS decimal(11,6)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,6) DEFAULT 0.0;

SELECT SUM(psi.PayAmount)
FROM paystubitem psi
INNER JOIN paystub ps ON ps.EmployeeID=EmpRowID AND ps.OrganizationID=OrganizID AND ps.PayPeriodID=PayPeriodRowID
INNER JOIN product p ON p.RowID=psi.ProductID
WHERE psi.PayStubID=ps.RowID
AND p.Category='Allowance Type'
AND p.PartNo!='Ecola'
INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_paytodatepayperiod
DROP FUNCTION IF EXISTS `GET_paytodatepayperiod`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_paytodatepayperiod`(`OrganizID` INT, `anydate` DATE, `EmpPayFreqID` INT) RETURNS date
    DETERMINISTIC
BEGIN

DECLARE returnvalue DATE;

DECLARE pp_month CHAR(5);

DECLARE pp_year CHAR(5);

SELECT pp.`Month`
,pp.`Year`
FROM payperiod pp
WHERE pp.OrganizationID=OrganizID
AND anydate
BETWEEN pp.PayFromDate
AND pp.PayToDate
AND pp.TotalGrossSalary=EmpPayFreqID
LIMIT 1
INTO pp_month
      ,pp_year;

SELECT
pp.PayToDate
FROM payperiod pp
WHERE pp.OrganizationID=OrganizID
AND pp.`Year`=pp_year
AND pp.`Month`=pp_month
AND pp.TotalGrossSalary=EmpPayFreqID
ORDER BY pp.PayFromDate DESC,pp.PayToDate DESC
LIMIT 1
INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_prev13monthRowID
DROP FUNCTION IF EXISTS `GET_prev13monthRowID`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_prev13monthRowID`(`OrganizID` INT, `EndOfMonthPayPeriodID` INT, `EmpRowID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT;

SELECT RowID
FROM thirteenthmonthpay
WHERE OrganizationID=OrganizID
AND PaystubID=(SELECT RowID FROM paystub WHERE PayPeriodID=EndOfMonthPayPeriodID AND OrganizationID=OrganizID AND EmployeeID=EmpRowID)
INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_psimonthlysumitem
DROP FUNCTION IF EXISTS `GET_psimonthlysumitem`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_psimonthlysumitem`(`OrganizID` INT, `EmpRowID` INT, `ItemName` TEXT, `PayPMonth` INT, `PayPYear` INT, `EmpPayFrequencyID` INT) RETURNS decimal(11,6)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,6);

DECLARE itemID INT;

SELECT RowID FROM product WHERE PartNo=ItemName AND OrganizationID=OrganizID INTO itemID;

SELECT SUM(PayAmount)
FROM paystubitem
WHERE Undeclared='1'
AND PayStubID IN (
                        SELECT RowID
                        FROM paystub
                        WHERE PayPeriodID IN (
                                                    SELECT RowID
                                                    FROM payperiod
                                                    WHERE `Month`=PayPMonth
                                                    AND `Year`=PayPYear
                                                    AND OrganizationID=OrganizID
                                                    AND TotalGrossSalary=EmpPayFrequencyID)
                        AND OrganizationID=OrganizID
                        AND EmployeeID=EmpRowID
                        )
AND ProductID=itemID
AND OrganizationID=OrganizID
INTO returnvalue;




RETURN IFNULL(returnvalue, 0);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_rawgrossincome
DROP FUNCTION IF EXISTS `GET_rawgrossincome`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_rawgrossincome`(`OrganizID` INT, `EmpID` INT, `PayPeriodF` DATE, `PayPeriodT` DATE) RETURNS text CHARSET latin1
    DETERMINISTIC
BEGIN

DECLARE returnvalue TEXT;

SELECT psi.PayAmount
FROM paystub ps
INNER JOIN product p ON p.PartNo='Gross Income' AND p.OrganizationID=OrganizID
INNER JOIN paystubitem psi ON psi.ProductID=p.RowID AND psi.PayStubID=ps.RowID
WHERE ps.EmployeeID=EmpID
AND ps.OrganizationID=OrganizID
AND ps.PayFromDate=PayPeriodF
AND ps.PayToDate=PayPeriodT
INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_SumPayStubAdjustments
DROP FUNCTION IF EXISTS `GET_SumPayStubAdjustments`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_SumPayStubAdjustments`(`p_PayStubID` INT) RETURNS decimal(10,2)
    DETERMINISTIC
BEGIN

RETURN
(
    SELECT SUM(PayAmount) FROM paystubadjustment WHERE PaystubID = p_PayStubID
);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GET_totalmonthTaxableSalary
DROP FUNCTION IF EXISTS `GET_totalmonthTaxableSalary`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_totalmonthTaxableSalary`(`EmployeeRowID` INT, `OrganizRowID` INT, `PayPeriodRowID` INT) RETURNS decimal(11,2)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,2);

DECLARE payp_from DATE;

DECLARE payp_to DATE;

DECLARE themonth TEXT;

DECLARE theyear INT(11);


SELECT pyp.`Month`, pyp.`Year` FROM payperiod pyp WHERE pyp.RowID=PayPeriodRowID INTO themonth, theyear;

SELECT pyp.PayFromDate FROM payperiod pyp WHERE pyp.`Month`=themonth AND pyp.`Year`=theyear AND pyp.OrganizationID=OrganizRowID ORDER BY pyp.PayFromDate, pyp.PayToDate LIMIT 1 INTO payp_from;

SELECT pyp.PayToDate FROM payperiod pyp WHERE pyp.`Month`=themonth AND pyp.`Year`=theyear AND pyp.OrganizationID=OrganizRowID ORDER BY pyp.PayFromDate DESC, pyp.PayToDate DESC LIMIT 1 INTO payp_to;

SELECT SUM(ps.TotalTaxableSalary) FROM paystub ps WHERE ps.EmployeeID=EmployeeRowID AND ps.OrganizationID=OrganizRowID AND (ps.PayFromDate >= payp_from OR ps.PayToDate >= payp_from) AND (ps.PayFromDate <= payp_to OR ps.PayToDate <= payp_to) INTO returnvalue;

RETURN IFNULL(returnvalue,0.00);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.GRACE_PERIOD
DROP FUNCTION IF EXISTS `GRACE_PERIOD`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `GRACE_PERIOD`(`Time_IN` TIME, `ShiftTimeFrom` TIME, `GracePeriodValue` INT) RETURNS time
    DETERMINISTIC
BEGIN

DECLARE returnval TIME;

DECLARE mindec_11 DECIMAL(10,2) DEFAULT 0;

DECLARE mindec_12 DECIMAL(10,2) DEFAULT 0;

IF GracePeriodValue IS NULL THEN
    SET GracePeriodValue = 0;
END IF;

IF Time_IN BETWEEN ShiftTimeFrom AND ADDDATE(ShiftTimeFrom, INTERVAL GracePeriodValue MINUTE) THEN

    SET returnval = TIME_FORMAT(ShiftTimeFrom, '%H:%i:%s');

ELSE

    SET returnval = TIME_FORMAT(Time_IN, '%H:%i:%s');

END IF;


RETURN returnval;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.HasWorkedLastWorkingDay
DROP FUNCTION IF EXISTS `HasWorkedLastWorkingDay`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `HasWorkedLastWorkingDay`(
	`employeeID` INT,
	`dateToCheck` DATETIME




) RETURNS tinyint(1)
BEGIN

    DECLARE hoursWorked DECIMAL(11, 6);
    DECLARE leaveHours DECIMAL(11, 6);

    SELECT
        IF(
            PayType IN ('Regular Holiday', 'Special Non-Working Holiday'),
            employeetimeentry.TotalDayPay,
            (employeetimeentry.RegularHoursWorked + employeetimeentry.RestDayHours)
        ) `HoursWorked`,
        (
            employeetimeentry.SickLeaveHours +
            employeetimeentry.MaternityLeaveHours +
            employeetimeentry.VacationLeaveHours +
            employeetimeentry.OtherLeaveHours
        )
    FROM employeetimeentry
    LEFT JOIN employee
        ON employee.RowID = employeetimeentry.EmployeeID
    LEFT JOIN payrate
        ON payrate.Date = employeetimeentry.Date
        AND payrate.OrganizationID = employeetimeentry.OrganizationID
    LEFT JOIN employeeshift
        ON employeeshift.RowID = employeetimeentry.EmployeeShiftID
    WHERE employeetimeentry.EmployeeID = employeeID
        AND employeetimeentry.EmployeeShiftID IS NOT NULL
        AND employeetimeentry.Date BETWEEN DATE_SUB(dateToCheck, INTERVAL 7 DAY) AND DATE_SUB(dateToCheck, INTERVAL 1 DAY)
        AND IF(
            employeeshift.RestDay OR (employee.DayOfRest = DAYOFWEEK(employeetimeentry.Date)),
            employeetimeentry.TotalDayPay > 0,
            TRUE
        )
        AND IF(
            payrate.PayType = 'Regular Holiday' OR payrate.PayType = 'Special Non-Working Holiday',
            employeetimeentry.TotalDayPay > 0,
            TRUE
        )
    ORDER BY employeetimeentry.Date DESC
    LIMIT 1
    INTO
        hoursWorked,
        leaveHours;

    RETURN IFNULL(hoursWorked > 0 OR leaveHours > 0, FALSE);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.IF_NOT_EMPTY_STRING
DROP FUNCTION IF EXISTS `IF_NOT_EMPTY_STRING`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `IF_NOT_EMPTY_STRING`(`Param1` TEXT, `Param2` TEXT) RETURNS text CHARSET latin1
    DETERMINISTIC
BEGIN

DECLARE returnvalue TEXT;

IF IFNULL(Param1,'') != '' THEN

    SET returnvalue = IFNULL(Param2,'');

ELSE

    SET returnvalue = '';

END IF;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INITIALS
DROP FUNCTION IF EXISTS `INITIALS`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INITIALS`(`str` TEXT, `strtoadd` TEXT, `isuppercase` CHAR(1)) RETURNS text CHARSET latin1
    DETERMINISTIC
BEGIN

    DECLARE result text DEFAULT '';

    DECLARE buffer text DEFAULT '';

    DECLARE i int DEFAULT 1;

    DECLARE expr text DEFAULT '[[:alnum:]]';

    IF(str IS NULL) THEN

        RETURN '';

    ELSE

        SET buffer = TRIM(str);

        WHILE i <= LENGTH(buffer) DO

            IF SUBSTR(buffer, i, 1) REGEXP expr THEN

                SET result = CONCAT(result, SUBSTR( buffer, i, 1), strtoadd);

                SET i = i + 1;

                WHILE i <= LENGTH(buffer) AND SUBSTR(buffer, i, 1) REGEXP expr DO

                    SET i = i + 1;

                END WHILE;

                WHILE i <= LENGTH(buffer) AND SUBSTR(buffer, i, 1) NOT REGEXP expr DO

                    SET i = i + 1;

                END WHILE;

            ELSE

                SET i = i + 1;

            END IF;

        END WHILE;

        IF isuppercase = '1' THEN

            SET result = TRIM(UCASE(result));

        ELSE

            SET result = TRIM(LCASE(result));

        END IF;

        RETURN result;

     END IF;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSERTUPDATE_employeetimeentry
DROP FUNCTION IF EXISTS `INSERTUPDATE_employeetimeentry`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSERTUPDATE_employeetimeentry`(`eteRowID` INT
, `eteOrganizID` INT
, `UserRowID` INT
, `eteDate` DATE
, `eteEmployeeShiftID` INT
, `eteEmployeeID` INT
, `eteEmployeeSalaryID` INT
, `eteEmployeeFixedSalaryFlag` CHAR(1)
, `eteRegularHoursWorked` DECIMAL(11,2)
, `eteRegularHoursAmount` DECIMAL(11,2)
, `eteTotalHoursWorked` DECIMAL(11,2)
, `eteOvertimeHoursWorked` DECIMAL(11,2)
, `eteOvertimeHoursAmount` DECIMAL(11,2)
, `eteUndertimeHours` DECIMAL(11,2)
, `eteUndertimeHoursAmount` DECIMAL(11,2)
, `eteNightDifferentialHours` DECIMAL(11,2)
, `eteNightDiffHoursAmount` DECIMAL(11,2)
, `eteNightDifferentialOTHours` DECIMAL(11,2)
, `eteNightDiffOTHoursAmount` DECIMAL(11,2)
, `eteHoursLate` DECIMAL(11,2)
, `eteHoursLateAmount` DECIMAL(11,2)
, `eteLateFlag` CHAR(1)
, `etePayRateID` INT
, `eteVacationLeaveHours` DECIMAL(11,2)
, `eteSickLeaveHours` DECIMAL(11,2)
, `eteMaternityLeaveHours` DECIMAL(11,2)
, `eteOtherLeaveHours` DECIMAL(11,2)
, `eteTotalDayPay` DECIMAL(11,2)
, `eteAbsent` DECIMAL(11,2)
, `eteChargeToDivisionID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

INSERT INTO employeetimeentry
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,Date
    ,EmployeeShiftID
    ,EmployeeID
    ,EmployeeSalaryID
    ,EmployeeFixedSalaryFlag
    ,RegularHoursWorked
    ,RegularHoursAmount
    ,TotalHoursWorked
    ,OvertimeHoursWorked
    ,OvertimeHoursAmount
    ,UndertimeHours
    ,UndertimeHoursAmount
    ,NightDifferentialHours
    ,NightDiffHoursAmount
    ,NightDifferentialOTHours
    ,NightDiffOTHoursAmount
    ,HoursLate
    ,HoursLateAmount
    ,LateFlag
    ,PayRateID
    ,VacationLeaveHours
    ,SickLeaveHours
    ,MaternityLeaveHours
    ,OtherLeaveHours
    ,TotalDayPay
    ,Absent
    ,ChargeToDivisionID
) VALUES (
    eteRowID
    ,eteOrganizID
    ,CURRENT_TIMESTAMP()
    ,UserRowID
    ,eteDate
    ,eteEmployeeShiftID
    ,eteEmployeeID
    ,eteEmployeeSalaryID
    ,eteEmployeeFixedSalaryFlag
    ,eteRegularHoursWorked
    ,eteRegularHoursAmount
    ,eteTotalHoursWorked
    ,eteOvertimeHoursWorked
    ,eteOvertimeHoursAmount
    ,eteUndertimeHours
    ,eteUndertimeHoursAmount
    ,eteNightDifferentialHours
    ,eteNightDiffHoursAmount
    ,eteNightDifferentialOTHours
    ,eteNightDiffOTHoursAmount
    ,eteHoursLate
    ,eteHoursLateAmount
    ,eteLateFlag
    ,etePayRateID
    ,eteVacationLeaveHours
    ,eteSickLeaveHours
    ,eteMaternityLeaveHours
    ,eteOtherLeaveHours
    ,eteTotalDayPay
    ,eteAbsent
    ,eteChargeToDivisionID
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=UserRowID
    ,EmployeeShiftID=eteEmployeeShiftID
    ,EmployeeSalaryID=eteEmployeeSalaryID
    ,EmployeeFixedSalaryFlag=eteEmployeeFixedSalaryFlag
    ,RegularHoursWorked=eteRegularHoursWorked
    ,RegularHoursAmount=eteRegularHoursAmount
    ,TotalHoursWorked=eteTotalHoursWorked
    ,OvertimeHoursWorked=eteOvertimeHoursWorked
    ,OvertimeHoursAmount=eteOvertimeHoursAmount
    ,UndertimeHours=eteUndertimeHours
    ,UndertimeHoursAmount=eteUndertimeHoursAmount
    ,NightDifferentialHours=eteNightDifferentialHours
    ,NightDiffHoursAmount=eteNightDiffHoursAmount
    ,NightDifferentialOTHours=eteNightDifferentialOTHours
    ,NightDiffOTHoursAmount=eteNightDiffOTHoursAmount
    ,HoursLate=eteHoursLate
    ,HoursLateAmount=eteHoursLateAmount
    ,LateFlag=eteLateFlag
    ,PayRateID=etePayRateID
    ,VacationLeaveHours=eteVacationLeaveHours
    ,SickLeaveHours=eteSickLeaveHours
    ,MaternityLeaveHours=eteMaternityLeaveHours
    ,OtherLeaveHours=eteOtherLeaveHours
    ,TotalDayPay=eteTotalDayPay
    ,Absent=eteAbsent
    ,ChargeToDivisionID=eteChargeToDivisionID;



RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_account
DROP FUNCTION IF EXISTS `INSUPD_account`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_account`(`acc_RowID` INT, `acc_CompanyName` VARCHAR(100), `acc_TradeName` VARCHAR(100), `acc_MobilePhone` VARCHAR(100), `acc_OrganizationID` INT, `acc_PrimaryContactID` INT, `acc_PrimaryAddressID` INT, `acc_PrimaryBillToAddressID` INT, `acc_PrimarySoldToAddressID` INT, `acc_PrimaryShipToAddressID` INT, `acc_PrimaryAgreementID` INT, `acc_PrimaryBillToPersonID` INT, `acc_PrimaryShipToPersonID` INT, `acc_PrimarySoldToPersonID` INT, `acc_ParentAccountID` INT, `acc_VATRegistrationNo` VARCHAR(50), `acc_ATPNo` VARCHAR(50), `acc_BranchFlg` VARCHAR(50), `acc_BusinessType` VARCHAR(50), `acc_PrimaryHomeAddressID` INT, `acc_FloorArea` DECIMAL(10,2), `acc_AverageMonthlySales` DECIMAL(10,2), `acc_YearsInBusiness` DECIMAL(10,2), `acc_ExistingBranch` VARCHAR(1), `acc_FaxNumber` VARCHAR(50), `acc_Description` VARCHAR(1000), `acc_Active` CHAR(1), `acc_ManagerName` VARCHAR(50), `acc_PaymentTermsID` INT, `acc_BranchType` VARCHAR(50), `acc_AliasName` VARCHAR(100), `acc_CustomerSinceDate` DATE, `acc_CreditDays` INT, `acc_StockHolder1` VARCHAR(100), `acc_StockHolder2` VARCHAR(100), `acc_StockHolder3` VARCHAR(100), `acc_Comments` VARCHAR(2000), `acc_GoodStandingFlg` CHAR(1), `acc_CreatedBy` INT, `acc_LastUpdBy` INT, `acc_PrimaryRepID` INT, `acc_EmailAddress` VARCHAR(100), `acc_AltEmailAddress` VARCHAR(100), `acc_Website` VARCHAR(100), `acc_MainPhone` VARCHAR(100), `acc_AltPhone` VARCHAR(100), `acc_Status` VARCHAR(50), `acc_Capitalization` DECIMAL(10,2), `acc_AverageRating` DECIMAL(10,2), `acc_Image` LONGBLOB) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE acctID INT(11);

DECLARE acctNumber INT(11) DEFAULT 0;

DECLARE maxAcctNumber INT(11) DEFAULT 0;



SELECT AccountNo FROM account WHERE AccountType='Supplier' AND OrganizationID=acc_OrganizationID AND CompanyName=acc_CompanyName ORDER BY RowID DESC LIMIT 1 INTO acctNumber;

SELECT AccountNo FROM account WHERE AccountType='Supplier' AND OrganizationID=acc_OrganizationID ORDER BY RowID DESC LIMIT 1 INTO maxAcctNumber;


INSERT INTO account
(
    RowID
    ,CompanyName
    ,TradeName
    ,MobilePhone
    ,OrganizationID
    ,AccountNo
    ,PrimaryContactID
    ,PrimaryAddressID
    ,PrimaryBillToAddressID
    ,PrimarySoldToAddressID
    ,PrimaryShipToAddressID
    ,PrimaryAgreementID
    ,PrimaryBillToPersonID
    ,PrimaryShipToPersonID
    ,PrimarySoldToPersonID
    ,ParentAccountID
    ,VATRegistrationNo
    ,ATPNo
    ,AccountType
    ,BranchFlg
    ,BusinessType
    ,PrimaryHomeAddressID
    ,FloorArea
    ,AverageMonthlySales
    ,YearsInBusiness
    ,ExistingBranch
    ,FaxNumber
    ,Description
    ,Active
    ,ManagerName
    ,PaymentTermsID
    ,BranchType
    ,AliasName
    ,CustomerSinceDate
    ,CreditDays
    ,StockHolder1
    ,StockHolder2
    ,StockHolder3
    ,Comments
    ,GoodStandingFlg
    ,Created
    ,CreatedBy
    ,LastUpdBy
    ,PrimaryRepID
    ,EmailAddress
    ,AltEmailAddress
    ,Website
    ,MainPhone
    ,AltPhone
    ,`Status`
    ,Capitalization
    ,AverageRating
    ,Image
) VALUES (
    acc_RowID
    ,acc_CompanyName
    ,acc_TradeName
    ,acc_MobilePhone
    ,acc_OrganizationID
    ,(IFNULL(maxAcctNumber,0) + 1)
    ,acc_PrimaryContactID
    ,acc_PrimaryAddressID
    ,acc_PrimaryBillToAddressID
    ,acc_PrimarySoldToAddressID
    ,acc_PrimaryShipToAddressID
    ,acc_PrimaryAgreementID
    ,acc_PrimaryBillToPersonID
    ,acc_PrimaryShipToPersonID
    ,acc_PrimarySoldToPersonID
    ,acc_ParentAccountID
    ,acc_VATRegistrationNo
    ,acc_ATPNo
    ,'Supplier'
    ,acc_BranchFlg
    ,acc_BusinessType
    ,acc_PrimaryHomeAddressID
    ,acc_FloorArea
    ,acc_AverageMonthlySales
    ,acc_YearsInBusiness
    ,acc_ExistingBranch
    ,acc_FaxNumber
    ,acc_Description
    ,acc_Active
    ,acc_ManagerName
    ,acc_PaymentTermsID
    ,acc_BranchType
    ,acc_AliasName
    ,acc_CustomerSinceDate
    ,acc_CreditDays
    ,acc_StockHolder1
    ,acc_StockHolder2
    ,acc_StockHolder3
    ,acc_Comments
    ,acc_GoodStandingFlg
    ,CURRENT_TIMESTAMP()
    ,acc_CreatedBy
    ,acc_LastUpdBy
    ,acc_PrimaryRepID
    ,acc_EmailAddress
    ,acc_AltEmailAddress
    ,acc_Website
    ,acc_MainPhone
    ,acc_AltPhone
    ,acc_Status
    ,acc_Capitalization
    ,acc_AverageRating
    ,acc_Image
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=acc_LastUpdBy
    ,CompanyName=acc_CompanyName
    ,TradeName=acc_TradeName
    ,MobilePhone=acc_MobilePhone
    ,PrimaryContactID=acc_PrimaryContactID
    ,PrimaryAddressID=acc_PrimaryAddressID
    ,PrimaryBillToAddressID=acc_PrimaryBillToAddressID
    ,PrimarySoldToAddressID=acc_PrimarySoldToAddressID
    ,PrimaryShipToAddressID=acc_PrimaryShipToAddressID
    ,PrimaryAgreementID=acc_PrimaryAgreementID
    ,PrimaryBillToPersonID=acc_PrimaryBillToPersonID
    ,PrimaryShipToPersonID=acc_PrimaryShipToPersonID
    ,PrimarySoldToPersonID=acc_PrimarySoldToPersonID
    ,ParentAccountID=acc_ParentAccountID
    ,VATRegistrationNo=acc_VATRegistrationNo
    ,ATPNo=acc_ATPNo
    ,BranchFlg=acc_BranchFlg
    ,BusinessType=acc_BusinessType
    ,PrimaryHomeAddressID=acc_PrimaryHomeAddressID
    ,FloorArea=acc_FloorArea
    ,AverageMonthlySales=acc_AverageMonthlySales
    ,YearsInBusiness=acc_YearsInBusiness
    ,ExistingBranch=acc_ExistingBranch
    ,FaxNumber=acc_FaxNumber
    ,Description=acc_Description
    ,Active=acc_Active
    ,ManagerName=acc_ManagerName
    ,PaymentTermsID=acc_PaymentTermsID
    ,BranchType=acc_BranchType
    ,AliasName=acc_AliasName
    ,CustomerSinceDate=acc_CustomerSinceDate
    ,CreditDays=acc_CreditDays
    ,StockHolder1=acc_StockHolder1
    ,StockHolder2=acc_StockHolder2
    ,StockHolder3=acc_StockHolder3
    ,Comments=acc_Comments
    ,GoodStandingFlg=acc_GoodStandingFlg
    ,PrimaryRepID=acc_PrimaryRepID
    ,EmailAddress=acc_EmailAddress
    ,AltEmailAddress=acc_AltEmailAddress
    ,Website=acc_Website
    ,MainPhone=acc_MainPhone
    ,AltPhone=acc_AltPhone
    ,`Status`=acc_Status
    ,Capitalization=acc_Capitalization
    ,AverageRating=acc_AverageRating
    ,Image=acc_Image;SELECT @@Identity AS id INTO acctID;

RETURN acctID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_address
DROP FUNCTION IF EXISTS `INSUPD_address`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_address`(
	`ad_rowid` INT,
	`user_rowid` INT,
	`ad_street1` VARCHAR(200),
	`ad_street2` VARCHAR(50),
	`ad_brgy` VARCHAR(50),
	`ad_city` VARCHAR(50),
	`ad_state` VARCHAR(50),
	`ad_country` VARCHAR(50),
	`ad_zipcode` VARCHAR(50)


) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

INSERT INTO address
(
	RowID
	,StreetAddress1
	,StreetAddress2
	,Barangay
	,CityTown
	,Country
	,State
	,ZipCode
	,CreatedBy
	,LastUpdBy
	,Created
	,LastUpd
) VALUES (
	ad_rowid
	,ad_street1
	,ad_street2
	,ad_brgy
	,ad_city
	,ad_country
	,ad_state
	,ad_zipcode
	,user_rowid
	,user_rowid
	,CURRENT_TIMESTAMP()
	,CURRENT_TIMESTAMP()
) ON
DUPLICATE
KEY
UPDATE
	LastUpd = CURRENT_TIMESTAMP()
	,LastUpdBy = user_rowid
	,StreetAddress1 = ad_street1
	,StreetAddress2 = ad_street2
	,Barangay = ad_brgy
	,CityTown = ad_city
	,Country = ad_country
	,State = ad_state
	,ZipCode = ad_zipcode;
SELECT @@Identity `ID` INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_agency
DROP FUNCTION IF EXISTS `INSUPD_agency`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_agency`(`ag_RowID` INT, `ag_OrganizationID` INT, `ag_UserRowID` INT, `ag_AgencyName` VARCHAR(50), `ag_AgencyFee` DECIMAL(11,2), `ag_AddressID` INT, `ag_IsActive` TINYINT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

INSERT INTO agency
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,LastUpdBy
    ,AgencyName
    ,`AgencyFee`
    ,AddressID
    ,IsActive
)
SELECT
    ag_RowID
    ,og.RowID
    ,CURRENT_TIMESTAMP()
    ,ag_UserRowID
    ,ag_UserRowID
    ,ag_AgencyName
    ,ag_AgencyFee
    ,ag_AddressID
    ,ag_IsActive
FROM organization og
WHERE og.RowID != ag_OrganizationID
ON DUPLICATE KEY UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy = ag_UserRowID
    ,AgencyName = ag_AgencyName
    ,AddressID = ag_AddressID
    ,IsActive = ag_IsActive;

INSERT INTO agency
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,LastUpdBy
    ,AgencyName
    ,`AgencyFee`
    ,AddressID
    ,IsActive
)
VALUES
(
    ag_RowID
    ,ag_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,ag_UserRowID
    ,ag_UserRowID
    ,ag_AgencyName
    ,ag_AgencyFee
    ,ag_AddressID
    ,ag_IsActive
)
ON DUPLICATE KEY UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=ag_UserRowID
    ,AgencyName = ag_AgencyName
    ,`AgencyFee` = ag_AgencyFee
    ,AddressID = ag_AddressID
    ,IsActive = ag_IsActive;

SELECT @@Identity AS ID
INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_agencyfee
DROP FUNCTION IF EXISTS `INSUPD_agencyfee`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_agencyfee`(`agf_RowID` INT, `agf_OrganizationID` INT, `agf_UserRowID` INT, `agf_AgencyID` INT, `agf_EmployeeID` INT, `agf_EmpPositionID` INT, `agf_DivisionID` INT, `agf_TimeEntryID` INT, `agf_TimeEntryDate` DATE, `agf_DailyFee` DECIMAL(11,6)) RETURNS int(11)
    DETERMINISTIC
    COMMENT 'agencyfee'
BEGIN

DECLARE returnvalue INT(11);



INSERT INTO agencyfee
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,AgencyID
    ,EmployeeID
    ,EmpPositionID
    ,DivisionID
    ,TimeEntryID
    ,TimeEntryDate
    ,DailyFee
) VALUES (
    agf_RowID
    ,agf_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,agf_UserRowID
    ,agf_AgencyID
    ,agf_EmployeeID
    ,agf_EmpPositionID
    ,agf_DivisionID
    ,agf_TimeEntryID
    ,agf_TimeEntryDate
    ,IFNULL(agf_DailyFee,0)
) ON
DUPLICATE
KEY
UPDATE
    LastUpd = CURRENT_TIMESTAMP()
    ,LastUpdBy = agf_UserRowID
    ,EmpPositionID = agf_EmpPositionID
    ,EmpPositionID = agf_EmpPositionID
    ,TimeEntryID = agf_TimeEntryID
    ,DailyFee = IFNULL(agf_DailyFee,0);SELECT @@Identity AS ID INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_bonusloandeduction
DROP FUNCTION IF EXISTS `INSUPD_bonusloandeduction`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_bonusloandeduction`(`bld_RowID` INT, `OrganizID` INT, `UserRowID` INT, `bld_LoanSchedID` INT, `bld_PayPeriodID` INT, `bld_DeductionLoanAmount` DECIMAL(10,2)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

INSERT INTO bonusloandeduction
(
    RowID
    ,OrganizationID
    ,CreatedBy
    ,LoanSchedID
    ,PayPeriodID
    ,DeductionLoanAmount
) VALUES (
    bld_RowID
    ,OrganizID
    ,UserRowID
    ,bld_LoanSchedID
    ,bld_PayPeriodID
    ,bld_DeductionLoanAmount
) ON
DUPLICATE
KEY
UPDATE
    LastUpdBy=UserRowID;SELECT @@Identity AS ID INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_branch
DROP FUNCTION IF EXISTS `INSUPD_branch`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_branch`(`br_RowID` INT, `br_OrganizID` INT, `br_UserRowID` INT, `br_BranchCode` VARCHAR(100), `br_BranchName` VARCHAR(100), `br_areaID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

INSERT INTO branch
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,BranchCode
    ,BranchName
    ,AreaID
) VALUES (
    br_RowID
    ,br_OrganizID
    ,CURRENT_TIMESTAMP()
    ,br_UserRowID
    ,br_BranchCode
    ,br_BranchName
    ,br_areaID
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=br_UserRowID
    ,BranchCode=br_BranchCode
    ,BranchName=br_BranchName
    ,AreaID=br_areaID;SELECT @@Identity AS ID INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_category
DROP FUNCTION IF EXISTS `INSUPD_category`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_category`(`cat_RowID` INT, `cat_CategoryName` VARCHAR(50), `cat_OrganizationID` INT, `cat_CatalogID` INT) RETURNS int(11)
    DETERMINISTIC
    COMMENT 'will insert a row and return its RowID if ''cat_RowID'' don''t exist in category table or else will update the table base on ''cat_RowID'''
BEGIN

DECLARE cat_ID INT(11);

DECLARE newCatID INT(11);

SELECT COALESCE(MAX(CategoryID),0) + 1 FROM category WHERE OrganizationID=cat_OrganizationID AND CategoryName=cat_CategoryName INTO newCatID;

INSERT INTO category
(
    RowID
    ,CategoryID
    ,CategoryName
    ,OrganizationID
    ,CatalogID
    ,LastUpd
) SELECT
    cat_RowID
    ,newCatID
    ,cat_CategoryName
    ,og.RowID
    ,NULL
    ,CURRENT_TIMESTAMP()
    FROM organization og WHERE og.RowID > 0
ON
DUPLICATE
KEY
UPDATE LastUpd=CURRENT_TIMESTAMP();SELECT @@Identity AS id INTO cat_ID;





RETURN cat_ID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_divisionminimumwage
DROP FUNCTION IF EXISTS `INSUPD_divisionminimumwage`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_divisionminimumwage`(`dmw_RowID` INT, `dmw_OrganizID` INT, `dmw_UserRowID` INT, `dmw_DivisionID` INT, `dmw_Amount` DECIMAL(10,2), `dmw_EffectiveDateFrom` DATE, `dmw_EffectiveDateTo` DATE) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

INSERT INTO divisionminimumwage
(
    RowID
    ,OrganizationID
    ,CreatedBy
    ,DivisionID
    ,Amount
    ,EffectiveDateFrom
    ,EffectiveDateTo
) VALUES (
    dmw_RowID
    ,dmw_OrganizID
    ,dmw_UserRowID
    ,dmw_DivisionID
    ,dmw_Amount
    ,dmw_EffectiveDateFrom
    ,dmw_EffectiveDateTo
) ON
DUPLICATE
KEY
UPDATE
    LastUpdBy=dmw_UserRowID
    ,Amount=dmw_Amount
    ,EffectiveDateFrom=dmw_EffectiveDateFrom
    ,EffectiveDateTo=dmw_EffectiveDateTo;SELECT @@Identity AS ID INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_division_location
DROP FUNCTION IF EXISTS `INSUPD_division_location`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_division_location`(`DivisionRowID` INT, `OrganizID` INT, `DivisionLocationName` VARCHAR(50), `UserRowID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

    INSERT INTO `division` (
        RowID,
        Name,
        OrganizationID,
        CreatedBy,
        ParentDivisionID
    )
    VALUES (
        DivisionRowID,
        DivisionLocationName,
        OrganizID,
        UserRowID,
        NULL
    )
    ON DUPLICATE KEY
    UPDATE
        LastUpd = CURRENT_TIMESTAMP(),
        LastUpdBy = UserRowID,
        Name = DivisionLocationName,
		  ParentDivisionID = NULL;

    SELECT @@Identity AS ID
    INTO returnvalue;

    IF DivisionRowID IS NULL THEN

        INSERT INTO `division`(
            Name,
            TradeName,
            OrganizationID,
            MainPhone,
            FaxNumber,
            BusinessAddress,
            ContactName,
            EmailAddress,
            AltEmailAddress,
            AltPhone,
            URL,
            TINNo,
            Created,
            CreatedBy,
            DivisionType,
            GracePeriod,
            WorkDaysPerYear,
            PhHealthDeductSched,
            HDMFDeductSched,
            SSSDeductSched,
            WTaxDeductSched,
            DefaultVacationLeave,
            DefaultSickLeave,
            DefaultMaternityLeave,
            DefaultPaternityLeave,
            DefaultOtherLeave,
            PayFrequencyID,
            PhHealthDeductSchedAgency,
            HDMFDeductSchedAgency,
            SSSDeductSchedAgency,
            WTaxDeductSchedAgency,
            DivisionUniqueID,
            ParentDivisionID
        )
        SELECT
            'Default Division',
            '',
            OrganizID,
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            CURRENT_TIMESTAMP(),
            UserRowID,
            'Department',
            15.00,
            313,
            'Per pay period',
            'Per pay period',
            'Per pay period',
            'Per pay period',
            40.00,
            40.00,
            40.00,
            40.00,
            40.00,
            1,
            'Per pay period',
            'Per pay period',
            'Per pay period',
            'Per pay period',
            2,
            returnvalue;

    END IF;

    RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employee
DROP FUNCTION IF EXISTS `INSUPD_employee`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employee`(`emplo_RowID` INT, `emplo_UserID` INT, `emplo_OrganizationID` INT, `emplo_Salutation` VARCHAR(50), `emplo_FirstName` VARCHAR(100), `emplo_MiddleName` VARCHAR(100), `emplo_LastName` VARCHAR(100), `emplo_Surname` VARCHAR(50), `emplo_EmployeeID` VARCHAR(50), `emplo_TINNo` VARCHAR(50), `emplo_SSSNo` VARCHAR(50), `emplo_HDMFNo` VARCHAR(50), `emplo_PhilHealthNo` VARCHAR(50), `emplo_EmploymentStatus` VARCHAR(50), `emplo_EmailAddress` VARCHAR(50), `emplo_WorkPhone` VARCHAR(50), `emplo_HomePhone` VARCHAR(50), `emplo_MobilePhone` VARCHAR(50), `emplo_HomeAddress` VARCHAR(1000), `emplo_Nickname` VARCHAR(50), `emplo_JobTitle` VARCHAR(50), `emplo_Gender` VARCHAR(50), `emplo_EmployeeType` VARCHAR(50), `emplo_MaritalStatus` VARCHAR(50), `emplo_Birthdate` DATE, `emplo_Startdate` DATE, `emplo_TerminationDate` DATE, `emplo_PositionID` INT, `emplo_PayFrequencyID` INT, `emplo_NoOfDependents` INT, `emplo_Image` LONGBLOB, `emplo_LeavePerPayPeriod` DECIMAL(10,2), `emplo_SickLeavePerPayPeriod` DECIMAL(10,2), `emplo_MaternityLeavePerPayPeriod` DECIMAL(10,2), `emplo_OtherLeavePerPayPeriod` DECIMAL(10,2), `emplo_UndertimeOverride` VARCHAR(1), `emplo_OvertimeOverride` VARCHAR(1), `emplo_LeaveBalance` DECIMAL(10,2), `emplo_SickLeaveBalance` DECIMAL(10,2), `emplo_MaternityLeaveBalance` DECIMAL(10,2), `emplo_OtherLeaveBalance` DECIMAL(10,2), `emplo_LeaveAllowance` DECIMAL(10,2), `emplo_SickLeaveAllowance` DECIMAL(10,2), `emplo_MaternityLeaveAllowance` DECIMAL(10,2), `emplo_OtherLeaveAllowance` DECIMAL(10,2), `emplo_AlphaListExempted` VARCHAR(50), `emplo_WorkDaysPerYear` DECIMAL(11,4), `emplo_DayOfRest` CHAR(1), `emplo_ATMNo` VARCHAR(50), `emplo_BankName` VARCHAR(50), `emplo_CalcHoliday` CHAR(1), `emplo_CalcSpecialHoliday` CHAR(1), `emplo_CalcNightDiff` CHAR(1), `emplo_CalcNightDiffOT` CHAR(1), `emplo_CalcRestDay` CHAR(1), `emplo_CalcRestDayOT` CHAR(1), `emplo_DateRegularized` DATE, `emplo_DateEvaluated` DATE, `emplo_RevealInPayroll` CHAR(1), `emplo_LateGracePeriod` DECIMAL(10,2), `emplo_AgencyID` INT, `emplo_OffsetBalance` DECIMAL(10,2)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE emploRowID INT(11);

DECLARE anakbilang INT(11);

SELECT COUNT(RowID) FROM employeedependents edp WHERE edp.ParentEmployeeID=emplo_RowID INTO anakbilang;

INSERT INTO employee
(
    RowID
    ,CreatedBy
    ,LastUpdBy
    ,Created
    ,OrganizationID
    ,Salutation
    ,FirstName
    ,MiddleName
    ,LastName
    ,Surname
    ,EmployeeID
    ,TINNo
    ,SSSNo
    ,HDMFNo
    ,PhilHealthNo
    ,EmploymentStatus
    ,EmailAddress
    ,WorkPhone
    ,HomePhone
    ,MobilePhone
    ,HomeAddress
    ,Nickname
    ,JobTitle
    ,Gender
    ,EmployeeType
    ,MaritalStatus
    ,Birthdate
    ,StartDate
    ,TerminationDate
    ,PositionID
    ,PayFrequencyID
    ,NoOfDependents
    ,UndertimeOverride
    ,OvertimeOverride
    ,NewEmployeeFlag
    ,LeaveBalance
    ,SickLeaveBalance
    ,MaternityLeaveBalance
    ,OtherLeaveBalance
    ,LeaveAllowance
    ,SickLeaveAllowance
    ,MaternityLeaveAllowance
    ,OtherLeaveAllowance
    ,Image
    ,LeavePerPayPeriod
    ,SickLeavePerPayPeriod
    ,MaternityLeavePerPayPeriod
    ,OtherLeavePerPayPeriod
    ,AlphaListExempted
    ,WorkDaysPerYear
    ,DayOfRest
    ,ATMNo
    ,BankName
    ,CalcHoliday
    ,CalcSpecialHoliday
    ,CalcNightDiff
    ,CalcNightDiffOT
    ,CalcRestDay
    ,CalcRestDayOT
    ,DateRegularized
    ,DateEvaluated
    ,RevealInPayroll
    ,LateGracePeriod
    ,AgencyID
    ,OffsetBalance
) VALUES (
    emplo_RowID
    ,emplo_UserID
    ,emplo_UserID
    ,CURRENT_TIMESTAMP()
    ,emplo_OrganizationID
    ,emplo_Salutation
    ,emplo_FirstName
    ,emplo_MiddleName
    ,emplo_LastName
    ,emplo_Surname
    ,emplo_EmployeeID
    ,emplo_TINNo
    ,emplo_SSSNo
    ,emplo_HDMFNo
    ,emplo_PhilHealthNo
    ,emplo_EmploymentStatus
    ,emplo_EmailAddress
    ,emplo_WorkPhone
    ,emplo_HomePhone
    ,emplo_MobilePhone
    ,emplo_HomeAddress
    ,emplo_Nickname
    ,emplo_JobTitle
    ,emplo_Gender
    ,emplo_EmployeeType
    ,emplo_MaritalStatus
    ,emplo_Birthdate
    ,emplo_Startdate
    ,emplo_TerminationDate
    ,emplo_PositionID
    ,emplo_PayFrequencyID
    ,anakbilang
    ,emplo_UndertimeOverride
    ,emplo_OvertimeOverride
    ,'1'
    ,emplo_LeaveBalance
    ,emplo_SickLeaveBalance
    ,emplo_MaternityLeaveBalance
    ,emplo_OtherLeaveBalance
    ,emplo_LeaveAllowance
    ,emplo_SickLeaveAllowance
    ,emplo_MaternityLeaveAllowance
    ,emplo_OtherLeaveAllowance
    ,emplo_Image
    ,emplo_LeavePerPayPeriod
    ,emplo_SickLeavePerPayPeriod
    ,emplo_MaternityLeavePerPayPeriod
    ,emplo_OtherLeavePerPayPeriod
    ,emplo_AlphaListExempted
    ,emplo_WorkDaysPerYear
    ,emplo_DayOfRest
    ,emplo_ATMNo
    ,emplo_BankName
    ,emplo_CalcHoliday
    ,emplo_CalcSpecialHoliday
    ,emplo_CalcNightDiff
    ,emplo_CalcNightDiffOT
    ,emplo_CalcRestDay
    ,emplo_CalcRestDayOT
    ,emplo_DateRegularized
    ,emplo_DateEvaluated
    ,emplo_RevealInPayroll
    ,emplo_LateGracePeriod
    ,emplo_AgencyID
    ,emplo_OffsetBalance
) ON
DUPLICATE
KEY
UPDATE
    LastUpdBy=emplo_UserID
    ,LastUpd=CURRENT_TIMESTAMP()
    ,Salutation=emplo_Salutation
    ,FirstName=emplo_FirstName
    ,MiddleName=emplo_MiddleName
    ,LastName=emplo_LastName
    ,Surname=emplo_Surname
    ,EmployeeID=emplo_EmployeeID
    ,TINNo=emplo_TINNo
    ,SSSNo=emplo_SSSNo
    ,HDMFNo=emplo_HDMFNo
    ,PhilHealthNo=emplo_PhilHealthNo
    ,EmploymentStatus=emplo_EmploymentStatus
    ,EmailAddress=emplo_EmailAddress
    ,WorkPhone=emplo_WorkPhone
    ,HomePhone=emplo_HomePhone
    ,MobilePhone=emplo_MobilePhone
    ,HomeAddress=emplo_HomeAddress
    ,Nickname=emplo_Nickname
    ,JobTitle=emplo_JobTitle
    ,Gender=emplo_Gender
    ,EmployeeType=emplo_EmployeeType
    ,MaritalStatus=emplo_MaritalStatus
    ,Birthdate=emplo_Birthdate
    ,StartDate=emplo_Startdate
    ,PositionID=emplo_PositionID
    ,PayFrequencyID=emplo_PayFrequencyID
    ,NoOfDependents=anakbilang
    ,UndertimeOverride=emplo_UndertimeOverride
    ,OvertimeOverride=emplo_OvertimeOverride
    ,LeaveAllowance=emplo_LeaveAllowance
    ,SickLeaveAllowance=emplo_SickLeaveAllowance
    ,MaternityLeaveAllowance=emplo_MaternityLeaveAllowance
    ,OtherLeaveAllowance=emplo_OtherLeaveAllowance
    ,Image=emplo_Image
    ,LeavePerPayPeriod=emplo_LeavePerPayPeriod
    ,SickLeavePerPayPeriod=emplo_SickLeavePerPayPeriod
    ,MaternityLeavePerPayPeriod=emplo_MaternityLeavePerPayPeriod
    ,OtherLeavePerPayPeriod=emplo_OtherLeavePerPayPeriod
    ,AlphaListExempted=emplo_AlphaListExempted
    ,WorkDaysPerYear=emplo_WorkDaysPerYear
    ,DayOfRest=emplo_DayOfRest
    ,ATMNo=emplo_ATMNo
    ,BankName=emplo_BankName
    ,CalcHoliday=emplo_CalcHoliday
    ,CalcSpecialHoliday=emplo_CalcSpecialHoliday
    ,CalcNightDiff=emplo_CalcNightDiff
    ,CalcNightDiffOT=emplo_CalcNightDiffOT
    ,CalcRestDay=emplo_CalcRestDay
    ,CalcRestDayOT=emplo_CalcRestDayOT
    ,DateRegularized=emplo_DateRegularized
    ,DateEvaluated=emplo_DateEvaluated
    ,RevealInPayroll=emplo_RevealInPayroll
    ,LateGracePeriod=emplo_LateGracePeriod
    ,AgencyID=emplo_AgencyID
    ,OffsetBalance=emplo_OffsetBalance
    ,MaternityLeaveBalance=emplo_MaternityLeaveBalance
    ,OtherLeaveBalance=emplo_OtherLeaveBalance;SELECT @@Identity AS id INTO emploRowID;

RETURN emploRowID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeallowance
DROP FUNCTION IF EXISTS `INSUPD_employeeallowance`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeeallowance`(`eall_RowID` INT, `eall_OrganizationID` INT, `eall_EmployeeID` INT, `eall_CreatedBy` INT, `eall_LastUpdBy` INT, `eall_ProductID` INT, `eall_AllowanceFrequency` VARCHAR(50), `eall_EffectiveStartDate` DATE, `eall_EffectiveEndDate` DATE, `eall_Amount` DECIMAL(11,6)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE eallow_RowID INT(11);

INSERT INTO employeeallowance
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,EmployeeID
    ,ProductID
    ,EffectiveStartDate
    ,AllowanceFrequency
    ,EffectiveEndDate
    ,TaxableFlag
    ,AllowanceAmount
) VALUES (
    eall_RowID
    ,eall_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,eall_CreatedBy
    ,eall_EmployeeID
    ,eall_ProductID
    ,eall_EffectiveStartDate
    ,eall_AllowanceFrequency
    ,eall_EffectiveEndDate
    ,(SELECT `Status` FROM product WHERE RowID=eall_ProductID)
    ,eall_Amount
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=eall_LastUpdBy
    ,EmployeeID=eall_EmployeeID
    ,ProductID=eall_ProductID
    ,EffectiveStartDate=eall_EffectiveStartDate
    ,AllowanceFrequency=eall_AllowanceFrequency
    ,EffectiveEndDate=eall_EffectiveEndDate
    ,TaxableFlag=(SELECT `Status` FROM product WHERE RowID=eall_ProductID)
    ,AllowanceAmount=eall_Amount;SELECT @@Identity AS ID INTO eallow_RowID;

RETURN eallow_RowID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeattachment
DROP FUNCTION IF EXISTS `INSUPD_employeeattachment`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeeattachment`(`eatta_RowID` INT, `eatta_EmployeeID` INT, `eatta_CreatedBy` INT, `eatta_LastUpdBy` INT, `eatta_Type` VARCHAR(100), `eatta_FileName` VARCHAR(100), `eatta_FileType` VARCHAR(100), `eatta_AttachedFile` LONGBLOB) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE empattaID INT(11);



INSERT INTO employeeattachments
(
    RowID
    ,`Type`
    ,FileName
    ,FileType
    ,EmployeeID
    ,Created
    ,CreatedBy
    ,AttachedFile
) VALUES (
    eatta_RowID
    ,eatta_Type
    ,eatta_FileName
    ,eatta_FileType
    ,eatta_EmployeeID
    ,CURRENT_TIMESTAMP()
    ,eatta_CreatedBy
    ,eatta_AttachedFile
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=eatta_LastUpdBy
    ,`Type`=eatta_Type
    ,FileName=eatta_FileName
    ,FileType=eatta_FileType
    ,AttachedFile=eatta_AttachedFile;SELECT @@Identity AS id INTO empattaID;

RETURN empattaID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeattachments
DROP FUNCTION IF EXISTS `INSUPD_employeeattachments`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeeattachments`(`eatta_RowID` INT, `eatta_CreatedBy` INT, `eatta_LastUpdBy` INT, `eatta_EmployeeID` INT, `eatta_Type` VARCHAR(50), `eatta_AttachedFile` LONGBLOB, `eatta_FileType` VARCHAR(50), `eatta_FileName` VARCHAR(50)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE eatta_ID INT(11);

DECLARE record_attaID INT(11) DEFAULT NULL;

SELECT RowID FROM employeeattachments WHERE eatta_EmployeeID=eatta_EmployeeID AND `Type`=eatta_Type LIMIT 1 INTO record_attaID;

INSERT INTO employeeattachments
(
    RowID
    ,CreatedBy
    ,EmployeeID
    ,`Type`
    ,Created
    ,AttachedFile
    ,FileType
    ,FileName
) VALUES (
    IF(eatta_RowID IS NULL,record_attaID,eatta_RowID)
    ,eatta_CreatedBy
    ,eatta_EmployeeID
    ,eatta_Type
    ,CURRENT_TIMESTAMP()
    ,eatta_AttachedFile
    ,eatta_FileType
    ,eatta_FileName
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=eatta_LastUpdBy
    ,FileType=eatta_FileType
    ,FileName=eatta_FileName;SELECT @@Identity AS id INTO eatta_ID;

RETURN eatta_ID;



END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeawards
DROP FUNCTION IF EXISTS `INSUPD_employeeawards`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeeawards`(`eawa_RowID` INT, `eawa_OrganizationID` INT, `eawa_Created` TIMESTAMP, `eawa_CreatedBy` INT, `eawa_LastUpd` DATETIME, `eawa_LastUpdBy` INT, `eawa_EmployeeID` INT, `eawa_AwardType` VARCHAR(500), `eawa_AwardDescription` VARCHAR(500), `eawa_AwardDate` VARCHAR(500)) RETURNS int(11)
    DETERMINISTIC
    COMMENT 'will insert a row and return its RowID if ''eawa_int'' don''t exist in employeeawards table or else will update the table base on ''eawa_int'''
BEGIN

DECLARE eawa_int INT(11);

INSERT INTO employeeawards
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,LastUpdBy
    ,EmployeeID
    ,AwardType
    ,AwardDescription
    ,AwardDate
) VALUES (
    eawa_RowID
    ,eawa_OrganizationID
    ,eawa_Created
    ,eawa_CreatedBy
    ,eawa_LastUpdBy
    ,eawa_EmployeeID
    ,eawa_AwardType
    ,eawa_AwardDescription
    ,eawa_AwardDate
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=eawa_LastUpdBy
    ,AwardType=eawa_AwardType
    ,AwardDescription=eawa_AwardDescription
    ,AwardDate=eawa_AwardDate;SELECT @@Identity AS id INTO eawa_int;

RETURN eawa_int;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeebonus
DROP FUNCTION IF EXISTS `INSUPD_employeebonus`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeebonus`(`bon_RowID` INT, `bon_OrganizationID` INT, `bon_CreatedBy` INT, `bon_LastUpdBy` INT, `bon_EmployeeID` INT, `bon_AllowanceFrequency` VARCHAR(50), `bon_EffectiveStartDate` DATE, `bon_EffectiveEndDate` DATE, `bon_ProductID` INT, `bon_BonusAmount` DECIMAL(11,6)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE bon_ID INT(11);

INSERT INTO employeebonus
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,EmployeeID
    ,ProductID
    ,EffectiveStartDate
    ,AllowanceFrequency
    ,EffectiveEndDate
    ,TaxableFlag
    ,BonusAmount
) VALUES (
    bon_RowID
    ,bon_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,bon_CreatedBy
    ,bon_EmployeeID
    ,bon_ProductID
    ,bon_EffectiveStartDate
    ,bon_AllowanceFrequency
    ,bon_EffectiveEndDate
    ,(SELECT `Status` FROM product WHERE RowID=bon_ProductID)
    ,bon_BonusAmount
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=bon_LastUpdBy
    ,ProductID=bon_ProductID
    ,EffectiveStartDate=bon_EffectiveStartDate
    ,AllowanceFrequency=bon_AllowanceFrequency
    ,EffectiveEndDate=bon_EffectiveEndDate
    ,TaxableFlag=(SELECT `Status` FROM product WHERE RowID=bon_ProductID)
    ,BonusAmount=bon_BonusAmount;SELECT @@Identity AS id INTO bon_ID;

RETURN bon_ID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeecertification
DROP FUNCTION IF EXISTS `INSUPD_employeecertification`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeecertification`(`ecer_RowID` INT, `ecer_OrganizationID` INT, `ecer_Created` TIMESTAMP, `ecer_CreatedBy` INT, `ecer_LastUpd` DATETIME, `ecer_LastUpdBy` INT, `ecer_EmployeeID` INT, `ecer_CertificationType` VARCHAR(50), `ecer_IssuingAuthority` VARCHAR(50), `ecer_CertificationNo` VARCHAR(50), `ecer_IssueDate` DATE, `ecer_ExpirationDate` DATE, `ecer_Comments` VARCHAR(2000)) RETURNS int(11)
    DETERMINISTIC
    COMMENT 'will insert a row and return its RowID if ''ecer_int'' don''t exist in employeecertification table or else will update the table base on ''ecer_int'''
BEGIN

DECLARE ecer_int INT(11);

INSERT INTO employeecertification
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,LastUpdBy
    ,EmployeeID
    ,CertificationType
    ,IssuingAuthority
    ,CertificationNo
    ,IssueDate
    ,ExpirationDate
    ,Comments
) VALUES (
    ecer_RowID
    ,ecer_OrganizationID
    ,ecer_Created
    ,ecer_CreatedBy
    ,ecer_LastUpdBy
    ,ecer_EmployeeID
    ,ecer_CertificationType
    ,ecer_IssuingAuthority
    ,ecer_CertificationNo
    ,ecer_IssueDate
    ,ecer_ExpirationDate
    ,ecer_Comments
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=ecer_LastUpdBy
    ,CertificationType=ecer_CertificationType
    ,IssuingAuthority=ecer_IssuingAuthority
    ,CertificationNo=ecer_CertificationNo
    ,IssueDate=ecer_IssueDate
    ,ExpirationDate=ecer_ExpirationDate
    ,Comments=ecer_Comments;SELECT @@Identity AS id INTO ecer_int;

RETURN ecer_int;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeedependents
DROP FUNCTION IF EXISTS `INSUPD_employeedependents`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeedependents`(`emp_RowID` INT, `emp_CreatedBy` INT, `emp_LastUpdBy` INT, `emp_LastUpd` DATETIME, `emp_OrganizationID` INT, `emp_Salutation` VARCHAR(50), `emp_FirstName` VARCHAR(50), `emp_MiddleName` VARCHAR(50), `emp_LastName` VARCHAR(50), `emp_SurName` VARCHAR(50), `emp_ParentEmployeeID` VARCHAR(50), `emp_TINNo` VARCHAR(50), `emp_SSSNo` VARCHAR(50), `emp_HDMFNo` VARCHAR(50), `emp_PhilHealthNo` VARCHAR(50), `emp_EmailAddress` VARCHAR(50), `emp_WorkPhone` VARCHAR(50), `emp_HomePhone` VARCHAR(50), `emp_MobilePhone` VARCHAR(50), `emp_HomeAddress` VARCHAR(2000), `emp_Nickname` VARCHAR(50), `emp_JobTitle` VARCHAR(50), `emp_Gender` VARCHAR(50), `emp_RelationToEmployee` VARCHAR(50), `emp_ActiveFlag` VARCHAR(50), `emp_Birthdate` DATE, `emp_IsDoneByImporting` TEXT) RETURNS int(11)
    DETERMINISTIC
    COMMENT 'will insert a row and return its RowID if ''empdepenID'' don''t exist in employeedependents table or else will update the table base on ''empdepenID'''
BEGIN

DECLARE empdepenID INT(11);



IF emp_IsDoneByImporting = '1' THEN

    INSERT INTO listofval
    (
        DisplayValue,LIC,`Type`,ParentLIC,Active,Description,Created,CreatedBy,LastUpd,OrderBy,LastUpdBy
    )
    VALUES
    (
        emp_ParentEmployeeID,CONCAT(emp_ParentEmployeeID,';EmployeeDependent'),'EmployeeDependent',emp_ParentEmployeeID,'No','',CURRENT_TIMESTAMP(),emp_CreatedBy,CURRENT_TIMESTAMP(),1,emp_CreatedBy
    ) ON
    DUPLICATE
    KEY
    UPDATE
        LastUpd=CURRENT_TIMESTAMP();

END IF;


INSERT INTO employeedependents
(
    RowID
    ,Created
    ,CreatedBy
    ,OrganizationID
    ,Salutation
    ,FirstName
    ,MiddleName
    ,LastName
    ,SurName
    ,ParentEmployeeID
    ,TINNo
    ,SSSNo
    ,HDMFNo
    ,PhilHealthNo
    ,EmailAddress
    ,WorkPhone
    ,HomePhone
    ,MobilePhone
    ,HomeAddress
    ,Nickname
    ,JobTitle
    ,Gender
    ,RelationToEmployee
    ,ActiveFlag
    ,Birthdate
) VALUES (
    emp_RowID
    ,CURRENT_TIMESTAMP()
    ,emp_CreatedBy
    ,emp_OrganizationID
    ,emp_Salutation
    ,emp_FirstName
    ,emp_MiddleName
    ,emp_LastName
    ,emp_SurName
    ,emp_ParentEmployeeID
    ,emp_TINNo
    ,emp_SSSNo
    ,emp_HDMFNo
    ,emp_PhilHealthNo
    ,emp_EmailAddress
    ,emp_WorkPhone
    ,emp_HomePhone
    ,emp_MobilePhone
    ,SUBSTRING(emp_HomeAddress,1,1000)
    ,emp_Nickname
    ,emp_JobTitle
    ,emp_Gender
    ,emp_RelationToEmployee
    ,emp_ActiveFlag
    ,emp_Birthdate
) ON
DUPLICATE
KEY
UPDATE
    LastUpdBy=emp_LastUpdBy
    ,LastUpd=CURRENT_TIMESTAMP()
    ,Salutation=emp_Salutation
    ,FirstName=emp_FirstName
    ,MiddleName=emp_MiddleName
    ,LastName=emp_LastName
    ,SurName=emp_SurName
    ,ParentEmployeeID=emp_ParentEmployeeID
    ,TINNo=emp_TINNo
    ,SSSNo=emp_SSSNo
    ,HDMFNo=emp_HDMFNo
    ,PhilHealthNo=emp_PhilHealthNo
    ,EmailAddress=emp_EmailAddress
    ,WorkPhone=emp_WorkPhone
    ,HomePhone=emp_HomePhone
    ,MobilePhone=emp_MobilePhone
    ,HomeAddress=emp_HomeAddress
    ,Nickname=emp_Nickname
    ,JobTitle=emp_JobTitle
    ,Gender=emp_Gender
    ,RelationToEmployee=emp_RelationToEmployee
    ,ActiveFlag=emp_ActiveFlag
    ,Birthdate=emp_Birthdate;SELECT @@Identity AS id INTO empdepenID;




RETURN empdepenID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeleave
DROP FUNCTION IF EXISTS `INSUPD_employeeleave`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeeleave`(`elv_RowID` INT, `elv_OrganizationID` INT, `elv_LeaveStartTime` TIME, `elv_LeaveType` VARCHAR(50), `elv_CreatedBy` INT, `elv_LastUpdBy` INT, `elv_EmployeeID` INT, `elv_LeaveEndTime` TIME, `elv_LeaveStartDate` DATE, `elv_LeaveEndDate` DATE, `elv_Reason` VARCHAR(500), `elv_Comments` VARCHAR(2000), `elv_Image` LONGBLOB, `elv_Status` VARCHAR(50)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE empleaveID INT(11);

DECLARE specialty CONDITION FOR SQLSTATE '45000';

DECLARE emp_employment_stat TEXT;

# SELECT EmploymentStatus FROM employee WHERE RowID=elv_EmployeeID INTO emp_employment_stat;
SET emp_employment_stat = 'Regular';
IF emp_employment_stat = 'Regular' THEN

    INSERT INTO employeeleave
    (
        RowID
        ,OrganizationID
        ,Created
        ,LeaveStartTime
        ,LeaveType
        ,CreatedBy
        ,LastUpdBy
        ,EmployeeID
        ,LeaveEndTime
        ,LeaveStartDate
        ,LeaveEndDate
        ,Reason
        ,Comments
        ,Image
        ,`Status`
    ) VALUES (
        elv_RowID
        ,elv_OrganizationID
        ,CURRENT_TIMESTAMP()
        ,elv_LeaveStartTime
        ,elv_LeaveType
        ,elv_CreatedBy
        ,elv_LastUpdBy
        ,elv_EmployeeID
        ,elv_LeaveEndTime
        ,elv_LeaveStartDate
        ,elv_LeaveEndDate
        ,elv_Reason
        ,elv_Comments
        ,elv_Image
        ,IF(elv_Status = '', 'Pending', elv_Status)
    ) ON
    DUPLICATE
    KEY
    UPDATE
        LeaveStartTime=elv_LeaveStartTime
        ,LeaveType=elv_LeaveType
        ,LastUpd=CURRENT_TIMESTAMP()
        ,LastUpdBy=elv_LastUpdBy
        ,LeaveEndTime=elv_LeaveEndTime
        ,LeaveStartDate=elv_LeaveStartDate
        ,LeaveEndDate=elv_LeaveEndDate
        ,Reason=elv_Reason
        ,Comments=elv_Comments
        ,Image=elv_Image
        ,`Status`=IF(elv_Status = '', 'Pending', elv_Status);SELECT @@Identity AS id INTO empleaveID;

	 SET @leave_rowid = IFNULL(elv_RowID, empleaveID);

    INSERT INTO employeeleave_duplicate
    (
        RowID
        ,OrganizationID
        ,Created
        ,LeaveStartTime
        ,LeaveType
        ,CreatedBy
        ,LastUpdBy
        ,EmployeeID
        ,LeaveEndTime
        ,LeaveStartDate
        ,LeaveEndDate
        ,Reason
        ,Comments
        ,Image
        ,`Status`
    ) SELECT
         @leave_rowid
        ,elv_OrganizationID
        ,CURRENT_TIMESTAMP()
        ,elv_LeaveStartTime
        ,elv_LeaveType
        ,elv_CreatedBy
        ,elv_LastUpdBy
        ,elv_EmployeeID
        ,elv_LeaveEndTime
        ,elv_LeaveStartDate
        ,elv_LeaveEndDate
        ,elv_Reason
        ,elv_Comments
        ,elv_Image
        ,IF(elv_Status = '', 'Pending', elv_Status)

        FROM (SELECT IFNULL(@leave_rowid,0) AS NewRowID) i WHERE i.NewRowID > 0
    ON DUPLICATE KEY UPDATE
        LeaveStartTime=elv_LeaveStartTime
        ,LeaveType=elv_LeaveType
        ,LastUpd=CURRENT_TIMESTAMP()
        ,LastUpdBy=elv_LastUpdBy
        ,LeaveEndTime=elv_LeaveEndTime
        ,LeaveStartDate=elv_LeaveStartDate
        ,LeaveEndDate=elv_LeaveEndDate
        ,Reason=elv_Reason
        ,Comments=elv_Comments
        ,Image=elv_Image
        ,`Status`=IF(elv_Status = '', 'Pending', elv_Status);

ELSE

    SIGNAL specialty
    SET MESSAGE_TEXT = 'LEAVE FILING APPLIES ONLY TO REGULAR EMPLOYEES';

    SET empleaveID = 0;

END IF;



RETURN empleaveID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeleave_indepen
DROP FUNCTION IF EXISTS `INSUPD_employeeleave_indepen`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeeleave_indepen`(
    `elv_RowID` INT,
    `elv_OrganizationID` INT,
    `elv_LeaveStartTime` TIME,
    `elv_LeaveType` VARCHAR(50),
    `elv_CreatedBy` INT,
    `elv_LastUpdBy` INT,
    `elv_EmployeeID` INT,
    `elv_LeaveEndTime` TIME,
    `elv_LeaveStartDate` DATE,
    `elv_LeaveEndDate` DATE,
    `elv_Reason` VARCHAR(500),
    `elv_Comments` VARCHAR(2000),
    `elv_Image` LONGBLOB,
    `elv_Status` VARCHAR(50)
) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE empleaveID INT(11);
DECLARE specialty CONDITION FOR SQLSTATE '45000';
DECLARE emp_employment_stat TEXT;
DECLARE allowLeave BOOLEAN DEFAULT FALSE;
DECLARE has_leave_balance BOOL DEFAULT FALSE;

SELECT EmploymentStatus
FROM employee
WHERE RowID = elv_EmployeeID
INTO emp_employment_stat;

SET allowLeave = (emp_employment_stat = 'Regular') OR
    (elv_LeaveType = 'Leave w/o Pay');

SELECT EXISTS
(
SELECT i.RowID
FROM (
	SELECT e.RowID
	, e.LeaveBalance `BalanceLeave`
	FROM employee e
	WHERE e.RowID = elv_EmployeeID
	AND e.OrganizationID = elv_OrganizationID
	AND elv_LeaveType = 'Vacation leave'
UNION
	SELECT e.RowID
	, e.SickLeaveBalance `BalanceLeave`
	FROM employee e
	WHERE e.RowID = elv_EmployeeID
	AND e.OrganizationID = elv_OrganizationID
	AND elv_LeaveType = 'Sick leave'
UNION
	SELECT e.RowID
	, e.MaternityLeaveBalance `BalanceLeave`
	FROM employee e
	WHERE e.RowID = elv_EmployeeID
	AND e.OrganizationID = elv_OrganizationID
	# AND elv_LeaveType = 'Maternity/paternity leave'
	AND LOCATE('aternity', elv_LeaveType) > 0
UNION
	SELECT e.RowID
	, e.OtherLeaveBalance `BalanceLeave`
	FROM employee e
	WHERE e.RowID = elv_EmployeeID
	AND e.OrganizationID = elv_OrganizationID
	AND elv_LeaveType = 'Others'
     ) i
WHERE i.`BalanceLeave` > 0
)
INTO has_leave_balance;

IF allowLeave AND has_leave_balance THEN

    INSERT INTO employeeleave
    (
        RowID
        ,OrganizationID
        ,Created
        ,LeaveStartTime
        ,LeaveType
        ,CreatedBy
        ,LastUpdBy
        ,EmployeeID
        ,LeaveEndTime
        ,LeaveStartDate
        ,LeaveEndDate
        ,Reason
        ,Comments
        ,Image
        ,`Status`
    ) VALUES (
        elv_RowID
        ,elv_OrganizationID
        ,CURRENT_TIMESTAMP()
        ,elv_LeaveStartTime
        ,elv_LeaveType
        ,DEFAULT_internal_sys_user() # IFNULL(DEFAULT_internal_sys_user(), elv_CreatedBy)
        ,elv_LastUpdBy
        ,elv_EmployeeID
        ,elv_LeaveEndTime
        ,elv_LeaveStartDate
        ,elv_LeaveEndDate
        ,elv_Reason
        ,elv_Comments
        ,elv_Image
        ,IF(elv_Status = '', 'Pending', elv_Status)
    ) ON
    DUPLICATE
    KEY
    UPDATE
        LeaveStartTime=elv_LeaveStartTime
        ,LeaveType=elv_LeaveType
        ,LastUpd=CURRENT_TIMESTAMP()
        ,LastUpdBy=elv_LastUpdBy
        ,LeaveEndTime=elv_LeaveEndTime
        ,LeaveStartDate=elv_LeaveStartDate
        ,LeaveEndDate=elv_LeaveEndDate
        ,Reason=elv_Reason
        ,Comments=elv_Comments
        ,Image=elv_Image
        ,`Status`=IF(elv_Status = '', 'Pending', elv_Status);SELECT @@Identity AS id INTO empleaveID;

    INSERT INTO employeeleave_duplicate
    (
        RowID
        ,OrganizationID
        ,Created
        ,LeaveStartTime
        ,LeaveType
        ,CreatedBy
        ,LastUpdBy
        ,EmployeeID
        ,LeaveEndTime
        ,LeaveStartDate
        ,LeaveEndDate
        ,Reason
        ,Comments
        ,Image
        ,`Status`
    ) SELECT
        empleaveID
        ,elv_OrganizationID
        ,CURRENT_TIMESTAMP()
        ,elv_LeaveStartTime
        ,elv_LeaveType
        ,DEFAULT_internal_sys_user() # IFNULL(DEFAULT_internal_sys_user(), elv_CreatedBy)
        ,elv_LastUpdBy
        ,elv_EmployeeID
        ,elv_LeaveEndTime
        ,elv_LeaveStartDate
        ,elv_LeaveEndDate
        ,elv_Reason
        ,elv_Comments
        ,elv_Image
        ,IF(elv_Status = '', 'Pending', elv_Status)

        FROM (SELECT IFNULL(empleaveID,0) AS NewRowID) i WHERE i.NewRowID > 0
    ON DUPLICATE KEY UPDATE
        LeaveStartTime=elv_LeaveStartTime
        ,LeaveType=elv_LeaveType
        ,LastUpd=CURRENT_TIMESTAMP()
        ,LastUpdBy=elv_LastUpdBy
        ,LeaveEndTime=elv_LeaveEndTime
        ,LeaveStartDate=elv_LeaveStartDate
        ,LeaveEndDate=elv_LeaveEndDate
        ,Reason=elv_Reason
        ,Comments=elv_Comments
        ,Image=elv_Image
        ,`Status`=IF(elv_Status = '', 'Pending', elv_Status);

ELSEIF has_leave_balance = FALSE THEN

    SIGNAL specialty
    SET MESSAGE_TEXT = 'Insufficient leave balance';
    
    SET empleaveID = 0;
    
ELSE

    SIGNAL specialty
    SET MESSAGE_TEXT = 'LEAVE FILING APPLIES ONLY TO REGULAR EMPLOYEES';

    SET empleaveID = 0;

END IF;



RETURN empleaveID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeloanschedule
DROP FUNCTION IF EXISTS `INSUPD_employeeloanschedule`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_employeeloanschedule`(`els_RowID` INT(11)
, `els_OrganizID` INT(11)
, `els_UserRowID` INT(11)
, `els_EmpNumber` VARCHAR(50)
, `els_LoanNum` VARCHAR(50)
, `els_DateFrom` DATE
, `els_TotLoanAmt` DECIMAL(20,6)
, `els_DeductSched` VARCHAR(50)
, `els_TotBalLeft` DECIMAL(20,6)
, `els_DeductAmt` DECIMAL(11,6)
, `els_Status` VARCHAR(50)
, `els_LoanTypeID` INT(11)
, `els_DeductPerc` DECIMAL(11,6)
, `els_NoOfPayPer` INT(11)
, `els_LoanPayPerLeft` INT(11)
, `els_Comments` VARCHAR(2000)
, `els_BonusID` INT(11)
, `els_LoanName` VARCHAR(50)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

DECLARE total_bal_left DECIMAL(11, 2);

SET total_bal_left = IF(els_TotBalLeft = 0 AND els_RowID IS NULL, els_TotLoanAmt, els_TotBalLeft);

INSERT INTO employeeloanschedule
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,EmployeeID
    ,LoanNumber
    ,DedEffectiveDateFrom
    ,TotalLoanAmount
    ,DeductionSchedule
    ,TotalBalanceLeft
    ,DeductionAmount
    ,`Status`
    ,LoanTypeID
    ,DeductionPercentage
    ,NoOfPayPeriod
    ,LoanPayPeriodLeft
    ,Comments
    ,BonusID
    ,LoanName
    ,DedEffectiveDateTo
) SELECT
    IFNULL(els_RowID,els.RowID)
    ,els_OrganizID
    ,CURRENT_TIMESTAMP()
    ,els_UserRowID
    ,e.RowID
    ,TRIM(els_LoanNum)
    ,els_DateFrom
    ,els_TotLoanAmt
    ,els_DeductSched
    ,total_bal_left
    ,els_DeductAmt
    ,els_Status
    ,NULL
    ,els_DeductPerc
    ,(@count_of_payperiod := (els_TotLoanAmt / els_DeductAmt)) # els_NoOfPayPer
    ,((total_bal_left / els_TotLoanAmt) *  @count_of_payperiod)
    ,TRIM(els_Comments)
    ,els_BonusID
    ,TRIM(els_LoanName)
    ,PAYTODATE_OF_NoOfPayPeriod(els_DateFrom,@count_of_payperiod,e.RowID,els_DeductSched) # els_NoOfPayPer
    FROM employee e
    LEFT JOIN employeeloanschedule els ON els.EmployeeID=e.RowID AND els.OrganizationID=e.OrganizationID AND els.LoanName=TRIM(els_LoanName) AND els.DedEffectiveDateFrom=els_DateFrom AND els.`Status`=els_Status AND els.BonusID=0
    WHERE e.EmployeeID=TRIM(els_EmpNumber) AND e.OrganizationID=els_OrganizID AND LENGTH(TRIM(els_LoanName)) > 0
    LIMIT 1
ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=els_UserRowID;SELECT @@Identity AS ID INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeemedicalrecord
DROP FUNCTION IF EXISTS `INSUPD_employeemedicalrecord`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeemedicalrecord`(`emedrec_RowID` INT, `emedrec_OrganizationID` INT, `emedrec_Created` TIMESTAMP, `emedrec_CreatedBy` INT, `emedrec_LastUpdBy` INT, `emedrec_EmployeeID` INT, `emedrec_DateFrom` DATE, `emedrec_DateTo` DATE, `emedrec_ProductID` INT, `emedrec_Finding` VARCHAR(50)) RETURNS int(11)
    DETERMINISTIC
    COMMENT 'will insert a row and return its RowID if ''emedrecID'' don''t exist in employeemedicalrecord table or else will update the table base on ''emedrecID'''
BEGIN

DECLARE emedrecID INT(11);

INSERT INTO employeemedicalrecord
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,LastUpdBy
    ,EmployeeID
    ,DateFrom
    ,DateTo
    ,ProductID
    ,Finding
) VALUES (
    emedrec_RowID
    ,emedrec_OrganizationID
    ,emedrec_Created
    ,emedrec_CreatedBy
    ,emedrec_LastUpdBy
    ,emedrec_EmployeeID
    ,emedrec_DateFrom
    ,emedrec_DateTo
    ,emedrec_ProductID
    ,emedrec_Finding
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=emedrec_LastUpdBy
    ,DateFrom=emedrec_DateFrom
    ,DateTo=emedrec_DateTo
    ,ProductID=emedrec_ProductID
    ,Finding=emedrec_Finding;SELECT @@Identity AS id INTO emedrecID;

RETURN emedrecID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeoffbusi
DROP FUNCTION IF EXISTS `INSUPD_employeeoffbusi`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeeoffbusi`(`obf_RowID` INT, `obf_OrganizationID` INT, `obf_CreatedBy` INT, `obf_LastUpdBy` INT, `obf_EmployeeID` INT, `obf_Type` VARCHAR(50), `obf_StartTime` TIME, `obf_EndTime` TIME, `obf_StartDate` DATE, `obf_EndDate` DATE, `obf_Reason` VARCHAR(500), `obf_Comments` VARCHAR(2000), `obf_Image` LONGBLOB, `obf_OffBusStatus` VARCHAR(500)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE obf_ID INT(11);

INSERT INTO employeeofficialbusiness
(
    RowID
    ,OrganizationID
    ,Created
    ,OffBusStartTime
    ,OffBusType
    ,CreatedBy
    ,EmployeeID
    ,OffBusEndTime
    ,OffBusStartDate
    ,OffBusEndDate
    ,Reason
    ,Comments
    ,OffBusStatus
    ,Image
) VALUES (
    obf_RowID
    ,obf_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,obf_StartTime
    ,obf_Type
    ,obf_CreatedBy
    ,obf_EmployeeID
    ,obf_EndTime
    ,obf_StartDate
    ,obf_EndDate
    ,obf_Reason
    ,obf_Comments
    ,obf_OffBusStatus
    ,obf_Image
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=obf_LastUpdBy
    ,OffBusStartTime=obf_StartTime
    ,OffBusType=obf_Type
    ,OffBusEndTime=obf_EndTime
    ,OffBusStartDate=obf_StartDate
    ,OffBusEndDate=obf_EndDate
    ,Reason=obf_Reason
    ,Comments=obf_Comments
    ,OffBusStatus=obf_OffBusStatus
    ,Image=obf_Image;SELECT @@Identity AS id INTO obf_ID;

RETURN obf_ID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeoffbusi_indepen
DROP FUNCTION IF EXISTS `INSUPD_employeeoffbusi_indepen`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeeoffbusi_indepen`(`obf_RowID` INT, `obf_OrganizationID` INT, `obf_CreatedBy` INT, `obf_LastUpdBy` INT, `obf_EmployeeID` INT, `obf_Type` VARCHAR(50), `obf_StartTime` VARCHAR(50), `obf_EndTime` VARCHAR(50), `obf_StartDate` DATE, `obf_EndDate` DATE, `obf_Reason` VARCHAR(500), `obf_Comments` VARCHAR(2000), `obf_Image` LONGBLOB, `obf_OffBusStatus` VARCHAR(500)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE obf_ID INT(11);

SET obf_StartTime = STR_TO_DATE(obf_StartTime, '%r');
SET obf_EndTime = STR_TO_DATE(obf_EndTime, '%r');

INSERT INTO employeeofficialbusiness
(
    RowID
    ,OrganizationID
    ,Created
    ,OffBusStartTime
    ,OffBusType
    ,CreatedBy
    ,EmployeeID
    ,OffBusEndTime
    ,OffBusStartDate
    ,OffBusEndDate
    ,Reason
    ,Comments
    ,OffBusStatus
    ,Image
) VALUES (
    obf_RowID
    ,obf_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,obf_StartTime
    ,obf_Type
    ,DEFAULT_internal_sys_user() # IFNULL(DEFAULT_internal_sys_user(), obf_CreatedBy)
    ,obf_EmployeeID
    ,obf_EndTime
    ,obf_StartDate
    ,obf_EndDate
    ,obf_Reason
    ,obf_Comments
    ,obf_OffBusStatus
    ,obf_Image
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=obf_LastUpdBy
    ,OffBusStartTime=obf_StartTime
    ,OffBusType=obf_Type
    ,OffBusEndTime=obf_EndTime
    ,OffBusStartDate=obf_StartDate
    ,OffBusEndDate=obf_EndDate
    ,Reason=obf_Reason
    ,Comments=obf_Comments
    ,OffBusStatus=obf_OffBusStatus
    ,Image=obf_Image;SELECT @@Identity AS id INTO obf_ID;

RETURN obf_ID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeoffset
DROP FUNCTION IF EXISTS `INSUPD_employeeoffset`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeeoffset`(
	`eosRowID` INT,
	`eosOrganizationID` INT,
	`eosEmployeeID` INT,
	`eosUserRowID` INT,
	`eosType` VARCHAR(50),
	`eosStartTime` TIME,
	`eosEndTime` TIME,
	`eosStartDate` DATE,
	`eosEndDate` DATE,
	`eosStatus` VARCHAR(50),
	`eosReason` VARCHAR(500),
	`eosComments` VARCHAR(2000)
) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

INSERT INTO employeeoffset
(
	RowID
	,OrganizationID
	,EmployeeID
	,CreatedBy
	,LastUpdBy
	,Created
	,LastUpd
	,`Type`
	,StartTime
	,EndTime
	,StartDate
	,EndDate
	,`Status`
	,Reason
	,Comments
	,Image
) VALUES (
	eosRowID
	,eosOrganizationID
	,eosEmployeeID
	,eosUserRowID
	,eosUserRowID
	,CURRENT_TIMESTAMP()
	,CURRENT_TIMESTAMP()
	,eosType
	,eosStartTime
	,eosEndTime
	,eosStartDate
	,eosEndDate
	,eosStatus
	,eosReason
	,eosComments
	,NULL
) ON
DUPLICATE
KEY
UPDATE
	LastUpd = CURRENT_TIMESTAMP()
	,LastUpdBy = eosUserRowID
	,StartTime = eosStartTime
	,EndTime = eosEndTime
	,StartDate = eosStartDate
	,EndDate = eosEndDate
	,`Status` = eosStatus
	,Reason = eosReason
	,Comments = eosComments;
	SELECT @@Identity `ID` INTO returnvalue;
	
RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeOT
DROP FUNCTION IF EXISTS `INSUPD_employeeOT`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeeOT`(`eot_RowID` INT, `eot_OrganizationID` INT, `eot_CreatedBy` INT, `eot_LastUpdBy` INT, `eot_EmployeeID` INT, `eot_OTType` VARCHAR(50), `eot_OTStartTime` TIME, `eot_OTEndTime` TIME, `eot_OTStartDate` DATE, `eot_OTEndDate` DATE, `eot_OTStatus` VARCHAR(50), `eot_Reason` VARCHAR(500), `eot_Comments` VARCHAR(2000), `eot_Image` LONGBLOB) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE eot_ID INT(11);

DECLARE othrscount DECIMAL(11,2);

DECLARE endovertime TIME;



SET endovertime = IF(HOUR(eot_OTEndTime) = 24, TIME_FORMAT(eot_OTEndTime,'00:%i:%s'), eot_OTEndTime);

INSERT INTO employeeovertime
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,EmployeeID
    ,OTType
    ,OTStartTime
    ,OTEndTime
    ,OTStartDate
    ,OTEndDate
    ,OTStatus
    ,Reason
    ,Comments
    ,Image
) VALUES (
    eot_RowID
    ,eot_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,eot_CreatedBy
    ,eot_EmployeeID
    ,eot_OTType
    ,eot_OTStartTime
    ,endovertime
    ,eot_OTStartDate
    ,eot_OTEndDate
    ,eot_OTStatus
    ,eot_Reason
    ,eot_Comments
    ,eot_Image
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=eot_LastUpdBy
    ,OTType=eot_OTType
    ,OTStartTime=eot_OTStartTime
    ,OTEndTime=endovertime
    ,OTStartDate=eot_OTStartDate
    ,OTEndDate=eot_OTEndDate
    ,OTStatus=eot_OTStatus
    ,Reason=eot_Reason
    ,Comments=eot_Comments
    ,Image=eot_Image;SELECT @@Identity AS id INTO eot_ID;



RETURN eot_ID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeOT_indepen
DROP FUNCTION IF EXISTS `INSUPD_employeeOT_indepen`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeeOT_indepen`(`eot_RowID` INT, `eot_OrganizationID` INT, `eot_CreatedBy` INT, `eot_LastUpdBy` INT, `eot_EmployeeID` INT, `eot_OTType` VARCHAR(50), `eot_OTStartTime` TIME, `eot_OTEndTime` TIME, `eot_OTStartDate` DATE, `eot_OTEndDate` DATE, `eot_OTStatus` VARCHAR(50), `eot_Reason` VARCHAR(500), `eot_Comments` VARCHAR(2000), `eot_Image` LONGBLOB) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE eot_ID INT(11);

DECLARE othrscount DECIMAL(11,2);

DECLARE endovertime TIME;



SET endovertime = IF(HOUR(eot_OTEndTime) = 24, TIME_FORMAT(eot_OTEndTime,'00:%i:%s'), eot_OTEndTime);

INSERT INTO employeeovertime
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,EmployeeID
    ,OTType
    ,OTStartTime
    ,OTEndTime
    ,OTStartDate
    ,OTEndDate
    ,OTStatus
    ,Reason
    ,Comments
    ,Image
) VALUES (
    eot_RowID
    ,eot_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,DEFAULT_internal_sys_user() # IFNULL(DEFAULT_internal_sys_user(), eot_CreatedBy)
    ,eot_EmployeeID
    ,eot_OTType
    ,eot_OTStartTime
    ,endovertime
    ,eot_OTStartDate
    ,eot_OTEndDate
    ,eot_OTStatus
    ,eot_Reason
    ,eot_Comments
    ,eot_Image
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=eot_LastUpdBy
    ,OTType=eot_OTType
    ,OTStartTime=eot_OTStartTime
    ,OTEndTime=endovertime
    ,OTStartDate=eot_OTStartDate
    ,OTEndDate=eot_OTEndDate
    ,OTStatus=eot_OTStatus
    ,Reason=eot_Reason
    ,Comments=eot_Comments
    ,Image=eot_Image;SELECT @@Identity AS id INTO eot_ID;



RETURN eot_ID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeepromotion
DROP FUNCTION IF EXISTS `INSUPD_employeepromotion`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_employeepromotion`(`epro_RowID` INT, `OrganizID` INT, `UserRowID` INT, `epro_EmpRowID` INT, `epro_PositionFrom` VARCHAR(50), `epro_PositionTo` VARCHAR(50), `epro_EffectiveDate` DATE, `epro_CompensationChange` CHAR(1), `epro_CompensationValue` DECIMAL(11,2), `epro_EmpSalID` INT, `epro_Reason` VARCHAR(200)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);



INSERT INTO employeepromotions
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,EmployeeID
    ,PositionFrom
    ,PositionTo
    ,EffectiveDate
    ,CompensationChange
    ,CompensationValue
    ,Reason
) VALUES (
    epro_RowID
    ,OrganizID
    ,CURRENT_TIMESTAMP()
    ,UserRowID
    ,epro_EmpRowID
    ,epro_PositionFrom
    ,epro_PositionTo
    ,epro_EffectiveDate
    ,epro_CompensationChange
    ,epro_CompensationValue
    ,IFNULL(epro_Reason,'')
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP();SELECT @@Identity AS ID INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeesalary
DROP FUNCTION IF EXISTS `INSUPD_employeesalary`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeesalary`(
    `esal_RowID` INT,
    `esal_EmployeeID` INT,
    `esal_CreatedBy` INT,
    `esal_LastUpdBy` INT,
    `esal_OrganizationID` INT,
    `esal_BasicPay` DECIMAL(11,6),
    `esal_Salary` DECIMAL(11,6),
    `esal_NoofDependents` INT,
    `esal_MaritalStatus` VARCHAR(50),
    `esal_PositionID` INT,
    `esal_EffectiveDateFrom` DATE,
    `esal_EffectiveDateTo` DATE,
    `esal_HDMFAmount` DECIMAL(10,2),
    `esal_PAGIBIGAmout` DECIMAL(10,2),
    `esal_TrueSalary` DECIMAL(10,2),
    `esal_IsDoneByImporting` TEXT,
    `esal_DiscardSSS` TINYINT,
    `esal_DiscardPhH` TINYINT,
    `esal_PaySocialSecurityID` INT,
    `esal_PayPhilHealthID` INT,
    `esal_PhilHealthDeduction` DECIMAL(15, 4)
) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE esalID INT(11);

DECLARE employeemaritstat VARCHAR(50);

DECLARE hdmf_amt DECIMAL(11,6);

DECLARE esal_BasicDailyPay DECIMAL(11,6);

DECLARE esal_BasicHourlyPay DECIMAL(11,6);

DECLARE EmpType VARCHAR(50);

DECLARE EmpPayFreqID INT(11);

DECLARE EmpFStatID INT(11);

DECLARE prevesalRowID INT(11) DEFAULT NULL;

DECLARE prevdatefrom DATE;

DECLARE existRecordRowID INT(11);

DECLARE viewID INT(11);

DECLARE recordexists INT(11);

DECLARE preEffDateFromEmpSal DATE DEFAULT CURRENT_DATE();

DECLARE preEffDateFromEmpSallatest DATE;

DECLARE preEffDateToEmpSallatest DATE DEFAULT CURRENT_DATE();

DECLARE salaryToUseForContrib DECIMAL(11,2) DEFAULT 0;

DECLARE org_workingdays INT(11);

DECLARE emp_countsalaries INT(11) DEFAULT -1;

DECLARE isEmpStatusContractual CHAR(1);

DECLARE nullcounteffectivedateto INT(11) DEFAULT 0;

DECLARE pay_freq_type VARCHAR(50);


SELECT
    (LCASE(e.EmploymentStatus) = 'contractual'),
    pf.PayFrequencyType
FROM employee e
INNER JOIN payfrequency pf
ON pf.RowID = e.PayFrequencyID
WHERE e.RowID = esal_EmployeeID
INTO
    isEmpStatusContractual,
    pay_freq_type;

/*IF isEmpStatusContractual = '0' THEN
    SELECT NULL
    INTO esal_EffectiveDateTo;
END IF;*/

SELECT RowID
FROM `view`
WHERE ViewName = 'Employee Salary' AND
    OrganizationID = esal_OrganizationID
LIMIT 1
INTO viewID;

SELECT WorkDaysPerYear
FROM organization
WHERE RowID = esal_OrganizationID
INTO org_workingdays;

IF esal_IsDoneByImporting = '1' THEN
    SET esal_IsDoneByImporting = '1';
END IF;

SELECT COUNT(RowID)
FROM employeesalary
WHERE EmployeeID = esal_EmployeeID AND
    OrganizationID = esal_OrganizationID
INTO emp_countsalaries;

SELECT
    RowID,
    EffectiveDateFrom
FROM employeesalary
WHERE EmployeeID = esal_EmployeeID AND
    OrganizationID = esal_OrganizationID AND
    EffectiveDateTo IS NULL
ORDER BY DATEDIFF(DATE_FORMAT(NOW(),'%Y-%m-%d'), EffectiveDateFrom)
LIMIT 1
INTO
    prevesalRowID,
    prevdatefrom;

SET employeemaritstat = IF(esal_MaritalStatus IN ('Single','Married'),esal_MaritalStatus,'Zero');

SELECT EmployeeType,PayFrequencyID FROM employee WHERE RowID=esal_EmployeeID AND OrganizationID=esal_OrganizationID INTO EmpType,EmpPayFreqID;

-- TODO: Fix filingStatus retrieval since it will not work if emploee dependents is > 4.
SELECT fs.RowID
FROM filingstatus fs
INNER JOIN (SELECT RowID
            , MaritalStatus
				, MAX(Dependent) `Dependent`
				FROM filingstatus
				GROUP BY MaritalStatus) fss
        ON fss.MaritalStatus=employeemaritstat
WHERE fs.MaritalStatus = employeemaritstat AND
      fs.Dependent = IF(COALESCE(esal_NoofDependents, 0) > fss.Dependent, fss.Dependent, COALESCE(esal_NoofDependents, 0))
INTO EmpFStatID;

IF EmpType = 'Fixed' OR EmpType = 'Monthly' THEN
    IF EmpPayFreqID = 1 THEN

        SET esal_BasicDailyPay = 0;
        SET esal_BasicHourlyPay = 0;
    ELSE
        SET esal_BasicPay = esal_TrueSalary;
        SET esal_BasicDailyPay = 0;
        SET esal_BasicHourlyPay = 0;
    END IF;

    SET salaryToUseForContrib = esal_Salary;

ELSEIF EmpType = 'Daily' THEN
        SET esal_BasicPay = esal_BasicPay;
        SET esal_BasicDailyPay = esal_BasicPay;
        SET esal_BasicHourlyPay = 0;

    SET salaryToUseForContrib = (esal_BasicPay * org_workingdays) / 12;

ELSEIF EmpType = 'Weekly' THEN
        SET esal_BasicPay = esal_BasicPay;
        SET esal_BasicDailyPay = FORMAT((esal_BasicPay / 5), 2);
        SET esal_BasicHourlyPay = 0;

    IF org_workingdays BETWEEN 310 AND 320 THEN

        SET salaryToUseForContrib = (esal_Salary * (org_workingdays / 6)) / 12;

    ELSEIF org_workingdays BETWEEN 260 AND 270 THEN

        SET salaryToUseForContrib = (esal_Salary * (org_workingdays / 5)) / 12;

    END IF;

END IF;

SELECT GET_HDMFAmount(salaryToUseForContrib)
INTO hdmf_amt;

IF esal_RowID IS NULL AND emp_countsalaries >= 1 THEN

    SET preEffDateFromEmpSal = prevdatefrom;

    SET preEffDateFromEmpSallatest = IF(
        DATEDIFF(CURRENT_DATE(), preEffDateFromEmpSal) = 0,
        ADDDATE(CURRENT_DATE(), INTERVAL 1 DAY),
        IF(
            DATEDIFF(CURRENT_DATE(), preEffDateFromEmpSal) < 0,
            ADDDATE(preEffDateFromEmpSal, INTERVAL 1 DAY),
            CURRENT_DATE()
        )
    );

    SELECT EffectiveDateFrom
    FROM employeesalary
    WHERE EmployeeID = esal_EmployeeID AND
        OrganizationID = esal_OrganizationID
    ORDER BY EffectiveDateFrom DESC
    LIMIT 1
    INTO prevdatefrom;

    IF prevdatefrom = esal_EffectiveDateFrom THEN

        UPDATE employeesalary
        SET EffectiveDateTo = esal_EffectiveDateFrom,
            LastUpd = CURRENT_TIMESTAMP(),
            LastUpdBy = esal_CreatedBy
        WHERE RowID = prevesalRowID;

        SET esal_EffectiveDateFrom = ADDDATE(preEffDateFromEmpSal, INTERVAL 1 DAY);

    ELSEIF prevdatefrom > esal_EffectiveDateFrom THEN

        UPDATE employeesalary
        SET EffectiveDateTo = CURDATE(),
            LastUpd = CURRENT_TIMESTAMP(),
            LastUpdBy = esal_CreatedBy
        WHERE RowID = prevesalRowID;

    ELSEIF prevdatefrom < esal_EffectiveDateFrom THEN

        UPDATE employeesalary
        SET EffectiveDateTo = SUBDATE(esal_EffectiveDateFrom, INTERVAL 1 DAY),
            LastUpd = CURRENT_TIMESTAMP(),
            LastUpdBy = esal_CreatedBy
        WHERE RowID = prevesalRowID;

    END IF;

END IF;

INSERT INTO employeesalary
(
    RowID,
    EmployeeID,
    Created,
    CreatedBy,
    OrganizationID,
    FilingStatusID,
    PaySocialSecurityID,
    PayPhilhealthID,
    HDMFAmount,
    BasicPay,
    Salary,
    BasicDailyPay,
    BasicHourlyPay,
    NoofDependents,
    MaritalStatus,
    PositionID,
    EffectiveDateFrom,
    EffectiveDateTo,
    TrueSalary,
    UndeclaredSalary,
    OverrideDiscardSSSContrib,
    OverrideDiscardPhilHealthContrib,
    PhilHealthDeduction
)
SELECT
    esal_RowID,
    esal_EmployeeID,
    CURRENT_TIMESTAMP(),
    esal_CreatedBy,
    esal_OrganizationID,
    EmpFStatID,
    esal_PaySocialSecurityID,
    esal_PayPhilHealthID,
    esal_HDMFAmount,
    esal_Salary / IF(LOCATE(EmpType,CONCAT('MonthlyFixed')) > 0, PAYFREQUENCY_DIVISOR(pay_freq_type), PAYFREQUENCY_DIVISOR(EmpType)),
    esal_Salary,
    esal_BasicDailyPay,
    esal_BasicHourlyPay,
    esal_NoofDependents,
    esal_MaritalStatus,
    esal_PositionID,
    esal_EffectiveDateFrom,
    esal_EffectiveDateTo,
    esal_TrueSalary,
    esal_TrueSalary - esal_Salary,
    esal_DiscardSSS,
    esal_DiscardPhH,
    esal_PhilHealthDeduction
FROM employee
WHERE RowID = esal_EmployeeID AND
    OrganizationID = esal_OrganizationID
ON DUPLICATE KEY
UPDATE
    LastUpd = CURRENT_TIMESTAMP(),
    LastUpdBy = esal_LastUpdBy,
    FilingStatusID = EmpFStatID,
    PaySocialSecurityID = esal_PaySocialSecurityID,
    PayPhilhealthID = esal_PayPhilHealthID,
    HDMFAmount = IF(esal_HDMFAmount != 0, esal_HDMFAmount, hdmf_amt),
    BasicPay = esal_Salary / IF(LOCATE(EmpType, CONCAT('MonthlyFixed')) > 0, PAYFREQUENCY_DIVISOR(pay_freq_type), PAYFREQUENCY_DIVISOR(EmpType)),
    Salary = esal_Salary,
    BasicDailyPay = esal_BasicDailyPay,
    BasicHourlyPay = esal_BasicHourlyPay,
    NoofDependents = esal_NoofDependents,
    MaritalStatus = esal_MaritalStatus,
    PositionID = esal_PositionID,
    EffectiveDateFrom = esal_EffectiveDateFrom,
    TrueSalary = esal_TrueSalary,
    UndeclaredSalary = esal_TrueSalary - esal_Salary,
    EffectiveDateTo = esal_EffectiveDateTo,
    OverrideDiscardSSSContrib = esal_DiscardSSS,
    OverrideDiscardPhilHealthContrib = esal_DiscardPhH,
    PhilHealthDeduction = esal_PhilHealthDeduction;

SELECT @@Identity AS id
INTO esalID;

RETURN esalID;

SELECT COUNT(RowID)
FROM employeesalary
WHERE EmployeeID = esal_EmployeeID AND
    OrganizationID = esal_OrganizationID AND
    EffectiveDateTo IS NULL
INTO nullcounteffectivedateto;

IF nullcounteffectivedateto >= 2 THEN
    SET nullcounteffectivedateto = 0;
END IF;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeshiftbyday
DROP FUNCTION IF EXISTS `INSUPD_employeeshiftbyday`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_employeeshiftbyday`(`OrganizID` INT, `UserRowID` INT, `EmployeeRowID` INT, `ShiftRowID` INT, `NameOfTheDay` VARCHAR(50), `IsNightShift` CHAR(1), `IsRestDay` CHAR(1), `ByOrderValue` INT, `AsNewRecord` CHAR(1)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

DECLARE has_fullshift_thisyear CHAR(1);

DECLARE last_shiftdate_thisyear DATE;

SELECT d.DateValue FROM dates d WHERE YEAR(d.DateValue)=YEAR(CURDATE()) AND DAYOFWEEK(d.DateValue)=(((@@default_week_format + 6) MOD 7) + 1) ORDER BY d.DateValue DESC LIMIT 1 INTO last_shiftdate_thisyear;

IF AsNewRecord = '0' THEN

    INSERT INTO `employeeshiftbyday`
    (
        OrganizationID
        ,Created
        ,CreatedBy
        ,EmployeeID
        ,ShiftID
        ,NameOfDay
        ,NightShift
        ,RestDay
        ,OrderByValue
    ) VALUES ( OrganizID
        ,CURRENT_TIMESTAMP()
        ,UserRowID
        ,EmployeeRowID
        ,ShiftRowID
        ,NameOfTheDay
        ,IsNightShift
        ,IsRestDay
        ,ByOrderValue)
    ON
    DUPLICATE
    KEY
    UPDATE
        LastUpd=CURRENT_TIMESTAMP()
        ,LastUpdBy=UserRowID
        ,ShiftID=ShiftRowID
        ,RestDay=IsRestDay;SELECT @@Identity AS ID INTO returnvalue;

ELSEIF AsNewRecord = '1' THEN

    SELECT EXISTS(SELECT RowID FROM employeeshift esh WHERE esh.EmployeeID=EmployeeRowID AND esh.OrganizationID=OrganizID AND last_shiftdate_thisyear BETWEEN esh.EffectiveFrom AND esh.EffectiveTo ORDER BY esh.EffectiveFrom DESC,esh.EffectiveTo DESC LIMIT 1) INTO has_fullshift_thisyear;

    IF has_fullshift_thisyear = '1' THEN

        INSERT INTO `employeeshiftbyday`
        (
            OrganizationID
            ,Created
            ,CreatedBy
            ,EmployeeID
            ,ShiftID
            ,NameOfDay
            ,NightShift
            ,RestDay
            ,OrderByValue
        ) VALUES (OrganizID
            ,CURRENT_TIMESTAMP()
            ,UserRowID
            ,EmployeeRowID
            ,ShiftRowID
            ,NameOfTheDay
            ,IsNightShift
            ,IsRestDay
            ,ByOrderValue
        ) ON
        DUPLICATE
        KEY
        UPDATE
            LastUpd=CURRENT_TIMESTAMP()
            ,LastUpdBy=UserRowID
            ,ShiftID=ShiftRowID
            ,RestDay=IsRestDay
            ,SampleDate=ADDDATE(last_shiftdate_thisyear,INTERVAL (ByOrderValue + 1) DAY);SELECT @@Identity AS ID INTO returnvalue;

    ELSE

        INSERT INTO `employeeshiftbyday`
        (
            OrganizationID
            ,Created
            ,CreatedBy
            ,EmployeeID
            ,ShiftID
            ,NameOfDay
            ,NightShift
            ,RestDay
            ,OrderByValue
        ) VALUES (OrganizID
            ,CURRENT_TIMESTAMP()
            ,UserRowID
            ,EmployeeRowID
            ,ShiftRowID
            ,NameOfTheDay
            ,IsNightShift
            ,IsRestDay
            ,ByOrderValue
        ) ON
        DUPLICATE
        KEY
        UPDATE
            LastUpd=CURRENT_TIMESTAMP()
            ,LastUpdBy=UserRowID
            ,ShiftID=ShiftRowID
            ,RestDay=IsRestDay;SELECT @@Identity AS ID INTO returnvalue;

    END IF;

END IF;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeeshiftbyday_secondary
DROP FUNCTION IF EXISTS `INSUPD_employeeshiftbyday_secondary`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_employeeshiftbyday_secondary`(`OrganizID` INT, `EmpRowID` INT, `ShiftRowIDID` INT, `_NameOfDay` VARCHAR(50), `_SampleDate` DATE, `_NightShift` CHAR(1), `_RestDay` CHAR(1), `_IsEncodedByDay` CHAR(1), `_OrderByValue` INT, `_OriginDay` INT, `_UniqueShift` INT) RETURNS timestamp
    DETERMINISTIC
BEGIN

DECLARE returnvalue TIMESTAMP;
SELECT CURRENT_TIMESTAMP() INTO returnvalue;
INSERT INTO employeeshiftbyday_secondary(OrganizationID,EmployeeID,ShiftID,NameOfDay,SampleDate,NightShift,RestDay,IsEncodedByDay,OrderByValue,OriginDay,UniqueShift) VALUES (OrganizID,EmpRowID,ShiftRowIDID,_NameOfDay,_SampleDate,_NightShift,_RestDay,_IsEncodedByDay,_OrderByValue,_OriginDay,_UniqueShift) ON DUPLICATE KEY UPDATE OrganizationID=OrganizID;
RETURN returnvalue;
END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeetimeentries
DROP FUNCTION IF EXISTS `INSUPD_employeetimeentries`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeetimeentries`(
    `etent_RowID` INT,
    `etent_OrganizationID` INT,
    `etent_CreatedBy` INT,
    `etent_LastUpdBy` INT,
    `etent_Date` DATE,
    `etent_EmployeeShiftID` INT,
    `etent_EmployeeID` INT,
    `etent_EmployeeSalaryID` INT,
    `etent_EmployeeFixedSalaryFlag` CHAR(50),
    `etent_RegularHoursWorked` DECIMAL(11,6),
    `etent_OvertimeHoursWorked` DECIMAL(11,6),
    `etent_UndertimeHours` DECIMAL(11,6),
    `etent_NightDifferentialHours` DECIMAL(11,6),
    `etent_NightDifferentialOTHours` DECIMAL(11,6),
    `etent_HoursLate` DECIMAL(11,6),
    `etent_PayRateID` INT,
    `etent_TotalDayPay` DECIMAL(11,6),
    `etent_TotalHoursWorked` DECIMAL(11,6),
    `etent_RegularHoursAmount` DECIMAL(11,6),
    `etent_OvertimeHoursAmount` DECIMAL(11,6),
    `etent_UndertimeHoursAmount` DECIMAL(11,6),
    `etent_NightDiffHoursAmount` DECIMAL(11,6),
    `etent_NightDiffOTHoursAmount` DECIMAL(11,6),
    `etent_HoursLateAmount` DECIMAL(11,6),
    `etent_RestDayHours` DECIMAL(11,6),
    `etent_RestDayAmount` DECIMAL(11,6),
    `etent_RestDayOTHours` DECIMAL(15, 4),
    `etent_RestDayOTPay` DECIMAL(15, 4),
    `etent_SpecialHolidayHours` DECIMAL(15, 4),
    `etent_SpecialHolidayPay` DECIMAL(15, 4),
    `etent_SpecialHolidayOTHours` DECIMAL(15, 4),
    `etent_SpecialHolidayOTPay` DECIMAL(15, 4),
    `etent_RegularHolidayHours` DECIMAL(15, 4),
    `etent_RegularHolidayPay` DECIMAL(15, 4),
    `etent_RegularHolidayOTHours` DECIMAL(15, 4),
    `etent_RegularHolidayOTPay` DECIMAL(15, 4),
    `etent_HolidayPay` DECIMAL(11,6),
    `etent_BasicDayPay` DECIMAL(11, 6),
    `etent_No` INT,
    `etent_LeaveType` VARCHAR(50),
    `etent_LeaveHours` DECIMAL(15, 4),
    `etent_LeavePay` DECIMAL(15, 4),
    `etent_AbsentHours` DECIMAL(15, 4),
    `etent_AbsentAmount` DECIMAL(15, 4)
) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE etentID INT(11);

INSERT INTO employeetimeentry
(
    RowID,
    OrganizationID,
    Created,
    CreatedBy,
    LastUpdBy,
    `Date`,
    EmployeeShiftID,
    EmployeeID,
    EmployeeSalaryID,
    EmployeeFixedSalaryFlag,
    TotalHoursWorked,
    RegularHoursWorked,
    RegularHoursAmount,
    OvertimeHoursWorked,
    OvertimeHoursAmount,
    UndertimeHours,
    UndertimeHoursAmount,
    NightDifferentialHours,
    NightDiffHoursAmount,
    NightDifferentialOTHours,
    NightDiffOTHoursAmount,
    HoursLate,
    HoursLateAmount,
    LateFlag,
    PayRateID,
    TotalDayPay,
    SpecialHolidayHours,
    SpecialHolidayPay,
    SpecialHolidayOTHours,
    SpecialHolidayOTPay,
    RegularHolidayHours,
    RegularHolidayPay,
    RegularHolidayOTHours,
    RegularHolidayOTPay,
    HolidayPayAmount,
    BasicDayPay,
    RestDayHours,
    RestDayAmount,
    RestDayOTHours,
    RestDayOTPay,
    VacationLeaveHours,
    SickLeaveHours,
    MaternityLeaveHours,
    OtherLeaveHours,
    Leavepayment,
    AbsentHours,
    Absent
) VALUES (
    etent_RowID,
    etent_OrganizationID,
    CURRENT_TIMESTAMP(),
    etent_CreatedBy,
    etent_CreatedBy,
    etent_Date,
    etent_EmployeeShiftID,
    etent_EmployeeID,
    etent_EmployeeSalaryID,
    etent_EmployeeFixedSalaryFlag,
    etent_TotalHoursWorked,
    etent_RegularHoursWorked,
    etent_RegularHoursAmount,
    etent_OvertimeHoursWorked,
    etent_OvertimeHoursAmount,
    etent_UndertimeHours,
    etent_UndertimeHoursAmount,
    etent_NightDifferentialHours,
    etent_NightDiffHoursAmount,
    etent_NightDifferentialOTHours,
    etent_NightDiffOTHoursAmount,
    etent_HoursLate,
    etent_HoursLateAmount,
    IF(etent_HoursLateAmount = 0, '0', '1'),
    etent_PayRateID,
    etent_TotalDayPay,
    etent_SpecialHolidayHours,
    etent_SpecialHolidayPay,
    etent_SpecialHolidayOTHours,
    etent_SpecialHolidayOTPay,
    etent_RegularHolidayHours,
    etent_RegularHolidayPay,
    etent_RegularHolidayOTHours,
    etent_RegularHolidayOTPay,
    etent_HolidayPay,
    etent_BasicDayPay,
    etent_RestDayHours,
    etent_RestDayAmount,
    etent_RestDayOTHours,
    etent_RestDayOTPay,
    IF(etent_LeaveType = 'Vacation leave', etent_LeaveHours, 0),
    IF(etent_LeaveType = 'Sick leave', etent_LeaveHours, 0),
    IF(etent_LeaveType = 'Maternity leave', etent_LeaveHours, 0),
    IF(etent_LeaveType = 'Others', etent_LeaveHours, 0),
    etent_LeavePay,
    etent_AbsentHours,
    etent_AbsentAmount
)
ON DUPLICATE KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP(),
    LastUpdBy=etent_LastUpdBy,
    EmployeeShiftID = etent_EmployeeShiftID,
    TotalHoursWorked = etent_TotalHoursWorked,
    RegularHoursWorked = etent_RegularHoursWorked,
    RegularHoursAmount = etent_RegularHoursAmount,
    OvertimeHoursWorked = etent_OvertimeHoursWorked,
    OvertimeHoursAmount = etent_OvertimeHoursAmount,
    UndertimeHours = etent_UndertimeHours,
    UndertimeHoursAmount = etent_UndertimeHoursAmount,
    NightDifferentialHours = etent_NightDifferentialHours,
    NightDiffHoursAmount = etent_NightDiffHoursAmount,
    NightDifferentialOTHours = etent_NightDifferentialOTHours,
    NightDiffOTHoursAmount = etent_NightDiffOTHoursAmount,
    HoursLate = etent_HoursLate,
    HoursLateAmount = etent_HoursLateAmount,
    LateFlag = IF(etent_HoursLateAmount = 0, '0', '1'),
    TotalDayPay = etent_TotalDayPay,
    SpecialHolidayHours = etent_SpecialHolidayHours,
    SpecialHolidayPay = etent_SpecialHolidayPay,
    SpecialHolidayOTHours = etent_SpecialHolidayOTHours,
    SpecialHolidayOTPay = etent_SpecialHolidayOTPay,
    RegularHolidayHours = etent_RegularHolidayHours,
    RegularHolidayPay = etent_RegularHolidayPay,
    RegularHolidayOTHours = etent_RegularHolidayOTHours,
    RegularHolidayOTPay = etent_RegularHolidayOTPay,
    HolidayPayAmount = etent_HolidayPay,
    BasicDayPay = etent_BasicDayPay,
    RestDayHours = etent_RestDayHours,
    RestDayAmount = etent_RestDayAmount,
    RestDayOTHours = etent_RestDayOTHours,
    RestDayOTPay = etent_RestDayOTPay,
    VacationLeaveHours = IF(etent_LeaveType = 'Vacation leave', etent_LeaveHours, 0),
    SickLeaveHours = IF(etent_LeaveType = 'Sick leave', etent_LeaveHours, 0),
    MaternityLeaveHours = IF(etent_LeaveType = 'Maternity leave', etent_LeaveHours, 0),
    OtherLeaveHours = IF(etent_LeaveType = 'Others', etent_LeaveHours, 0),
    Leavepayment = etent_LeavePay,
    AbsentHours = etent_AbsentHours,
    Absent = etent_AbsentAmount;

SELECT @@Identity AS id INTO etentID;

RETURN etentID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeetimeentry
DROP FUNCTION IF EXISTS `INSUPD_employeetimeentry`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeetimeentry`(`etent_RowID` INT, `etent_OrganizationID` INT, `etent_CreatedBy` INT, `etent_LastUpdBy` INT, `etent_Date` DATE, `etent_EmployeeShiftID` INT, `etent_EmployeeID` INT, `etent_EmployeeSalaryID` INT, `etent_EmployeeFixedSalaryFlag` CHAR(50), `etent_RegularHoursWorked` DECIMAL(11,6), `etent_OvertimeHoursWorked` DECIMAL(11,6), `etent_UndertimeHours` DECIMAL(11,6), `etent_NightDifferentialHours` DECIMAL(11,6), `etent_NightDifferentialOTHours` DECIMAL(11,6), `etent_HoursLate` DECIMAL(11,6), `etent_PayRateID` INT, `etent_VacationLeaveHours` DECIMAL(11,6), `etent_SickLeaveHours` DECIMAL(11,6), `etent_TotalDayPay` DECIMAL(11,6), `etent_IsNightShift` CHAR(50), `etent_TotalHoursWorked` DECIMAL(11,6), `etent_RegularHoursAmount` DECIMAL(11,6), `etent_OvertimeHoursAmount` DECIMAL(11,6), `etent_UndertimeHoursAmount` DECIMAL(11,6), `etent_NightDiffHoursAmount` DECIMAL(11,6), `etent_NightDiffOTHoursAmount` DECIMAL(11,6), `etent_HoursLateAmount` DECIMAL(11,6), `etent_MaternityLeaveHours` DECIMAL(11,6), `etent_OtherLeaveHours` DECIMAL(11,6)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE etentID INT(11);

INSERT INTO employeetimeentry
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,LastUpdBy
    ,Date
    ,EmployeeShiftID
    ,EmployeeID
    ,EmployeeSalaryID
    ,EmployeeFixedSalaryFlag
    ,TotalHoursWorked
    ,RegularHoursWorked
    ,RegularHoursAmount
    ,OvertimeHoursWorked
    ,OvertimeHoursAmount
    ,UndertimeHours
    ,UndertimeHoursAmount
    ,NightDifferentialHours
    ,NightDiffHoursAmount
    ,NightDifferentialOTHours
    ,NightDiffOTHoursAmount
    ,HoursLate
    ,HoursLateAmount
    ,LateFlag
    ,PayRateID
    ,VacationLeaveHours
    ,SickLeaveHours
    ,MaternityLeaveHours
    ,OtherLeaveHours
    ,TotalDayPay
) VALUES (
    etent_RowID
    ,etent_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,etent_CreatedBy
    ,etent_LastUpdBy
    ,COALESCE(etent_Date,(SELECT Date FROM payrate WHERE RowID=etent_PayRateID))
    ,COALESCE(etent_EmployeeShiftID,(SELECT RowID FROM employeeshift WHERE EmployeeID=etent_EmployeeID AND OrganizationID=etent_OrganizationID AND etent_Date BETWEEN DATE(COALESCE(EffectiveFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) AND DATEDIFF(CURRENT_DATE(),EffectiveFrom) >= 0 ORDER BY DATEDIFF(DATE_FORMAT(NOW(),'%Y-%m-%d'),EffectiveFrom) LIMIT 1))
    ,etent_EmployeeID
    ,COALESCE(etent_EmployeeSalaryID,(SELECT RowID FROM employeesalary WHERE EmployeeID=etent_EmployeeID AND OrganizationID=etent_OrganizationID AND etent_Date BETWEEN DATE(COALESCE(EffectiveDateFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveDateTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) ORDER BY DATEDIFF(DATE_FORMAT(NOW(),'%Y-%m-%d'),EffectiveDateFrom) LIMIT 1))
    ,etent_EmployeeFixedSalaryFlag
    ,etent_TotalHoursWorked
    ,etent_RegularHoursWorked
    ,etent_RegularHoursAmount
    ,IF(etent_IsNightShift = 1,0,etent_OvertimeHoursWorked)
    ,etent_OvertimeHoursAmount
    ,IF(etent_UndertimeHours < 0,etent_UndertimeHours * -1,etent_UndertimeHours)
    ,etent_UndertimeHoursAmount
    ,etent_NightDifferentialHours
    ,etent_NightDiffHoursAmount
    ,IF(etent_IsNightShift = 1,etent_OvertimeHoursWorked,0)
    ,etent_NightDiffOTHoursAmount
    ,IF(etent_HoursLate < 0,etent_HoursLate * -1,etent_HoursLate)
    ,etent_HoursLateAmount
    ,IF(COALESCE(etent_HoursLate,0)>0,1,0)
    ,COALESCE(etent_PayRateID,(SELECT RowID FROM payrate WHERE Date=etent_Date AND OrganizationID=etent_OrganizationID LIMIT 1))
    ,etent_VacationLeaveHours
    ,etent_SickLeaveHours
    ,etent_MaternityLeaveHours
    ,etent_OtherLeaveHours
    ,etent_TotalDayPay
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=etent_LastUpdBy
    ,Date=COALESCE(etent_Date,(SELECT Date FROM payrate WHERE RowID=etent_PayRateID))
    ,EmployeeShiftID=
        COALESCE(
            etent_EmployeeShiftID,
            (
                SELECT RowID
                FROM employeeshift
                WHERE EmployeeID = etent_EmployeeID
                    AND OrganizationID = etent_OrganizationID
                    AND etent_Date
                        BETWEEN DATE(COALESCE(EffectiveFrom, DATE_FORMAT(CURRENT_TIMESTAMP(), '%Y-%m-%d')))
                        AND DATE(COALESCE(EffectiveTo, ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH)))
                ORDER BY DATEDIFF(DATE_FORMAT(NOW(), '%Y-%m-%d'), EffectiveFrom)
                LIMIT 1
            )
        )
    ,EmployeeSalaryID=COALESCE(etent_EmployeeSalaryID,(SELECT RowID FROM employeesalary WHERE EmployeeID=etent_EmployeeID AND OrganizationID=etent_OrganizationID AND etent_Date BETWEEN DATE(COALESCE(EffectiveDateFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveDateTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) ORDER BY DATEDIFF(DATE_FORMAT(NOW(),'%Y-%m-%d'),EffectiveDateFrom) LIMIT 1))
    ,EmployeeFixedSalaryFlag=etent_EmployeeFixedSalaryFlag
    ,TotalHoursWorked=etent_TotalHoursWorked
    ,RegularHoursWorked=etent_RegularHoursWorked
    ,RegularHoursAmount=etent_RegularHoursAmount
    ,OvertimeHoursWorked=IF(etent_IsNightShift = 1,0,etent_OvertimeHoursWorked)
    ,OvertimeHoursAmount=etent_OvertimeHoursAmount
    ,UndertimeHours=IF(COALESCE(etent_HoursLate,0)>0,0,IF(etent_UndertimeHours < 0,etent_UndertimeHours * -1,etent_UndertimeHours))
    ,UndertimeHoursAmount=etent_UndertimeHoursAmount
    ,NightDifferentialHours=etent_NightDifferentialHours
    ,NightDiffHoursAmount=etent_NightDiffHoursAmount
    ,NightDifferentialOTHours=IF(etent_IsNightShift = 1,etent_OvertimeHoursWorked,0)
    ,NightDiffOTHoursAmount=etent_NightDiffOTHoursAmount
    ,HoursLate=IF(etent_HoursLate < 0,etent_HoursLate * -1,etent_HoursLate)
    ,HoursLateAmount=etent_HoursLateAmount
    ,LateFlag=IF(COALESCE(etent_HoursLate,0)>=1,1,0)
    ,PayRateID=COALESCE(etent_PayRateID,(SELECT RowID FROM payrate WHERE Date=etent_Date AND OrganizationID=etent_OrganizationID LIMIT 1))
    ,VacationLeaveHours=etent_VacationLeaveHours
    ,SickLeaveHours=etent_SickLeaveHours
    ,MaternityLeaveHours=etent_MaternityLeaveHours
    ,OtherLeaveHours=etent_OtherLeaveHours
    ,TotalDayPay=etent_TotalDayPay;SELECT @@Identity AS id INTO etentID;

RETURN etentID;



END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employeetimeentrydetails
DROP FUNCTION IF EXISTS `INSUPD_employeetimeentrydetails`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employeetimeentrydetails`(
	`etentd_RowID` INT,
	`etentd_OrganizationID` INT,
	`etentd_CreatedBy` INT,
	`etentd_Created` DATETIME,
	`etentd_LastUpdBy` INT,
	`etentd_EmployeeID` VARCHAR(50),
	`etentd_TimeIn` TIME,
	`etentd_TimeOut` TIME,
	`etentd_Date` DATE,
	`etentd_TimeScheduleType` VARCHAR(50),
	`etentd_TimeEntryStatus` VARCHAR(50),
	`EditAsUnique` CHAR(1),
	`Branch_Code` VARCHAR(150),
	`DateTimeLogIn` VARCHAR(150),
	`DateTimeLogOut` VARCHAR(150)
,
	`etentd_TimeentrylogsImportID` VARCHAR(100)
) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE etentdID INT(11) DEFAULT -1;

DECLARE branch_rowid INT(11);

DECLARE $employeeId INT(11) DEFAULT NULL;

SET $employeeId =
    (SELECT RowID
    FROM employee
    WHERE OrganizationID = etentd_OrganizationID AND
        EmployeeID = etentd_EmployeeID
    LIMIT 1);

SET EditAsUnique = 0;

IF IFNULL(Branch_Code,'') != '' THEN
    INSERT INTO branch(
        OrganizationID,
        Created,
        CreatedBy,
        BranchCode
    )
    VALUES (
        etentd_OrganizationID,
        CURRENT_TIMESTAMP(),
        etentd_CreatedBy,
        Branch_Code
    )
    ON DUPLICATE KEY
    UPDATE
        LastUpd = CURRENT_TIMESTAMP();
END IF;

SELECT RowID
FROM branch
WHERE OrganizationID = etentd_OrganizationID AND
    BranchCode = IFNULL(Branch_Code, '')
LIMIT 1
INTO branch_rowid;

IF $employeeId IS NOT NULL THEN

    INSERT INTO employeetimeentrydetails(
        RowID,
        OrganizationID,
        Created,
        CreatedBy,
        EmployeeID,
        TimeIn,
        TimeOut,
        `Date`,
        TimeScheduleType,
        TimeEntryStatus,
        ChargeToDivisionID,
        TimeStampIn,
        TimeStampOut,
        TimeentrylogsImportID
    )
    SELECT
        etentd_RowID,
        etentd_OrganizationID,
        etentd_Created,
        etentd_CreatedBy,
        $employeeId,
        etentd_TimeIn,
        etentd_TimeOut,
        etentd_Date,
        etentd_TimeScheduleType,
        IFNULL(
            etentd_TimeEntryStatus,
            IF(
                IFNULL(etentd_TimeIn, '') = '',
                'missing clock in',
                IF(
                    IFNULL(etentd_TimeOut, '') = '',
                    'missing clock out',
                    ''
                )
            )
        ),
        branch_rowid,
        TIMESTAMP(ADDDATE(DateTimeLogIn, INTERVAL 0 SECOND)),
        TIMESTAMP(ADDDATE(DateTimeLogOut, INTERVAL 0 SECOND)),
        etentd_TimeentrylogsImportID
    ON DUPLICATE KEY
    UPDATE
        LastUpd = CURRENT_TIMESTAMP(),
        LastUpdBy = etentd_LastUpdBy,
        TimeIn = etentd_TimeIn,
        TimeOut = etentd_TimeOut,
        `Date` = etentd_Date,
        TimeScheduleType = etentd_TimeScheduleType,
        ChargeToDivisionID = branch_rowid,
        TimeStampIn = DateTimeLogIn,
        TimeStampOut = DateTimeLogOut,
        TimeentrylogsImportID = etentd_TimeentrylogsImportID;
	
    SELECT @@Identity AS id
    INTO etentdID;
END IF;

RETURN etentdID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_employee_01
DROP FUNCTION IF EXISTS `INSUPD_employee_01`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_employee_01`(`RID` INT, `UserRowID` INT, `OrganizID` INT, `Salutat` VARCHAR(50), `FName` VARCHAR(50), `MName` VARCHAR(50), `LName` VARCHAR(50), `Surname` VARCHAR(50), `EmpID` VARCHAR(50), `TIN` VARCHAR(50), `SSS` VARCHAR(50), `HDMF` VARCHAR(50), `PhH` VARCHAR(50), `EmpStatus` VARCHAR(50), `EmailAdd` VARCHAR(50), `WorkNo` VARCHAR(50), `HomeNo` VARCHAR(50), `MobileNo` VARCHAR(50), `HAddress` VARCHAR(2000), `Nick` VARCHAR(50), `JTitle` VARCHAR(50), `Gend` VARCHAR(50), `EmpType` VARCHAR(50), `MaritStat` VARCHAR(50), `BDate` DATE, `Start_Date` DATE, `TerminatDate` DATE, `PositID` INT, `PayFreqID` INT, `NumDependent` INT, `UTOverride` VARCHAR(50), `OTOverride` VARCHAR(50), `NewEmpFlag` VARCHAR(50), `LeaveBal` DECIMAL(10,2), `SickBal` DECIMAL(10,2), `MaternBal` DECIMAL(10,2), `LeaveAllow` DECIMAL(10,2), `SickAllow` DECIMAL(10,2), `MaternAllow` DECIMAL(10,2), `Imag` MEDIUMBLOB, `LeavePayPer` DECIMAL(10,2), `SickPayPer` DECIMAL(10,2), `MaternPayPer` DECIMAL(10,2), `IsExemptAlphaList` TEXT, `Work_DaysPerYear` INT, `Day_Rest` CHAR(1), `ATM_No` VARCHAR(50), `OtherLeavePayPer` DECIMAL(10,2), `Bank_Name` VARCHAR(50), `Calc_Holiday` CHAR(1), `Calc_SpecialHoliday` CHAR(1), `Calc_NightDiff` CHAR(1), `Calc_NightDiffOT` CHAR(1), `Calc_RestDay` CHAR(1), `Calc_RestDayOT` CHAR(1), `PositionTextName` VARCHAR(50)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnval INT(11) DEFAULT 0;

DECLARE termin_date DATE;

DECLARE number_dependnt INT(11);

DECLARE exist_empRowID INT(11);

DECLARE division_parentID INT(11);

SELECT RowID FROM employee WHERE EmployeeID=EmpID AND OrganizationID=OrganizID INTO exist_empRowID;

SELECT TerminationDate FROM Employee WHERE RowID=RID INTO termin_date;

SELECT COUNT(edep.RowID) FROM employeedependents edep LEFT JOIN employee e ON e.RowID=edep.ParentEmployeeID AND e.OrganizationID=edep.OrganizationID WHERE e.RowID=RID AND edep.OrganizationID=OrganizID INTO number_dependnt;

SET PositID = IFNULL(PositID,0);

IF EmpID != '' THEN

    SELECT pt.DivisionId FROM position pt WHERE pt.PositionName=PositionTextName AND pt.OrganizationID=OrganizID LIMIT 1 INTO division_parentID;

    IF division_parentID IS NULL THEN
        SELECT RowID FROM `division` WHERE OrganizationID=OrganizID LIMIT 1 INTO division_parentID;
    END IF;

    INSERT INTO employee
    (
        RowID
        ,CreatedBy
        ,Created
        ,OrganizationID
        ,Salutation
        ,FirstName
        ,MiddleName
        ,LastName
        ,Surname
        ,EmployeeID
        ,TINNo
        ,SSSNo
        ,HDMFNo
        ,PhilHealthNo
        ,EmploymentStatus
        ,EmailAddress
        ,WorkPhone
        ,HomePhone
        ,MobilePhone
        ,HomeAddress
        ,Nickname
        ,JobTitle
        ,Gender
        ,EmployeeType
        ,MaritalStatus
        ,Birthdate
        ,StartDate
        ,TerminationDate
        ,PositionID
        ,PayFrequencyID
        ,NoOfDependents
        ,UndertimeOverride
        ,OvertimeOverride
        ,NewEmployeeFlag
        ,LeaveBalance
        ,SickLeaveBalance
        ,MaternityLeaveBalance
        ,LeaveAllowance
        ,SickLeaveAllowance
        ,MaternityLeaveAllowance
        ,Image
        ,LeavePerPayPeriod
        ,SickLeavePerPayPeriod
        ,MaternityLeavePerPayPeriod
        ,AlphaListExempted
        ,DayOfRest
        ,ATMNo
        ,OtherLeavePerPayPeriod
        ,OtherLeaveAllowance
        ,BankName
        ,CalcHoliday
        ,CalcSpecialHoliday
        ,CalcNightDiff
        ,CalcNightDiffOT
        ,CalcRestDay
        ,CalcRestDayOT
    ) VALUES (
        IFNULL(RID,exist_empRowID)
        ,UserRowID
        ,CURRENT_TIMESTAMP()
        ,OrganizID
        ,Salutat
        ,FName
        ,MName
        ,LName
        ,Surname
        ,EmpID
        ,TIN
        ,SSS
        ,HDMF
        ,PhH
        ,EmpStatus
        ,EmailAdd
        ,WorkNo
        ,HomeNo
        ,MobileNo
        ,SUBSTRING(HAddress,1,1000)
        ,Nick
        ,JTitle
        ,Gend
        ,EmpType
        ,MaritStat
        ,BDate
        ,Start_Date
        ,termin_date
        ,INSUPD_position(NULL,PositionTextName,UserRowID,OrganizID,UserRowID,NULL,division_parentID, NULL)
        ,PayFreqID
        ,number_dependnt
        ,UTOverride
        ,OTOverride
        ,IF(EmpStatus = 'Probationary', '1', '0')
        ,LeaveBal
        ,SickBal
        ,MaternBal
        ,LeaveAllow
        ,SickAllow
        ,MaternAllow
        ,Imag
        ,LeavePayPer
        ,SickPayPer
        ,MaternPayPer
        ,IsExemptAlphaList
        ,Day_Rest
        ,ATM_No
        ,OtherLeavePayPer
        ,OtherLeavePayPer * COUNT_payperiodthisyear(OrganizID,PayFreqID)
        ,Bank_Name
        ,Calc_Holiday
        ,Calc_SpecialHoliday
        ,Calc_NightDiff
        ,Calc_NightDiffOT
        ,Calc_RestDay
        ,Calc_RestDayOT
    ) ON
    DUPLICATE
    KEY
    UPDATE
        LastUpdBy=UserRowID
        ,LastUpd=CURRENT_TIMESTAMP()
        ,OrganizationID=OrganizID
        ,Salutation=Salutat
        ,FirstName=FName
        ,MiddleName=MName
        ,LastName=LName
        ,Surname=Surname
        ,EmployeeID=EmpID
        ,TINNo=TIN
        ,SSSNo=SSS
        ,HDMFNo=HDMF
        ,PhilHealthNo=PhH
        ,EmploymentStatus=EmpStatus
        ,EmailAddress=EmailAdd
        ,WorkPhone=WorkNo
        ,HomePhone=HomeNo
        ,MobilePhone=MobileNo
        ,HomeAddress=HAddress
        ,Nickname=Nick
        ,JobTitle=JTitle
        ,Gender=Gend
        ,EmployeeType=EmpType
        ,MaritalStatus=MaritStat
        ,Birthdate=BDate
        ,StartDate=Start_Date
        ,TerminationDate=termin_date
        ,PositionID=INSUPD_position(NULL,PositionTextName,UserRowID,OrganizID,UserRowID,NULL,division_parentID)
        ,PayFrequencyID=PayFreqID
        ,NoOfDependents=number_dependnt
        ,UndertimeOverride=UTOverride
        ,OvertimeOverride=OTOverride
        ,NewEmployeeFlag=NewEmpFlag
        ,LeaveBalance=LeaveBal
        ,SickLeaveBalance=SickBal
        ,MaternityLeaveBalance=MaternBal
        ,LeaveAllowance=LeaveAllow
        ,SickLeaveAllowance=SickAllow
        ,MaternityLeaveAllowance=MaternAllow
        ,Image=Imag
        ,LeavePerPayPeriod=LeavePayPer
        ,SickLeavePerPayPeriod=SickPayPer
        ,MaternityLeavePerPayPeriod=MaternPayPer
        ,AlphaListExempted=IsExemptAlphaList
        ,WorkDaysPerYear=Work_DaysPerYear
        ,DayOfRest=Day_Rest
        ,ATMNo=ATM_No
        ,OtherLeavePerPayPeriod=OtherLeavePayPer
        ,OtherLeaveAllowance=OtherLeavePayPer * COUNT_payperiodthisyear(OrganizID,PayFreqID)
        ,BankName=Bank_Name
        ,CalcHoliday=Calc_Holiday
        ,CalcSpecialHoliday=Calc_SpecialHoliday
        ,CalcNightDiff=Calc_NightDiff
        ,CalcNightDiffOT=Calc_NightDiffOT
        ,CalcRestDay=Calc_RestDay
        ,CalcRestDayOT=Calc_RestDayOT;SELECT @@Identity AS id INTO returnval;

END IF;

RETURN returnval;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_listofval
DROP FUNCTION IF EXISTS `INSUPD_listofval`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_listofval`(`DispVal` VARCHAR(50), `paramLIC` VARCHAR(50), `paramType` VARCHAR(50), `Parent_LIC` VARCHAR(50), `paramActive` CHAR(5), `Descript` VARCHAR(500), `UserRowID` INT, `Order_By` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

DECLARE maxordby INT(11);



SELECT MAX(OrderBy) + 1 FROM listofval WHERE `LIC`=paramLIC AND `Type`=paramType AND `ParentLIC`=Parent_LIC INTO maxordby;

IF IFNULL(maxordby,0) = 0 THEN

    SET  maxordby = 0;

END IF;

INSERT INTO listofval
(
    DisplayValue
    ,LIC
    ,`Type`
    ,ParentLIC
    ,Active
    ,Description
    ,Created
    ,CreatedBy
    ,LastUpd
    ,OrderBy
    ,LastUpdBy
) VALUES (
    DispVal
    ,paramLIC
    ,paramType
    ,Parent_LIC
    ,paramActive
    ,Descript
    ,CURRENT_TIMESTAMP()
    ,UserRowID
    ,CURRENT_TIMESTAMP()
    ,maxordby
    ,UserRowID
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP();SELECT @@Identity AS ID INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_payperiod
DROP FUNCTION IF EXISTS `INSUPD_payperiod`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_payperiod`(`payp_RowID` INT, `payp_OrganizationID` INT, `payp_CreatedBy` INT, `payp_LastUpdBy` INT, `payp_PayFromDate` DATE, `payp_PayToDate` DATE, `payp_TotalGrossSalary` DECIMAL(10,2), `payp_TotalNetSalary` DECIMAL(10,2), `payp_TotalEmpSSS` DECIMAL(10,2), `payp_TotalEmpWithholdingTax` DECIMAL(10,2), `payp_TotalCompSSS` DECIMAL(10,2), `payp_TotalEmpPhilhealth` DECIMAL(10,2), `payp_TotalCompPhilhealth` DECIMAL(10,2), `payp_TotalEmpHDMF` DECIMAL(10,2), `payp_TotalCompHDMF` DECIMAL(10,2)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE payperiodID INT(11);

INSERT INTO payperiod
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,LastUpdBy
    ,PayFromDate
    ,PayToDate
    ,TotalGrossSalary
    ,TotalNetSalary
    ,TotalEmpSSS
    ,TotalEmpWithholdingTax
    ,TotalCompSSS
    ,TotalEmpPhilhealth
    ,TotalCompPhilhealth
    ,TotalEmpHDMF
    ,TotalCompHDMF
) VALUES (
    payp_RowID
    ,payp_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,payp_CreatedBy
    ,payp_LastUpdBy
    ,payp_PayFromDate
    ,payp_PayToDate
    ,payp_TotalGrossSalary
    ,payp_TotalNetSalary
    ,payp_TotalEmpSSS
    ,payp_TotalEmpWithholdingTax
    ,payp_TotalCompSSS
    ,payp_TotalEmpPhilhealth
    ,payp_TotalCompPhilhealth
    ,payp_TotalEmpHDMF
    ,payp_TotalCompHDMF
) ON
DUPLICATE
KEY UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=payp_LastUpdBy
    ,PayFromDate=payp_PayFromDate
    ,PayToDate=payp_PayToDate
    ,TotalGrossSalary=payp_TotalGrossSalary
    ,TotalNetSalary=payp_TotalNetSalary
    ,TotalEmpSSS=payp_TotalEmpSSS
    ,TotalEmpWithholdingTax=payp_TotalEmpWithholdingTax
    ,TotalCompSSS=payp_TotalCompSSS
    ,TotalEmpPhilhealth=payp_TotalEmpPhilhealth
    ,TotalCompPhilhealth=payp_TotalCompPhilhealth
    ,TotalEmpHDMF=payp_TotalEmpHDMF
    ,TotalCompHDMF=payp_TotalCompHDMF;SELECT @@Identity AS id INTO payperiodID;

RETURN payperiodID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_payphilhealth
DROP FUNCTION IF EXISTS `INSUPD_payphilhealth`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_payphilhealth`(`phh_RowID` INT, `phh_CreatedBy` INT, `phh_LastUpdBy` INT, `phh_SalaryRangeFrom` DECIMAL(10,2), `phh_SalaryRangeTo` DECIMAL(10,2), `phh_SalaryBase` DECIMAL(10,2), `phh_TotalMonthlyPremium` DECIMAL(10,2), `phh_EmployeeShare` DECIMAL(10,2), `phh_EmployerShare` DECIMAL(10,2), `phh_SalaryBracket` DECIMAL(10,2)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnval INT(11);

DECLARE maxsalarybrack INT(11);




INSERT INTO payphilhealth
(
    RowID
    ,Created
    ,CreatedBy
    ,SalaryBracket
    ,SalaryRangeFrom
    ,SalaryRangeTo
    ,SalaryBase
    ,TotalMonthlyPremium
    ,EmployeeShare
    ,EmployerShare
) VALUES (
    phh_RowID
    ,CURRENT_TIMESTAMP()
    ,phh_CreatedBy
    ,phh_SalaryBracket
    ,phh_SalaryRangeFrom
    ,phh_SalaryRangeTo
    ,phh_SalaryBase
    ,phh_TotalMonthlyPremium
    ,phh_EmployeeShare
    ,phh_EmployerShare
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=phh_LastUpdBy
    ,SalaryBracket=phh_SalaryBracket
    ,SalaryRangeFrom=phh_SalaryRangeFrom
    ,SalaryRangeTo=phh_SalaryRangeTo
    ,SalaryBase=phh_SalaryBase
    ,TotalMonthlyPremium=phh_TotalMonthlyPremium
    ,EmployeeShare=phh_EmployeeShare
    ,EmployerShare=phh_EmployerShare;SELECT @@Identity AS id INTO returnval;

RETURN returnval;



END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_payrate
DROP FUNCTION IF EXISTS `INSUPD_payrate`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_payrate`(
    `prate_RowID` INT,
    `prate_OrganizationID` INT,
    `prate_CreatedBy` INT,
    `prate_LastUpdBy` INT,
    `prate_Date` DATE,
    `prate_PayType` VARCHAR(50),
    `prate_Description` VARCHAR(50),
    `prate_PayRate` DECIMAL(10, 4),
    `prate_OvertimeRate` DECIMAL(10, 4),
    `prate_NightDifferentialRate` DECIMAL(10, 4),
    `prate_NightDifferentialOTRate` DECIMAL(10, 4),
    `prate_RestDayRate` DECIMAL(10, 4),
    `prate_RestDayOvertimeRate` DECIMAL(10, 4)
) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE payrateID INT(11);

DECLARE yester_date DATE;

DECLARE rdayndrate_str
        ,rdayndotrate_str TEXT;

DECLARE rdayndrate
        ,rdayndotrate DECIMAL(11, 4);

DECLARE rdayndrate_default DECIMAL(11, 4) DEFAULT 1.43;
DECLARE rdayndotrate_default DECIMAL(11, 4) DEFAULT 1.859;

SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(lv.DisplayValue, ',', -2), ',', 1) `RDayNDRate`
, SUBSTRING_INDEX(SUBSTRING_INDEX(lv.DisplayValue, ',', -1), ',', 1) `RDayNDOTRate`
# , lv.DisplayValue
FROM listofval lv
WHERE lv.`Type` = 'Pay rate'
AND lv.ParentLIC = prate_PayType
LIMIT 1
INTO rdayndrate_str
     ,rdayndotrate_str;

IF LENGTH(IFNULL(rdayndrate_str, '')) = 0 THEN

	SET rdayndrate = rdayndrate_default;
ELSE

	SET rdayndrate = CONCAT_WS('.'
	                           , LEFT(rdayndrate_str, 1)
	                           , RIGHT(rdayndrate_str, (LENGTH(rdayndrate_str) - 1))
	                           );
END IF;


IF LENGTH(IFNULL(rdayndotrate_str, '')) = 0 THEN

	SET rdayndotrate = rdayndotrate_default;
ELSE

	SET rdayndotrate = CONCAT_WS('.'
	                             , LEFT(rdayndotrate_str, 1)
	                             , RIGHT(rdayndotrate_str, (LENGTH(rdayndotrate_str) - 1))
										  );
END IF;

IF prate_PayType IN ('Regular Holiday', 'Special Non-Working Holiday') THEN
    SET yester_date = SUBDATE(prate_Date, INTERVAL 1 DAY);

ELSE
    SET yester_date = NULL;

END IF;



INSERT INTO payrate
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,LastUpdBy
    ,`Date`
    ,PayType
    ,Description
    ,`PayRate`
    ,OvertimeRate
    ,NightDifferentialRate
    ,NightDifferentialOTRate
    ,RestDayRate
    ,DayBefore
    ,RestDayOvertimeRate
	 , RestDayNDRate
    , RestDayNDOTRate
) VALUES (
    prate_RowID
    ,prate_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,prate_CreatedBy
    ,prate_LastUpdBy
    ,prate_Date
    ,prate_PayType
    ,prate_Description
    ,prate_PayRate
    ,prate_OvertimeRate
    ,prate_NightDifferentialRate
    ,prate_NightDifferentialOTRate
    ,prate_RestDayRate
    ,yester_date
    ,prate_RestDayOvertimeRate
    , rdayndrate
    , rdayndotrate
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=prate_LastUpdBy
    ,PayType=prate_PayType
    ,Description=prate_Description
    ,`PayRate`=prate_PayRate
    ,OvertimeRate=prate_OvertimeRate
    ,NightDifferentialRate=prate_NightDifferentialRate
    ,NightDifferentialOTRate=prate_NightDifferentialOTRate
    ,RestDayRate=prate_RestDayRate
    ,DayBefore=yester_date
    ,RestDayOvertimeRate=prate_RestDayOvertimeRate
	 , RestDayNDRate = rdayndrate
    , RestDayNDOTRate = rdayndotrate
	 ;SELECT @@Identity AS id INTO payrateID;
	 
RETURN payrateID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_paysocialsecurity
DROP FUNCTION IF EXISTS `INSUPD_paysocialsecurity`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_paysocialsecurity`(`sss_RowID` INT, `sss_CreatedBy` INT, `sss_LastUpdBy` INT, `sss_RangeFromAmount` DECIMAL(10,2), `sss_RangeToAmount` DECIMAL(10,2), `sss_MonthlySalaryCredit` DECIMAL(10,2), `sss_EmployeeContributionAmount` DECIMAL(10,2), `sss_EmployerContributionAmount` DECIMAL(10,2), `sss_EmployeeECAmount` DECIMAL(10,2)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnval INT(11);

INSERT INTO paysocialsecurity
(
    RowID
    ,Created
    ,CreatedBy
    ,RangeFromAmount
    ,RangeToAmount
    ,MonthlySalaryCredit
    ,EmployeeContributionAmount
    ,EmployerContributionAmount
    ,EmployeeECAmount
) VALUES (
    RowID
    ,CURRENT_TIMESTAMP()
    ,sss_CreatedBy
    ,sss_RangeFromAmount
    ,sss_RangeToAmount
    ,sss_MonthlySalaryCredit
    ,sss_EmployeeContributionAmount
    ,sss_EmployerContributionAmount
    ,sss_EmployeeECAmount
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=sss_LastUpdBy
    ,RangeFromAmount=sss_RangeFromAmount
    ,RangeToAmount=sss_RangeToAmount
    ,MonthlySalaryCredit=sss_MonthlySalaryCredit
    ,EmployeeContributionAmount=sss_EmployeeContributionAmount
    ,EmployerContributionAmount=sss_EmployerContributionAmount
    ,EmployeeECAmount=sss_EmployeeECAmount;SELECT @@Identity AS id INTO returnval;

IF returnval = 0 THEN

    IF (SELECT EXISTS(SELECT RowID FROM paysocialsecurity WHERE RowID IS NULL LIMIT 1)) = 1 THEN

        UPDATE paysocialsecurity SET RowID=1 WHERE RowID='0';

        SET returnval = 1;

    END IF;

END IF;

RETURN returnval;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_paystub
DROP FUNCTION IF EXISTS `INSUPD_paystub`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_paystub`(`pstub_RowID` INT, `pstub_OrganizationID` INT, `pstub_CreatedBy` INT, `pstub_LastUpdBy` INT, `pstub_PayPeriodID` INT, `pstub_EmployeeID` INT, `pstub_TimeEntryID` INT, `pstub_PayFromDate` DATE, `pstub_PayToDate` DATE, `pstub_TotalGrossSalary` DECIMAL(10,2), `pstub_TotalNetSalary` DECIMAL(10,2), `pstub_TotalTaxableSalary` DECIMAL(10,2), `pstub_TotalEmpSSS` DECIMAL(10,2), `pstub_TotalEmpWithholdingTax` DECIMAL(10,2), `pstub_TotalCompSSS` DECIMAL(10,2), `pstub_TotalEmpPhilhealth` DECIMAL(10,2), `pstub_TotalCompPhilhealth` DECIMAL(10,2), `pstub_TotalEmpHDMF` DECIMAL(10,2), `pstub_TotalCompHDMF` DECIMAL(10,2), `pstub_TotalVacationDaysLeft` DECIMAL(10,2), `pstub_TotalLoans` DECIMAL(10,2), `pstub_TotalBonus` DECIMAL(10,2), `pstub_TotalAllowance` DECIMAL(10,2)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE paystubID INT(11);

DECLARE existingrowrecord INT(11);

DECLARE isexist INT(1);

DECLARE SumPayStubAdjustments DECIMAL(11,2);

DECLARE ps_TotalUndeclaredSalary DECIMAL(11,6) DEFAULT 0.0;
DECLARE ps_rowIDs VARCHAR(2000);
SELECT RowID FROM paystub WHERE EmployeeID=pstub_EmployeeID AND OrganizationID=pstub_OrganizationID AND PayFromDate=pstub_PayFromDate AND PayToDate=pstub_PayToDate INTO ps_rowIDs;
DELETE FROM paystubactual WHERE RowID != ps_rowIDs AND EmployeeID=pstub_EmployeeID AND OrganizationID=pstub_OrganizationID AND PayFromDate=pstub_PayFromDate AND PayToDate=pstub_PayToDate;

SELECT RowID FROM paystub WHERE PayPeriodID=pstub_PayPeriodID AND EmployeeID=pstub_EmployeeID AND OrganizationID=pstub_OrganizationID AND PayFromDate=pstub_PayFromDate AND PayToDate=pstub_PayToDate LIMIT 1 INTO existingrowrecord;

SET SumPayStubAdjustments = IFNULL(GET_SumPayStubAdjustments(IF(pstub_RowID IS NULL, existingrowrecord, pstub_RowID)),0);

SELECT GET_employeeundeclaredsalarypercent(pstub_EmployeeID,pstub_OrganizationID,pstub_PayFromDate,pstub_PayToDate) INTO ps_TotalUndeclaredSalary;

IF ps_TotalUndeclaredSalary < 1.0 THEN
    SET ps_TotalUndeclaredSalary = ps_TotalUndeclaredSalary + 1.000000;
ELSEIF ps_TotalUndeclaredSalary > 1.0 THEN
    SET ps_TotalUndeclaredSalary = ps_TotalUndeclaredSalary - 1.000000;
END IF;

SET ps_TotalUndeclaredSalary = CAST(ps_TotalUndeclaredSalary AS DECIMAL(11,6));

SET ps_TotalUndeclaredSalary = (pstub_TotalNetSalary + SumPayStubAdjustments) * ps_TotalUndeclaredSalary;

INSERT INTO paystub
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,PayPeriodID
    ,EmployeeID
    ,TimeEntryID
    ,PayFromDate
    ,PayToDate
    ,TotalGrossSalary
    ,TotalNetSalary
    ,TotalTaxableSalary
    ,TotalEmpSSS
    ,TotalEmpWithholdingTax
    ,TotalCompSSS
    ,TotalEmpPhilhealth
    ,TotalCompPhilhealth
    ,TotalEmpHDMF
    ,TotalCompHDMF
    ,TotalVacationDaysLeft
    ,TotalLoans
    ,TotalBonus
    ,TotalAllowance
    ,TotalAdjustments
    ,TotalUndeclaredSalary
) VALUES (
    IF(pstub_RowID IS NULL, existingrowrecord, pstub_RowID)
    ,pstub_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,pstub_CreatedBy
    ,pstub_PayPeriodID
    ,pstub_EmployeeID
    ,pstub_TimeEntryID
    ,pstub_PayFromDate
    ,pstub_PayToDate
    ,pstub_TotalGrossSalary
    ,pstub_TotalNetSalary + SumPayStubAdjustments
    ,pstub_TotalTaxableSalary
    ,pstub_TotalEmpSSS
    ,pstub_TotalEmpWithholdingTax
    ,pstub_TotalCompSSS
    ,pstub_TotalEmpPhilhealth
    ,pstub_TotalCompPhilhealth
    ,pstub_TotalEmpHDMF
    ,pstub_TotalCompHDMF
    ,COALESCE((SELECT COALESCE(LeaveBalance,0) + COALESCE(SickLeaveBalance,0) + COALESCE(MaternityLeaveBalance,0) FROM employee WHERE RowID=pstub_EmployeeID),0)
    ,pstub_TotalLoans
    ,pstub_TotalBonus
    ,pstub_TotalAllowance
    ,SumPayStubAdjustments
    ,ps_TotalUndeclaredSalary
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=pstub_LastUpdBy
    ,PayPeriodID=pstub_PayPeriodID
    ,EmployeeID=pstub_EmployeeID
    ,TimeEntryID=pstub_TimeEntryID
    ,PayFromDate=pstub_PayFromDate
    ,PayToDate=pstub_PayToDate
    ,TotalGrossSalary=pstub_TotalGrossSalary
    ,TotalNetSalary=pstub_TotalNetSalary + SumPayStubAdjustments
    ,TotalTaxableSalary=pstub_TotalTaxableSalary
    ,TotalEmpSSS=pstub_TotalEmpSSS
    ,TotalEmpWithholdingTax=pstub_TotalEmpWithholdingTax
    ,TotalCompSSS=pstub_TotalCompSSS
    ,TotalEmpPhilhealth=pstub_TotalEmpPhilhealth
    ,TotalCompPhilhealth=pstub_TotalCompPhilhealth
    ,TotalEmpHDMF=pstub_TotalEmpHDMF
    ,TotalCompHDMF=pstub_TotalCompHDMF
    ,TotalLoans=pstub_TotalLoans
    ,TotalBonus=pstub_TotalBonus
    ,TotalAllowance=pstub_TotalAllowance
    ,TotalAdjustments=SumPayStubAdjustments
    ,TotalUndeclaredSalary=ps_TotalUndeclaredSalary;SELECT @@Identity AS id INTO paystubID;


IF existingrowrecord IS NULL THEN

    RETURN paystubID;

ELSE

    RETURN existingrowrecord;

END IF;



END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_paystubbonus
DROP FUNCTION IF EXISTS `INSUPD_paystubbonus`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_paystubbonus`(`OrganizID` INT, `EmpRowID` INT, `UserRowID` INT, `psb_PayPeriodID` INT
, `psb_PayFromDate` DATE
, `psb_PayToDate` DATE
, `psb_TotalGrossSalary` DECIMAL(11,6)
, `psb_TotalNetSalary` DECIMAL(11,6)
, `psb_TotalTaxableSalary` DECIMAL(11,6)
, `psb_TotalEmpSSS` DECIMAL(11,6)
, `psb_TotalEmpWithholdingTax` DECIMAL(11,6)
, `psb_TotalCompSSS` DECIMAL(11,6)
, `psb_TotalEmpPhilhealth` DECIMAL(11,6)
, `psb_TotalCompPhilhealth` DECIMAL(11,6)
, `psb_TotalEmpHDMF` DECIMAL(11,6)
, `psb_TotalCompHDMF` DECIMAL(11,6)
, `psb_TotalVacationDaysLeft` DECIMAL(11,6)
, `psb_TotalUndeclaredSalary` DECIMAL(11,6)
, `psb_TotalLoans` DECIMAL(11,6)
, `psb_TotalBonus` DECIMAL(11,6)
, `psb_TotalAllowance` DECIMAL(11,6)
, `psb_TotalAdjustments` DECIMAL(11,6)
, `psb_ThirteenthMonthInclusion` CHAR(1)
, `psb_FirstTimeSalary` CHAR(1)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

DECLARE IsFirstHalfOfMonth BOOL;

DECLARE function_wrapper INT(11);

DECLARE max_date_ofparamdate
       ,min_date_ofparamdate DATE;

SELECT MIN(pyp.PayFromDate)
,MAX(pyp.PayToDate)
FROM payperiod pyp
INNER JOIN payperiod pp
        ON pp.OrganizationID=pyp.OrganizationID
		     AND (pp.PayFromDate >= psb_PayFromDate OR pp.PayToDate >= psb_PayFromDate)
			  AND (pp.PayFromDate <= psb_PayToDate OR pp.PayToDate <= psb_PayToDate)
WHERE pyp.OrganizationID=OrganizID
AND pyp.`Year` = pp.`Year`
INTO min_date_ofparamdate
     ,max_date_ofparamdate;

INSERT INTO paystubbonus
(

    OrganizationID
    ,Created
    ,CreatedBy
    ,PayPeriodID
    ,EmployeeID
    ,PayFromDate
    ,PayToDate
    ,TotalGrossSalary
    ,TotalNetSalary
    ,TotalTaxableSalary
    ,TotalEmpSSS
    ,TotalEmpWithholdingTax
    ,TotalCompSSS
    ,TotalEmpPhilhealth
    ,TotalCompPhilhealth
    ,TotalEmpHDMF
    ,TotalCompHDMF
    ,TotalVacationDaysLeft
    ,TotalUndeclaredSalary
    ,TotalLoans
    ,TotalBonus
    ,TotalAllowance
    ,TotalAdjustments
    ,ThirteenthMonthInclusion
    ,FirstTimeSalary

)   SELECT

    OrganizID
    ,CURRENT_TIMESTAMP()
    ,UserRowID
    ,psb_PayPeriodID
    ,EmpRowID
    ,psb_PayFromDate
    ,psb_PayToDate
    ,psb_TotalGrossSalary
    ,(IFNULL(eb.`SumBonus`,0) - (IFNULL(els.`TotalLoans`, 0) + IFNULL(elss.`TotalLoans`, 0)))
    ,psb_TotalTaxableSalary
    ,psb_TotalEmpSSS
    ,psb_TotalEmpWithholdingTax
    ,psb_TotalCompSSS
    ,psb_TotalEmpPhilhealth
    ,psb_TotalCompPhilhealth
    ,psb_TotalEmpHDMF
    ,psb_TotalCompHDMF
    ,psb_TotalVacationDaysLeft
    ,psb_TotalUndeclaredSalary
    ,(@total_loan := (IFNULL(els.`TotalLoans`, 0) + IFNULL(elss.`TotalLoans`, 0)))# psb_TotalLoans
    ,psb_TotalBonus
    ,psb_TotalAllowance
    ,psb_TotalAdjustments
    ,psb_ThirteenthMonthInclusion
    ,((e.StartDate BETWEEN psb_PayFromDate AND psb_PayToDate) OR (e.StartDate <= psb_PayFromDate)) AND (IFNULL(psb.FirstTimeSalary,0) = '0')
    FROM employee e

    LEFT JOIN (SELECT RowID,FirstTimeSalary FROM paystubbonus WHERE EmployeeID=EmpRowID AND OrganizationID=OrganizID ORDER BY DATEDIFF(PayToDate,CURDATE()) LIMIT 1
	            ) psb
	        ON psb.RowID IS NULL OR psb.RowID IS NOT NULL
    
    LEFT JOIN (SELECT eb.*,SUM(eb.BonusAmount) `SumBonus`
	              FROM employeebonus eb
	              WHERE eb.EmployeeID=EmpRowID
	              AND eb.OrganizationID=OrganizID
	              AND (eb.EffectiveStartDate >= psb_PayFromDate OR eb.EffectiveEndDate >= psb_PayFromDate)
	              AND (eb.EffectiveStartDate <= psb_PayToDate OR eb.EffectiveEndDate <= psb_PayToDate)
               ) eb
			  ON eb.RowID IS NULL OR eb.RowID IS NOT NULL
    
    LEFT JOIN (SELECT els.*
	            ,SUM(IF(els.LoanPayPeriodLeft = 0
					        , ( els.DeductionAmount + (els.TotalLoanAmount - (els.DeductionAmount * els.NoOfPayPeriod)) )
							  , els.DeductionAmount)
						  ) `TotalLoans`
						  
					FROM employeeloanschedule els
               INNER JOIN employeebonus eb
                       ON eb.EmployeeID = EmpRowID
							     AND eb.OrganizationID = OrganizID
								  AND (eb.EffectiveStartDate >= psb_PayFromDate OR eb.EffectiveEndDate >= psb_PayFromDate)
								  AND (eb.EffectiveStartDate <= psb_PayToDate OR eb.EffectiveEndDate <= psb_PayToDate)
								  AND eb.RowID = els.BonusID
								  AND els.BonusPotentialPaymentForLoan = 0
               WHERE els.EmployeeID=EmpRowID
               AND els.OrganizationID=OrganizID
               AND els.`Status` IN ('In progress', 'Complete')
               AND els.BonusID IS NOT NULL
               AND (els.DedEffectiveDateFrom >= min_date_ofparamdate OR els.DedEffectiveDateTo >= min_date_ofparamdate)
               AND (els.DedEffectiveDateFrom <= max_date_ofparamdate OR els.DedEffectiveDateTo <= max_date_ofparamdate)
	            ) els
           ON IFNULL(els.`TotalLoans`, 0) != 0
           
    # ######################################################################
    
    LEFT JOIN (SELECT els.*
	            ,SUM(
	                 (els.TotalLoanAmount - ((els.NoOfPayPeriod - els.LoanPayPeriodLeftForBonus) * els.DeductionAmount))
						  ) `TotalLoans`
						  
					FROM employeeloanschedule els
               INNER JOIN employeebonus eb
                       ON eb.EmployeeID = EmpRowID
							     AND eb.OrganizationID = OrganizID
								  AND (eb.EffectiveStartDate >= psb_PayFromDate OR eb.EffectiveEndDate >= psb_PayFromDate)
								  AND (eb.EffectiveStartDate <= psb_PayToDate OR eb.EffectiveEndDate <= psb_PayToDate)
								  AND eb.RowID = els.BonusID
								  AND els.BonusPotentialPaymentForLoan = 1
               WHERE els.EmployeeID=EmpRowID
               AND els.OrganizationID=OrganizID
               AND els.`Status` IN ('In progress', 'Complete')
               AND els.BonusID IS NOT NULL
               AND (els.DedEffectiveDateFrom >= min_date_ofparamdate OR els.DedEffectiveDateTo >= min_date_ofparamdate)
               AND (els.DedEffectiveDateFrom <= max_date_ofparamdate OR els.DedEffectiveDateTo <= max_date_ofparamdate)
	            ) elss
           ON IFNULL(elss.`TotalLoans`, 0) != 0
           
	 WHERE e.RowID=EmpRowID AND e.OrganizationID=OrganizID
 ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,TotalLoans=IFNULL(@total_loan, 0)
    ,TotalNetSalary=(IFNULL(eb.`SumBonus`,0) - IFNULL(@total_loan, 0))
    ,LastUpdBy=UserRowID;SELECT @@Identity AS ID INTO returnvalue;
 
CALL aftins_paystubbonus_then_aftins_bonusloandeduction(OrganizID, UserRowID, EmpRowID, psb_PayPeriodID, min_date_ofparamdate, max_date_ofparamdate);

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_paystubitem
DROP FUNCTION IF EXISTS `INSUPD_paystubitem`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_paystubitem`(
	`pstubitm_RowID` INT,
	`pstubitm_OrganizationID` INT,
	`pstubitm_CreatedBy` INT,
	`pstubitm_LastUpdBy` INT,
	`pstubitm_PayStubID` INT,
	`pstubitm_ProductID` INT,
	`pstubitm_PayAmount` DECIMAL(11,2)
) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE paypID INT(11);

DECLARE paypDateTo DATE;

DECLARE pay_fromdate DATE;

DECLARE amountloan DECIMAL(11,2);

DECLARE deductamount DECIMAL(11,2);

DECLARE selectedEmployeeID VARCHAR(100);

DECLARE psi_undeclaredID INT(11);

DECLARE SSSContribProductRowID INT(11);

DECLARE WeeklyPayFreqID INT(11);

DECLARE isWeeklySSSContribSched CHAR(1);

DECLARE SSSContribAmount DECIMAL(11,2);

DECLARE pstubtimID INT(11);

DECLARE pstubtimRowID INT(11);

DECLARE loan_interestID INT(11);


SELECT RowID
FROM paystubitem
WHERE OrganizationID=pstubitm_OrganizationID
    AND PayStubID=pstubitm_PayStubID
    AND ProductID=pstubitm_ProductID
    AND IFNULL(Undeclared, '0') = '0'
INTO pstubtimRowID;

INSERT INTO paystubitem
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,PayStubID
    ,ProductID
    ,PayAmount
    ,Undeclared
) VALUES (
    IF(pstubitm_RowID IS NULL, pstubtimRowID, pstubitm_RowID)
    ,pstubitm_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,pstubitm_CreatedBy
    ,pstubitm_PayStubID
    ,pstubitm_ProductID
    ,pstubitm_PayAmount
    ,'0'
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=pstubitm_LastUpdBy
    ,ProductID=pstubitm_ProductID
    ,PayAmount=pstubitm_PayAmount
    ,Undeclared='0';

SELECT @@Identity AS id INTO pstubtimID;

SELECT
    PayPeriodID,
    EmployeeID,
    PayToDate,
    PayFromDate
FROM paystub
WHERE RowID = pstubitm_PayStubID
INTO
    paypID,
    selectedEmployeeID,
    paypDateTo,
    pay_fromdate;

IF pstubitm_ProductID IN (
    SELECT RowID
    FROM product
    WHERE `Category`='Loan Type'
        AND OrganizationID=pstubitm_OrganizationID
    ) AND
    pstubitm_RowID IS NULL THEN

    SELECT
        DeductionPercentage,
        DeductionAmount
    FROM employeeloanschedule
    WHERE `Status`='In Progress'
        AND OrganizationID=pstubitm_OrganizationID
        AND EmployeeID=selectedEmployeeID
        AND LoanTypeID=pstubitm_ProductID
        AND IF(
            paypDateTo <= DedEffectiveDateTo,
            paypDateTo <= DedEffectiveDateTo,
            IF(
                paypDateTo <= DedEffectiveDateFrom,
                paypDateTo <= DedEffectiveDateFrom,
                IF(
                    paypDateTo >= DedEffectiveDateTo,
                    paypDateTo >= DedEffectiveDateTo,
                    TRUE
                )
            )
        )
    LIMIT 1
    INTO
        amountloan,
        deductamount;

    SELECT RowID
    FROM product
    WHERE Category = 'Loan Interest'
        AND LastSoldCount = pstubitm_ProductID
        AND OrganizationID = pstubitm_OrganizationID
    LIMIT 1
    INTO loan_interestID;

    IF loan_interestID IS NOT NULL THEN

        INSERT INTO paystubitem
        (
            RowID
            ,OrganizationID
            ,Created
            ,CreatedBy
            ,PayStubID
            ,ProductID
            ,PayAmount
            ,Undeclared
        ) VALUES (
            IF(pstubitm_RowID IS NULL, pstubtimRowID, pstubitm_RowID)
            ,pstubitm_OrganizationID
            ,CURRENT_TIMESTAMP()
            ,pstubitm_CreatedBy
            ,pstubitm_PayStubID
            ,loan_interestID
            ,IFNULL((deductamount - (deductamount / (1 + amountloan))),0.00)
            ,'0'
        ) ON
        DUPLICATE
        KEY
        UPDATE
            LastUpd=CURRENT_TIMESTAMP()
            ,LastUpdBy=pstubitm_LastUpdBy
            ,Undeclared='0';

    END IF;

END IF;

SELECT INSUPD_paystubitemUndeclared(
    NULL,
    pstubitm_OrganizationID,
    pstubitm_CreatedBy,
    pstubitm_CreatedBy,
    pstubitm_PayStubID,
    pstubitm_ProductID,
    pstubitm_PayAmount
)
INTO psi_undeclaredID;

RETURN pstubtimID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_paystubitemUndeclared
DROP FUNCTION IF EXISTS `INSUPD_paystubitemUndeclared`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_paystubitemUndeclared`(`psi_RowID` INT, `psi_OrganizationID` INT, `psi_CreatedBy` INT, `psi_LastUpdBy` INT, `psi_PayStubID` INT, `psi_ProductID` INT, `psi_PayAmount` DECIMAL(11,2)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11) DEFAULT 0;

DECLARE psiRowID INT(11);

DECLARE undeclaredamount DECIMAL(11,6);

DECLARE e_RowID INT(11);

DECLARE ps_DateFrom DATE;

DECLARE ps_DateTo DATE;

IF psi_ProductID IN (SELECT p.RowID
                            FROM product p
                            INNER JOIN category c ON c.RowID=p.CategoryID
                            WHERE c.CategoryName IN ('Deductions','Miscellaneous','Totals')
                            AND p.OrganizationID=psi_OrganizationID
                            AND LOCATE('.',p.PartNo) = 0
                            ORDER BY p.Category) THEN

    SELECT EmployeeID,PayFromDate,PayToDate FROM paystub WHERE RowID=psi_PayStubID INTO e_RowID,ps_DateFrom,ps_DateTo;

    SELECT GET_employeeundeclaredsalarypercent(e_RowID,psi_OrganizationID,ps_DateFrom,ps_DateTo) INTO undeclaredamount;

    SELECT RowID FROM paystubitem WHERE OrganizationID=psi_OrganizationID AND ProductID=psi_ProductID AND PayStubID=psi_PayStubID AND Undeclared='1' INTO psiRowID;

    INSERT INTO paystubitem
    (
        RowID
        ,OrganizationID
        ,Created
        ,CreatedBy
        ,PayStubID
        ,ProductID
        ,PayAmount
        ,Undeclared
    ) VALUES (
        IF(psi_RowID IS NULL, psiRowID, psi_RowID)
        ,psi_OrganizationID
        ,CURRENT_TIMESTAMP()
        ,psi_CreatedBy
        ,psi_PayStubID
        ,psi_ProductID
        ,(psi_PayAmount * undeclaredamount)
        ,'1'
    ) ON
    DUPLICATE
    KEY
    UPDATE
        LastUpd=CURRENT_TIMESTAMP()
        ,LastUpdBy=psi_LastUpdBy
        ,PayAmount=(psi_PayAmount * undeclaredamount)
        ,Undeclared='1';SELECT @@Identity AS ID INTO returnvalue;

END IF;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_paywithholdingtax
DROP FUNCTION IF EXISTS `INSUPD_paywithholdingtax`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_paywithholdingtax`(`wtx_RowID` INT, `wtx_CreatedBy` INT, `wtx_LastUpdBy` INT, `wtx_PayFrequencyID` INT, `wtx_FilingStatusID` INT, `wtx_EffectiveDateFrom` DATE, `wtx_EffectiveDateTo` DATE, `wtx_ExemptionAmount` DECIMAL(10,2), `wtx_ExemptionInExcessAmount` DECIMAL(10,2), `wtx_TaxableIncomeFromAmount` DECIMAL(10,2), `wtx_TaxableIncomeToAmount` DECIMAL(10,2)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnval INT(11);

INSERT INTO paywithholdingtax
(
    RowID
    ,Created
    ,CreatedBy
    ,PayFrequencyID
    ,FilingStatusID
    ,EffectiveDateFrom
    ,EffectiveDateTo
    ,ExemptionAmount
    ,ExemptionInExcessAmount
    ,TaxableIncomeFromAmount
    ,TaxableIncomeToAmount
) VALUES (
    wtx_RowID
    ,CURRENT_TIMESTAMP()
    ,wtx_CreatedBy
    ,wtx_PayFrequencyID
    ,wtx_FilingStatusID
    ,wtx_EffectiveDateFrom
    ,wtx_EffectiveDateTo
    ,wtx_ExemptionAmount
    ,wtx_ExemptionInExcessAmount
    ,wtx_TaxableIncomeFromAmount
    ,wtx_TaxableIncomeToAmount
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=wtx_LastUpdBy
    ,PayFrequencyID=wtx_PayFrequencyID
    ,FilingStatusID=wtx_FilingStatusID
    ,EffectiveDateFrom=wtx_EffectiveDateFrom
    ,EffectiveDateTo=wtx_EffectiveDateTo
    ,ExemptionAmount=wtx_ExemptionAmount
    ,ExemptionInExcessAmount=wtx_ExemptionInExcessAmount
    ,TaxableIncomeFromAmount=wtx_TaxableIncomeFromAmount
    ,TaxableIncomeToAmount=wtx_TaxableIncomeToAmount;SELECT @@Identity AS id INTO returnval;

RETURN returnval;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_position
DROP FUNCTION IF EXISTS `INSUPD_position`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_position`(`pos_RowID` INT, `pos_PositionName` VARCHAR(50), `pos_CreatedBy` INT, `pos_OrganizationID` INT, `pos_LastUpdBy` INT, `pos_ParentPositionID` INT, `pos_DivisionId` INT, `pos_JobLevelID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE positID
        ,defaultDivisID
        , indx INT(11);

DECLARE default_division_name VARCHAR(50) DEFAULT 'Default Division';

SELECT COUNT(RowID)
FROM `division`
WHERE OrganizationID = pos_OrganizationID
INTO defaultDivisID;

IF defaultDivisID > 0 THEN

    IF pos_DivisionId IS NULL THEN
        SELECT RowID
        FROM division
        WHERE OrganizationID = pos_OrganizationID AND
            ParentDivisionID IS NOT NULL
        ORDER BY RowID
        LIMIT 1
        INTO pos_DivisionId;
    END IF;

    INSERT INTO `position` (
        RowID,
        PositionName,
        Created,
        CreatedBy,
        OrganizationID,
        LastUpdBy,
        # ParentPositionID,
        DivisionId,
        JobLevelID
    )
    VALUES (
        pos_RowID,
        pos_PositionName,
        CURRENT_TIMESTAMP(),
        pos_CreatedBy,
        pos_OrganizationID,
        pos_LastUpdBy,
        # pos_ParentPositionID,
        pos_DivisionId,
        pos_JobLevelID
    )
    ON DUPLICATE KEY
    UPDATE
        PositionName = pos_PositionName,
        LastUpd = CURRENT_TIMESTAMP(),
        LastUpdBy = pos_LastUpdBy,
        # ParentPositionID = pos_ParentPositionID,
        DivisionId = pos_DivisionId,
        JobLevelID = pos_JobLevelID;

    SELECT @@Identity AS Id
    INTO positID;
    
	SET @og_count = (SELECT COUNT(RowID) FROM organization og WHERE og.NoPurpose = '0' AND og.RowID != pos_OrganizationID);
	
	SET @_index = 0;
	
	WHILE @_index < @og_count DO
		
		SET indx =  @_index;
		
		SET @og_rowid = (SELECT RowID FROM organization og WHERE og.NoPurpose = '0' AND og.RowID != pos_OrganizationID LIMIT indx, 1);
		
		SELECT RowID FROM division WHERE Name = default_division_name AND OrganizationID=@og_rowid AND ParentDivisionID IS NOT NULL ORDER BY RowID LIMIT 1 INTO pos_DivisionId;
		
		CALL INSUPD_position(NULL, pos_PositionName, pos_CreatedBy, @og_rowid, pos_LastUpdBy, NULL, pos_DivisionId);
		
		SET @_index = @_index + 1;
		
	END WHILE;
	
ELSE

    INSERT INTO `division`
    (
        Name
        ,OrganizationID
        ,CreatedBy
        ,Created
    ) VALUES (
        'Division One'
        ,pos_OrganizationID
        ,pos_CreatedBy
        ,CURRENT_TIMESTAMP()
    ) ON
    DUPLICATE
    KEY
    UPDATE
        LastUpd=CURRENT_TIMESTAMP()
        ,LastUpdBy=pos_LastUpdBy;

    SELECT RowID FROM `division` WHERE OrganizationID=pos_OrganizationID ORDER BY RowID DESC LIMIT 1 INTO defaultDivisID;

    INSERT INTO `position`
    (
        RowID
        ,PositionName
        ,Created
        ,CreatedBy
        ,OrganizationID
        ,LastUpdBy
        # ,ParentPositionID
        ,DivisionId
    ) VALUES (
        pos_RowID
        ,pos_PositionName
        ,CURRENT_TIMESTAMP()
        ,pos_CreatedBy
        ,pos_OrganizationID
        ,pos_LastUpdBy
        # ,pos_ParentPositionID
        ,defaultDivisID
    ) ON
    DUPLICATE
    KEY
    UPDATE
        PositionName=pos_PositionName
        ,LastUpd=CURRENT_TIMESTAMP()
        ,LastUpdBy=pos_LastUpdBy
        # ,ParentPositionID=pos_ParentPositionID
        ,DivisionId=defaultDivisID;SELECT @@Identity AS Id INTO positID;

END IF;

IF IFNULL(positID,0) = 0 AND IFNULL(pos_RowID,0) != 0 THEN
    SET positID = pos_RowID;
ELSEIF IFNULL(positID,0) = 0 THEN
    SELECT RowID FROM `position` pt WHERE pt.PositionName=pos_PositionName AND pt.OrganizationID=pos_OrganizationID LIMIT 1 INTO positID;
END IF;

RETURN positID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_position_view
DROP FUNCTION IF EXISTS `INSUPD_position_view`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_position_view`(`pv_RowID` INT, `pv_PositionID` INT, `pv_OrganizationID` INT, `pv_CreatedBy` INT, `pv_LastUpdBy` INT, `pv_ViewID` INT, `pv_Creates` CHAR(1), `pv_ReadOnly` CHAR(1), `pv_Updates` CHAR(1), `pv_Deleting` CHAR(1)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE pvRowID INT(11);

DECLARE strView TEXT;

DECLARE posit_name TEXT;

SELECT p.PositionName FROM position p WHERE p.RowID=pv_PositionID LIMIT 1 INTO posit_name;

INSERT INTO position_view
(
    RowID
    ,PositionID
    ,ViewID
    ,Creates
    ,OrganizationID
    ,ReadOnly
    ,Updates
    ,Deleting
    ,Created
    ,CreatedBy
    ,LastUpdBy
) VALUES (
    pv_RowID
    ,pv_PositionID
    ,pv_ViewID
    ,pv_Creates
    ,pv_OrganizationID
    ,pv_ReadOnly
    ,pv_Updates
    ,pv_Deleting
    ,CURRENT_TIMESTAMP()
    ,pv_CreatedBy
    ,pv_CreatedBy
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=pv_LastUpdBy
    ,Creates=pv_Creates
    ,ReadOnly=pv_ReadOnly
    ,Updates=pv_Updates
    ,Deleting=pv_Deleting;SELECT @@Identity AS id INTO pvRowID;

UPDATE position_view pv
INNER JOIN (SELECT u.PositionID FROM user u INNER JOIN organization og ON og.RowID=pv_OrganizationID AND u.RowID!=og.CreatedBy INNER JOIN position p ON p.RowID=u.PositionID AND p.PositionName=posit_name) ppv ON ppv.PositionID=pv.PositionID
SET
    pv.LastUpd=CURRENT_TIMESTAMP()
    ,pv.LastUpdBy=pv_LastUpdBy
    ,pv.Creates=pv_Creates
    ,pv.ReadOnly=pv_ReadOnly
    ,pv.Updates=pv_Updates
    ,pv.Deleting=pv_Deleting
WHERE pv.OrganizationID=pv_OrganizationID AND pv.ViewID=pv_ViewID;

RETURN pvRowID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_product
DROP FUNCTION IF EXISTS `INSUPD_product`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_product`(`p_RowID` INT(11), `p_Name` VARCHAR(50), `p_OrganizationID` INT, `p_PartNo` VARCHAR(50), `p_CreatedBy` INT, `p_LastUpdBy` INT, `p_Category` VARCHAR(50), `p_CategoryID` INT, `p_Status` VARCHAR(50), `p_UnitPrice` DECIMAL(10,2), `p_UnitOfMeasure` VARCHAR(50), `p_IsFixed` TINYINT, `p_IsIncludedIn13th` TINYINT) RETURNS int(11)
    DETERMINISTIC
    COMMENT 'will insert a row and return its RowID if ''prod_RowID'' don''t exist in product table or else will update the table base on ''prod_RowID'''
BEGIN

DECLARE prod_RowID INT(11);

DECLARE cat_RowID INT(11);

SELECT COALESCE(RowID,NULL) FROM category WHERE OrganizationID=p_OrganizationID AND CategoryName=p_Category ORDER BY RowID LIMIT 1 INTO cat_RowID;

INSERT INTO product
(
    RowID
    ,Name
    ,OrganizationID
    ,PartNo
    ,Created
    ,CreatedBy
    ,LastUpdBy
    ,`Category`
    ,CategoryID
    ,`Status`
    ,UnitPrice
    ,UnitOfMeasure
    ,`Fixed`
    ,AllocateBelowSafetyFlag
) VALUES (
    p_RowID
    ,p_Name
    ,p_OrganizationID
    ,p_PartNo
    ,CURRENT_TIMESTAMP()
    ,p_CreatedBy
    ,p_LastUpdBy
    ,p_Category
    ,cat_RowID
    ,p_Status
    ,p_UnitPrice
    ,p_UnitOfMeasure
    ,p_IsFixed
    ,p_IsIncludedIn13th
) ON
DUPLICATE
KEY
UPDATE
    Name=p_Name
    ,PartNo=p_PartNo
    ,LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=p_LastUpdBy
    ,`Status`=p_Status
    ,`Fixed`=p_IsFixed
    ,AllocateBelowSafetyFlag=p_IsIncludedIn13th;SELECT @@Identity AS id INTO prod_RowID;

    IF IFNULL(prod_RowID,0) = 0 THEN
        SELECT RowID FROM product WHERE PartNo=p_PartNo AND OrganizationID=p_OrganizationID AND `Category`=p_Category LIMIT 1 INTO prod_RowID;
    END IF;

    IF p_RowID IS NULL AND cat_RowID = 40 THEN

        SELECT COALESCE(RowID,NULL) FROM category WHERE OrganizationID=p_OrganizationID AND CategoryName='Loan Interest' ORDER BY RowID LIMIT 1 INTO cat_RowID;

        INSERT INTO product
        (
            RowID
            ,Name
            ,OrganizationID
            ,PartNo
            ,Created
            ,CreatedBy
            ,LastUpdBy
            ,`Category`
            ,CategoryID
            ,`Status`
            ,UnitPrice
            ,UnitOfMeasure
        ) VALUES (
            p_RowID
            ,TRIM(CONCAT(p_Name,' Interest'))
            ,p_OrganizationID
            ,TRIM(CONCAT(p_PartNo,' Interest'))
            ,CURRENT_TIMESTAMP()
            ,p_CreatedBy
            ,p_LastUpdBy
            ,'Loan Interest'
            ,cat_RowID
            ,p_Status
            ,p_UnitPrice
            ,p_UnitOfMeasure
        );

    END IF;

    IF p_RowID IS NULL THEN

        INSERT INTO product
        (
            Name
            ,OrganizationID
            ,PartNo
            ,Created
            ,CreatedBy
            ,LastUpdBy
            ,`Category`
            ,CategoryID
            ,`Status`
            ,UnitPrice
            ,UnitOfMeasure
            ,`Fixed`
        ) SELECT
            p_Name
            ,og.RowID
            ,p_PartNo
            ,CURRENT_TIMESTAMP()
            ,p_CreatedBy
            ,p_LastUpdBy
            ,p_Category
            ,ct.RowID
            ,p_Status
            ,p_UnitPrice
            ,p_UnitOfMeasure
            ,p_IsFixed
            FROM organization og
            INNER JOIN category ct ON ct.OrganizationID=og.RowID
            WHERE og.RowID!=p_OrganizationID
            AND ct.CategoryName=p_Category
        ON
        DUPLICATE
        KEY
        UPDATE
            Name=p_Name
            ,LastUpd=CURRENT_TIMESTAMP()
            ,LastUpdBy=p_LastUpdBy
            ,`Fixed`=p_IsFixed;

    END IF;


RETURN prod_RowID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_productForOtherOrganiz
DROP FUNCTION IF EXISTS `INSUPD_productForOtherOrganiz`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_productForOtherOrganiz`(`p_SupplierID` INT, `p_Name` VARCHAR(200), `p_OrganizationID` INT, `p_Description` VARCHAR(2000), `p_PartNo` VARCHAR(200), `p_LastArrivedQty` INT, `p_CreatedBy` INT, `p_Category` VARCHAR(50), `p_AccountingAccountID` INT, `p_Catalog` VARCHAR(50), `p_Comments` VARCHAR(2000), `p_Status` VARCHAR(50), `p_UnitPrice` DECIMAL(10,2), `p_VATPercent` DECIMAL(10,2), `p_FirstBillFlag` CHAR(50), `p_SecondBillFlag` CHAR(50), `p_ThirdBillFlag` CHAR(50), `p_PDCFlag` CHAR(50), `p_MonthlyBIllFlag` CHAR(50), `p_PenaltyFlag` CHAR(50), `p_WithholdingTaxPercent` DECIMAL(10,2), `p_CostPrice` DECIMAL(10,2), `p_UnitOfMeasure` VARCHAR(50), `p_SKU` VARCHAR(50), `p_LeadTime` INT, `p_BarCode` VARCHAR(50), `p_BusinessUnitID` INT, `p_LastRcvdFromShipmentDate` DATE, `p_LastRcvdFromShipmentCount` INT, `p_TotalShipmentCount` INT, `p_BookPageNo` VARCHAR(10), `p_BrandName` VARCHAR(50), `p_LastPurchaseDate` DATE, `p_LastSoldDate` DATE, `p_LastSoldCount` INT, `p_ReOrderPoint` INT, `p_AllocateBelowSafetyFlag` CHAR(50), `p_Strength` VARCHAR(30), `p_UnitsBackordered` INT, `p_UnitsBackorderAsOf` DATETIME, `p_DateLastInventoryCount` DATETIME, `p_TaxVAT` DECIMAL(10,2), `p_WithholdingTax` DECIMAL(10,2), `p_COAId` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11) DEFAULT 0;

INSERT INTO product
(
    SupplierID
    ,Name
    ,OrganizationID
    ,Description
    ,PartNo
    ,Created
    ,LastUpd
    ,LastArrivedQty
    ,CreatedBy
    ,LastUpdBy
    ,Category
    ,CategoryID
    ,AccountingAccountID
    ,Catalog
    ,Comments
    ,Status
    ,UnitPrice
    ,VATPercent
    ,FirstBillFlag
    ,SecondBillFlag
    ,ThirdBillFlag
    ,PDCFlag
    ,MonthlyBIllFlag
    ,PenaltyFlag
    ,WithholdingTaxPercent
    ,CostPrice
    ,UnitOfMeasure
    ,SKU
    ,Image
    ,LeadTime
    ,BarCode
    ,BusinessUnitID
    ,LastRcvdFromShipmentDate
    ,LastRcvdFromShipmentCount
    ,TotalShipmentCount
    ,BookPageNo
    ,BrandName
    ,LastPurchaseDate
    ,LastSoldDate
    ,LastSoldCount
    ,ReOrderPoint
    ,AllocateBelowSafetyFlag
    ,Strength
    ,UnitsBackordered
    ,UnitsBackorderAsOf
    ,DateLastInventoryCount
    ,TaxVAT
    ,WithholdingTax
    ,COAId
) SELECT
    p_SupplierID
    ,p_Name
    ,og.RowID
    ,p_Description
    ,p_PartNo
    ,CURRENT_TIMESTAMP()
    ,CURRENT_TIMESTAMP()
    ,p_LastArrivedQty
    ,p_CreatedBy
    ,p_CreatedBy
    ,p_Category
    ,ct.RowID
    ,p_AccountingAccountID
    ,p_Catalog
    ,p_Comments
    ,p_Status
    ,p_UnitPrice
    ,p_VATPercent
    ,p_FirstBillFlag
    ,p_SecondBillFlag
    ,p_ThirdBillFlag
    ,p_PDCFlag
    ,p_MonthlyBIllFlag
    ,p_PenaltyFlag
    ,p_WithholdingTaxPercent
    ,p_CostPrice
    ,p_UnitOfMeasure
    ,p_SKU
    ,NULL
    ,p_LeadTime
    ,p_BarCode
    ,p_BusinessUnitID
    ,p_LastRcvdFromShipmentDate
    ,p_LastRcvdFromShipmentCount
    ,p_TotalShipmentCount
    ,p_BookPageNo
    ,p_BrandName
    ,p_LastPurchaseDate
    ,p_LastSoldDate
    ,p_LastSoldCount
    ,p_ReOrderPoint
    ,p_AllocateBelowSafetyFlag
    ,p_Strength
    ,p_UnitsBackordered
    ,p_UnitsBackorderAsOf
    ,p_DateLastInventoryCount
    ,p_TaxVAT
    ,p_WithholdingTax
    ,p_COAId
FROM organization og
INNER JOIN category ct ON ct.OrganizationID=og.RowID
WHERE ct.CategoryName=p_Category
AND og.RowID!=p_OrganizationID
ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP();SELECT @@Identity AS ID INTO returnvalue;



RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_scheduledloansperpayperiod
DROP FUNCTION IF EXISTS `INSUPD_scheduledloansperpayperiod`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_scheduledloansperpayperiod`(`slp_RowID` INT(11)
, `slp_OrganizID` INT(11)
, `UserRowID` INT(11)
, `slp_PayPeriodID` INT(11)
, `slp_EmployeeID` INT(11)
, `slp_EmpLoanRecID` INT(11)
, `slp_LoanPayPeriodLeft` INT(11)
, `slp_TotBalLeft` DECIMAL(20,6)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

INSERT INTO scheduledloansperpayperiod
(
    RowID
    ,CreatedBy
    ,OrganizationID
    ,PayPeriodID
    ,EmployeeID
    ,EmployeeLoanRecordID
    ,LoanPayPeriodLeft
    ,TotalBalanceLeft
) VALUES (
    slp_RowID
    ,UserRowID
    ,slp_OrganizID
    ,slp_PayPeriodID
    ,slp_EmployeeID
    ,slp_EmpLoanRecID
    ,slp_LoanPayPeriodLeft
    ,slp_TotBalLeft
) ON
DUPLICATE
KEY
UPDATE
    LastUpdBy=UserRowID;SELECT @@Identity AS ID INTO returnvalue;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_shift
DROP FUNCTION IF EXISTS `INSUPD_shift`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_shift`(`sh_RowID` INT, `sh_OrganizationID` INT, `sh_CreatedBy` INT, `sh_LastUpdBy` INT, `sh_TimeFrom` TIME, `sh_TimeTo` TIME) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE shiftRowID INT(11);



INSERT INTO shift
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,TimeFrom
    ,TimeTo
) VALUES (
    sh_RowID
    ,sh_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,sh_CreatedBy
    ,sh_TimeFrom
    ,sh_TimeTo
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=sh_LastUpdBy
    ,TimeFrom=sh_TimeFrom
    ,TimeTo=sh_TimeTo;SELECT @@Identity AS id INTO shiftRowID;

RETURN shiftRowID;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_timeentry
DROP FUNCTION IF EXISTS `INSUPD_timeentry`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INSUPD_timeentry`(`timent_RowID` INT, `timent_OrganizationID` INT, `timent_CreatedBy` INT, `timent_LastUpdBy` INT, `timent_PayPeriodID` INT, `timent_EmployeeID` INT, `timent_TotalPay` DECIMAL(10,2), `timent_TotalHoursWorked` DECIMAL(10,2), `timent_TotalVLConsumed` DECIMAL(10,2), `timent_TotalSLConsumed` DECIMAL(10,2)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE timeentryID INT(11);

INSERT INTO timeentry
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,LastUpdBy
    ,PayPeriodID
    ,EmployeeID
    ,TotalPay
    ,TotalHoursWorked
    ,TotalVLConsumed
    ,TotalSLConsumed
) VALUES (
    timent_RowID
    ,timent_OrganizationID
    ,CURRENT_TIMESTAMP()
    ,timent_CreatedBy
    ,timent_LastUpdBy
    ,timent_PayPeriodID
    ,timent_EmployeeID
    ,timent_TotalPay
    ,timent_TotalHoursWorked
    ,timent_TotalVLConsumed
    ,timent_TotalSLConsumed
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=timent_LastUpdBy
    ,PayPeriodID=timent_PayPeriodID
    ,TotalPay=timent_TotalPay
    ,TotalHoursWorked=timent_TotalHoursWorked
    ,TotalVLConsumed=timent_TotalVLConsumed
    ,TotalSLConsumed=timent_TotalSLConsumed;



SELECT @@Identity AS id INTO timeentryID;

RETURN timeentryID;



END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_timeentrylog
DROP FUNCTION IF EXISTS `INSUPD_timeentrylog`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_timeentrylog`(`OrganizID` INT, `EmployeeIdentificationKey` VARCHAR(50), `DateTimeLogStamp` VARCHAR(50), `Import_ID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN
DECLARE returnvalue INT(11) DEFAULT 0;
DECLARE custom_datetimeformat VARCHAR(50) DEFAULT '%m-%d-%Y %H:%i:%s';
INSERT INTO timeentrylog(OrganizationID,EmployeeRowID,TimeStampLog,ImportID) SELECT OrganizID,e.RowID,STR_TO_DATE(DateTimeLogStamp, @@datetime_format),Import_ID FROM employee e WHERE e.OrganizationID=OrganizID AND e.EmployeeID=EmployeeIdentificationKey AND STR_TO_DATE(DateTimeLogStamp, @@datetime_format) IS NOT NULL ON DUPLICATE KEY UPDATE LastUpd=CURRENT_TIMESTAMP();SELECT @@Identity AS ID INTO returnvalue;
RETURN returnvalue;
END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INSUPD_timeentrylogs
DROP FUNCTION IF EXISTS `INSUPD_timeentrylogs`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `INSUPD_timeentrylogs`(`OrganizID` INT, `EmployeeIdentificationKey` VARCHAR(50), `DateTimeLogStamp` VARCHAR(50), `Import_ID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN
DECLARE returnvalue INT(11) DEFAULT 0;
DECLARE custom_datetimeformat VARCHAR(50) DEFAULT '%m-%d-%Y %H:%i:%s';
INSERT INTO timeentrylogs
(
	OrganizationID
	,EmployeeRowID
	,TimeStampLog
	,ImportID
) SELECT
	OrganizID
	,e.RowID
	,STR_TO_DATE(DateTimeLogStamp, custom_datetimeformat)
	,Import_ID
FROM employee e
WHERE e.OrganizationID=OrganizID
AND e.EmployeeID=EmployeeIdentificationKey
AND STR_TO_DATE(DateTimeLogStamp, custom_datetimeformat) IS NOT NULL
ON
DUPLICATE
KEY
UPDATE
	LastUpd=CURRENT_TIMESTAMP()
	,ImportID=Import_ID;SELECT @@Identity AS ID INTO returnvalue;
	
RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.INS_audittrail_RETRowID
DROP FUNCTION IF EXISTS `INS_audittrail_RETRowID`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `INS_audittrail_RETRowID`(
	`au_CreatedBy` INT,
	`au_LastUpdBy` INT,
	`au_OrganizationID` INT,
	`au_ViewID` INT,
	`au_FieldChanged` VARCHAR(200),
	`au_ChangedRowID` VARCHAR(50),
	`au_OldValue` VARCHAR(200),
	`au_NewValue` VARCHAR(200),
	`au_ActionPerformed` VARCHAR(50)

) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11);

IF au_ActionPerformed = 'Update' THEN

    IF au_OldValue != au_NewValue THEN

        INSERT INTO audittrail
        (
            Created
            ,CreatedBy
            ,LastUpdBy
            ,OrganizationID
            ,ViewID
            ,FieldChanged
            ,ChangedRowID
            ,OldValue
            ,NewValue
            ,ActionPerformed
        ) VALUES (
            CURRENT_TIMESTAMP()
            ,au_CreatedBy
            ,au_LastUpdBy
            ,au_OrganizationID
            ,au_ViewID
            ,au_FieldChanged
            ,au_ChangedRowID
            ,IFNULL(au_OldValue,'')
            ,IFNULL(au_NewValue,'')
            ,au_ActionPerformed
        );SELECT @@Identity AS Id INTO returnvalue;

    END IF;

ELSE

    INSERT INTO audittrail
    (
        Created
        ,CreatedBy
        ,LastUpdBy
        ,OrganizationID
        ,ViewID
        ,FieldChanged
        ,ChangedRowID
        ,OldValue
        ,NewValue
        ,ActionPerformed
    ) VALUES (
        CURRENT_TIMESTAMP()
        ,au_CreatedBy
        ,au_LastUpdBy
        ,au_OrganizationID
        ,au_ViewID
        ,au_FieldChanged
        ,au_ChangedRowID
        ,IFNULL(au_OldValue,'')
        ,IFNULL(au_NewValue,'')
        ,au_ActionPerformed
    );SELECT @@Identity AS Id INTO returnvalue;

END IF;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.IsEndOfMonth_PayPeriod
DROP FUNCTION IF EXISTS `IsEndOfMonth_PayPeriod`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `IsEndOfMonth_PayPeriod`(`payperiodRowID` INT, `selectyear` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnval INT(11);

SELECT EXISTS(
                    SELECT p.RowID
                    FROM payperiod p
                    INNER JOIN (SELECT *, SUBDATE(PayToDate, INTERVAL 1 DAY) AS PayFrDate
                                    FROM payperiod
                                    WHERE 28 BETWEEN DAY(PayFromDate) AND DAY(PayToDate)
                                    AND selectyear IN (YEAR(PayFromDate),YEAR(PayToDate))
                                    AND DATEDIFF(PayToDate,PayFromDate) != 4
                                    ) p2 ON IF(DAY(p.PayFromDate) > DAY(p.PayToDate), p.PayFromDate, p.PayToDate) BETWEEN p2.PayFrDate AND p2.PayToDate
                    WHERE p.RowID=payperiodRowID
                    ) INTO returnval;


RETURN returnval;



END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.IS_TIMERANGE_REACHTOMORROW
DROP FUNCTION IF EXISTS `IS_TIMERANGE_REACHTOMORROW`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `IS_TIMERANGE_REACHTOMORROW`(`time_range_from` TIME, `time_range_to` TIME) RETURNS tinyint(1)
    DETERMINISTIC
BEGIN

DECLARE return_val BOOL DEFAULT FALSE;

IF time_range_from IS NOT NULL
	AND time_range_to IS NOT NULL THEN
	
	SET return_val = (TIME_FORMAT(time_range_from, '%p') = 'PM'
							AND TIME_FORMAT(time_range_to, '%p') = 'AM')
							
						  # OR (TIME_FORMAT(time_range_from, '%p') = 'AM' AND TIME_FORMAT(time_range_to, '%p') = 'AM'
						  OR (TIME_FORMAT(time_range_from, '%p') = TIME_FORMAT(time_range_to, '%p')
						      AND HOUR(time_range_from) > HOUR(time_range_to))
								
						  OR (TIME_FORMAT(time_range_from, '%p') = TIME_FORMAT(time_range_to, '%p')
						      AND SUBDATE(TIMESTAMP(TIME(0)), INTERVAL 1 SECOND) = SUBDATE(TIMESTAMP(MAKETIME(HOUR(time_range_from),0,0)), INTERVAL 1 SECOND)
						      AND HOUR(time_range_from) > HOUR(time_range_to));

END IF;
	
RETURN return_val;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.I_paystubadjustment
DROP FUNCTION IF EXISTS `I_paystubadjustment`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `I_paystubadjustment`(`pa_OrganizationID` INT, `pa_CurrentUser` INT, `pa_ProductID` INT, `pa_PayAmount` DECIMAL(10,2), `pa_Comment` VARCHAR(200), `pa_EmployeeID` vARCHAR(50), `pa_PayPeriodID` INT, `psa_RowID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE pa_PayStubID INT;
DECLARE returnvalue INT(11) DEFAULT 0;
SET pa_PayStubID = (SELECT FN_GetPayStubIDByEmployeeIDAndPayPeriodID(pa_EmployeeID, pa_PayPeriodID, OrganizationID) FROM payperiod WHERE RowID=pa_PayPeriodID);



INSERT INTO paystubadjustment
(
    RowID,
    OrganizationID,
    Created,
    CreatedBy,
    LastUpdBy,
    PayStubID,
    ProductID,
    PayAmount,
    `Comment`
)
VALUES
(
    psa_RowID,
    pa_OrganizationID,
    CURRENT_TIMESTAMP(),
    pa_CurrentUser,
    pa_CurrentUser,
    pa_PayStubID,
    pa_ProductID,
    pa_PayAmount,
    pa_Comment
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=pa_CurrentUser
    ,`Comment`=pa_Comment
    ,PayAmount=pa_PayAmount;SELECT @@Identity AS ID INTO returnvalue;

RETURN IFNULL(returnvalue,0);
END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.I_paystubadjustmentactual
DROP FUNCTION IF EXISTS `I_paystubadjustmentactual`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `I_paystubadjustmentactual`(`pa_OrganizationID` INT, `pa_CurrentUser` INT, `pa_ProductID` INT, `pa_PayAmount` DECIMAL(10,2), `pa_Comment` VARCHAR(200), `pa_EmployeeID` VARCHAR(50), `pa_PayPeriodID` INT, `psa_RowID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE pa_PayStubID INT;
DECLARE returnvalue INT(11) DEFAULT 0;
SET pa_PayStubID = (SELECT FN_GetPayStubIDByEmployeeIDAndPayPeriodID(pa_EmployeeID, pa_PayPeriodID, OrganizationID) FROM payperiod WHERE RowID=pa_PayPeriodID);

INSERT INTO paystubadjustmentactual
(
    RowID,
    OrganizationID,
    Created,
    CreatedBy,
    LastUpdBy,
    PayStubID,
    ProductID,
    PayAmount,
    `Comment`
)
VALUES
(
    psa_RowID,
    pa_OrganizationID,
    CURRENT_TIMESTAMP(),
    pa_CurrentUser,
    pa_CurrentUser,
    pa_PayStubID,
    pa_ProductID,
    pa_PayAmount,
    pa_Comment
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=pa_CurrentUser
    ,`Comment`=pa_Comment
    ,PayAmount=pa_PayAmount;SELECT @@Identity AS ID INTO returnvalue;

RETURN IFNULL(returnvalue,0);
END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.LeaveTransactionRowIdsWithinCutOff
DROP FUNCTION IF EXISTS `LeaveTransactionRowIdsWithinCutOff`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `LeaveTransactionRowIdsWithinCutOff`(`organiz_rowid` INT, `payperiod_rowid` INT) RETURNS tinytext CHARSET latin1
    DETERMINISTIC
BEGIN

DECLARE return_value TINYTEXT;

DECLARE ppYear, ppMonth INT(11);

DECLARE isFirstHalf TINYINT(1) DEFAULT 0;

SET SESSION group_concat_max_len = 102400;

SELECT pp.`Year`
, pp.`Month`
, (pp.Half = 1) `isFirstHalf`
FROM payperiod pp
WHERE pp.RowID=payperiod_rowid
INTO ppYear, ppMonth, isFirstHalf
;

SELECT
GROUP_CONCAT(lt.RowID)
FROM (SELECT
		lt.EmployeeID
		, lt.LeaveLedgerID
		, MAX(ppd.OrdinalValue) `MaxOrdinalValue`
		FROM payperiod pp
		INNER JOIN leavetransaction lt ON lt.OrganizationID=organiz_rowid AND lt.LeaveLedgerID IS NOT NULL
		INNER JOIN payperiod ppd ON ppd.RowID=lt.PayPeriodID AND ppd.OrdinalValue <= pp.OrdinalValue
		WHERE pp.`Year`=ppYear
		AND pp.`Month`=ppMonth
		AND pp.Half=isFirstHalf
		AND pp.TotalGrossSalary=1
		AND pp.OrganizationID=lt.OrganizationID
		GROUP BY lt.EmployeeID, lt.LeaveLedgerID) i
INNER JOIN payperiod pp ON pp.`Year`=ppYear AND pp.OrdinalValue=i.MaxOrdinalValue
INNER JOIN leavetransaction lt ON lt.LeaveLedgerID=i.LeaveLedgerID AND lt.PayPeriodID=pp.RowID
INNER JOIN leaveledger ll ON ll.LastTransactionID=lt.RowID AND ll.RowID=i.LeaveLedgerID
INNER JOIN employee e ON e.RowID=ll.EmployeeID
INNER JOIN product p ON p.RowID=ll.ProductID AND p.PartNo IN ('Sick leave', 'Vacation leave')
INTO return_value
;

SET return_value = IFNULL(return_value, '');

RETURN return_value;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.PAYFREQUENCY_DIVISOR
DROP FUNCTION IF EXISTS `PAYFREQUENCY_DIVISOR`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `PAYFREQUENCY_DIVISOR`(`PayFrequencyName` VARCHAR(50)) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvalue INT(11) DEFAULT NULL;

IF PayFrequencyName = 'MONTHLY' THEN
    SET returnvalue = 1;

ELSEIF PayFrequencyName = 'SEMI-MONTHLY' THEN
    SET returnvalue = 2;

ELSEIF PayFrequencyName = 'WEEKLY' THEN
    SET returnvalue = 4;

ELSEIF PayFrequencyName = 'DAILY' THEN
    SET returnvalue = 1;

END IF;

RETURN IFNULL(returnvalue,1);

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.PAYMENT_SCHED_TO_CHAR
DROP FUNCTION IF EXISTS `PAYMENT_SCHED_TO_CHAR`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `PAYMENT_SCHED_TO_CHAR`(`StringSchedule` VARCHAR(50)) RETURNS char(1) CHARSET utf8
    DETERMINISTIC
BEGIN

DECLARE returnvalue CHAR(1);

IF StringSchedule = 'End of the month' THEN
    SET returnvalue = '0';
ELSEIF StringSchedule = 'First half' THEN
    SET returnvalue = '1';
ELSEIF StringSchedule = 'Per pay period' THEN
    SET returnvalue = '2';
END IF;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.PAYTODATE_OF_NoOfPayPeriod
DROP FUNCTION IF EXISTS `PAYTODATE_OF_NoOfPayPeriod`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `PAYTODATE_OF_NoOfPayPeriod`(`EmpLoanEffectiveDateFrom` DATE, `EmpLoanNoOfPayPeriod` INT, `Employee_RowID` INT, `LoanDeductSched` VARCHAR(100)) RETURNS date
    DETERMINISTIC
BEGIN

DECLARE payp_RowID INT(11);

DECLARE ReturnDate DATE;

DECLARE paypFrom_RowID
        , payfreq_rowid INT(11);

DECLARE startdate_month CHAR(2);

DECLARE startdate_year CHAR(4);

DECLARE OrganizID INT(11);

SELECT OrganizationID, PayFrequencyID FROM employee WHERE RowID=Employee_RowID INTO OrganizID, payfreq_rowid;


SET @i=0;

SELECT RowID,`Month`,`Year` FROM payperiod WHERE EmpLoanEffectiveDateFrom BETWEEN PayFromDate AND PayToDate AND OrganizationID=OrganizID AND TotalGrossSalary = payfreq_rowid INTO paypFrom_RowID,startdate_month,startdate_year;

IF LoanDeductSched = 'Per pay period' THEN
    SET LoanDeductSched = 'Per pay period';

    SELECT PayToDate FROM (SELECT RowID,PayToDate,(SELECT @i := @i + 1) `Rank` FROM payperiod WHERE RowID >= paypFrom_RowID AND TotalGrossSalary = payfreq_rowid AND OrganizationID = OrganizID LIMIT EmpLoanNoOfPayPeriod) AS `DateRank` WHERE IF(EmpLoanNoOfPayPeriod > `DateRank`.`Rank`, `DateRank`.`Rank`=@i, `DateRank`.`Rank`=EmpLoanNoOfPayPeriod) INTO ReturnDate;

ELSEIF LoanDeductSched = 'End of the month' THEN
    SET LoanDeductSched = 'End of the month';

    SELECT PayToDate FROM (SELECT RowID,PayToDate,(SELECT @i := @i + 1) `Rank` FROM payperiod WHERE RowID >= paypFrom_RowID AND `Half`='0' AND TotalGrossSalary = payfreq_rowid AND OrganizationID = OrganizID LIMIT EmpLoanNoOfPayPeriod) AS `DateRank` WHERE IF(EmpLoanNoOfPayPeriod > `DateRank`.`Rank`, `DateRank`.`Rank`=@i, `DateRank`.`Rank`=EmpLoanNoOfPayPeriod) INTO ReturnDate;

ELSEIF LoanDeductSched = 'First half' THEN
    SET LoanDeductSched = 'First half';

    SELECT PayToDate FROM (SELECT RowID,PayToDate,(SELECT @i := @i + 1) `Rank` FROM payperiod WHERE RowID >= paypFrom_RowID AND `Half`='1' AND TotalGrossSalary = payfreq_rowid AND OrganizationID = OrganizID LIMIT EmpLoanNoOfPayPeriod) AS `DateRank` WHERE IF(EmpLoanNoOfPayPeriod > `DateRank`.`Rank`, `DateRank`.`Rank`=@i, `DateRank`.`Rank`=EmpLoanNoOfPayPeriod) INTO ReturnDate;

END IF;

IF ReturnDate IS NULL THEN

    SELECT RowID FROM payperiod WHERE ADDDATE(EmpLoanEffectiveDateFrom, INTERVAL 1 YEAR) BETWEEN PayFromDate AND PayToDate AND OrganizationID=OrganizID AND TotalGrossSalary = payfreq_rowid INTO paypFrom_RowID;

    SELECT PayToDate FROM (SELECT RowID,PayToDate,(SELECT @i := @i + 1) `Rank` FROM payperiod WHERE RowID >= paypFrom_RowID AND TotalGrossSalary = payfreq_rowid AND OrganizationID = OrganizID LIMIT EmpLoanNoOfPayPeriod) AS `DateRank` WHERE IF(EmpLoanNoOfPayPeriod > `DateRank`.`Rank`, `DateRank`.`Rank`=@i, `DateRank`.`Rank`=EmpLoanNoOfPayPeriod) INTO ReturnDate;

    SET ReturnDate = SUBDATE(ReturnDate, INTERVAL 1 YEAR);

END IF;

RETURN ReturnDate;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.PROPERCASE
DROP FUNCTION IF EXISTS `PROPERCASE`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `PROPERCASE`(`str` VARCHAR(128) ) RETURNS varchar(128) CHARSET latin1
    DETERMINISTIC
BEGIN
  DECLARE c CHAR(1);
  DECLARE s VARCHAR(128);
  DECLARE i INT DEFAULT 1;
  DECLARE bool INT DEFAULT 1;
  DECLARE punct CHAR(18) DEFAULT ' ()[]{},.-_\'!@;:?/';
  SET s = LCASE( str );
  WHILE i <= LENGTH( str ) DO
    BEGIN
      SET c = SUBSTRING( s, i, 1 );
      IF LOCATE( c, punct ) > 0 THEN
        SET bool = 1;
      ELSEIF bool=1 THEN
        BEGIN
          IF c >= 'a' AND c <= 'z' THEN
            BEGIN
              SET s = CONCAT(LEFT(s,i-1),UCASE(c),SUBSTRING(s,i+1));
              SET bool = 0;
            END;
          ELSEIF c >= '0' AND c <= '9' THEN
            SET bool = 0;
          END IF;
        END;
      END IF;
      SET i = i+1;
    END;
  END WHILE;
  RETURN s;
END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.PROPER_24HOUR
DROP FUNCTION IF EXISTS `PROPER_24HOUR`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `PROPER_24HOUR`(`param_time` TIME) RETURNS time
    DETERMINISTIC
BEGIN

DECLARE hour24 INT(11) DEFAULT 24;

DECLARE oclock12am VARCHAR(50) DEFAULT '00:%i:%s';

DECLARE return_value TIME;

IF HOUR(param_time) = hour24 THEN

	SET return_value = TIME_FORMAT(param_time, oclock12am);
ELSE
	
	SET return_value = param_time;
END IF;

RETURN return_value;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.REPLACER
DROP FUNCTION IF EXISTS `REPLACER`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `REPLACER`(
	`paramString` VARCHAR(255)
) RETURNS varchar(255) CHARSET latin1
    DETERMINISTIC
BEGIN

RETURN REPLACE(REPLACE(paramString, '.', ''), ' Jr', '');

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.RESET_LEAVECREDIT
DROP FUNCTION IF EXISTS `RESET_LEAVECREDIT`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `RESET_LEAVECREDIT`(
	`employeeRowId` INT,
	`orgId` INT,
	`userId` INT,
	`forYear` INT,
	`vacationLeaveAllowance` DECIMAL(10,4),
	`vacationLeaveBalance` DECIMAL(10,4),
	`sickLeaveAllowance` DECIMAL(10,4),
	`sickLeaveBalance` DECIMAL(10,4),
	`OLDvacationLeaveAllowance` DECIMAL(10,4),
	`OLDvacationLeaveBalance` DECIMAL(10,4),
	`OLDsickLeaveAllowance` DECIMAL(10,4),
	`OLDsickLeaveBalance` DECIMAL(10,4)






) RETURNS tinyint(1)
    COMMENT 'for Cinema 2000'
BEGIN

DECLARE itemName VARCHAR(50);

DECLARE leaveLedgerId
        ,leaveTransId
		  ,privilegeViewID INT(11);

SELECT v.RowID FROM `view` v WHERE v.OrganizationID=orgId AND v.ViewName='Employee Personal Profile' INTO privilegeViewID;

INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),userId,userId,orgId,privilegeViewID,'LeaveAllowance',employeeRowId,OLDvacationLeaveAllowance,vacationLeaveAllowance,'Update');

INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),userId,userId,orgId,privilegeViewID,'LeaveBalance',employeeRowId,OLDvacationLeaveBalance,vacationLeaveBalance,'Update');


INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),userId,userId,orgId,privilegeViewID,'SickLeaveAllowance',employeeRowId,OLDsickLeaveAllowance,sickLeaveAllowance,'Update');

INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),userId,userId,orgId,privilegeViewID,'SickLeaveBalance',employeeRowId,OLDsickLeaveBalance,sickLeaveBalance,'Update');


# VACATION LEAVE
SET itemName = 'Vacation leave';
SET leaveLedgerId = NULL;
INSERT INTO `leaveledger` (`OrganizationID`, `Created`, `CreatedBy`, `LastUpd`, `LastUpdBy`, `EmployeeID`, `ProductID`, `LastTransactionID`) SELECT p.OrganizationID, CURRENT_TIMESTAMP(), 0, CURRENT_TIMESTAMP(), NULL, employeeRowId, p.RowID, NULL FROM (SELECT RowID, OrganizationID, PartNo, `Category`, CategoryID FROM product WHERE OrganizationID=orgId AND PartNo=itemName) p INNER JOIN (SELECT RowID, OrganizationID, CategoryName FROM category WHERE OrganizationID=orgId AND CategoryName='Leave Type') c ON c.RowID=p.CategoryID AND c.OrganizationID=p.OrganizationID ON DUPLICATE KEY UPDATE LastUpd=CURRENT_TIMESTAMP();

SELECT ll.RowID FROM leaveledger ll INNER JOIN (SELECT RowID, OrganizationID, PartNo, `Category`, CategoryID FROM product) p ON p.OrganizationID=ll.OrganizationID AND p.PartNo=itemName INNER JOIN (SELECT RowID, CategoryName FROM `category`) c ON c.RowID=p.CategoryID AND c.CategoryName='Leave Type' WHERE ll.EmployeeID=employeeRowId AND ll.OrganizationID=orgId AND ll.ProductID=p.RowID INTO leaveLedgerId;

SET leaveTransId = NULL;
INSERT INTO `leavetransaction` (`OrganizationID`, `Created`, `CreatedBy`, `LastUpd`, `LastUpdBy`, `EmployeeID`, `ReferenceID`, `LeaveLedgerID`, `PayPeriodID`, `TransactionDate`, `Type`, `Balance`, `Amount`, `Comments`) SELECT pp.OrganizationID, CURRENT_TIMESTAMP(), 0, CURRENT_TIMESTAMP(), NULL, employeeRowId, NULL, leaveLedgerId, pp.RowID, pp.PayFromDate, 'Credit', vacationLeaveBalance, vacationLeaveBalance, '' FROM payperiod pp WHERE pp.OrganizationID=orgId AND pp.`Month`=12 AND pp.`Half`=0 AND pp.`Year`=2018; SELECT @@identity INTO leaveTransId;

UPDATE leaveledger SET LastTransactionID=leaveTransId, LastUpd=CURRENT_TIMESTAMP(), LastUpdBy=IFNULL(LastUpdBy, CreatedBy) WHERE RowID=leaveLedgerId;


# SICK LEAVE
SET itemName = 'Sick leave';
SET leaveLedgerId = NULL;
INSERT INTO `leaveledger` (`OrganizationID`, `Created`, `CreatedBy`, `LastUpd`, `LastUpdBy`, `EmployeeID`, `ProductID`, `LastTransactionID`) SELECT p.OrganizationID, CURRENT_TIMESTAMP(), 0, CURRENT_TIMESTAMP(), NULL, employeeRowId, p.RowID, NULL FROM (SELECT RowID, OrganizationID, PartNo, `Category`, CategoryID FROM product WHERE OrganizationID=orgId AND PartNo=itemName) p INNER JOIN (SELECT RowID, OrganizationID, CategoryName FROM category WHERE OrganizationID=orgId AND CategoryName='Leave Type') c ON c.RowID=p.CategoryID AND c.OrganizationID=p.OrganizationID ON DUPLICATE KEY UPDATE LastUpd=CURRENT_TIMESTAMP();

SELECT ll.RowID FROM leaveledger ll INNER JOIN (SELECT RowID, OrganizationID, PartNo, `Category`, CategoryID FROM product) p ON p.OrganizationID=ll.OrganizationID AND p.PartNo=itemName INNER JOIN (SELECT RowID, CategoryName FROM `category`) c ON c.RowID=p.CategoryID AND c.CategoryName='Leave Type' WHERE ll.EmployeeID=employeeRowId AND ll.OrganizationID=orgId AND ll.ProductID=p.RowID INTO leaveLedgerId;

SET leaveTransId = NULL;
INSERT INTO `leavetransaction` (`OrganizationID`, `Created`, `CreatedBy`, `LastUpd`, `LastUpdBy`, `EmployeeID`, `ReferenceID`, `LeaveLedgerID`, `PayPeriodID`, `TransactionDate`, `Type`, `Balance`, `Amount`, `Comments`) SELECT pp.OrganizationID, CURRENT_TIMESTAMP(), 0, CURRENT_TIMESTAMP(), NULL, employeeRowId, NULL, leaveLedgerId, pp.RowID, pp.PayFromDate, 'Credit', sickLeaveBalance, sickLeaveBalance, '' FROM payperiod pp WHERE pp.OrganizationID=orgId AND pp.`Month`=12 AND pp.`Half`=0 AND pp.`Year`=2018; SELECT @@identity INTO leaveTransId;

UPDATE leaveledger SET LastTransactionID=leaveTransId, LastUpd=CURRENT_TIMESTAMP(), LastUpdBy=IFNULL(LastUpdBy, CreatedBy) WHERE RowID=leaveLedgerId;


RETURN TRUE;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.RPT_LastDateOfFinancialYear
DROP FUNCTION IF EXISTS `RPT_LastDateOfFinancialYear`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `RPT_LastDateOfFinancialYear`() RETURNS text CHARSET latin1
    DETERMINISTIC
BEGIN

DECLARE returnvalue TEXT;

SET returnvalue = MAKEDATE(YEAR(CURDATE()), DAYOFYEAR(LAST_DAY(CONCAT(YEAR(CURDATE()),'-12-01'))));

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.SavePayStub
DROP FUNCTION IF EXISTS `SavePayStub`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `SavePayStub`(
    `pstub_RowID` INT,
    `pstub_OrganizationID` INT,
    `pstub_CreatedBy` INT,
    `pstub_LastUpdBy` INT,
    `pstub_PayPeriodID` INT,
    `pstub_EmployeeID` INT,
    `pstub_TimeEntryID` INT,
    `pstub_PayFromDate` DATE,
    `pstub_PayToDate` DATE,
    `$RegularHours` DECIMAL(15, 4),
    `$RegularPay` DECIMAL(15, 4),
    `$OvertimeHours` DECIMAL(15, 4),
    `$OvertimePay` DECIMAL(15, 4),
    `$NightDiffHours` DECIMAL(15, 4),
    `$NightDiffPay` DECIMAL(15, 4),
    `$NightDiffOvertimeHours` DECIMAL(15, 4),
    `$NightDiffOvertimePay` DECIMAL(15, 4),
    `$LateHours` DECIMAL(15, 4),
    `$LateDeduction` DECIMAL(15, 4),
    `$UndertimeHours` DECIMAL(15, 4),
    `$UndertimeDeduction` DECIMAL(15, 4),
    `$AbsentHours` DECIMAL(15, 4),
    `$AbsenceDeduction` DECIMAL(15, 4),
    `$RestDayHours` DECIMAL(15, 4),
    `$RestDayPay` DECIMAL(15, 4),
    `$RestDayOTHours` DECIMAL(15, 4),
    `$RestDayOTPay` DECIMAL(15, 4),
    `$LeaveHours` DECIMAL(15, 4),
    `$LeavePay` DECIMAL(15, 4),
    `$SpecialHolidayHours` DECIMAL(15, 4),
    `$SpecialHolidayPay` DECIMAL(15, 4),
    `$RegularHolidayHours` DECIMAL(15, 4),
    `$RegularHolidayPay` DECIMAL(15, 4),
    `$HolidayPay` DECIMAL(15, 4),
    `$WorkPay` DECIMAL(15, 4),
    `pstub_TotalGrossSalary` DECIMAL(15, 4),
    `pstub_TotalNetSalary` DECIMAL(15, 4),
    `pstub_TotalTaxableSalary` DECIMAL(15, 4),
    `pstub_TotalEmpSSS` DECIMAL(15, 4),
    `pstub_TotalCompSSS` DECIMAL(15, 4),
    `pstub_TotalEmpPhilHealth` DECIMAL(15, 4),
    `pstub_TotalCompPhilHealth` DECIMAL(15, 4),
    `pstub_TotalEmpHDMF` DECIMAL(15, 4),
    `pstub_TotalCompHDMF` DECIMAL(15, 4),
    `pstub_TotalEmpWithholdingTax` DECIMAL(15, 4),
    `pstub_TotalVacationDaysLeft` DECIMAL(15, 4),
    `pstub_TotalLoans` DECIMAL(15, 4),
    `pstub_TotalBonus` DECIMAL(15, 4),
    `pstub_TotalAllowance` DECIMAL(15, 4)
) RETURNS int(11)
BEGIN

DECLARE payStubID INT(11);
DECLARE payStubIDs VARCHAR(2000);

DECLARE totalAdjustments DECIMAL(15, 4);

DECLARE undeclaredSalaryRatio DECIMAL(15, 6);
DECLARE totalUndeclaredSalary DECIMAL(15, 4);

SELECT paystub.RowID
FROM paystub
WHERE paystub.EmployeeID = pstub_EmployeeID AND
    paystub.OrganizationID = pstub_OrganizationID AND
    paystub.PayFromDate = pstub_PayFromDate AND
    paystub.PayToDate = pstub_PayToDate
INTO payStubIDs;

DELETE FROM paystubactual
WHERE paystubactual.RowID != payStubIDs AND
    paystubactual.EmployeeID = pstub_EmployeeID AND
    paystubactual.OrganizationID = pstub_OrganizationID AND
    paystubactual.PayFromDate = pstub_PayFromDate AND
    paystubactual.PayToDate = pstub_PayToDate;

SELECT paystub.RowID
FROM paystub
WHERE paystub.PayPeriodID = pstub_PayPeriodID AND
    paystub.EmployeeID = pstub_EmployeeID AND
    paystub.OrganizationID = pstub_OrganizationID/*AND
    paystub.PayFromDate = pstub_PayFromDate AND
    paystub.PayToDate = pstub_PayToDate*/
LIMIT 1
INTO payStubID;

SET totalAdjustments = IFNULL(
    GET_SumPayStubAdjustments(
        IF(
            pstub_RowID IS NULL,
            payStubID,
            pstub_RowID
        )
    ),
    0
);

SELECT GET_employeeundeclaredsalarypercent(
    pstub_EmployeeID,
    pstub_OrganizationID,
    pstub_PayFromDate,
    pstub_PayToDate
)
INTO undeclaredSalaryRatio;

IF undeclaredSalaryRatio < 1.0 THEN
    SET undeclaredSalaryRatio = undeclaredSalaryRatio + 1.0;
ELSEIF undeclaredSalaryRatio > 1.0 THEN
    SET undeclaredSalaryRatio = undeclaredSalaryRatio - 1.0;
END IF;

SET totalUndeclaredSalary = (pstub_TotalNetSalary + totalAdjustments) * undeclaredSalaryRatio;


INSERT INTO paystub
(
    paystub.RowID,
    paystub.OrganizationID,
    paystub.CreatedBy,
    paystub.PayPeriodID,
    paystub.EmployeeID,
    paystub.TimeEntryID,
    paystub.PayFromDate,
    paystub.PayToDate,
    paystub.RegularHours,
    paystub.RegularPay,
    paystub.OvertimeHours,
    paystub.OvertimePay,
    paystub.NightDiffHours,
    paystub.NightDiffPay,
    paystub.NightDiffOvertimeHours,
    paystub.NightDiffOvertimePay,
    paystub.RestDayHours,
    paystub.RestDayPay,
    paystub.RestDayOTHours,
    paystub.RestDayOTPay,
    paystub.LeaveHours,
    paystub.LeavePay,
    paystub.SpecialHolidayHours,
    paystub.SpecialHolidayPay,
    paystub.RegularHolidayHours,
    paystub.RegularHolidayPay,
    paystub.HolidayPay,
    paystub.LateHours,
    paystub.LateDeduction,
    paystub.UndertimeHours,
    paystub.UndertimeDeduction,
    paystub.AbsentHours,
    paystub.AbsenceDeduction,
    paystub.WorkPay,
    paystub.TotalGrossSalary,
    paystub.TotalNetSalary,
    paystub.TotalTaxableSalary,
    paystub.TotalEmpSSS,
    paystub.TotalCompSSS,
    paystub.TotalEmpPhilhealth,
    paystub.TotalCompPhilhealth,
    paystub.TotalEmpHDMF,
    paystub.TotalCompHDMF,
    paystub.TotalEmpWithholdingTax,
    paystub.TotalVacationDaysLeft,
    paystub.TotalLoans,
    paystub.TotalBonus,
    paystub.TotalAllowance,
    paystub.TotalAdjustments,
    paystub.TotalUndeclaredSalary
)
VALUES
(
    pstub_RowID,
    pstub_OrganizationID,
    pstub_CreatedBy,
    pstub_PayPeriodID,
    pstub_EmployeeID,
    pstub_TimeEntryID,
    pstub_PayFromDate,
    pstub_PayToDate,
    $RegularHours,
    $RegularPay,
    $OvertimeHours,
    $OvertimePay,
    $NightDiffHours,
    $NightDiffPay,
    $NightDiffOvertimeHours,
    $NightDiffOvertimePay,
    $RestDayHours,
    $RestDayPay,
    $RestDayOTHours,
    $RestDayOTPay,
    $LeaveHours,
    $LeavePay,
    $SpecialHolidayHours,
    $SpecialHolidayPay,
    $RegularHolidayHours,
    $RegularHolidayPay,
    $HolidayPay,
    $LateHours,
    $LateDeduction,
    $UndertimeHours,
    $UndertimeDeduction,
    $AbsentHours,
    $AbsenceDeduction,
    $WorkPay,
    pstub_TotalGrossSalary,
    (pstub_TotalNetSalary + (totalAdjustments)),
    pstub_TotalTaxableSalary,
    pstub_TotalEmpSSS,
    pstub_TotalCompSSS,
    pstub_TotalEmpPhilHealth,
    pstub_TotalCompPhilHealth,
    pstub_TotalEmpHDMF,
    pstub_TotalCompHDMF,
    pstub_TotalEmpWithholdingTax,
    pstub_TotalVacationDaysLeft,
    pstub_TotalLoans,
    pstub_TotalBonus,
    pstub_TotalAllowance,
    totalAdjustments,
    totalUndeclaredSalary
)
ON DUPLICATE KEY
UPDATE
    paystub.LastUpd = CURRENT_TIMESTAMP(),
    paystub.LastUpdBy = pstub_LastUpdBy,
    paystub.PayPeriodID = pstub_PayPeriodID,
    paystub.EmployeeID = pstub_EmployeeID,
    paystub.TimeEntryID = pstub_TimeEntryID,
    paystub.PayFromDate = pstub_PayFromDate,
    paystub.PayToDate = pstub_PayToDate,
    paystub.RegularHours = $RegularHours,
    paystub.RegularPay = $RegularPay,
    paystub.OvertimeHours = $OvertimeHours,
    paystub.OvertimePay = $OvertimePay,
    paystub.NightDiffHours = $NightDiffHours,
    paystub.NightDiffPay = $NightDiffPay,
    paystub.NightDiffOvertimeHours = $NightDiffOvertimeHours,
    paystub.NightDiffOvertimePay = $NightDiffOvertimePay,
    paystub.RestDayHours = $RestDayHours,
    paystub.RestDayPay = $RestDayPay,
    paystub.RestDayOTHours = $RestDayOTHours,
    paystub.RestDayOTPay = $RestDayOTPay,
    paystub.LeaveHours = $LeaveHours,
    paystub.LeavePay = $LeavePay,
    paystub.SpecialHolidayHours = $SpecialHolidayHours,
    paystub.SpecialHolidayPay = $SpecialHolidayPay,
    paystub.RegularHolidayHours = $RegularHolidayHours,
    paystub.RegularHolidayPay = $RegularHolidayPay,
    paystub.HolidayPay = $HolidayPay,
    paystub.LateHours = $LateHours,
    paystub.LateDeduction = $LateDeduction,
    paystub.UndertimeHours = $UndertimeHours,
    paystub.UndertimeDeduction = $UndertimeDeduction,
    paystub.AbsentHours = $AbsentHours,
    paystub.AbsenceDeduction = $AbsenceDeduction,
    paystub.WorkPay = $WorkPay,
    paystub.TotalGrossSalary = pstub_TotalGrossSalary,
    paystub.TotalNetSalary = (pstub_TotalNetSalary + (totalAdjustments)),
    paystub.TotalTaxableSalary = pstub_TotalTaxableSalary,
    paystub.TotalEmpSSS = pstub_TotalEmpSSS,
    paystub.TotalCompSSS = pstub_TotalCompSSS,
    paystub.TotalEmpPhilhealth = pstub_TotalEmpPhilHealth,
    paystub.TotalCompPhilhealth = pstub_TotalCompPhilHealth,
    paystub.TotalEmpHDMF = pstub_TotalEmpHDMF,
    paystub.TotalCompHDMF = pstub_TotalCompHDMF,
    paystub.TotalEmpWithholdingTax = pstub_TotalEmpWithholdingTax,
    paystub.TotalVacationDaysLeft = pstub_TotalVacationDaysLeft,
    paystub.TotalLoans = pstub_TotalLoans,
    paystub.TotalBonus = pstub_TotalBonus,
    paystub.TotalAllowance = pstub_TotalAllowance,
    paystub.TotalAdjustments = totalAdjustments,
    paystub.TotalUndeclaredSalary = totalUndeclaredSalary;

IF payStubID IS NULL THEN
    RETURN LAST_INSERT_ID();
ELSE
    RETURN payStubID;
END IF;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.SETGET_thirteenthmonthpay
DROP FUNCTION IF EXISTS `SETGET_thirteenthmonthpay`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `SETGET_thirteenthmonthpay`(`PayStubRowID` INT) RETURNS decimal(11,2)
    DETERMINISTIC
BEGIN

DECLARE returnvalue DECIMAL(11,2) DEFAULT 0;

    SELECT
    SUM(tpay.Amount)
    FROM thirteenthmonthpay tpay
    LEFT JOIN paystub pys ON pys.RowID=PayStubRowID
    LEFT JOIN paystub ps ON YEAR(ps.PayFromDate)=YEAR(pys.PayFromDate) AND YEAR(ps.PayToDate)=YEAR(pys.PayToDate) AND ps.OrganizationID=pys.OrganizationID AND ps.EmployeeID=pys.EmployeeID
    WHERE tpay.PaystubID IN (ps.RowID)
    INTO returnvalue;

UPDATE paystub
SET TotalNetSalary=TotalNetSalary + returnvalue
,TotalGrossSalary = TotalGrossSalary + returnvalue
WHERE RowID=PayStubRowID;

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.string_chopchop
DROP FUNCTION IF EXISTS `string_chopchop`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `string_chopchop`(`EmpPrimKey` INT(11), `_str` VARCHAR(50)) RETURNS char(1) CHARSET latin1
    DETERMINISTIC
BEGIN

DECLARE i INT(11) DEFAULT 0;

DECLARE indx INT(11) DEFAULT 1;

SET i = @@ft_min_word_len;

WHILE indx <= (@@ft_min_word_len) DO

    SET @curr_str = SUBSTRING(_str,indx,i);

    IF LENGTH(@curr_str) > 0 AND IFNULL(EmpPrimKey,0) > 0 THEN
        INSERT INTO employeesearchstring (EmpPrimaKey,searchstring) VALUES (EmpPrimKey,@curr_str) ON DUPLICATE KEY UPDATE searchstring=@curr_str;

        SET indx = indx + 1;

    ELSE

        SET indx = @@ft_min_word_len + 1;

    END IF;

END WHILE;

RETURN '0';

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.TRIGG_UPD_employeeallowance
DROP FUNCTION IF EXISTS `TRIGG_UPD_employeeallowance`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `TRIGG_UPD_employeeallowance`(`OrganizID` INT, `UserRowID` INT, `EmpRowID` INT, `es_datefrom` DATE, `es_dateto` DATE) RETURNS char(1) CHARSET utf8
    DETERMINISTIC
BEGIN

DECLARE returnvalue CHAR(1) DEFAULT '0';

UPDATE employeeallowance ea
SET ea.LastUpd = CURRENT_TIMESTAMP()
,ea.LastUpdBy=UserRowID
WHERE ea.TaxableFlag='1'
AND ea.OrganizationID=OrganizID
AND ea.EmployeeID=EmpRowID
AND (ea.EffectiveStartDate >= es_datefrom OR ea.EffectiveEndDate >= es_datefrom)
AND (ea.EffectiveStartDate <= IFNULL(es_dateto,ea.EffectiveEndDate) OR ea.EffectiveEndDate <= IFNULL(es_dateto,ea.EffectiveEndDate));

RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.UNEMPLOYEMENT_STATUSES
DROP FUNCTION IF EXISTS `UNEMPLOYEMENT_STATUSES`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `UNEMPLOYEMENT_STATUSES`() RETURNS text CHARSET latin1
    DETERMINISTIC
BEGIN

DECLARE statuses TEXT DEFAULT 'Resigned,Terminated,Retired';

RETURN statuses;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.UserAuthentication
DROP FUNCTION IF EXISTS `UserAuthentication`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `UserAuthentication`(`user_name` VARCHAR(90), `pass_word` VARCHAR(90), `organizid` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE returnvaue INT(11) DEFAULT 0;

SELECT u.RowID, pv.AllowedToAccess
FROM `user` u
INNER JOIN `position` po
ON po.RowID = u.PositionID
INNER JOIN `position` p
ON p.PositionName = po.PositionName AND
    p.OrganizationID = organizid
INNER JOIN position_view pv
ON pv.PositionID = p.RowID AND
    pv.OrganizationID = p.OrganizationID
WHERE u.UserID = user_name AND
    u.`Password` = pass_word AND
    u.`Status` = 'Active' AND
    u.RowID != 0
GROUP BY u.RowID, pv.AllowedToAccess
HAVING pv.AllowedToAccess = 'Y'
ORDER BY FIELD(pv.AllowedToAccess, 'Y', 'N')
LIMIT 1
INTO returnvaue, @Pv;

IF returnvaue IS NULL THEN
    SET returnvaue = 0;
END IF;

UPDATE `user`
SET InSession = 1,
    LastUpd = CURRENT_TIMESTAMP(),
    LastUpdBy = returnvaue
WHERE RowID = returnvaue;

RETURN returnvaue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.USER_HAS_PRIVILEGE
DROP FUNCTION IF EXISTS `USER_HAS_PRIVILEGE`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `USER_HAS_PRIVILEGE`(`UserRowID` INT, `AccessingOrganizID` INT, `ViewRowID` INT) RETURNS char(1) CHARSET latin1
    DETERMINISTIC
BEGIN

DECLARE returnvalue CHAR(1);


DECLARE canCreate CHAR(1);

DECLARE canRead CHAR(1);

DECLARE canUpd CHAR(1);

DECLARE canDel CHAR(1);


SELECT pv.`Creates`
,pv.`ReadOnly`
,pv.`Updates`
,pv.`Deleting`
FROM position_view pv
INNER JOIN user u ON u.RowID=UserRowID
INNER JOIN position po ON po.RowID=u.PositionID
WHERE pv.PositionID=po.RowID
AND pv.ViewID=ViewRowID
INTO canCreate
      ,canRead
      ,canUpd
      ,canDel;

IF canCreate IS NULL
    AND canRead IS NULL
    AND canUpd IS NULL
    AND canDel IS NULL THEN

    SET returnvalue = '0';

ELSE

    IF canRead = 'Y' THEN

        SET returnvalue = '1';

    ELSE

        IF canCreate = 'Y'
            OR canUpd = 'Y' THEN

            SET returnvalue = '1';

        ELSE

            IF canDel = 'Y' THEN

                SET returnvalue = '1';

            ELSE

                SET returnvalue = '0';

            END IF;

        END IF;

    END IF;

END IF;




RETURN returnvalue;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.user_improper_out
DROP FUNCTION IF EXISTS `user_improper_out`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` FUNCTION `user_improper_out`(`organizid` INT, `user_name` VARCHAR(50), `pass_word` VARCHAR(50)) RETURNS tinyint(4)
    DETERMINISTIC
BEGIN

DECLARE return_val TINYINT;

SELECT EXISTS(SELECT RowID FROM `user` WHERE UserID=user_name AND `Password`=pass_word AND InSession=1) INTO return_val;

RETURN return_val;

END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.VIEW_employeemedrecordID
DROP FUNCTION IF EXISTS `VIEW_employeemedrecordID`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `VIEW_employeemedrecordID`(`emedrecord_EmployeeID` INT, `emedrecord_DateFrom` DATE, `emedrecord_DateTo` DATE, `emedrecord_ProductID` INT, `emedrecord_OrganizationID` INT) RETURNS int(11)
    DETERMINISTIC
    COMMENT 'return the RowID from employeemedicalrecord base on date from - to, ProductID, employeeID and organization'
BEGIN

DECLARE empmedrecordID INT(11) DEFAULT 0;

SELECT emedrecord.RowID
FROM employeemedicalrecord emedrecord
WHERE COALESCE(emedrecord.EmployeeID,0)=COALESCE(emedrecord_EmployeeID,0)
AND COALESCE(emedrecord.ProductID,0)=COALESCE(emedrecord_ProductID,0)
AND emedrecord.OrganizationID=emedrecord_OrganizationID
AND emedrecord.DateFrom=emedrecord_DateFrom
AND IF(emedrecord.DateTo IS NULL, emedrecord.DateTo IS NULL, emedrecord.DateTo=emedrecord_DateTo)
LIMIT 1
INTO empmedrecordID;

RETURN empmedrecordID;



END//
DELIMITER ;

-- Dumping structure for function accupaydb_cinema2k.VIEW_privilege
DROP FUNCTION IF EXISTS `VIEW_privilege`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` FUNCTION `VIEW_privilege`(`vw_ViewName` VARCHAR(150), `vw_OrganizationID` INT) RETURNS int(11)
    DETERMINISTIC
BEGIN

DECLARE viewIsExists INT(1);

DECLARE view_RowID INT(11);

    SELECT RowID FROM `view` WHERE ViewName=vw_ViewName AND OrganizationID=vw_OrganizationID INTO view_RowID;

    IF view_RowID IS NULL AND LENGTH(IFNULL(vw_ViewName,'')) > 0 THEN

        INSERT INTO `view`(ViewName,OrganizationID) SELECT vw_ViewName,og.RowID FROM organization og;

        INSERT INTO position_view
        (
            PositionID
            ,ViewID
            ,Creates
            ,OrganizationID
            ,ReadOnly
            ,Updates
            ,Deleting
            ,Created
            ,CreatedBy
            ,LastUpdBy
        ) SELECT
            pos.RowID
            ,v.RowID
            ,'N'
            ,v.OrganizationID
            ,'Y'
            ,'N'
            ,'N'
            ,CURRENT_TIMESTAMP()
            ,(SELECT RowID FROM user ORDER BY LastUpd DESC LIMIT 1)
            ,(SELECT RowID FROM user ORDER BY LastUpd DESC LIMIT 1)
            FROM `view` v
            LEFT JOIN (SELECT * FROM position GROUP BY PositionName) pos ON pos.RowID > 0 AND pos.RowID != (SELECT PositionID FROM user ORDER BY LastUpd DESC LIMIT 1)
            WHERE v.ViewName=vw_ViewName
        UNION
            SELECT
            pos.RowID
            ,v.RowID
            ,'Y'
            ,v.OrganizationID
            ,'N'
            ,'Y'
            ,'Y'
            ,CURRENT_TIMESTAMP()
            ,(SELECT RowID FROM user ORDER BY LastUpd DESC LIMIT 1)
            ,(SELECT RowID FROM user ORDER BY LastUpd DESC LIMIT 1)
            FROM `view` v
            INNER JOIN position pos ON pos.RowID = (SELECT PositionID FROM user ORDER BY LastUpd DESC LIMIT 1)
            WHERE v.ViewName=vw_ViewName
        ON
        DUPLICATE
        KEY
        UPDATE
            LastUpd=CURRENT_TIMESTAMP();

        SELECT RowID FROM `view` WHERE ViewName=vw_ViewName AND OrganizationID=vw_OrganizationID INTO view_RowID;

    END IF;

RETURN view_RowID;

END//
DELIMITER ;

-- Dumping structure for event accupaydb_cinema2k.EVNT_reset_auto_increment
DROP EVENT IF EXISTS `EVNT_reset_auto_increment`;
DELIMITER //
CREATE DEFINER=`root`@`127.0.0.1` EVENT `EVNT_reset_auto_increment` ON SCHEDULE EVERY 1 SECOND STARTS '2016-03-07 08:00:00' ENDS '2037-03-07 17:08:33' ON COMPLETION PRESERVE ENABLE DO BEGIN

END//
DELIMITER ;

-- Dumping structure for trigger accupaydb_cinema2k.AFTDEL_employeeleave
DROP TRIGGER IF EXISTS `AFTDEL_employeeleave`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTDEL_employeeleave` AFTER DELETE ON `employeeleave` FOR EACH ROW BEGIN

DECLARE anyint INT(11);

IF OLD.`Status` = 'Approved' THEN
    SET anyint = 0;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTDEL_employeeloanschedule
DROP TRIGGER IF EXISTS `AFTDEL_employeeloanschedule`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTDEL_employeeloanschedule` AFTER DELETE ON `employeeloanschedule` FOR EACH ROW BEGIN

DECLARE loan_view_name TEXT DEFAULT 'Employee Loan Schedule';

DECLARE user_rowid
        ,view_id INT(11);

SET user_rowid = IFNULL(OLD.LastUpdBy, OLD.CreatedBy);

SELECT v.RowID
FROM `view` v
WHERE v.OrganizationID=OLD.OrganizationID
AND v.ViewName=loan_view_name
LIMIT 1
INTO view_id
;

INSERT INTO audittrail(Created,CreatedBy,LastUpd,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES
(CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'RowID', OLD.RowID, OLD.RowID, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'OrganizationID', OLD.RowID, OLD.OrganizationID, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'Created', OLD.RowID, OLD.Created, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'CreatedBy', OLD.RowID, OLD.CreatedBy, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'LastUpd', OLD.RowID, OLD.LastUpd, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'LastUpdBy', OLD.RowID, OLD.LastUpdBy, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'EmployeeID', OLD.RowID, OLD.EmployeeID, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'LoanNumber', OLD.RowID, OLD.LoanNumber, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'DedEffectiveDateFrom', OLD.RowID, OLD.DedEffectiveDateFrom, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'DedEffectiveDateTo', OLD.RowID, OLD.DedEffectiveDateTo, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'TotalLoanAmount', OLD.RowID, OLD.TotalLoanAmount, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'DeductionSchedule', OLD.RowID, OLD.DeductionSchedule, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'TotalBalanceLeft', OLD.RowID, OLD.TotalBalanceLeft, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'DeductionAmount', OLD.RowID, OLD.DeductionAmount, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'Status', OLD.RowID, OLD.Status, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'LoanTypeID', OLD.RowID, OLD.LoanTypeID, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'DeductionPercentage', OLD.RowID, OLD.DeductionPercentage, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'NoOfPayPeriod', OLD.RowID, OLD.NoOfPayPeriod, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'LoanPayPeriodLeft', OLD.RowID, OLD.LoanPayPeriodLeft, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'Comments', OLD.RowID, OLD.Comments, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'BonusID', OLD.RowID, OLD.BonusID, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'LoanName', OLD.RowID, OLD.LoanName, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'LoanPayPeriodLeftForBonus', OLD.RowID, OLD.LoanPayPeriodLeftForBonus, NULL, 'Delete')
, (CURRENT_TIMESTAMP(), user_rowid, CURRENT_TIMESTAMP(), user_rowid, OLD.OrganizationID, view_id, 'BonusPotentialPaymentForLoan', OLD.RowID, OLD.BonusPotentialPaymentForLoan, NULL, 'Delete')
;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTDEL_employeeoffset
DROP TRIGGER IF EXISTS `AFTDEL_employeeoffset`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTDEL_employeeoffset` AFTER DELETE ON `employeeoffset` FOR EACH ROW BEGIN

DECLARE sec_per_hour INT(11) DEFAULT 3600; # 60 seconds times 60 minutes

DECLARE offset_hrs DECIMAL(11, 2);

SET offset_hrs = TIMESTAMPDIFF(SECOND
                               , CONCAT_DATETIME(OLD.StartDate, OLD.StartTime)
										 , CONCAT_DATETIME(ADDDATE(OLD.StartDate, INTERVAL IS_TIMERANGE_REACHTOMORROW(OLD.StartTime, OLD.EndTime) DAY), OLD.EndTime)) / sec_per_hour;


UPDATE employee
SET OffsetBalance = (OffsetBalance - IFNULL(offset_hrs, 0))
WHERE RowID=OLD.EmployeeID
AND OLD.`Status` = 'Approved';

SET GLOBAL event_scheduler = ON;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTDEL_employeetimeentrydetails
DROP TRIGGER IF EXISTS `AFTDEL_employeetimeentrydetails`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTDEL_employeetimeentrydetails` AFTER DELETE ON `employeetimeentrydetails` FOR EACH ROW BEGIN

DELETE
FROM timeentrylogs
WHERE (DATE(TimeStampLog) = DATE(OLD.TimeStampIn)
       OR DATE(TimeStampLog) = DATE(OLD.TimeStampOut))
AND EmployeeRowID = OLD.EmployeeID
AND OrganizationID = OLD.OrganizationID;

DELETE
FROM timeentrylog
WHERE (DATE(TimeStampLog) = DATE(OLD.TimeStampIn)
       OR DATE(TimeStampLog) = DATE(OLD.TimeStampOut))
AND EmployeeRowID = OLD.EmployeeID
AND OrganizationID = OLD.OrganizationID;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_audittrail
DROP TRIGGER IF EXISTS `AFTINS_audittrail`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_audittrail` AFTER INSERT ON `audittrail` FOR EACH ROW BEGIN

DECLARE view_name TEXT;

DECLARE max_date DATE;

DECLARE myprevious_max_date VARCHAR(50);

SELECT ViewName FROM `view` WHERE RowID=NEW.ViewID INTO view_name;





IF view_name = 'Pay rate' THEN

    IF NEW.OldValue != 'Regular Holiday' AND NEW.NewValue = 'Regular Holiday' THEN




        SET view_name = 'Pay rate';



    END IF;

END IF;



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_division
DROP TRIGGER IF EXISTS `AFTINS_division`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_division` AFTER INSERT ON `division` FOR EACH ROW BEGIN

DECLARE countchildposition INT(11);
DECLARE defaultpositionname VARCHAR(120);
DECLARE anyint INT(11);

SELECT COUNT(RowID)
FROM position
WHERE DivisionId = NEW.RowID
INTO countchildposition;

SET countchildposition = IFNULL(countchildposition, 0);

IF countchildposition = -1 THEN

    SELECT SUBSTRING_INDEX(PositionName, ' ', -1)
    FROM position
    WHERE PositionName LIKE '%Default%'
    ORDER BY SUBSTRING_INDEX(PositionName, ' ', -1) DESC
    LIMIT 1
    INTO defaultpositionname;

    SELECT INSUPD_position(
        NULL,
        CONCAT('Default Position ',defaultpositionname + 1),
        NEW.CreatedBy,
        NEW.OrganizationID,
        NEW.LastUpdBy,
        NULL,
        NEW.RowID
    )
    INTO anyint;

    SET countchildposition = 1;

END IF;

UPDATE employee e
INNER JOIN position ps
ON ps.DivisionId = NEW.RowID
SET e.PayFrequencyID = NEW.PayFrequencyID,
    e.WorkDaysPerYear = NEW.WorkDaysPerYear,
    e.LateGracePeriod = NEW.GracePeriod
WHERE e.OrganizationID = NEW.OrganizationID AND
    e.PositionID = ps.RowID;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeeallowance
DROP TRIGGER IF EXISTS `AFTINS_employeeallowance`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeeallowance` AFTER INSERT ON `employeeallowance` FOR EACH ROW BEGIN




DECLARE viewID INT(11);

DECLARE totalAllowancePerDay DECIMAL(11,2) DEFAULT 0;

DECLARE empPaymentType TEXT;

DECLARE empWorkDaysPerYear DECIMAL(11,2);

DECLARE ag_RowID INT(11);

SELECT e.AgencyID FROM employee e WHERE e.RowID=NEW.EmployeeID INTO ag_RowID;


IF NEW.TaxableFlag = '1' AND ag_RowID IS NULL THEN

    SELECT e.EmployeeType,e.WorkDaysPerYear FROM employee e WHERE e.RowID=NEW.EmployeeID INTO empPaymentType,empWorkDaysPerYear;

    SELECT GET_employeeallowancePerDay(NEW.OrganizationID,NEW.EmployeeID,NEW.TaxableFlag,CURDATE()) INTO totalAllowancePerDay;



        SET empWorkDaysPerYear = ROUND(empWorkDaysPerYear / 12, 4);

        SET totalAllowancePerDay = empWorkDaysPerYear * totalAllowancePerDay;

    IF empPaymentType IN ('Fixed','Monthly') THEN

        IF NEW.AllowanceFrequency = 'Semi-monthly' THEN

            UPDATE employeesalary es SET
            es.PaySocialSecurityID=(SELECT RowID FROM paysocialsecurity WHERE (es.Salary + (NEW.AllowanceAmount * 2.0)) BETWEEN RangeFromAmount AND RangeToAmount)
            ,es.PayPhilhealthID=(SELECT RowID FROM payphilhealth WHERE (es.Salary + (NEW.AllowanceAmount * 2.0)) BETWEEN SalaryRangeFrom AND SalaryRangeTo)
            ,es.LastUpdBy=NEW.CreatedBy
            WHERE es.EmployeeID=NEW.EmployeeID
            AND es.OrganizationID=NEW.OrganizationID
            AND (es.EffectiveDateFrom >= NEW.EffectiveStartDate OR IFNULL(es.EffectiveDateTo,NEW.EffectiveEndDate) >= NEW.EffectiveStartDate)
            AND (es.EffectiveDateFrom <= NEW.EffectiveEndDate OR IFNULL(es.EffectiveDateTo,NEW.EffectiveEndDate) <= NEW.EffectiveEndDate);

        ELSEIF NEW.AllowanceFrequency = 'Daily' THEN

            UPDATE employeesalary es SET
            es.PaySocialSecurityID=(SELECT RowID FROM paysocialsecurity WHERE (es.Salary + totalAllowancePerDay) BETWEEN RangeFromAmount AND RangeToAmount)
            ,es.PayPhilhealthID=(SELECT RowID FROM payphilhealth WHERE (es.Salary + totalAllowancePerDay) BETWEEN SalaryRangeFrom AND SalaryRangeTo)
            ,es.LastUpdBy=NEW.CreatedBy
            WHERE es.EmployeeID=NEW.EmployeeID
            AND es.OrganizationID=NEW.OrganizationID
            AND (es.EffectiveDateFrom >= NEW.EffectiveStartDate OR IFNULL(es.EffectiveDateTo,NEW.EffectiveEndDate) >= NEW.EffectiveStartDate)
            AND (es.EffectiveDateFrom <= NEW.EffectiveEndDate OR IFNULL(es.EffectiveDateTo,NEW.EffectiveEndDate) <= NEW.EffectiveEndDate);

        END IF;

    ELSEIF empPaymentType = 'Daily' THEN

        IF NEW.AllowanceFrequency = 'Semi-monthly' THEN

            UPDATE employeesalary es
            INNER JOIN employee e ON e.RowID=es.EmployeeID
            INNER JOIN payfrequency pf ON pf.RowID=e.PayFrequencyID
            SET
            es.PaySocialSecurityID=(SELECT RowID FROM paysocialsecurity WHERE (((es.BasicPay + NEW.AllowanceAmount) * empWorkDaysPerYear) + (NEW.AllowanceAmount * PAYFREQUENCY_DIVISOR(pf.PayFrequencyType))) BETWEEN RangeFromAmount AND RangeToAmount)
            ,es.PayPhilhealthID=(SELECT RowID FROM payphilhealth WHERE (es.BasicPay * empWorkDaysPerYear) BETWEEN SalaryRangeFrom AND SalaryRangeTo LIMIT 1)
            ,es.LastUpdBy=NEW.CreatedBy
            ,es.LastUpd=CURRENT_TIMESTAMP()
            WHERE es.EmployeeID=NEW.EmployeeID
            AND es.OrganizationID=NEW.OrganizationID
            AND es.EffectiveDateTo IS NULL;

        ELSEIF NEW.AllowanceFrequency = 'Daily' THEN

            UPDATE employeesalary es SET
            es.PaySocialSecurityID=(SELECT RowID FROM paysocialsecurity WHERE ((es.BasicPay + NEW.AllowanceAmount) * empWorkDaysPerYear) BETWEEN RangeFromAmount AND RangeToAmount)
            ,es.PayPhilhealthID=(SELECT RowID FROM payphilhealth WHERE (es.BasicPay * empWorkDaysPerYear) BETWEEN SalaryRangeFrom AND SalaryRangeTo LIMIT 1)
            ,es.LastUpdBy=NEW.CreatedBy
            ,es.LastUpd=CURRENT_TIMESTAMP()
            WHERE es.EmployeeID=NEW.EmployeeID
            AND es.OrganizationID=NEW.OrganizationID
            AND es.EffectiveDateTo IS NULL;

        END IF;



    ELSEIF empPaymentType = 'Hourly' THEN

        UPDATE employeesalary es SET
        es.PaySocialSecurityID=(SELECT RowID FROM paysocialsecurity WHERE es.BasicPay + totalAllowancePerDay BETWEEN RangeFromAmount AND RangeToAmount LIMIT 1)
        ,es.LastUpdBy=NEW.CreatedBy
        WHERE es.EmployeeID=NEW.EmployeeID
        AND es.OrganizationID=NEW.OrganizationID
        AND es.EffectiveDateTo IS NULL;



    END IF;

END IF;



SELECT RowID FROM `view` WHERE ViewName='Employee Allowance' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'ProductID',NEW.RowID,'',NEW.ProductID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'AllowanceFrequency',NEW.RowID,'',NEW.AllowanceFrequency,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EffectiveStartDate',NEW.RowID,'',NEW.EffectiveStartDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EffectiveEndDate',NEW.RowID,'',NEW.EffectiveEndDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'TaxableFlag',NEW.RowID,'',NEW.TaxableFlag,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'AllowanceAmount',NEW.RowID,'',NEW.AllowanceAmount,'Insert');




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeeattachment_then_employeechecklist
DROP TRIGGER IF EXISTS `AFTINS_employeeattachment_then_employeechecklist`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeeattachment_then_employeechecklist` AFTER INSERT ON `employeeattachments` FOR EACH ROW BEGIN

DECLARE OrganizID INT(11);

DECLARE empchklstID INT(11);

DECLARE lovchklstID INT(11);

DECLARE viewID INT(11);

SELECT RowID FROM listofval WHERE DisplayValue=NEW.Type AND Type='Employee Checklist' LIMIT 1 INTO lovchklstID;

SELECT RowID FROM employeechecklist WHERE EmployeeID=NEW.EmployeeID AND Created<=NEW.Created LIMIT 1 INTO empchklstID;

SET lovchklstID = COALESCE(lovchklstID,0);

IF lovchklstID = 367 THEN
    UPDATE employeechecklist SET
    PerformanceAppraisal='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 368 THEN
    UPDATE employeechecklist SET
    BIRTIN='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 369 THEN
    UPDATE employeechecklist SET
    Diploma='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 370 THEN
    UPDATE employeechecklist SET
    IDInfoSlip='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 371 THEN
    UPDATE employeechecklist SET
    PhilhealthID='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 372 THEN
    UPDATE employeechecklist SET
    HDMFID='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 373 THEN
    UPDATE employeechecklist SET
    SSSNo='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 374 THEN
    UPDATE employeechecklist SET
    TranscriptOfRecord='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 375 THEN
    UPDATE employeechecklist SET
    BirthCertificate='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 376 THEN
    UPDATE employeechecklist SET
    EmployeeContract='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 377 THEN
    UPDATE employeechecklist SET
    MedicalExam='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 378 THEN
    UPDATE employeechecklist SET
    COEEmployer='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 379 THEN
    UPDATE employeechecklist SET
    MarriageContract='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 380 THEN
    UPDATE employeechecklist SET
    HouseSketch='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 381 THEN
    UPDATE employeechecklist SET
    TrainingAgreement='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 382 THEN
    UPDATE employeechecklist SET
    HealthPermit='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 383 THEN
    UPDATE employeechecklist SET
    ValidID='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 384 THEN
    UPDATE employeechecklist SET
    Resume='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 385 THEN
    UPDATE employeechecklist SET
    NBIClearance='1'
    WHERE RowID=empchklstID;
END IF;

SELECT OrganizationID FROM user WHERE RowID=NEW.CreatedBy INTO OrganizID;

SELECT RowID FROM `view` WHERE ViewName='Employee Attachment' AND OrganizationID=OrganizID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,OrganizID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,OrganizID,viewID,'Type',NEW.RowID,'',NEW.Type,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,OrganizID,viewID,'FileName',NEW.RowID,'',NEW.FileName,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,OrganizID,viewID,'FileType',NEW.RowID,'',NEW.FileType,'Insert');





END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeeawards
DROP TRIGGER IF EXISTS `AFTINS_employeeawards`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeeawards` AFTER INSERT ON `employeeawards` FOR EACH ROW BEGIN


DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Award' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'AwardType',NEW.RowID,'',NEW.AwardType,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'AwardDescription',NEW.RowID,'',NEW.AwardDescription,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'AwardDate',NEW.RowID,'',NEW.AwardDate,'Insert');




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeebonus
DROP TRIGGER IF EXISTS `AFTINS_employeebonus`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeebonus` AFTER INSERT ON `employeebonus` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Bonus' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'ProductID',NEW.RowID,'',NEW.ProductID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'AllowanceFrequency',NEW.RowID,'',NEW.AllowanceFrequency,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EffectiveStartDate',NEW.RowID,'',NEW.EffectiveStartDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EffectiveEndDate',NEW.RowID,'',NEW.EffectiveEndDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'TaxableFlag',NEW.RowID,'',NEW.TaxableFlag,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'BonusAmount',NEW.RowID,'',NEW.BonusAmount,'Insert');



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeecertification
DROP TRIGGER IF EXISTS `AFTINS_employeecertification`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeecertification` AFTER INSERT ON `employeecertification` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Certification' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'CertificationType',NEW.RowID,'',NEW.CertificationType,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'IssuingAuthority',NEW.RowID,'',NEW.IssuingAuthority,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'CertificationNo',NEW.RowID,'',NEW.CertificationNo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'IssueDate',NEW.RowID,'',NEW.IssueDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'ExpirationDate',NEW.RowID,'',NEW.ExpirationDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,'',NEW.Comments,'Insert');



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeedependents
DROP TRIGGER IF EXISTS `AFTINS_employeedependents`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeedependents` AFTER INSERT ON `employeedependents` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Dependents' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'ParentEmployeeID',NEW.RowID,'',NEW.ParentEmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Salutation',NEW.RowID,'',NEW.Salutation,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'FirstName',NEW.RowID,'',NEW.FirstName,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'MiddleName',NEW.RowID,'',NEW.MiddleName,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LastName',NEW.RowID,'',NEW.LastName,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Surname',NEW.RowID,'',NEW.Surname,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'TINNo',NEW.RowID,'',NEW.TINNo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'SSSNo',NEW.RowID,'',NEW.SSSNo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'HDMFNo',NEW.RowID,'',NEW.HDMFNo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'PhilHealthNo',NEW.RowID,'',NEW.PhilHealthNo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmailAddress',NEW.RowID,'',NEW.EmailAddress,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'WorkPhone',NEW.RowID,'',NEW.WorkPhone,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'HomePhone',NEW.RowID,'',NEW.HomePhone,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'MobilePhone',NEW.RowID,'',NEW.MobilePhone,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'HomeAddress',NEW.RowID,'',NEW.HomeAddress,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Nickname',NEW.RowID,'',NEW.Nickname,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'JobTitle',NEW.RowID,'',NEW.JobTitle,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Gender',NEW.RowID,'',NEW.Gender,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'RelationToEmployee',NEW.RowID,'',NEW.RelationToEmployee,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'ActiveFlag',NEW.RowID,'',NEW.ActiveFlag,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Birthdate',NEW.RowID,'',NEW.Birthdate,'Insert');


    UPDATE employee SET
    NoOfDependents=(SELECT COUNT(RowID) FROM employeedependents WHERE ParentEmployeeID=NEW.ParentEmployeeID AND OrganizationID=NEW.OrganizationID AND ActiveFlag='Y')
    ,LastUpdBy=NEW.CreatedBy
    ,LastUpd=CURRENT_TIMESTAMP()
    WHERE RowID=NEW.ParentEmployeeID;



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeedisciplinaryaction
DROP TRIGGER IF EXISTS `AFTINS_employeedisciplinaryaction`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeedisciplinaryaction` AFTER INSERT ON `employeedisciplinaryaction` FOR EACH ROW BEGIN


DECLARE viewID INT(11);

DECLARE suspendaycount INT(11);

DECLARE indx INT(11) DEFAULT 0;

DECLARE dateloop DATE;

DECLARE eshiftID INT(11);

DECLARE esalID INT(11);

DECLARE etentID INT(11);

IF NEW.Action IN ('1-3 Days Suspension','4-7 Days Suspension','8-14 Days Suspension') THEN

    SELECT DATEDIFF(NEW.DateTo,NEW.DateFrom) INTO suspendaycount;

    timeentloop : LOOP

        IF indx <= suspendaycount THEN

            SELECT ADDDATE(NEW.DateFrom,INTERVAL indx DAY) INTO dateloop;

            SELECT RowID FROM employeetimeentry WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND Date=dateloop LIMIT 1 INTO etentID;

            SELECT RowID FROM employeeshift WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND dateloop BETWEEN DATE(COALESCE(EffectiveFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) AND DATEDIFF(CURRENT_DATE(),EffectiveFrom) >= 0 ORDER BY DATEDIFF(DATE_FORMAT(NOW(),'%Y-%m-%d'),EffectiveFrom) LIMIT 1 INTO eshiftID;

            SELECT RowID FROM employeesalary WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND dateloop BETWEEN DATE(COALESCE(EffectiveDateFrom,DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveDateTo,ADDDATE(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH))) ORDER BY DATEDIFF(DATE_FORMAT(NOW(),'%Y-%m-%d'),EffectiveDateFrom) LIMIT 1 INTO esalID;

            INSERT INTO employeetimeentry
            (
                RowID
                ,OrganizationID
                ,Created
                ,CreatedBy
                ,Date
                ,EmployeeShiftID
                ,EmployeeID
                ,EmployeeSalaryID
                ,EmployeeFixedSalaryFlag
                ,RegularHoursWorked
                ,RegularHoursAmount
                ,TotalHoursWorked
                ,OvertimeHoursWorked
                ,OvertimeHoursAmount
                ,UndertimeHours
                ,UndertimeHoursAmount
                ,NightDifferentialHours
                ,NightDiffHoursAmount
                ,NightDifferentialOTHours
                ,NightDiffOTHoursAmount
                ,HoursLate
                ,HoursLateAmount
                ,LateFlag
                ,PayRateID
                ,VacationLeaveHours
                ,SickLeaveHours
                ,MaternityLeaveHours
                ,OtherLeaveHours
                ,TotalDayPay
            ) VALUES (
                etentID
                ,NEW.OrganizationID
                ,CURRENT_TIMESTAMP()
                ,NEW.CreatedBy
                ,dateloop
                ,eshiftID
                ,NEW.EmployeeID
                ,esalID
                ,'0'
                ,0
                ,0
                ,0
                ,0
                ,0
                ,0
                ,0
                ,0
                ,0
                ,0
                ,0
                ,0
                ,0
                ,0
                ,(SELECT RowID FROM payrate WHERE Date=dateloop AND OrganizationID=NEW.OrganizationID LIMIT 1)
                ,0
                ,0
                ,0
                ,0
                ,0
            ) ON
            DUPLICATE
            KEY
            UPDATE
                    LastUpd=CURRENT_TIMESTAMP()
                    ,LastUpdBy=NEW.CreatedBy
                    ,RegularHoursWorked=0
                    ,RegularHoursAmount=0
                    ,TotalHoursWorked=0
                    ,OvertimeHoursWorked=0
                    ,OvertimeHoursAmount=0
                    ,UndertimeHours=0
                    ,UndertimeHoursAmount=0
                    ,NightDifferentialHours=0
                    ,NightDiffHoursAmount=0
                    ,NightDifferentialOTHours=0
                    ,NightDiffOTHoursAmount=0
                    ,HoursLate=0
                    ,HoursLateAmount=0
                    ,LateFlag='0'
                    ,TotalDayPay=0;

            SET indx = indx + 1;

        ELSE

            LEAVE timeentloop;

        END IF;

    END LOOP;

END IF;








SELECT RowID FROM `view` WHERE ViewName='Employee Disciplinary Action' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DateFrom',NEW.RowID,'',NEW.DateFrom,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DateTo',NEW.RowID,'',NEW.DateTo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'FindingID',NEW.RowID,'',NEW.FindingID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'FindingDescription',NEW.RowID,'',NEW.FindingDescription,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Action',NEW.RowID,'',NEW.Action,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Penalty',NEW.RowID,'',NEW.Penalty,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,'',NEW.Comments,'Insert');



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeeeducation
DROP TRIGGER IF EXISTS `AFTINS_employeeeducation`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeeeducation` AFTER INSERT ON `employeeeducation` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Educational Background' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DateFrom',NEW.RowID,'',NEW.DateFrom,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DateTo',NEW.RowID,'',NEW.DateTo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'School',NEW.RowID,'',NEW.School,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Degree',NEW.RowID,'',NEW.Degree,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Course',NEW.RowID,'',NEW.Course,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Minor',NEW.RowID,'',NEW.Minor,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EducationType',NEW.RowID,'',NEW.EducationType,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Remarks',NEW.RowID,'',NEW.Remarks,'Insert');



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeefirstweekshift
DROP TRIGGER IF EXISTS `AFTINS_employeefirstweekshift`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeefirstweekshift` AFTER INSERT ON `employeefirstweekshift` FOR EACH ROW BEGIN

DECLARE anyintiger INT(11) DEFAULT 0;

DECLARE date_diff INT(11);

DECLARE lastdateof_default_week_format DATE;

DECLARE EndingDate DATE DEFAULT LAST_DAY(DATE_FORMAT(CURDATE(),'%Y-12-01'));

SET date_diff = DATEDIFF(NEW.EffectiveTo,NEW.EffectiveFrom);

SELECT @@default_week_format INTO anyintiger;

SELECT IF(EndingDate > d.DateValue, ADDDATE(d.DateValue, INTERVAL 1 WEEK), EndingDate) FROM dates d WHERE YEAR(d.DateValue)=YEAR(CURDATE()) AND DAYOFWEEK(d.DateValue)=IF(anyintiger - 1 < 0, 7, anyintiger) ORDER BY d.DateValue DESC LIMIT 1 INTO lastdateof_default_week_format;

INSERT INTO employeeshift
(
    OrganizationID
    ,CreatedBy
    ,EmployeeID
    ,ShiftID
    ,EffectiveFrom
    ,EffectiveTo
    ,NightShift
    ,RestDay
    ,IsEncodedByDay
) SELECT NEW.OrganizationID
    ,NEW.CreatedBy
    ,NEW.EmployeeID
    ,NEW.ShiftID
    ,d.DateValue
    ,ADDDATE(d.DateValue, INTERVAL date_diff DAY)
    ,NEW.NightShift
    ,NEW.RestDay
    ,NEW.IsEncodedByDay
    FROM dates d
    WHERE DAYOFWEEK(d.DateValue)=DAYOFWEEK(NEW.EffectiveFrom) AND d.DateValue BETWEEN NEW.EffectiveFrom AND lastdateof_default_week_format
    ORDER BY d.DateValue
ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=NEW.CreatedBy
    ,ShiftID=NEW.ShiftID;



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeeleave_then_employeetimeentry
DROP TRIGGER IF EXISTS `AFTINS_employeeleave_then_employeetimeentry`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeeleave_then_employeetimeentry` AFTER INSERT ON `employeeleave` FOR EACH ROW BEGIN


DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Leave' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES
(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LeaveType',NEW.RowID,'',NEW.LeaveType,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LeaveStartTime',NEW.RowID,'',NEW.LeaveStartTime,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LeaveEndTime',NEW.RowID,'',NEW.LeaveEndTime,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LeaveStartDate',NEW.RowID,'',NEW.LeaveStartDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LeaveEndDate',NEW.RowID,'',NEW.LeaveEndDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Reason',NEW.RowID,'',NEW.Reason,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,'',NEW.Comments,'Insert');

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeeloanhistory
DROP TRIGGER IF EXISTS `AFTINS_employeeloanhistory`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeeloanhistory` AFTER INSERT ON `employeeloanhistory` FOR EACH ROW BEGIN

INSERT INTO employeeloanhistoitem
(
    OrganizationID
    ,CreatedBy
    ,Created
    ,LoanHistoID
    ,EmpLoanID
    ,LoanTypeID
    ,PaidLoanAmount
) SELECT NEW.OrganizationID
    ,NEW.CreatedBy
    ,CURRENT_TIMESTAMP()
    ,NEW.RowID
    ,els.RowID
    ,els.LoanTypeID
    ,els.TotalLoanAmount - (els.TotalBalanceLeft - els.DeductionAmount)
    FROM employeeloanschedule els
    INNER JOIN product p ON p.PartNo=NEW.Comments AND p.`Category`='Loan Type'
    WHERE els.OrganizationID=NEW.OrganizationID
    AND els.EmployeeID=NEW.EmployeeID
    AND els.LoanTypeID=p.RowID
    AND NEW.DeductionDate BETWEEN els.DedEffectiveDateFrom AND els.DedEffectiveDateTo;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeeloanschedule
DROP TRIGGER IF EXISTS `AFTINS_employeeloanschedule`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeeloanschedule` AFTER INSERT ON `employeeloanschedule` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

DECLARE payperiod_RowID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Loan Schedule' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LoanNumber',NEW.RowID,'',NEW.LoanNumber,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DedEffectiveDateFrom',NEW.RowID,'',NEW.DedEffectiveDateFrom,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DedEffectiveDateTo',NEW.RowID,'',NEW.DedEffectiveDateTo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'TotalLoanAmount',NEW.RowID,'',NEW.TotalLoanAmount,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DeductionSchedule',NEW.RowID,'',NEW.DeductionSchedule,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'TotalBalanceLeft',NEW.RowID,'',NEW.TotalBalanceLeft,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DeductionAmount',NEW.RowID,'',NEW.DeductionAmount,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Status',NEW.RowID,'',NEW.Status,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LoanTypeID',NEW.RowID,'',NEW.LoanTypeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DeductionPercentage',NEW.RowID,'',NEW.DeductionPercentage,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'NoOfPayPeriod',NEW.RowID,'',NEW.NoOfPayPeriod,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LoanPayPeriodLeft',NEW.RowID,'',NEW.LoanPayPeriodLeft,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,'',NEW.Comments,'Insert');



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeemedicalrecord
DROP TRIGGER IF EXISTS `AFTINS_employeemedicalrecord`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeemedicalrecord` AFTER INSERT ON `employeemedicalrecord` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Medical Profile' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DateFrom',NEW.RowID,'',NEW.DateFrom,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DateTo',NEW.RowID,'',NEW.DateTo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'ProductID',NEW.RowID,'',NEW.ProductID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Finding',NEW.RowID,'',NEW.Finding,'Insert');



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeeofficialbusiness_then_employeetimeentrydetails
DROP TRIGGER IF EXISTS `AFTINS_employeeofficialbusiness_then_employeetimeentrydetails`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeeofficialbusiness_then_employeetimeentrydetails` AFTER INSERT ON `employeeofficialbusiness` FOR EACH ROW BEGIN

DECLARE eob_dayrange INT(11);

DECLARE i INT(11) DEFAULT 0;

DECLARE etetn_RowID INT(11);

DECLARE one_datetimestamp DATETIME DEFAULT CURRENT_TIMESTAMP();

DECLARE viewID INT(11);

SET eob_dayrange = DATEDIFF(COALESCE(NEW.OffBusEndDate,NEW.OffBusStartDate),NEW.OffBusStartDate) + 1;
SET one_datetimestamp = (SELECT etd.Created FROM employeetimeentrydetails etd INNER JOIN (SELECT pp.RowID,pp.PayFromDate, pp.PayToDate FROM employee e INNER JOIN payperiod pp ON pp.TotalGrossSalary=e.PayFrequencyID AND pp.OrganizationID=e.OrganizationID AND NEW.OffBusStartDate BETWEEN pp.PayFromDate AND pp.PayToDate WHERE e.RowID=NEW.EmployeeID AND e.OrganizationID=NEW.OrganizationID LIMIT 1) i ON i.RowID IS NOT NULL OR i.RowID IS NULL WHERE etd.EmployeeID=NEW.EmployeeID AND etd.OrganizationID=NEW.OrganizationID AND etd.`Date` BETWEEN i.PayFromDate AND i.PayToDate LIMIT 1);
SET one_datetimestamp = IFNULL(one_datetimestamp,CURRENT_TIMESTAMP());
SET i=0;

SELECT RowID FROM `view` WHERE ViewName='Official Business filing' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OffBusStartTime',NEW.RowID,'',NEW.OffBusStartTime,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OffBusEndTime',NEW.RowID,'',NEW.OffBusEndTime,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OffBusType',NEW.RowID,'',NEW.OffBusType,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OffBusStartDate',NEW.RowID,'',NEW.OffBusStartDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OffBusEndDate',NEW.RowID,'',NEW.OffBusEndDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Reason',NEW.RowID,'',NEW.Reason,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,'',NEW.Comments,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert');







END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeeoffset
DROP TRIGGER IF EXISTS `AFTINS_employeeoffset`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeeoffset` AFTER INSERT ON `employeeoffset` FOR EACH ROW BEGIN

DECLARE sec_per_hour INT(11) DEFAULT 3600; # 60 seconds times 60 minutes

DECLARE tothoursoffset DECIMAL(11,6);

DECLARE num_of_days DECIMAL(11,6);

SET tothoursoffset = TIMESTAMPDIFF(SECOND
                               , CONCAT_DATETIME(NEW.StartDate, NEW.StartTime)
										 , CONCAT_DATETIME(ADDDATE(NEW.StartDate, INTERVAL IS_TIMERANGE_REACHTOMORROW(NEW.StartTime, NEW.EndTime) DAY), NEW.EndTime)) / sec_per_hour;

SET num_of_days = (DATEDIFF(NEW.EndDate, NEW.StartDate) + 1);

IF num_of_days < 0 THEN SET num_of_days=1; END IF;

UPDATE employee e
SET e.OffsetBalance = IFNULL(e.OffsetBalance,0) + (IFNULL(tothoursoffset, 0) * num_of_days)
,e.LastUpdBy=NEW.CreatedBy
WHERE e.RowID = NEW.EmployeeID
AND NEW.`Status` = 'Approved';

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeeovertime
DROP TRIGGER IF EXISTS `AFTINS_employeeovertime`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeeovertime` AFTER INSERT ON `employeeovertime` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Overtime' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OTType',NEW.RowID,'',NEW.OTType,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OTStatus',NEW.RowID,'',NEW.OTStatus,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OTStartDate',NEW.RowID,'',NEW.OTStartDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OTEndDate',NEW.RowID,'',NEW.OTEndDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OTStartTime',NEW.RowID,'',NEW.OTStartTime,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OTEndTime',NEW.RowID,'',NEW.OTEndTime,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Reason',NEW.RowID,'',NEW.Reason,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,'',NEW.Comments,'Insert');



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeepreviousemployer
DROP TRIGGER IF EXISTS `AFTINS_employeepreviousemployer`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeepreviousemployer` AFTER INSERT ON `employeepreviousemployer` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Previous Employer' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'MainPhone',NEW.RowID,'',NEW.MainPhone,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'FaxNumber',NEW.RowID,'',NEW.FaxNumber,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'JobTitle',NEW.RowID,'',NEW.JobTitle,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'ExperienceFromTo',NEW.RowID,'',NEW.ExperienceFromTo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'BusinessAddress',NEW.RowID,'',NEW.BusinessAddress,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'ContactName',NEW.RowID,'',NEW.ContactName,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmailAddress',NEW.RowID,'',NEW.EmailAddress,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'AltEmailAddress',NEW.RowID,'',NEW.AltEmailAddress,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'AltPhone',NEW.RowID,'',NEW.AltPhone,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'URL',NEW.RowID,'',NEW.URL,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'TINNo',NEW.RowID,'',NEW.TINNo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'JobFunction',NEW.RowID,'',NEW.JobFunction,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OrganizationType',NEW.RowID,'',NEW.OrganizationType,'Insert');



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeepromotion_then_employeesalary
DROP TRIGGER IF EXISTS `AFTINS_employeepromotion_then_employeesalary`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeepromotion_then_employeesalary` AFTER INSERT ON `employeepromotions` FOR EACH ROW BEGIN


DECLARE marit_stat VARCHAR(50);

DECLARE numofdepends INT(11);

DECLARE positID INT(11);

DECLARE empstartdate DATE;

DECLARE payfreqID INT(11);

DECLARE prevesalRowID INT(11);

DECLARE empBasicPay DECIMAL(11,6);

DECLARE emptype VARCHAR(50);

DECLARE viewID INT(11);

    SELECT IF(MaritalStatus IN ('Single','Married'),MaritalStatus,'Zero'),NoOfDependents,PositionID,StartDate,EmployeeType FROM employee WHERE RowID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID INTO marit_stat,numofdepends,positID,empstartdate,emptype;

    SELECT PayFrequencyID FROM organization WHERE RowID=NEW.OrganizationID INTO payfreqID;

IF NEW.CompensationChange = '1' THEN


    UPDATE employeesalary es
    INNER JOIN (SELECT * FROM employeesalary WHERE OrganizationID=NEW.OrganizationID AND EmployeeID=NEW.EmployeeID AND RowID != IFNULL(NEW.EmployeeSalaryID,0) ORDER BY EffectiveDateFrom DESC LIMIT 1) ees ON ees.RowID > 0
    SET es.EffectiveDateTo=SUBDATE(NEW.EffectiveDate, INTERVAL 1 DAY)
    ,es.LastUpd=CURRENT_TIMESTAMP()
    ,es.LastUpdBy=NEW.CreatedBy
    WHERE es.RowID = ees.RowID;

ELSEIF NEW.CompensationChange = -1 THEN

    SELECT RowID,BasicPay FROM employeesalary WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND DATE(DATE_FORMAT(CURRENT_DATE(),'%Y-%m-%d')) BETWEEN DATE(COALESCE(EffectiveDateFrom,DATE_FORMAT(CURRENT_DATE(),'%Y-%m-%d'))) AND DATE(COALESCE(EffectiveDateTo,ADDDATE(CURRENT_DATE(), INTERVAL 1 MONTH))) AND DATEDIFF(CURRENT_DATE(),EffectiveDateFrom) >= 0 ORDER BY DATEDIFF(CURRENT_DATE(),EffectiveDateFrom) LIMIT 1 INTO prevesalRowID,empBasicPay;

    UPDATE employeesalary SET
    EffectiveDateTo=ADDDATE(NEW.EffectiveDate, INTERVAL -1 DAY)
    WHERE RowID=prevesalRowID;

    INSERT INTO employeesalary
    (
        EmployeeID
        ,Created
        ,CreatedBy
        ,OrganizationID
        ,HDMFAmount
        ,BasicPay
        ,Salary
        ,BasicDailyPay
        ,BasicHourlyPay
        ,FilingStatusID
        ,NoofDependents
        ,MaritalStatus
        ,PositionID
        ,EffectiveDateFrom
    ) VALUES(
        NEW.EmployeeID
        ,CURRENT_TIMESTAMP()
        ,NEW.CreatedBy
        ,NEW.OrganizationID
        ,100
        ,empBasicPay
        ,IF(emptype IN ('Daily','Hourly'), empBasicPay, IF(payfreqID = 1, empBasicPay * 2, empBasicPay))
        ,IF(emptype = 'Daily', empBasicPay, 0)
        ,IF(emptype = 'Hourly', empBasicPay, 0)
        ,(SELECT RowID FROM filingstatus WHERE MaritalStatus=marit_stat AND Dependent=COALESCE(numofdepends,0))
        ,COALESCE(numofdepends,0)
        ,marit_stat
        ,(SELECT RowID FROM `position` WHERE PositionName=NEW.PositionTo AND OrganizationID=NEW.OrganizationID LIMIT 1)
        ,NEW.EffectiveDate
    ) ON
    DUPLICATE
    KEY
    UPDATE
        LastUpdBy=NEW.CreatedBy
        ,LastUpd=CURRENT_TIMESTAMP();



ELSEIF COALESCE((SELECT PositionName FROM `position` WHERE RowID=positID AND OrganizationID=NEW.OrganizationID LIMIT 1),'') != NEW.PositionTo THEN

    UPDATE employee SET
    PositionID=(SELECT RowID FROM `position` WHERE PositionName=NEW.PositionTo AND OrganizationID=NEW.OrganizationID LIMIT 1)
    WHERE RowID=NEW.EmployeeID;

END IF;

SELECT RowID FROM `view` WHERE ViewName='Employee Promotion' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'PositionFrom',NEW.RowID,'',NEW.PositionFrom,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'PositionTo',NEW.RowID,'',NEW.PositionTo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EffectiveDate',NEW.RowID,'',NEW.EffectiveDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'CompensationChange',NEW.RowID,'',NEW.CompensationChange,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeSalaryID',NEW.RowID,'',NEW.EmployeeSalaryID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Reason',NEW.RowID,'',NEW.Reason,'Insert');




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeesalary
DROP TRIGGER IF EXISTS `AFTINS_employeesalary`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeesalary` AFTER INSERT ON `employeesalary` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Salary' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;


INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'FilingStatusID',NEW.RowID,'',NEW.FilingStatusID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'PaySocialSecurityID',NEW.RowID,'',NEW.PaySocialSecurityID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'PayPhilhealthID',NEW.RowID,'',NEW.PayPhilhealthID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'HDMFAmount',NEW.RowID,'',NEW.HDMFAmount,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'BasicPay',NEW.RowID,'',NEW.BasicPay,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Salary',NEW.RowID,'',NEW.Salary,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'BasicDailyPay',NEW.RowID,'',NEW.BasicDailyPay,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'BasicHourlyPay',NEW.RowID,'',NEW.BasicHourlyPay,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'NoofDependents',NEW.RowID,'',NEW.NoofDependents,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'MaritalStatus',NEW.RowID,'',NEW.MaritalStatus,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'PositionID',NEW.RowID,'',NEW.PositionID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EffectiveDateFrom',NEW.RowID,'',NEW.EffectiveDateFrom,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EffectiveDateTo',NEW.RowID,'',NEW.EffectiveDateTo,'Insert');

UPDATE employeetimeentry ete
SET ete.EmployeeSalaryID=NEW.RowID
WHERE ete.EmployeeID=NEW.EmployeeID
AND ete.OrganizationID=NEW.OrganizationID
AND ete.`Date` BETWEEN NEW.EffectiveDateFrom AND IFNULL(NEW.EffectiveDateTo,ete.`Date`);

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeeshift
DROP TRIGGER IF EXISTS `AFTINS_employeeshift`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeeshift` AFTER INSERT ON `employeeshift` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

DECLARE emp_group_name VARCHAR(50);

DECLARE anyint INT(11);

DECLARE sh_timefrom TIME;

DECLARE sh_timeto TIME;

DECLARE isShiftRestDay CHAR(1);

DECLARE day_of_rest CHAR(1);

DECLARE has_already_OTapproved CHAR(1);


SELECT d.Name
,e.DayOfRest
FROM employee e
INNER JOIN position p ON p.RowID=e.PositionID
INNER JOIN `division` d ON d.RowID=p.DivisionId
WHERE e.RowID=NEW.EmployeeID
INTO emp_group_name
        ,day_of_rest;

IF emp_group_name = 'Comissary' THEN

    SELECT
    sh.TimeFrom
    ,sh.TimeTo
    FROM shift sh
    WHERE sh.RowID=NEW.ShiftID
    INTO sh_timefrom
            ,sh_timeto;

    SET isShiftRestDay = NEW.RestDay;



    IF isShiftRestDay IS NOT NULL THEN

        SET isShiftRestDay = NEW.RestDay;

        INSERT INTO employeeovertime(RowID,OrganizationID,Created,OTStartTime,OTType,OTStatus,CreatedBy,EmployeeID,OTEndTime,OTStartDate,OTEndDate,Reason,Comments,Image)
            SELECT
            eot.RowID
            ,NEW.OrganizationID
            ,CURRENT_TIMESTAMP()
            ,ADDTIME(sh_timeto,'00:01:00')
            ,'Overtime'
            ,'Approved'
            ,NEW.CreatedBy
            ,NEW.EmployeeID
            ,etd.TimeOut
            ,d.DateValue
            ,d.DateValue
            ,''
            ,''
            ,NULL
        FROM dates d
        LEFT JOIN employeeovertime eot ON eot.EmployeeID=NEW.EmployeeID AND eot.OrganizationID=NEW.OrganizationID AND d.DateValue BETWEEN eot.OTStartDate AND eot.OTEndDate
        INNER JOIN employeetimeentrydetails etd ON etd.EmployeeID=NEW.EmployeeID AND etd.OrganizationID=NEW.OrganizationID AND etd.`Date`=d.DateValue
        WHERE DAYOFWEEK(d.DateValue) != '1'
        AND TIME(ADDTIME(sh_timeto,'00:15:59')) < etd.TimeOut
        AND d.DateValue BETWEEN NEW.EffectiveFrom AND NEW.EffectiveTo
        ORDER BY d.DateValue
        ON
        DUPLICATE
        KEY
        UPDATE
            LastUpd=CURRENT_TIMESTAMP();


    END IF;

END IF;






















SELECT RowID FROM `view` WHERE ViewName='Employee Shift' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'ShiftID',NEW.RowID,'',NEW.ShiftID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EffectiveFrom',NEW.RowID,'',NEW.EffectiveFrom,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EffectiveTo',NEW.RowID,'',NEW.EffectiveTo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'NightShift',NEW.RowID,'',NEW.NightShift,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'RestDay',NEW.RowID,'',NEW.RestDay,'Insert');


UPDATE employeetimeentry ete
SET ete.EmployeeShiftID=NEW.RowID
,ete.LastUpd=CURRENT_TIMESTAMP()
,ete.LastUpdBy=NEW.CreatedBy
WHERE ete.EmployeeID=NEW.EmployeeID
AND ete.OrganizationID=NEW.OrganizationID
AND ete.`Date` BETWEEN NEW.EffectiveFrom AND NEW.EffectiveTo;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employeetimeentrydetails
DROP TRIGGER IF EXISTS `AFTINS_employeetimeentrydetails`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employeetimeentrydetails` AFTER INSERT ON `employeetimeentrydetails` FOR EACH ROW BEGIN

DECLARE isAutomaticOvertimeFiling TINYINT(1);

DECLARE anyint INT(11);
DECLARE sh_timefrom TIME;
DECLARE sh_timeto TIME;
DECLARE today_timefrom DATETIME;
DECLARE today_timeto DATETIME;
DECLARE tomorrow_timefrom DATETIME DEFAULT NULL;
DECLARE tomorrow_timeto DATETIME DEFAULT NULL;
DECLARE isShiftRestDay CHAR(1);
DECLARE today_timein DATETIME;
DECLARE today_timeout DATETIME;
DECLARE day_of_rest CHAR(1);

DECLARE has_already_OTapproved CHAR(1);

SELECT
    d.AutomaticOvertimeFiling,
    e.DayOfRest
FROM employee e
INNER JOIN position p
    ON p.RowID=e.PositionID
INNER JOIN `division` d
    ON d.RowID=p.DivisionId
    AND d.ParentDivisionID IS NOT NULL
WHERE e.RowID=NEW.EmployeeID
INTO
    isAutomaticOvertimeFiling,
    day_of_rest;

SET today_timein = ADDTIME(TIMESTAMP(NEW.`Date`), NEW.TimeIn);

SET today_timeout = ADDTIME(
    IF(
        NEW.TimeOut > NEW.TimeIn AND TIME_FORMAT(NEW.TimeIn,'%p') != TIME_FORMAT(NEW.TimeOut,'%p'),
        TIMESTAMP(NEW.`Date`),
        TIMESTAMP(ADDDATE(NEW.`Date`, INTERVAL 1 DAY))
    ),
    NEW.TimeOut
);

IF isAutomaticOvertimeFiling THEN

    SELECT
        sh.TimeFrom,
        sh.TimeTo,
        esh.RestDay,
        ADDTIME(TIMESTAMP(NEW.`Date`), sh.TimeFrom),
        ADDTIME(
            IF(
                sh.TimeTo > sh.TimeFrom,
                TIMESTAMP(NEW.`Date`),
                TIMESTAMP(ADDDATE(NEW.`Date`, INTERVAL 1 DAY))
            ),
            ADDTIME(sh.TimeTo, e.MinimumOvertime)
        )
    FROM employeeshift esh
    INNER JOIN employee e
        ON e.RowID=esh.EmployeeID AND e.OrganizationID=esh.OrganizationID
    INNER JOIN shift sh
        ON sh.RowID=esh.ShiftID
    WHERE esh.EmployeeID=NEW.EmployeeID
        AND esh.OrganizationID=NEW.OrganizationID
        AND NEW.`Date` BETWEEN esh.EffectiveFrom AND esh.EffectiveTo LIMIT 1
    INTO
        sh_timefrom,
        sh_timeto,
        isShiftRestDay,
        today_timefrom,
        today_timeto;

    SET tomorrow_timefrom = TIMESTAMP(TIMESTAMPADD(HOUR,24,today_timefrom));
    SET tomorrow_timeto = TIMESTAMP(TIMESTAMPADD(HOUR,24,today_timeto));

    SELECT EXISTS(
        SELECT RowID
        FROM employeeovertime
        WHERE EmployeeID=NEW.EmployeeID
            AND OrganizationID=NEW.OrganizationID
            AND NEW.`Date` BETWEEN OTStartDate AND OTEndDate
    )
    INTO has_already_OTapproved;

    IF has_already_OTapproved = '0' THEN

        IF TIMESTAMP(today_timeout) BETWEEN TIMESTAMP(today_timeto) AND TIMESTAMP(TIMESTAMPADD(SECOND, -1, tomorrow_timefrom)) THEN

            SELECT INSUPD_employeeOT(
                NULL,
                NEW.OrganizationID,
                NEW.CreatedBy,
                NEW.CreatedBy,
                NEW.EmployeeID,
                'Overtime',
                sh_timeto,
                NEW.TimeOut,
                NEW.`Date`,
                NEW.`Date`,
                'Approved',
                '',
                '',
                NULL
            )
            INTO anyint;

        END IF;

    ELSE

        UPDATE employeeovertime
        SET
            OTStartTime = sh_timeto,
            OTEndTime = NEW.TimeOut,
            LastUpd = IFNULL(
                LastUpd,
                CURRENT_TIMESTAMP()
            ),
            LastUpdBy=NEW.CreatedBy
        WHERE EmployeeID=NEW.EmployeeID
            AND OrganizationID=NEW.OrganizationID
            AND NEW.`Date` BETWEEN OTStartDate AND OTEndDate
            AND sh_timeto IS NOT NULL;

    END IF;

END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_employee_then_employeesalary
DROP TRIGGER IF EXISTS `AFTINS_employee_then_employeesalary`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_employee_then_employeesalary` AFTER INSERT ON `employee` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

DECLARE marit_stat CHAR(50);

DECLARE exist_empstatus INT(1);

DECLARE exist_emptype INT(1);

DECLARE exist_empsalutat INT(1);

DECLARE anyint INT(11);

DECLARE div_RowID INT(11);

DECLARE hasShiftForThisYear CHAR(1);

DECLARE EndingDate DATE DEFAULT LAST_DAY(DATE_FORMAT(CURDATE(),'%Y-12-01'));

DECLARE StartingDate DATE;

DECLARE dept_mate_empRowID INT(11);

DECLARE ordervaloforigin INT(11);

DECLARE the_date DATE;


SELECT IF(NEW.MaritalStatus IN ('Single','Married'),NEW.MaritalStatus,'Zero') INTO marit_stat;

    INSERT INTO employeesalary
    (
        EmployeeID
        ,Created
        ,CreatedBy
        ,OrganizationID
        ,HDMFAmount
        ,BasicPay
        ,Salary
        ,BasicDailyPay
        ,BasicHourlyPay
        ,FilingStatusID
        ,NoofDependents
        ,MaritalStatus
        ,PositionID
        ,EffectiveDateFrom
    ) VALUES (
        NEW.RowID
        ,CURRENT_TIMESTAMP()
        ,NEW.CreatedBy
        ,NEW.OrganizationID
        ,100.0
        ,0
        ,0
        ,0
        ,0
        ,(SELECT RowID FROM filingstatus WHERE MaritalStatus=marit_stat AND Dependent=COALESCE(NEW.NoOfDependents,0))
        ,COALESCE(NEW.NoOfDependents,0)
        ,NEW.MaritalStatus
        ,NEW.PositionID
        ,NEW.StartDate
    );



INSERT INTO employeechecklist
(
    OrganizationID
    ,Created
    ,CreatedBy
    ,EmployeeID
    ,PerformanceAppraisal
    ,BIRTIN
    ,Diploma
    ,IDInfoSlip
    ,PhilhealthID
    ,HDMFID
    ,SSSNo
    ,TranscriptOfRecord
    ,BirthCertificate
    ,EmployeeContract
    ,MedicalExam
    ,NBIClearance
    ,COEEmployer
    ,MarriageContract
    ,HouseSketch
    ,TrainingAgreement
    ,HealthPermit
    ,ValidID
    ,Resume
) VALUES (
    NEW.OrganizationID
    ,CURRENT_TIMESTAMP()
    ,NEW.CreatedBy
    ,NEW.RowID
    ,0
    ,IF(COALESCE(NEW.TINNo,'   -   -   -') = '   -   -   -', 0, 1)
    ,0
    ,0
    ,IF(COALESCE(NEW.PhilHealthNo,'    -    -') = '    -    -', 0, 1)
    ,IF(COALESCE(NEW.HDMFNo,'    -    -') = '    -    -', 0, 1)
    ,IF(COALESCE(NEW.SSSNo,'  -       -') = '  -       -', 0, 1)
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
);



SELECT RowID FROM `view` WHERE ViewName='Employee Personal Profile' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES
(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,'',NEW.EmployeeID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Salutation',NEW.RowID,'',NEW.Salutation,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'FirstName',NEW.RowID,'',NEW.FirstName,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'MiddleName',NEW.RowID,'',NEW.MiddleName,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LastName',NEW.RowID,'',NEW.LastName,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Surname',NEW.RowID,'',NEW.Surname,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'TINNo',NEW.RowID,'',NEW.TINNo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'SSSNo',NEW.RowID,'',NEW.SSSNo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'HDMFNo',NEW.RowID,'',NEW.HDMFNo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'PhilHealthNo',NEW.RowID,'',NEW.PhilHealthNo,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmploymentStatus',NEW.RowID,'',NEW.EmploymentStatus,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmailAddress',NEW.RowID,'',NEW.EmailAddress,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'WorkPhone',NEW.RowID,'',NEW.WorkPhone,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'HomePhone',NEW.RowID,'',NEW.HomePhone,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'MobilePhone',NEW.RowID,'',NEW.MobilePhone,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'HomeAddress',NEW.RowID,'',NEW.HomeAddress,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Nickname',NEW.RowID,'',NEW.Nickname,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'JobTitle',NEW.RowID,'',NEW.JobTitle,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Gender',NEW.RowID,'',NEW.Gender,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'EmployeeType',NEW.RowID,'',NEW.EmployeeType,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'MaritalStatus',NEW.RowID,'',NEW.MaritalStatus,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Birthdate',NEW.RowID,'',NEW.Birthdate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'StartDate',NEW.RowID,'',NEW.StartDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'TerminationDate',NEW.RowID,'',NEW.TerminationDate,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'PositionID',NEW.RowID,'',NEW.PositionID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'PayFrequencyID',NEW.RowID,'',NEW.PayFrequencyID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'NoOfDependents',NEW.RowID,'',NEW.NoOfDependents,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'UndertimeOverride',NEW.RowID,'',NEW.UndertimeOverride,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'OvertimeOverride',NEW.RowID,'',NEW.OvertimeOverride,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'NewEmployeeFlag',NEW.RowID,'',NEW.NewEmployeeFlag,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LeaveBalance',NEW.RowID,'',NEW.LeaveBalance,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'SickLeaveBalance',NEW.RowID,'',NEW.SickLeaveBalance,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'MaternityLeaveBalance',NEW.RowID,'',NEW.MaternityLeaveBalance,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LeaveAllowance',NEW.RowID,'',NEW.LeaveAllowance,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'SickLeaveAllowance',NEW.RowID,'',NEW.SickLeaveAllowance,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'MaternityLeaveAllowance',NEW.RowID,'',NEW.MaternityLeaveAllowance,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'LeavePerPayPeriod',NEW.RowID,'',NEW.LeavePerPayPeriod,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'SickLeavePerPayPeriod',NEW.RowID,'',NEW.SickLeavePerPayPeriod,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'MaternityLeavePerPayPeriod',NEW.RowID,'',NEW.MaternityLeavePerPayPeriod,'Insert');






SELECT EXISTS(SELECT RowID FROM listofval WHERE Type='Employment Status' AND Active='Yes' AND DisplayValue=NEW.EmploymentStatus) INTO exist_empstatus;

IF exist_empstatus = 0 AND NEW.EmploymentStatus!='' THEN

    INSERT INTO listofval (`Type`,DisplayValue,Active,CreatedBy,Created,LastUpdBy,LastUpd) VALUES ('Employment Status',NEW.EmploymentStatus,'Yes',NEW.CreatedBy,CURRENT_TIMESTAMP(),NEW.CreatedBy,CURRENT_TIMESTAMP()) ON DUPLICATE KEY UPDATE LastUpd=CURRENT_TIMESTAMP();

END IF;

SELECT EXISTS(SELECT RowID FROM listofval WHERE Type='Employee Type' AND Active='Yes' AND DisplayValue=NEW.EmployeeType) INTO exist_emptype;

IF exist_emptype = 0 AND NEW.EmployeeType!='' THEN

    INSERT INTO listofval (`Type`,DisplayValue,Active,CreatedBy,Created,LastUpdBy,LastUpd) VALUES ('Employee Type',NEW.EmployeeType,'Yes',NEW.CreatedBy,CURRENT_TIMESTAMP(),NEW.CreatedBy,CURRENT_TIMESTAMP()) ON DUPLICATE KEY UPDATE LastUpd=CURRENT_TIMESTAMP();

END IF;



SELECT EXISTS(SELECT RowID FROM listofval WHERE Type='Salutation' AND Active='Yes' AND DisplayValue=NEW.Salutation) INTO exist_empsalutat;

IF exist_empsalutat = 0 AND NEW.Salutation!='' THEN

    INSERT INTO listofval (`Type`,DisplayValue,Active,CreatedBy,Created,LastUpdBy,LastUpd) VALUES ('Salutation',NEW.Salutation,'Yes',NEW.CreatedBy,CURRENT_TIMESTAMP(),NEW.CreatedBy,CURRENT_TIMESTAMP()) ON DUPLICATE KEY UPDATE LastUpd=CURRENT_TIMESTAMP();

END IF;


IF NEW.BankName IS NOT NULL THEN

    SELECT `INSUPD_listofval`(NEW.BankName,NEW.BankName, 'Bank Names',NEW.BankName, 'Yes', NEW.BankName, NEW.CreatedBy, '1') INTO anyint;

END IF;

SELECT pos.DivisionId FROM position pos WHERE pos.RowID=IFNULL(NEW.PositionID,0) AND pos.OrganizationID=NEW.OrganizationID INTO div_RowID;

IF div_RowID IS NOT NULL THEN



    SELECT e.RowID FROM employee e INNER JOIN position pos ON pos.DivisionId=div_RowID AND pos.OrganizationID=e.OrganizationID WHERE e.OrganizationID=NEW.OrganizationID LIMIT 1 INTO dept_mate_empRowID;

    INSERT INTO `employeeshiftbyday`
    (
        OrganizationID
        ,Created
        ,CreatedBy
        ,EmployeeID
        ,ShiftID
        ,NameOfDay
        ,NightShift
        ,RestDay
        ,OrderByValue
        ,IsEncodedByDay
        ,UniqueShift
    ) SELECT
        NEW.OrganizationID
        ,CURRENT_TIMESTAMP()
        ,NEW.CreatedBy
        ,NEW.RowID
        ,esd.ShiftID
        ,esd.NameOfDay
        ,esd.NightShift
        ,esd.RestDay
        ,esd.OrderByValue
        ,esd.IsEncodedByDay
        ,esd.UniqueShift
        FROM employeeshiftbyday esd
        WHERE esd.OrganizationID=NEW.OrganizationID
        AND esd.EmployeeID=dept_mate_empRowID
        ORDER BY esd.OrderByValue
        LIMIT 7;

        SELECT OrderByValue,SampleDate FROM employeeshiftbyday WHERE EmployeeID=NEW.RowID AND OrganizationID=NEW.OrganizationID AND OriginDay=0 LIMIT 1 INTO ordervaloforigin,the_date;

        UPDATE employeeshiftbyday esb
        SET esb.OriginDay = esb.OrderByValue - ordervaloforigin
        WHERE esb.EmployeeID=NEW.RowID
        AND esb.OrganizationID=NEW.OrganizationID
        ORDER BY esb.OrderByValue;

        UPDATE employeeshiftbyday esb
        SET esb.SampleDate=ADDDATE(the_date,esb.OriginDay)
        WHERE esb.EmployeeID=NEW.RowID
        AND esb.OrganizationID=NEW.OrganizationID
        ORDER BY esb.OrderByValue;

        SET @uniqueshift = 0;

        SET @indxcount = 0;

        UPDATE employeeshiftbyday esd
        INNER JOIN (
                        SELECT *
                        ,(@indxcount := @indxcount + 1) AS IncrementUnique
                        FROM (
                                SELECT esd.RowID
                                ,esd.ShiftID
                                FROM employeeshiftbyday esd
                                WHERE esd.EmployeeID=NEW.RowID
                                AND esd.OrganizationID=NEW.OrganizationID
                                AND esd.ShiftID IS NOT NULL
                                GROUP BY esd.ShiftID
                                ORDER BY esd.SampleDate
                        ) i
        ) esdd ON esdd.ShiftID = esd.ShiftID
        SET esd.UniqueShift=esdd.IncrementUnique
        WHERE esd.EmployeeID=NEW.RowID
        AND esd.OrganizationID=NEW.OrganizationID;

        INSERT INTO employeefirstweekshift
        (
            OrganizationID
            ,CreatedBy
            ,EmployeeID
            ,ShiftID
            ,EffectiveFrom
            ,EffectiveTo
            ,NightShift
            ,RestDay
            ,IsEncodedByDay
        )   SELECT esd.OrganizationID
            ,esd.CreatedBy
            ,esd.EmployeeID
            ,esd.ShiftID
            ,esd.SampleDate
            ,ADDDATE(esd.SampleDate,INTERVAL (COUNT(RowID) - 1) DAY)
            ,esd.NightShift
            ,esd.RestDay
            ,esd.IsEncodedByDay
            FROM employeeshiftbyday esd
            WHERE esd.EmployeeID=NEW.RowID
            GROUP BY esd.ShiftID
            HAVING esd.OrganizationID = NEW.OrganizationID;

END IF;

SET @int_any = 0;

SELECT `string_chopchop`(RowID, EmployeeID)
,`string_chopchop`(RowID, FirstName)
,`string_chopchop`(RowID, LastName)
,`string_chopchop`(RowID, MiddleName)
,`string_chopchop`(RowID, Nickname)
FROM employee WHERE RowID=NEW.RowID INTO @int_any,@int_any,@int_any,@int_any,@int_any;

CALL AUTOINS_leaveledger(NEW.OrganizationID, NEW.RowID, NEW.CreatedBy);

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_organization
DROP TRIGGER IF EXISTS `AFTINS_organization`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_organization` AFTER INSERT ON `organization` FOR EACH ROW BEGIN



DECLARE indx INT(11) DEFAULT 0;

DECLARE view_count INT(11);

DECLARE view_name VARCHAR(50);

DECLARE view_ID INT(11);

DECLARE userPositionID INT(11);

DECLARE INS_audit_ID INT(11);

DECLARE view_RowID INT(11);

DECLARE orgIDOfCreator INT(11);


SELECT p.RowID FROM user u LEFT JOIN position p ON p.RowID=u.PositionID WHERE u.RowID=NEW.CreatedBy LIMIT 1 INTO userPositionID;



INSERT INTO `view`
(
    ViewName
    ,OrganizationID
) SELECT v.ViewName
    ,NEW.RowID
    FROM `view` v
    GROUP BY v.ViewName
    ORDER BY v.ViewName;

INSERT INTO payperiod
(
    OrganizationID
    ,Created
    ,CreatedBy
    ,PayFromDate
    ,PayToDate
    ,TotalGrossSalary
    ,`Year`
    ,`Month`
    ,`Half`
    ,OrdinalValue
) SELECT
    NEW.RowID
    ,CURRENT_TIMESTAMP()
    ,NEW.CreatedBy
    ,PayFromDate
    ,PayToDate
    ,TotalGrossSalary
    ,`Year`
    ,`Month`
    ,`Half`
    ,OrdinalValue
FROM payperiod
GROUP BY PayFromDate,PayToDate
ORDER BY PayFromDate,PayToDate
ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP();

INSERT INTO payrate
(
    OrganizationID
    ,Created
    ,CreatedBy
    ,DayBefore
    ,`Date`
    ,PayType
    ,Description
    ,`PayRate`
    ,OvertimeRate
    ,NightDifferentialRate
    ,NightDifferentialOTRate
    ,RestDayRate
    ,RestDayOvertimeRate
) SELECT
    NEW.RowID
    ,CURRENT_TIMESTAMP()
    ,NEW.CreatedBy
    ,DayBefore
    ,`Date`
    ,PayType
    ,Description
    ,`PayRate`
    ,OvertimeRate
    ,NightDifferentialRate
    ,NightDifferentialOTRate
    ,RestDayRate
    ,RestDayOvertimeRate
FROM payrate
GROUP BY `Date`
ORDER BY `Date`
ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP();

    SELECT OrganizationID FROM user WHERE RowID=NEW.CreatedBy LIMIT 1 INTO orgIDOfCreator;


INSERT INTO category
(
    CategoryID
    ,CategoryName
    ,OrganizationID
    ,`Catalog`
    ,CatalogID
)   SELECT
    CategoryID
    ,CategoryName
    ,NEW.RowID
    ,`Catalog`
    ,CatalogID
    FROM category
    GROUP BY CategoryName
ON
DUPLICATE
KEY
UPDATE
    OrganizationID=NEW.RowID;


INSERT INTO product
(
    Name
    ,OrganizationID
    ,Description
    ,PartNo
    ,Created
    ,LastUpd
    ,LastArrivedQty
    ,CreatedBy
    ,LastUpdBy
    ,`Category`
    ,CategoryID
    ,AccountingAccountID
    ,`Catalog`
    ,Comments
    ,`Status`
    ,UnitPrice
    ,VATPercent
    ,FirstBillFlag
    ,SecondBillFlag
    ,ThirdBillFlag
    ,PDCFlag
    ,MonthlyBIllFlag
    ,PenaltyFlag
    ,WithholdingTaxPercent
    ,CostPrice
    ,UnitOfMeasure
    ,SKU
    ,Image
    ,LeadTime
    ,BarCode
    ,BusinessUnitID
    ,LastRcvdFromShipmentDate
    ,LastRcvdFromShipmentCount
    ,TotalShipmentCount
    ,BookPageNo
    ,BrandName
    ,LastPurchaseDate
    ,LastSoldDate
    ,LastSoldCount
    ,ReOrderPoint
    ,AllocateBelowSafetyFlag
    ,Strength
    ,UnitsBackordered
    ,UnitsBackorderAsOf
    ,DateLastInventoryCount
    ,TaxVAT
    ,WithholdingTax
    ,COAId
    ,ActiveData
)  SELECT
    p.Name
    ,NEW.RowID
    ,p.Description
    ,p.PartNo
    ,CURRENT_TIMESTAMP()
    ,CURRENT_TIMESTAMP()
    ,p.LastArrivedQty
    ,NEW.CreatedBy
    ,NEW.LastUpdBy
    ,p.`Category`
    ,(SELECT RowID FROM category WHERE OrganizationID=NEW.RowID AND CategoryName=p.Category)
    ,p.AccountingAccountID
    ,p.`Catalog`
    ,p.Comments
    ,p.`Status`
    ,p.UnitPrice
    ,p.VATPercent
    ,p.FirstBillFlag
    ,p.SecondBillFlag
    ,p.ThirdBillFlag
    ,p.PDCFlag
    ,p.MonthlyBIllFlag
    ,p.PenaltyFlag
    ,p.WithholdingTaxPercent
    ,p.CostPrice
    ,p.UnitOfMeasure
    ,p.SKU
    ,p.Image
    ,p.LeadTime
    ,p.BarCode
    ,p.BusinessUnitID
    ,p.LastRcvdFromShipmentDate
    ,p.LastRcvdFromShipmentCount
    ,p.TotalShipmentCount
    ,p.BookPageNo
    ,p.BrandName
    ,p.LastPurchaseDate
    ,p.LastSoldDate
    ,p.LastSoldCount
    ,p.ReOrderPoint
    ,p.AllocateBelowSafetyFlag
    ,p.Strength
    ,p.UnitsBackordered
    ,p.UnitsBackorderAsOf
    ,p.DateLastInventoryCount
    ,p.TaxVAT
    ,p.WithholdingTax
    ,p.COAId
    ,p.ActiveData
FROM product p
LEFT JOIN category c ON c.CategoryName=p.Category
GROUP BY p.PartNo
ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP();


INSERT INTO shift
(
    OrganizationID
    ,CreatedBy
    ,Created
    ,TimeFrom
    ,TimeTo
) VALUES (
    NEW.RowID
    ,NEW.CreatedBy
    ,CURRENT_TIMESTAMP()
    ,NEW.NightShiftTimeFrom
    ,NEW.NightShiftTimeTo
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP();

	
	
	INSERT INTO `division` (Name,TradeName,OrganizationID,MainPhone,FaxNumber,BusinessAddress,ContactName,EmailAddress,AltEmailAddress,AltPhone,URL,TINNo,Created,CreatedBy,DivisionType,GracePeriod,WorkDaysPerYear,PhHealthDeductSched,HDMFDeductSched,SSSDeductSched,WTaxDeductSched,DefaultVacationLeave,DefaultSickLeave,DefaultMaternityLeave,DefaultPaternityLeave,DefaultOtherLeave,PayFrequencyID,PhHealthDeductSchedAgency,HDMFDeductSchedAgency,SSSDeductSchedAgency,WTaxDeductSchedAgency,DivisionUniqueID) VALUES ( 'Any location', '', NEW.RowID, '', '', '', '', '', '', '', '', '', CURRENT_TIMESTAMP(), NEW.CreatedBy, 'Department', 15.00, 313, 'Per pay period', 'Per pay period', 'Per pay period', 'Per pay period', 40.00, 40.00, 40.00, 40.00, 40.00, 1, 'Per pay period', 'Per pay period', 'Per pay period', 'Per pay period',2);SELECT @@Identity AS ID INTO INS_audit_ID;
	
	INSERT INTO `division` (Name,TradeName,OrganizationID,MainPhone,FaxNumber,BusinessAddress,ContactName,EmailAddress,AltEmailAddress,AltPhone,URL,TINNo,Created,CreatedBy,DivisionType,GracePeriod,WorkDaysPerYear,PhHealthDeductSched,HDMFDeductSched,SSSDeductSched,WTaxDeductSched,DefaultVacationLeave,DefaultSickLeave,DefaultMaternityLeave,DefaultPaternityLeave,DefaultOtherLeave,PayFrequencyID,PhHealthDeductSchedAgency,HDMFDeductSchedAgency,SSSDeductSchedAgency,WTaxDeductSchedAgency,DivisionUniqueID,ParentDivisionID) SELECT 'Default division', '', NEW.RowID, '', '', '', '', '', '', '', '', '', CURRENT_TIMESTAMP(), NEW.CreatedBy, 'Department', 15.00, 313, 'Per pay period', 'Per pay period', 'Per pay period', 'Per pay period', 40.00, 40.00, 40.00, 40.00, 40.00, 1, 'Per pay period', 'Per pay period', 'Per pay period', 'Per pay period',2,INS_audit_ID;
	
	
INSERT INTO `position`
(
	PositionName
	,Created
	,CreatedBy
	,OrganizationID
	,DivisionId
) SELECT
	pos.PositionName
	,CURRENT_TIMESTAMP()
	,NEW.CreatedBy
	,NEW.RowID
	,dd.RowID
	FROM `position` pos
	# LEFT JOIN `division` d ON d.RowID=pos.DivisionId AND d.OrganizationID=pos.OrganizationID
	# LEFT JOIN `division` dd ON dd.Name=d.Name AND dd.OrganizationID=NEW.RowID
	LEFT JOIN `division` dd ON dd.Name='Default division' AND dd.OrganizationID=NEW.RowID
	GROUP BY pos.PositionName
ON
DUPLICATE
KEY
UPDATE
	LastUpd=CURRENT_TIMESTAMP()
	,LastUpdBy=NEW.CreatedBy;

INSERT INTO position_view
(
    PositionID
    ,ViewID
    ,Creates
    ,OrganizationID
    ,ReadOnly
    ,Updates
    ,Deleting
    ,Created
    ,CreatedBy
    ,LastUpdBy
) SELECT
    pos.RowID
    ,v.RowID
    ,'N'
    ,NEW.RowID
    ,'Y'
    ,'N'
    ,'N'
    ,CURRENT_TIMESTAMP()
    ,NEW.CreatedBy
    ,NEW.CreatedBy
    FROM `view` v
    LEFT JOIN (SELECT * FROM position GROUP BY PositionName) pos ON pos.RowID > 0 AND pos.RowID != IFNULL(userPositionID,0)
    WHERE v.OrganizationID=NEW.RowID
UNION
    SELECT
    pos.RowID
    ,v.RowID
    ,'Y'
    ,NEW.RowID
    ,'N'
    ,'Y'
    ,'Y'
    ,CURRENT_TIMESTAMP()
    ,NEW.CreatedBy
    ,NEW.CreatedBy
    FROM `view` v
    INNER JOIN position pos ON pos.RowID = IFNULL(userPositionID,0)
    WHERE v.OrganizationID=NEW.RowID
ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP();

    SELECT RowID FROM `view` WHERE ViewName='Organization' AND OrganizationID=orgIDOfCreator INTO view_RowID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'Name',NEW.RowID,'',NEW.Name,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'TradeName',NEW.RowID,'',NEW.TradeName,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'PrimaryAddressID',NEW.RowID,'',NEW.PrimaryAddressID,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'PrimaryContactID',NEW.RowID,'',NEW.PrimaryContactID,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'PremiseAddressID',NEW.RowID,'',NEW.PremiseAddressID,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'MainPhone',NEW.RowID,'',NEW.MainPhone,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'FaxNumber',NEW.RowID,'',NEW.FaxNumber,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'EmailAddress',NEW.RowID,'',NEW.EmailAddress,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'AltEmailAddress',NEW.RowID,'',NEW.AltEmailAddress,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'AltPhone',NEW.RowID,'',NEW.AltPhone,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'URL',NEW.RowID,'',NEW.URL,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'TINNo',NEW.RowID,'',NEW.TINNo,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'BankAccountNo',NEW.RowID,'',NEW.BankAccountNo,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'BankName',NEW.RowID,'',NEW.BankName,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'OrganizationType',NEW.RowID,'',NEW.OrganizationType,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'TotalFloorArea',NEW.RowID,'',NEW.TotalFloorArea,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'MinimumWater',NEW.RowID,'',NEW.MinimumWater,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'VacationLeaveDays',NEW.RowID,'',NEW.VacationLeaveDays,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'SickLeaveDays',NEW.RowID,'',NEW.SickLeaveDays,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'MaternityLeaveDays',NEW.RowID,'',NEW.MaternityLeaveDays,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'OthersLeaveDays',NEW.RowID,'',NEW.OthersLeaveDays,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'STPFlag',NEW.RowID,'',NEW.STPFlag,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'PayFrequencyID',NEW.RowID,'',NEW.PayFrequencyID,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'PhilhealthDeductionSchedule',NEW.RowID,'',NEW.PhilhealthDeductionSchedule,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'SSSDeductionSchedule',NEW.RowID,'',NEW.SSSDeductionSchedule,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'PagIbigDeductionSchedule',NEW.RowID,'',NEW.PagIbigDeductionSchedule,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'ReportText',NEW.RowID,'',NEW.ReportText,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'NightDifferentialTimeFrom',NEW.RowID,'',NEW.NightDifferentialTimeFrom,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'NightDifferentialTimeTo',NEW.RowID,'',NEW.NightDifferentialTimeTo,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'NightShiftTimeFrom',NEW.RowID,'',NEW.NightShiftTimeFrom,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'NightShiftTimeTo',NEW.RowID,'',NEW.NightShiftTimeTo,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'AllowNegativeLeaves',NEW.RowID,'',NEW.AllowNegativeLeaves,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'LimitedAccess',NEW.RowID,'',NEW.LimitedAccess,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'WorkDaysPerYear',NEW.RowID,'',NEW.WorkDaysPerYear,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'RDOCode',NEW.RowID,'',NEW.RDOCode,'Insert') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,orgIDOfCreator,view_RowID,'ZIPCode',NEW.RowID,'',NEW.ZIPCode,'Insert') INTO INS_audit_ID;

    UPDATE product p LEFT JOIN product pp ON pp.PartNo=SUBSTRING_INDEX(p.PartNo,' ',1) AND pp.OrganizationID=NEW.RowID SET
    p.LastSoldCount=pp.RowID
    ,p.LastUpd=CURRENT_TIMESTAMP()
    ,p.LastUpdBy=NEW.CreatedBy
    WHERE p.OrganizationID=NEW.RowID
    AND p.Category='Loan Interest';



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_payphilhealth
DROP TRIGGER IF EXISTS `AFTINS_payphilhealth`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_payphilhealth` AFTER INSERT ON `payphilhealth` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

DECLARE OrgRowID INT(11);

SET OrgRowID = 2;

SELECT RowID FROM `view` WHERE ViewName='PhilHealth Contribution Table' AND OrganizationID=OrgRowID LIMIT 1 INTO viewID;


INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'SalaryBracket',NEW.RowID,'',NEW.SalaryBracket,'Insert');



INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'SalaryRangeTo',NEW.RowID,'',NEW.SalaryRangeTo,'Insert');



INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'SalaryBase',NEW.RowID,'',NEW.SalaryBase,'Insert');



INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'TotalMonthlyPremium',NEW.RowID,'',NEW.TotalMonthlyPremium,'Insert');



INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'EmployeeShare',NEW.RowID,'',NEW.EmployeeShare,'Insert');



INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'EmployerShare',NEW.RowID,'',NEW.EmployerShare,'Insert');

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_paysocialsecurity
DROP TRIGGER IF EXISTS `AFTINS_paysocialsecurity`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_paysocialsecurity` AFTER INSERT ON `paysocialsecurity` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

DECLARE OrgRowID INT(11);

SET OrgRowID = 2;

SELECT RowID FROM `view` WHERE ViewName='SSS Contribution Table' AND OrganizationID=OrgRowID LIMIT 1 INTO viewID;


INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'RangeFromAmount',NEW.RowID,'',NEW.RangeFromAmount,'Insert');



INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'RangeToAmount',NEW.RowID,'',NEW.RangeToAmount,'Insert');



INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'MonthlySalaryCredit',NEW.RowID,'',NEW.MonthlySalaryCredit,'Insert');



INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'EmployeeContributionAmount',NEW.RowID,'',NEW.EmployeeContributionAmount,'Insert');



INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'EmployerContributionAmount',NEW.RowID,'',NEW.EmployerContributionAmount,'Insert');



INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'EmployeeECAmount',NEW.RowID,'',NEW.EmployeeECAmount,'Insert');

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_paystubadjustmentactual
DROP TRIGGER IF EXISTS `AFTINS_paystubadjustmentactual`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_paystubadjustmentactual` AFTER INSERT ON `paystubadjustmentactual` FOR EACH ROW BEGIN

    UPDATE paystubactual ps
    SET
        ps.TotalNetSalary=(ps.TotalNetSalary + (NEW.PayAmount)),
        ps.TotalAdjustments=(ps.TotalAdjustments + (NEW.PayAmount))
    WHERE ps.RowID=NEW.PayStubID;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_paystubbonus
DROP TRIGGER IF EXISTS `AFTINS_paystubbonus`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_paystubbonus` AFTER INSERT ON `paystubbonus` FOR EACH ROW BEGIN

 INSERT INTO bonusloandeduction
 (
     OrganizationID
     ,CreatedBy
     ,LoanSchedID
     ,PayPeriodID
     ,DeductionLoanAmount
 ) SELECT NEW.OrganizationID
     ,NEW.CreatedBy
	  ,els.RowID
	  ,NEW.PayPeriodID
	  ,els.BonusPotentialPaymentForLoan
     FROM employeeloanschedule els
     
     INNER JOIN employeebonus eb
             ON eb.RowID = els.BonusID
                AND eb.EmployeeID = els.EmployeeID
                AND eb.OrganizationID = els.OrganizationID
                AND (eb.EffectiveStartDate >= NEW.PayFromDate OR eb.EffectiveEndDate >= NEW.PayFromDate)
                AND (eb.EffectiveStartDate <= NEW.PayToDate OR eb.EffectiveEndDate <= NEW.PayToDate)
      
     WHERE els.OrganizationID=NEW.OrganizationID
     
     AND els.LoanPayPeriodLeft >= 1
     # AND els.`Status`='In Progress'
     AND els.EmployeeID = NEW.EmployeeID
     AND els.OrganizationID = NEW.OrganizationID
     # AND els.EmployeeID IS NULL
     # AND els.DeductionSchedule IN ('First half','Per pay period')
     # AND (els.DedEffectiveDateFrom >= NEW.PayFromDate OR els.DedEffectiveDateTo >= NEW.PayFromDate)
     # AND (els.DedEffectiveDateFrom <= NEW.PayToDate OR els.DedEffectiveDateTo <= NEW.PayToDate)
 ON
 DUPLICATE
 KEY
 UPDATE
     LastUpd=CURRENT_TIMESTAMP()
     ,LastUpdBy=NEW.CreatedBy;
  
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_paystub_then_paystubitem
DROP TRIGGER IF EXISTS `AFTINS_paystub_then_paystubitem`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_paystub_then_paystubitem` AFTER INSERT ON `paystub` FOR EACH ROW BEGIN
DECLARE product_rowid INT(11);

DECLARE e_startdate DATE;
DECLARE e_type VARCHAR(50);

DECLARE IsFirstTimeSalary BOOLEAN;

DECLARE totalWorkAmount DECIMAL(15,4);
DECLARE empsalRowID INT(11);

DECLARE actualrate DECIMAL(11,6);
DECLARE actualgross DECIMAL(15,4);

DECLARE pftype VARCHAR(50);

DECLARE basicAmount DECIMAL(15, 4);
DECLARE totalAdditionalPay DECIMAL(15, 4);
DECLARE totalDeductions DECIMAL(15, 4);

DECLARE regularPay DECIMAL(15, 4);
DECLARE overtimePay DECIMAL(15, 4);
DECLARE nightDiffPay DECIMAL(15, 4);
DECLARE nightDiffOvertimePay DECIMAL(15, 4);
DECLARE v_restDayPay DECIMAL(15, 4);
DECLARE v_restDayOTPay DECIMAL(15, 4);
DECLARE leavePay DECIMAL(15, 4);
DECLARE v_specialHolidayPay DECIMAL(15, 4);
DECLARE v_specialHolidayOTPay DECIMAL(15, 4);
DECLARE v_regularHolidayPay DECIMAL(15, 4);
DECLARE v_regularHolidayOTPay DECIMAL(15, 4);
DECLARE holidayPay DECIMAL(15, 4);
DECLARE lateDeduction DECIMAL(15, 4);
DECLARE undertimeDeduction DECIMAL(15, 4);
DECLARE absenceDeduction DECIMAL(15, 4);

DECLARE $vacationLeaveHours DECIMAL(15, 4);
DECLARE $sickLeaveHours DECIMAL(15, 4);
DECLARE $otherLeaveHours DECIMAL(15, 4);
DECLARE $maternityLeaveHours DECIMAL(15, 4);

SELECT GET_employeeundeclaredsalarypercent(
    NEW.EmployeeID,
    NEW.OrganizationID,
    NEW.PayFromDate,
    NEW.PayToDate
)
INTO actualrate;

SELECT
    e.StartDate,
    e.EmployeeType,
    pf.PayFrequencyType
FROM employee e
INNER JOIN payfrequency pf
    ON pf.RowID = e.PayFrequencyID
WHERE e.RowID = NEW.EmployeeID
    AND e.OrganizationID = NEW.OrganizationID
INTO
    e_startdate,
    e_type,
    pftype;

SELECT (e_startdate BETWEEN NEW.PayFromDate AND NEW.PayToDate)
INTO IsFirstTimeSalary;

SELECT
    SUM(t.RegularHoursAmount),
    SUM(t.OvertimeHoursAmount),
    SUM(t.NightDiffHoursAmount),
    SUM(t.NightDiffOTHoursAmount),
    SUM(t.RestDayAmount),
    SUM(t.RestDayOTPay),
    SUM(t.SpecialHolidayPay),
    SUM(t.SpecialHolidayOTPay),
    SUM(t.RegularHolidayPay),
    SUM(t.RegularHolidayOTPay),
    SUM(t.HolidayPayAmount),
    SUM(t.Leavepayment),
    SUM(t.HoursLateAmount),
    SUM(t.UndertimeHoursAmount),
    SUM(t.Absent),
    SUM(TotalDayPay),
    SUM(t.VacationLeaveHours),
    SUM(t.SickLeaveHours),
    SUM(t.MaternityLeaveHours),
    SUM(t.OtherLeaveHours),
    t.EmployeeSalaryID
FROM employeetimeentryactual t
WHERE t.OrganizationID = NEW.OrganizationID AND
    t.EmployeeID = NEW.EmployeeID AND
    t.`Date` BETWEEN NEW.PayFromDate AND NEW.PayToDate
INTO
    regularPay,
    overtimePay,
    nightDiffPay,
    nightDiffOvertimePay,
    v_restDayPay,
    v_restDayOTPay,
    v_specialHolidayPay,
    v_specialHolidayOTPay,
    v_regularHolidayPay,
    v_regularHolidayOTPay,
    holidayPay,
    leavePay,
    lateDeduction,
    undertimeDeduction,
    absenceDeduction,
    totalWorkAmount,
    $vacationLeaveHours,
    $sickLeaveHours,
    $maternityLeaveHours,
    $otherLeaveHours,
    empsalRowID;

IF e_type = 'Fixed' THEN

    SELECT es.BasicPay
    FROM employeesalary es
    WHERE es.EmployeeID = NEW.EmployeeID
        AND es.OrganizationID = NEW.OrganizationID
        AND (es.EffectiveDateFrom >= NEW.PayFromDate OR IFNULL(es.EffectiveDateTo,NEW.PayToDate) >= NEW.PayFromDate)
        AND (es.EffectiveDateFrom <= NEW.PayToDate OR IFNULL(es.EffectiveDateTo,NEW.PayToDate) <= NEW.PayToDate)
    ORDER BY es.EffectiveDateFrom DESC
    LIMIT 1
    INTO totalWorkAmount;

    SET totalWorkAmount = IFNULL(totalWorkAmount, 0) * (IF(actualrate < 1, (actualrate + 1), actualrate));
    SET totalWorkAmount = totalWorkAmount + holidayPay;

ELSEIF e_type = 'Monthly' AND IsFirstTimeSalary THEN

    SELECT
        SUM(TotalDayPay),
        EmployeeSalaryID
    FROM employeetimeentryactual
    WHERE OrganizationID = NEW.OrganizationID
        AND EmployeeID = NEW.EmployeeID
        AND `Date` BETWEEN NEW.PayFromDate AND NEW.PayToDate
    INTO
        totalWorkAmount,
        empsalRowID;

    IF totalWorkAmount IS NULL THEN

        SELECT
            SUM(TotalDayPay),
            EmployeeSalaryID
        FROM employeetimeentry
        WHERE OrganizationID = NEW.OrganizationID
            AND EmployeeID = NEW.EmployeeID
            AND `Date` BETWEEN NEW.PayFromDate AND NEW.PayToDate
        INTO
            totalWorkAmount,
            empsalRowID;

        SET totalWorkAmount = IFNULL(totalWorkAmount,0);

        SELECT totalWorkAmount + (totalWorkAmount * actualrate)
        INTO totalWorkAmount;

    END IF;

    SET totalWorkAmount = IFNULL(totalWorkAmount, 0);

ELSEIF e_type = 'Monthly' AND NOT IsFirstTimeSalary THEN

    SELECT (TrueSalary / PAYFREQUENCY_DIVISOR(pftype))
    FROM employeesalary es
    WHERE es.EmployeeID = NEW.EmployeeID AND
        es.OrganizationID = NEW.OrganizationID AND
        (es.EffectiveDateFrom >= NEW.PayFromDate OR IFNULL(es.EffectiveDateTo,CURDATE()) >= NEW.PayFromDate) AND
        (es.EffectiveDateFrom <= NEW.PayToDate OR IFNULL(es.EffectiveDateTo,CURDATE()) <= NEW.PayToDate)
    ORDER BY es.EffectiveDateFrom DESC
    LIMIT 1
    INTO basicAmount;

    SET totalAdditionalPay =
        overtimePay +
        nightDiffPay +
        nightDiffOvertimePay +
        v_restDayPay +
        v_restDayOTPay +
        v_specialHolidayPay +
        v_specialHolidayOTPay +
        v_regularHolidayPay +
        v_regularHolidayOTPay;

    SET totalDeductions = lateDeduction + undertimeDeduction + absenceDeduction;

    SET totalWorkAmount = basicAmount + totalAdditionalPay - totalDeductions;
    SET totalWorkAmount = IFNULL(totalWorkAmount, 0);

ELSE

    IF totalWorkAmount IS NULL THEN

        SELECT
            SUM(TotalDayPay),
            EmployeeSalaryID
        FROM employeetimeentry
        WHERE OrganizationID = NEW.OrganizationID AND
            EmployeeID = NEW.EmployeeID AND
            `Date` BETWEEN NEW.PayFromDate AND NEW.PayToDate
        INTO
            totalWorkAmount,
            empsalRowID;

        SET totalWorkAmount = IFNULL(totalWorkAmount, 0);

        SELECT totalWorkAmount + (totalWorkAmount * actualrate)
        INTO totalWorkAmount;

    END IF;

    SET totalWorkAmount = IFNULL(totalWorkAmount, 0);

END IF;

UPDATE employee e
SET e.LeaveBalance = GREATEST(e.LeaveBalance - $vacationLeaveHours, 0),
    e.SickLeaveBalance = GREATEST(e.SickLeaveBalance - $sickLeaveHours, 0),
    e.MaternityLeaveBalance = GREATEST(e.MaternityLeaveBalance - $maternityLeaveHours, 0),
    e.OtherLeaveBalance = GREATEST(e.OtherLeaveBalance - $otherLeaveHours, 0)
WHERE e.RowID = NEW.EmployeeID;

SET actualgross = totalWorkAmount + NEW.TotalAllowance + NEW.TotalBonus;

SET @totaladjust_actual = IFNULL(
    (
        SELECT SUM(pa.PayAmount)
        FROM paystubadjustmentactual pa
        WHERE pa.PayStubID=NEW.RowID
    ),
    0
);

INSERT INTO paystubactual
(
    RowID,
    OrganizationID,
    PayPeriodID,
    EmployeeID,
    TimeEntryID,
    PayFromDate,
    PayToDate,
    RegularPay,
    OvertimePay,
    NightDiffPay,
    NightDiffOvertimePay,
    RestDayPay,
    RestDayOTPay,
    SpecialHolidayPay,
    SpecialHolidayOTPay,
    RegularHolidayPay,
    RegularHolidayOTPay,
    HolidayPay,
    LeavePay,
    LateDeduction,
    UndertimeDeduction,
    AbsenceDeduction,
    TotalGrossSalary,
    TotalNetSalary,
    TotalTaxableSalary,
    TotalEmpSSS,
    TotalEmpWithholdingTax,
    TotalCompSSS,
    TotalEmpPhilhealth,
    TotalCompPhilhealth,
    TotalEmpHDMF,
    TotalCompHDMF,
    TotalVacationDaysLeft,
    TotalLoans,
    TotalBonus,
    TotalAllowance,
    TotalAdjustments,
    ThirteenthMonthInclusion,
    FirstTimeSalary
)
VALUES (
    NEW.RowID,
    NEW.OrganizationID,
    NEW.PayPeriodID,
    NEW.EmployeeID,
    NEW.TimeEntryID,
    NEW.PayFromDate,
    NEW.PayToDate,
    regularPay,
    overtimePay,
    nightDiffPay,
    nightDiffOvertimePay,
    v_restDayPay,
    restDayOTPay,
    v_specialHolidayPay,
    v_specialHolidayOTPay,
    v_regularHolidayPay,
    v_regularHolidayOTPay,
    holidayPay,
    leavePay,
    lateDeduction,
    undertimeDeduction,
    absenceDeduction,
    actualgross,
    (actualgross - (NEW.TotalEmpSSS + NEW.TotalEmpPhilhealth + NEW.TotalEmpHDMF + NEW.TotalEmpWithholdingTax)) - NEW.TotalLoans + (NEW.TotalAdjustments + @totaladjust_actual),
    NEW.TotalTaxableSalary + ((NEW.TotalTaxableSalary + NEW.TotalEmpSSS + NEW.TotalEmpPhilhealth + NEW.TotalEmpHDMF) * actualrate),
    NEW.TotalEmpSSS,
    NEW.TotalEmpWithholdingTax,
    NEW.TotalCompSSS,
    NEW.TotalEmpPhilhealth,
    NEW.TotalCompPhilhealth,
    NEW.TotalEmpHDMF,
    NEW.TotalCompHDMF,
    NEW.TotalVacationDaysLeft,
    NEW.TotalLoans,
    NEW.TotalBonus,
    NEW.TotalAllowance,
    (NEW.TotalAdjustments + @totaladjust_actual),
    NEW.ThirteenthMonthInclusion,
    NEW.FirstTimeSalary
)
ON DUPLICATE KEY
UPDATE
    OrganizationID = NEW.OrganizationID,
    PayPeriodID = NEW.PayPeriodID,
    EmployeeID = NEW.EmployeeID,
    TimeEntryID = NEW.TimeEntryID,
    PayFromDate = NEW.PayFromDate,
    PayToDate = NEW.PayToDate,
    RegularPay = regularPay,
    OvertimePay = overtimePay,
    NightDiffPay = nightDiffPay,
    NightDiffOvertimePay = nightDiffOvertimePay,
    RestDayPay = v_restDayPay,
    RestDayOTPay = v_restDayOTPay,
    SpecialHolidayPay = v_specialHolidayPay,
    SpecialHolidayOTPay = v_specialHolidayOTPay,
    RegularHolidayPay = v_regularHolidayPay,
    RegularHolidayOTPay = v_regularHolidayOTPay,
    HolidayPay = holidayPay,
    LeavePay = leavePay,
    LateDeduction = lateDeduction,
    UndertimeDeduction = undertimeDeduction,
    AbsenceDeduction = absenceDeduction,
    TotalGrossSalary = actualgross,
    TotalNetSalary = (actualgross - (NEW.TotalEmpSSS + NEW.TotalEmpPhilhealth + NEW.TotalEmpHDMF + NEW.TotalEmpWithholdingTax)) - NEW.TotalLoans + (NEW.TotalAdjustments + @totaladjust_actual),
    TotalTaxableSalary = NEW.TotalTaxableSalary,
    TotalEmpSSS = NEW.TotalEmpSSS,
    TotalEmpWithholdingTax = NEW.TotalEmpWithholdingTax,
    TotalCompSSS = NEW.TotalCompSSS,
    TotalEmpPhilhealth = NEW.TotalEmpPhilhealth,
    TotalCompPhilhealth = NEW.TotalCompPhilhealth,
    TotalEmpHDMF = NEW.TotalEmpHDMF,
    TotalCompHDMF = NEW.TotalCompHDMF,
    TotalVacationDaysLeft = NEW.TotalVacationDaysLeft,
    TotalLoans = NEW.TotalLoans,
    TotalBonus = NEW.TotalBonus,
    TotalAllowance = NEW.TotalAllowance,
    TotalAdjustments = (NEW.TotalAdjustments + @totaladjust_actual),
    ThirteenthMonthInclusion = NEW.ThirteenthMonthInclusion,
    FirstTimeSalary = NEW.FirstTimeSalary;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_position
DROP TRIGGER IF EXISTS `AFTINS_position`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_position` AFTER INSERT ON `position` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Position' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;


INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'PositionName',NEW.RowID,'',NEW.PositionName,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'ParentPositionID',NEW.RowID,'',NEW.ParentPositionID,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'DivisionId',NEW.RowID,'',NEW.DivisionId,'Insert');



IF NEW.PositionName='Administratorxkvcbkadsfiasd' THEN

    INSERT INTO position_view
    (
        PositionID
        ,ViewID
        ,Creates
        ,OrganizationID
        ,ReadOnly
        ,Updates
        ,Deleting
        ,Created
        ,CreatedBy
        ,LastUpdBy
    ) SELECT
        NEW.RowID
        ,RowID
        ,'Y'
        ,NEW.OrganizationID
        ,'N'
        ,'Y'
        ,'Y'
        ,CURRENT_TIMESTAMP()
        ,NEW.CreatedBy
        ,NEW.CreatedBy FROM `view` WHERE OrganizationID=NEW.OrganizationID
    ON
    DUPLICATE
    KEY
    UPDATE
        LastUpd=CURRENT_TIMESTAMP();




    INSERT INTO user
    (
        LastName
        ,FirstName
        ,MiddleName
        ,UserID
        ,Password
        ,OrganizationID
        ,PositionID
        ,Created
        ,LastUpdBy
        ,CreatedBy
        ,LastUpd
        ,Status
    ) VALUES (
        'admin'
        ,'admin'
        ,'admin'


        ,NEW.OrganizationID
        ,NEW.RowID
        ,CURRENT_TIMESTAMP()
        ,NEW.CreatedBy
        ,NEW.CreatedBy
        ,CURRENT_TIMESTAMP()
        ,'Active'
    ) ON
    DUPLICATE
    KEY
    UPDATE
        LastUpd=CURRENT_TIMESTAMP();


ELSE


    INSERT INTO position_view
    (
        PositionID
        ,ViewID
        ,Creates
        ,OrganizationID
        ,ReadOnly
        ,Updates
        ,Deleting
        ,Created
        ,CreatedBy
        ,LastUpdBy
    ) SELECT
        NEW.RowID
        ,v.RowID
        ,'N'
        ,v.OrganizationID
        ,'Y'
        ,'N'
        ,'N'
        ,CURRENT_TIMESTAMP()
        ,NEW.CreatedBy
        ,NEW.CreatedBy
        FROM `view` v
    ON
    DUPLICATE
    KEY
    UPDATE
        LastUpd=CURRENT_TIMESTAMP();


END IF;


END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_shift
DROP TRIGGER IF EXISTS `AFTINS_shift`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_shift` AFTER INSERT ON `shift` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Duty shifting' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'TimeFrom',NEW.RowID,'',NEW.TimeFrom,'Insert')
,(CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'TimeTo',NEW.RowID,'',NEW.TimeTo,'Insert');




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTINS_user
DROP TRIGGER IF EXISTS `AFTINS_user`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTINS_user` AFTER INSERT ON `user` FOR EACH ROW BEGIN





INSERT INTO position_view
(
    PositionID
    ,ViewID
    ,Creates
    ,OrganizationID
    ,ReadOnly
    ,Updates
    ,Deleting
    ,Created
    ,CreatedBy
    ,LastUpdBy
) SELECT
    pos.RowID
    ,v.RowID
    ,'N'
    ,v.OrganizationID
    ,'N'
    ,'N'
    ,'N'
    ,CURRENT_TIMESTAMP()
    ,NEW.CreatedBy
    ,NEW.CreatedBy
    FROM `view` v
    LEFT JOIN (SELECT * FROM `position` GROUP BY PositionName) pos ON pos.RowID > 0 AND pos.RowID != IFNULL(NEW.PositionID,0)
    WHERE v.OrganizationID!=NEW.OrganizationID
UNION
    SELECT
    pos.RowID
    ,v.RowID
    ,'Y'
    ,v.OrganizationID
    ,'N'
    ,'Y'
    ,'Y'
    ,CURRENT_TIMESTAMP()
    ,NEW.CreatedBy
    ,NEW.CreatedBy
    FROM `view` v
    INNER JOIN `position` pos ON pos.RowID = IFNULL(NEW.PositionID,0)
    WHERE v.OrganizationID=NEW.OrganizationID
ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP();

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_division
DROP TRIGGER IF EXISTS `AFTUPD_division`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_division` AFTER UPDATE ON `division` FOR EACH ROW BEGIN

DECLARE anyint INT(11);

UPDATE employee e
INNER JOIN `position` ps
ON ps.DivisionId = NEW.RowID
SET # e.PayFrequencyID = NEW.PayFrequencyID,
    e.WorkDaysPerYear = NEW.WorkDaysPerYear,
    e.LateGracePeriod = NEW.GracePeriod,
    e.LastUpdBy = NEW.LastUpdBy
WHERE e.OrganizationID = NEW.OrganizationID
AND e.PositionID = ps.RowID;

IF NEW.AutomaticOvertimeFiling = '1' THEN
     SET anyint = 0;
END IF;

IF OLD.SSSDeductionWeekSchedule != NEW.SSSDeductionWeekSchedule THEN
	CALL UPD_WeeklyDeductionSched(NEW.OrganizationID, FALSE, 'sss', NEW.SSSDeductionWeekSchedule);
END IF;

IF OLD.PhilhealthDeductionWeekSchedule != NEW.PhilhealthDeductionWeekSchedule THEN
	CALL UPD_WeeklyDeductionSched(NEW.OrganizationID, FALSE, 'philhealth', NEW.PhilhealthDeductionWeekSchedule);
END IF;

IF OLD.PagIbigDeductionWeekSchedule != NEW.PagIbigDeductionWeekSchedule THEN
	CALL UPD_WeeklyDeductionSched(NEW.OrganizationID, FALSE, 'hdmf', NEW.PagIbigDeductionWeekSchedule);
END IF;

IF OLD.WithholdingTaxDeductionWeekSchedule != NEW.WithholdingTaxDeductionWeekSchedule THEN
	CALL UPD_WeeklyDeductionSched(NEW.OrganizationID, FALSE, 'tax', NEW.WithholdingTaxDeductionWeekSchedule);
END IF;


IF OLD.SSSDeductionWeekwithAgenSchedule != NEW.SSSDeductionWeekwithAgenSchedule THEN
	CALL UPD_WeeklyDeductionSched(NEW.OrganizationID, TRUE, 'sss', NEW.SSSDeductionWeekwithAgenSchedule);
END IF;

IF OLD.PhilhealthDeductionWeekwithAgenSchedule != NEW.PhilhealthDeductionWeekwithAgenSchedule THEN
	CALL UPD_WeeklyDeductionSched(NEW.OrganizationID, TRUE, 'philhealth', NEW.PhilhealthDeductionWeekwithAgenSchedule);
END IF;

IF OLD.PagIbigDeductionWeekwithAgenSchedule != NEW.PagIbigDeductionWeekwithAgenSchedule THEN
	CALL UPD_WeeklyDeductionSched(NEW.OrganizationID, TRUE, 'hdmf', NEW.PagIbigDeductionWeekwithAgenSchedule);
END IF;

IF OLD.WithholdingTaxDeductionWeekwithAgenSchedule != NEW.WithholdingTaxDeductionWeekwithAgenSchedule THEN
	CALL UPD_WeeklyDeductionSched(NEW.OrganizationID, TRUE, 'tax', NEW.WithholdingTaxDeductionWeekwithAgenSchedule);
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeeallowance
DROP TRIGGER IF EXISTS `AFTUPD_employeeallowance`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeeallowance` AFTER UPDATE ON `employeeallowance` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

DECLARE totalAllowancePerDay DECIMAL(11,2) DEFAULT 0;

DECLARE empPaymentType TEXT;

DECLARE empWorkDaysPerYear DECIMAL(11,2);

DECLARE ag_RowID INT(11);


SELECT e.AgencyID FROM employee e WHERE e.RowID=NEW.EmployeeID INTO ag_RowID;

SELECT RowID FROM `view` WHERE ViewName='Employee Allowance' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;




IF NEW.TaxableFlag = '1' AND ag_RowID IS NULL THEN

    SELECT e.EmployeeType,e.WorkDaysPerYear FROM employee e WHERE e.RowID=NEW.EmployeeID INTO empPaymentType,empWorkDaysPerYear;

    SELECT GET_employeeallowancePerDay(NEW.OrganizationID,NEW.EmployeeID,NEW.TaxableFlag,CURDATE()) INTO totalAllowancePerDay;



        SET empWorkDaysPerYear = ROUND(empWorkDaysPerYear / 12, 0);

        SET totalAllowancePerDay = totalAllowancePerDay * empWorkDaysPerYear;

    IF empPaymentType IN ('Fixed','Monthly') THEN

        IF NEW.AllowanceFrequency = 'Semi-monthly' THEN

            UPDATE employeesalary es SET
            es.PaySocialSecurityID=(SELECT RowID FROM paysocialsecurity WHERE (es.Salary + (NEW.AllowanceAmount * 2.0)) BETWEEN RangeFromAmount AND RangeToAmount)
            ,es.PayPhilhealthID=(SELECT RowID FROM payphilhealth WHERE (es.Salary + (NEW.AllowanceAmount * 2.0)) BETWEEN SalaryRangeFrom AND SalaryRangeTo)
            ,es.LastUpdBy=NEW.CreatedBy
            WHERE es.EmployeeID=NEW.EmployeeID
            AND es.OrganizationID=NEW.OrganizationID
            AND (es.EffectiveDateFrom >= NEW.EffectiveStartDate OR IFNULL(es.EffectiveDateTo,NEW.EffectiveEndDate) >= NEW.EffectiveStartDate)
            AND (es.EffectiveDateFrom <= NEW.EffectiveEndDate OR IFNULL(es.EffectiveDateTo,NEW.EffectiveEndDate) <= NEW.EffectiveEndDate);

        ELSEIF NEW.AllowanceFrequency = 'Daily' THEN

            UPDATE employeesalary es SET
            es.PaySocialSecurityID=(SELECT RowID FROM paysocialsecurity WHERE (es.Salary + totalAllowancePerDay) BETWEEN RangeFromAmount AND RangeToAmount)
            ,es.PayPhilhealthID=(SELECT RowID FROM payphilhealth WHERE (es.Salary + totalAllowancePerDay) BETWEEN SalaryRangeFrom AND SalaryRangeTo)
            ,es.LastUpdBy=NEW.CreatedBy
            WHERE es.EmployeeID=NEW.EmployeeID
            AND es.OrganizationID=NEW.OrganizationID
            AND (es.EffectiveDateFrom >= NEW.EffectiveStartDate OR IFNULL(es.EffectiveDateTo,NEW.EffectiveEndDate) >= NEW.EffectiveStartDate)
            AND (es.EffectiveDateFrom <= NEW.EffectiveEndDate OR IFNULL(es.EffectiveDateTo,NEW.EffectiveEndDate) <= NEW.EffectiveEndDate);

        END IF;

    ELSEIF empPaymentType = 'Daily' THEN

        IF NEW.AllowanceFrequency = 'Semi-monthly' THEN

            UPDATE employeesalary es
            INNER JOIN employee e ON e.RowID=es.EmployeeID
            INNER JOIN payfrequency pf ON pf.RowID=e.PayFrequencyID
            SET
            es.PaySocialSecurityID=(SELECT RowID FROM paysocialsecurity WHERE (((es.BasicPay + NEW.AllowanceAmount) * empWorkDaysPerYear) + (NEW.AllowanceAmount * PAYFREQUENCY_DIVISOR(pf.PayFrequencyType))) BETWEEN RangeFromAmount AND RangeToAmount)
            ,es.PayPhilhealthID=(SELECT RowID FROM payphilhealth WHERE (es.BasicPay * empWorkDaysPerYear) BETWEEN SalaryRangeFrom AND SalaryRangeTo LIMIT 1)
            ,es.LastUpdBy=NEW.CreatedBy
            ,es.LastUpd=CURRENT_TIMESTAMP()
            WHERE es.EmployeeID=NEW.EmployeeID
            AND es.OrganizationID=NEW.OrganizationID
            AND es.EffectiveDateTo IS NULL;

        ELSEIF NEW.AllowanceFrequency = 'Daily' THEN

            UPDATE employeesalary es SET
            es.PaySocialSecurityID=(SELECT RowID FROM paysocialsecurity WHERE ((es.BasicPay + NEW.AllowanceAmount) * empWorkDaysPerYear) BETWEEN RangeFromAmount AND RangeToAmount)
            ,es.PayPhilhealthID=(SELECT RowID FROM payphilhealth WHERE (es.BasicPay * empWorkDaysPerYear) BETWEEN SalaryRangeFrom AND SalaryRangeTo LIMIT 1)
            ,es.LastUpdBy=NEW.CreatedBy
            ,es.LastUpd=CURRENT_TIMESTAMP()
            WHERE es.EmployeeID=NEW.EmployeeID
            AND es.OrganizationID=NEW.OrganizationID
            AND es.EffectiveDateTo IS NULL;

        END IF;



    ELSEIF empPaymentType = 'Hourly' THEN

        UPDATE employeesalary es SET
        es.PaySocialSecurityID=(SELECT RowID FROM paysocialsecurity WHERE es.BasicPay + totalAllowancePerDay BETWEEN RangeFromAmount AND RangeToAmount LIMIT 1)
        ,es.LastUpdBy=NEW.CreatedBy
        WHERE es.EmployeeID=NEW.EmployeeID
        AND es.OrganizationID=NEW.OrganizationID
        AND es.EffectiveDateTo IS NULL;



    END IF;

END IF;


IF OLD.ProductID!=NEW.ProductID THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'ProductID',NEW.RowID,OLD.ProductID,NEW.ProductID,'Update');

END IF;

IF OLD.AllowanceFrequency!=NEW.AllowanceFrequency THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'AllowanceFrequency',NEW.RowID,OLD.AllowanceFrequency,NEW.AllowanceFrequency,'Update');

END IF;

IF OLD.EffectiveStartDate!=NEW.EffectiveStartDate THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EffectiveStartDate',NEW.RowID,OLD.EffectiveStartDate,NEW.EffectiveStartDate,'Update');

END IF;

IF OLD.EffectiveEndDate!=NEW.EffectiveEndDate THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EffectiveEndDate',NEW.RowID,OLD.EffectiveEndDate,NEW.EffectiveEndDate,'Update');

END IF;

IF OLD.TaxableFlag!=NEW.TaxableFlag THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'TaxableFlag',NEW.RowID,OLD.TaxableFlag,NEW.TaxableFlag,'Update');

END IF;

IF OLD.AllowanceAmount!=NEW.AllowanceAmount THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'AllowanceAmount',NEW.RowID,OLD.AllowanceAmount,NEW.AllowanceAmount,'Update');

END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeeattachment_then_employeechecklist
DROP TRIGGER IF EXISTS `AFTUPD_employeeattachment_then_employeechecklist`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeeattachment_then_employeechecklist` AFTER UPDATE ON `employeeattachments` FOR EACH ROW BEGIN

DECLARE empchklstID INT(11);

DECLARE lovchklstID INT(11);

DECLARE prevchklstID INT(11);

DECLARE OrganizID INT(11);

DECLARE viewID INT(11);

SELECT RowID FROM listofval WHERE DisplayValue=NEW.Type AND Type='Employee Checklist' LIMIT 1 INTO lovchklstID;

SELECT RowID FROM listofval WHERE DisplayValue=OLD.Type AND Type='Employee Checklist' LIMIT 1 INTO prevchklstID;

SELECT RowID FROM employeechecklist WHERE EmployeeID=NEW.EmployeeID AND Created<=NEW.Created LIMIT 1 INTO empchklstID;

SET lovchklstID = COALESCE(lovchklstID,0);

IF lovchklstID = 367 THEN
    UPDATE employeechecklist SET
    PerformanceAppraisal='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 368 THEN
    UPDATE employeechecklist SET
    BIRTIN='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 369 THEN
    UPDATE employeechecklist SET
    Diploma='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 370 THEN
    UPDATE employeechecklist SET
    IDInfoSlip='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 371 THEN
    UPDATE employeechecklist SET
    PhilhealthID='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 372 THEN
    UPDATE employeechecklist SET
    HDMFID='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 373 THEN
    UPDATE employeechecklist SET
    SSSNo='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 374 THEN
    UPDATE employeechecklist SET
    TranscriptOfRecord='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 375 THEN
    UPDATE employeechecklist SET
    BirthCertificate='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 376 THEN
    UPDATE employeechecklist SET
    EmployeeContract='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 377 THEN
    UPDATE employeechecklist SET
    MedicalExam='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 378 THEN
    UPDATE employeechecklist SET
    COEEmployer='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 379 THEN
    UPDATE employeechecklist SET
    MarriageContract='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 380 THEN
    UPDATE employeechecklist SET
    HouseSketch='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 381 THEN
    UPDATE employeechecklist SET
    TrainingAgreement='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 382 THEN
    UPDATE employeechecklist SET
    HealthPermit='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 383 THEN
    UPDATE employeechecklist SET
    ValidID='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 384 THEN
    UPDATE employeechecklist SET
    Resume='1'
    WHERE RowID=empchklstID;
ELSEIF lovchklstID = 385 THEN
    UPDATE employeechecklist SET
    NBIClearance='1'
    WHERE RowID=empchklstID;
END IF;








IF prevchklstID = 367 THEN
    UPDATE employeechecklist SET
    PerformanceAppraisal='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 368 THEN
    UPDATE employeechecklist SET
    BIRTIN='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 369 THEN
    UPDATE employeechecklist SET
    Diploma='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 370 THEN
    UPDATE employeechecklist SET
    IDInfoSlip='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 371 THEN
    UPDATE employeechecklist SET
    PhilhealthID='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 372 THEN
    UPDATE employeechecklist SET
    HDMFID='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 373 THEN
    UPDATE employeechecklist SET
    SSSNo='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 374 THEN
    UPDATE employeechecklist SET
    TranscriptOfRecord='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 375 THEN
    UPDATE employeechecklist SET
    BirthCertificate='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 376 THEN
    UPDATE employeechecklist SET
    EmployeeContract='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 377 THEN
    UPDATE employeechecklist SET
    MedicalExam='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 378 THEN
    UPDATE employeechecklist SET
    COEEmployer='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 379 THEN
    UPDATE employeechecklist SET
    MarriageContract='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 380 THEN
    UPDATE employeechecklist SET
    HouseSketch='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 381 THEN
    UPDATE employeechecklist SET
    TrainingAgreement='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 382 THEN
    UPDATE employeechecklist SET
    HealthPermit='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 383 THEN
    UPDATE employeechecklist SET
    ValidID='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 384 THEN
    UPDATE employeechecklist SET
    Resume='0'
    WHERE RowID=empchklstID;
ELSEIF prevchklstID = 385 THEN
    UPDATE employeechecklist SET
    NBIClearance='0'
    WHERE RowID=empchklstID;
END IF;










SELECT OrganizationID FROM user WHERE RowID=NEW.CreatedBy INTO OrganizID;

SELECT RowID FROM `view` WHERE ViewName='Employee Attachment' AND OrganizationID=OrganizID LIMIT 1 INTO viewID;

IF OLD.Type!=NEW.Type THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrganizID,viewID,'Type',NEW.RowID,OLD.Type,NEW.Type,'Update');

END IF;

IF OLD.FileName!=NEW.FileName THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrganizID,viewID,'FileName',NEW.RowID,OLD.FileName,NEW.FileName,'Update');

END IF;

IF OLD.FileType!=NEW.FileType THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrganizID,viewID,'FileType',NEW.RowID,OLD.FileType,NEW.FileType,'Update');

END IF;




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeeawards
DROP TRIGGER IF EXISTS `AFTUPD_employeeawards`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeeawards` AFTER UPDATE ON `employeeawards` FOR EACH ROW BEGIN


DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Award' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.AwardType!=NEW.AwardType THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'AwardType',NEW.RowID,OLD.AwardType,NEW.AwardType,'Update');

END IF;

IF OLD.AwardDescription!=NEW.AwardDescription THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'AwardDescription',NEW.RowID,OLD.AwardDescription,NEW.AwardDescription,'Update');

END IF;

IF OLD.AwardDate!=NEW.AwardDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'AwardDate',NEW.RowID,OLD.AwardDate,NEW.AwardDate,'Update');

END IF;




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeebonus
DROP TRIGGER IF EXISTS `AFTUPD_employeebonus`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeebonus` AFTER UPDATE ON `employeebonus` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Bonus' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.ProductID!=NEW.ProductID THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'ProductID',NEW.RowID,OLD.ProductID,NEW.ProductID,'Update');

END IF;

IF OLD.AllowanceFrequency!=NEW.AllowanceFrequency THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'AllowanceFrequency',NEW.RowID,OLD.AllowanceFrequency,NEW.AllowanceFrequency,'Update');

END IF;

IF OLD.EffectiveStartDate!=NEW.EffectiveStartDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EffectiveStartDate',NEW.RowID,OLD.EffectiveStartDate,NEW.EffectiveStartDate,'Update');

END IF;

IF OLD.EffectiveEndDate!=NEW.EffectiveEndDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EffectiveEndDate',NEW.RowID,OLD.EffectiveEndDate,NEW.EffectiveEndDate,'Update');

END IF;

IF OLD.TaxableFlag!=NEW.TaxableFlag THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'TaxableFlag',NEW.RowID,OLD.TaxableFlag,NEW.TaxableFlag,'Update');

END IF;

IF OLD.BonusAmount!=NEW.BonusAmount THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'BonusAmount',NEW.RowID,OLD.BonusAmount,NEW.BonusAmount,'Update');

END IF;



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeecertification
DROP TRIGGER IF EXISTS `AFTUPD_employeecertification`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeecertification` AFTER UPDATE ON `employeecertification` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Certification' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;


IF OLD.CertificationType != NEW.CertificationType THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'CertificationType',NEW.RowID,OLD.CertificationType,NEW.CertificationType,'Update');

END IF;

IF OLD.IssuingAuthority != NEW.IssuingAuthority THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'IssuingAuthority',NEW.RowID,OLD.IssuingAuthority,NEW.IssuingAuthority,'Update');

END IF;

IF OLD.CertificationNo != NEW.CertificationNo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'CertificationNo',NEW.RowID,OLD.CertificationNo,NEW.CertificationNo,'Update');

END IF;

IF OLD.IssueDate != NEW.IssueDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'IssueDate',NEW.RowID,OLD.IssueDate,NEW.IssueDate,'Update');

END IF;

IF OLD.ExpirationDate != NEW.ExpirationDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'ExpirationDate',NEW.RowID,OLD.ExpirationDate,NEW.ExpirationDate,'Update');

END IF;

IF OLD.Comments != NEW.Comments THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,OLD.Comments,NEW.Comments,'Update');

END IF;




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeedependents
DROP TRIGGER IF EXISTS `AFTUPD_employeedependents`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeedependents` AFTER UPDATE ON `employeedependents` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Dependents' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;


IF OLD.Salutation != NEW.Salutation THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Salutation',NEW.RowID,OLD.Salutation,NEW.Salutation,'Update');

END IF;

IF OLD.FirstName != NEW.FirstName THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'FirstName',NEW.RowID,OLD.FirstName,NEW.FirstName,'Update');

END IF;

IF OLD.MiddleName != NEW.MiddleName THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'MiddleName',NEW.RowID,OLD.MiddleName,NEW.MiddleName,'Update');

END IF;

IF OLD.LastName != NEW.LastName THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LastName',NEW.RowID,OLD.LastName,NEW.LastName,'Update');

END IF;

IF OLD.Surname != NEW.Surname THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Surname',NEW.RowID,OLD.Surname,NEW.Surname,'Update');

END IF;

IF OLD.TINNo != NEW.TINNo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'TINNo',NEW.RowID,OLD.TINNo,NEW.TINNo,'Update');

END IF;

IF OLD.SSSNo != NEW.SSSNo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'SSSNo',NEW.RowID,OLD.SSSNo,NEW.SSSNo,'Update');

END IF;

IF OLD.HDMFNo != NEW.HDMFNo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'HDMFNo',NEW.RowID,OLD.HDMFNo,NEW.HDMFNo,'Update');

END IF;

IF OLD.PhilHealthNo != NEW.PhilHealthNo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'PhilHealthNo',NEW.RowID,OLD.PhilHealthNo,NEW.PhilHealthNo,'Update');

END IF;

IF OLD.EmailAddress != NEW.EmailAddress THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EmailAddress',NEW.RowID,OLD.EmailAddress,NEW.EmailAddress,'Update');

END IF;

IF OLD.WorkPhone != NEW.WorkPhone THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'WorkPhone',NEW.RowID,OLD.WorkPhone,NEW.WorkPhone,'Update');

END IF;

IF OLD.HomePhone != NEW.HomePhone THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'HomePhone',NEW.RowID,OLD.HomePhone,NEW.HomePhone,'Update');

END IF;

IF OLD.MobilePhone != NEW.MobilePhone THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'MobilePhone',NEW.RowID,OLD.MobilePhone,NEW.MobilePhone,'Update');

END IF;

IF OLD.HomeAddress != NEW.HomeAddress THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'HomeAddress',NEW.RowID,OLD.HomeAddress,NEW.HomeAddress,'Update');

END IF;

IF OLD.Nickname != NEW.Nickname THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Nickname',NEW.RowID,OLD.Nickname,NEW.Nickname,'Update');

END IF;

IF OLD.JobTitle != NEW.JobTitle THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'JobTitle',NEW.RowID,OLD.JobTitle,NEW.JobTitle,'Update');

END IF;

IF OLD.Gender != NEW.Gender THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Gender',NEW.RowID,OLD.Gender,NEW.Gender,'Update');

END IF;

IF OLD.RelationToEmployee != NEW.RelationToEmployee THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'RelationToEmployee',NEW.RowID,OLD.RelationToEmployee,NEW.RelationToEmployee,'Update');

END IF;

IF OLD.ActiveFlag != NEW.ActiveFlag THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'ActiveFlag',NEW.RowID,OLD.ActiveFlag,NEW.ActiveFlag,'Update');

END IF;

IF OLD.Birthdate != NEW.Birthdate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Birthdate',NEW.RowID,OLD.Birthdate,NEW.Birthdate,'Update');

END IF;





END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeedisciplinaryaction
DROP TRIGGER IF EXISTS `AFTUPD_employeedisciplinaryaction`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeedisciplinaryaction` AFTER UPDATE ON `employeedisciplinaryaction` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

DECLARE suspendaycount INT(11);

DECLARE indx INT(11) DEFAULT 0;

DECLARE dateloop DATE;

DECLARE eshiftID INT(11);

DECLARE esalID INT(11);

DECLARE etentID INT(11);



DECLARE COMP_emptimeentry INT(11);

DECLARE emp_startdate DATE;

DECLARE etent_Date DATE;

DECLARE old_daycount INT(11);

DECLARE new_daycount INT(11);



SELECT RowID FROM `view` WHERE ViewName='Employee Disciplinary Action' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.DateFrom != NEW.DateFrom THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DateFrom',NEW.RowID,OLD.DateFrom,NEW.DateFrom,'Update');

END IF;

IF OLD.DateTo != NEW.DateTo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DateTo',NEW.RowID,OLD.DateTo,NEW.DateTo,'Update');

END IF;

IF OLD.FindingID != NEW.FindingID THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'FindingID',NEW.RowID,OLD.FindingID,NEW.FindingID,'Update');

END IF;

IF OLD.FindingDescription != NEW.FindingDescription THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'FindingDescription',NEW.RowID,OLD.FindingDescription,NEW.FindingDescription,'Update');

END IF;

IF OLD.Action != NEW.Action THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Action',NEW.RowID,OLD.Action,NEW.Action,'Update');

END IF;

IF OLD.Penalty != NEW.Penalty THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Penalty',NEW.RowID,OLD.Penalty,NEW.Penalty,'Update');

END IF;

IF OLD.Comments != NEW.Comments THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,OLD.Comments,NEW.Comments,'Update');

END IF;













SELECT StartDate FROM employee WHERE RowID=NEW.EmployeeID INTO emp_startdate;

IF OLD.DateFrom = NEW.DateFrom AND OLD.DateTo = NEW.DateTo THEN

    IF OLD.Action != NEW.Action THEN

        IF NEW.Action IN ('1-3 Days Suspension','4-7 Days Suspension','8-14 Days Suspension') THEN

            SET indx = 0;

            timeentloop : LOOP

                IF indx <= old_daycount THEN

                    SET etent_Date = ADDDATE(OLD.DateFrom, INTERVAL indx DAY);



                    SELECT RowID FROM employeetimeentry WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND Date=etent_Date INTO etentID;

                    INSERT INTO employeetimeentry
                    (
                        RowID
                        ,OrganizationID
                        ,Created
                        ,CreatedBy
                        ,Date
                        ,EmployeeShiftID
                        ,EmployeeID
                        ,EmployeeSalaryID
                        ,EmployeeFixedSalaryFlag
                        ,RegularHoursWorked
                        ,RegularHoursAmount
                        ,TotalHoursWorked
                        ,OvertimeHoursWorked
                        ,OvertimeHoursAmount
                        ,UndertimeHours
                        ,UndertimeHoursAmount
                        ,NightDifferentialHours
                        ,NightDiffHoursAmount
                        ,NightDifferentialOTHours
                        ,NightDiffOTHoursAmount
                        ,HoursLate
                        ,HoursLateAmount
                        ,LateFlag
                        ,PayRateID
                        ,VacationLeaveHours
                        ,SickLeaveHours
                        ,MaternityLeaveHours
                        ,OtherLeaveHours
                        ,TotalDayPay
                    ) VALUES (
                        etentID
                        ,NEW.OrganizationID
                        ,CURRENT_TIMESTAMP()
                        ,NEW.LastUpdBy
                        ,etent_Date
                        ,eshiftID
                        ,NEW.EmployeeID
                        ,esalID
                        ,'0'
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,(SELECT RowID FROM payrate WHERE Date=dateloop AND OrganizationID=NEW.OrganizationID LIMIT 1)
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                    ) ON
                    DUPLICATE
                    KEY
                    UPDATE
                            LastUpd=CURRENT_TIMESTAMP()
                            ,LastUpdBy=NEW.LastUpdBy
                            ,RegularHoursWorked=0
                            ,RegularHoursAmount=0
                            ,TotalHoursWorked=0
                            ,OvertimeHoursWorked=0
                            ,OvertimeHoursAmount=0
                            ,UndertimeHours=0
                            ,UndertimeHoursAmount=0
                            ,NightDifferentialHours=0
                            ,NightDiffHoursAmount=0
                            ,NightDifferentialOTHours=0
                            ,NightDiffOTHoursAmount=0
                            ,HoursLate=0
                            ,HoursLateAmount=0
                            ,LateFlag='0'
                            ,TotalDayPay=0;

                    SET indx = indx + 1;

                ELSE

                    LEAVE timeentloop;

                END IF;

            END LOOP;



        ELSE

            SET indx = 0;

            timeentloop : LOOP

                IF indx <= old_daycount THEN

                    SET etent_Date = ADDDATE(OLD.DateFrom, INTERVAL indx DAY);



                    SELECT COMPUTE_employeetimeentry(NEW.EmployeeID,NEW.OrganizationID,etent_Date,NEW.LastUpdBy,NEW.LastUpdBy,emp_startdate) INTO COMP_emptimeentry;

                    SET indx = indx + 1;

                ELSE

                    LEAVE timeentloop;

                END IF;

            END LOOP;


        END IF;

    END IF;

ELSE

    SET old_daycount = DATEDIFF(OLD.DateTo,OLD.DateFrom);

    SET new_daycount = DATEDIFF(NEW.DateTo,NEW.DateFrom);



    IF old_daycount > new_daycount THEN



        IF NEW.Action IN ('1-3 Days Suspension','4-7 Days Suspension','8-14 Days Suspension') THEN

            SET indx = 0;

            timeentloop : LOOP

                IF indx <= old_daycount THEN

                    SET etent_Date = ADDDATE(OLD.DateFrom, INTERVAL indx DAY);



                    SELECT RowID FROM employeetimeentry WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND Date=etent_Date INTO etentID;

                    IF etent_Date BETWEEN NEW.DateFrom AND NEW.DateTo THEN

                        INSERT INTO employeetimeentry
                        (
                            RowID
                            ,OrganizationID
                            ,Created
                            ,CreatedBy
                            ,Date
                            ,EmployeeShiftID
                            ,EmployeeID
                            ,EmployeeSalaryID
                            ,EmployeeFixedSalaryFlag
                            ,RegularHoursWorked
                            ,RegularHoursAmount
                            ,TotalHoursWorked
                            ,OvertimeHoursWorked
                            ,OvertimeHoursAmount
                            ,UndertimeHours
                            ,UndertimeHoursAmount
                            ,NightDifferentialHours
                            ,NightDiffHoursAmount
                            ,NightDifferentialOTHours
                            ,NightDiffOTHoursAmount
                            ,HoursLate
                            ,HoursLateAmount
                            ,LateFlag
                            ,PayRateID
                            ,VacationLeaveHours
                            ,SickLeaveHours
                            ,MaternityLeaveHours
                            ,OtherLeaveHours
                            ,TotalDayPay
                        ) VALUES (
                            etentID
                            ,NEW.OrganizationID
                            ,CURRENT_TIMESTAMP()
                            ,NEW.LastUpdBy
                            ,etent_Date
                            ,eshiftID
                            ,NEW.EmployeeID
                            ,esalID
                            ,'0'
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,(SELECT RowID FROM payrate WHERE Date=dateloop AND OrganizationID=NEW.OrganizationID LIMIT 1)
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                        ) ON
                        DUPLICATE
                        KEY
                        UPDATE
                                LastUpd=CURRENT_TIMESTAMP()
                                ,LastUpdBy=NEW.LastUpdBy
                                ,RegularHoursWorked=0
                                ,RegularHoursAmount=0
                                ,TotalHoursWorked=0
                                ,OvertimeHoursWorked=0
                                ,OvertimeHoursAmount=0
                                ,UndertimeHours=0
                                ,UndertimeHoursAmount=0
                                ,NightDifferentialHours=0
                                ,NightDiffHoursAmount=0
                                ,NightDifferentialOTHours=0
                                ,NightDiffOTHoursAmount=0
                                ,HoursLate=0
                                ,HoursLateAmount=0
                                ,LateFlag='0'
                                ,TotalDayPay=0;

                    ELSE

                        SELECT COMPUTE_employeetimeentry(NEW.EmployeeID,NEW.OrganizationID,etent_Date,NEW.LastUpdBy,NEW.LastUpdBy,emp_startdate) INTO COMP_emptimeentry;

                    END IF;


                    SET indx = indx + 1;

                ELSE

                    LEAVE timeentloop;

                END IF;

            END LOOP;



        ELSE

            SET indx = 0;

            timeentloop : LOOP

                IF indx <= old_daycount THEN

                    SET etent_Date = ADDDATE(NEW.DateFrom, INTERVAL indx DAY);



                    SELECT COMPUTE_employeetimeentry(NEW.EmployeeID,NEW.OrganizationID,etent_Date,NEW.LastUpdBy,NEW.LastUpdBy,emp_startdate) INTO COMP_emptimeentry;

                    SET indx = indx + 1;

                ELSE

                    LEAVE timeentloop;

                END IF;

            END LOOP;


        END IF;


    ELSEIF old_daycount < new_daycount THEN



        IF NEW.Action IN ('1-3 Days Suspension','4-7 Days Suspension','8-14 Days Suspension') THEN

            SET indx = 0;

            timeentloop : LOOP

                IF indx <= new_daycount THEN

                    SET etent_Date = ADDDATE(NEW.DateFrom, INTERVAL indx DAY);



                    SELECT RowID FROM employeetimeentry WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND Date=etent_Date INTO etentID;

                    INSERT INTO employeetimeentry
                    (
                        RowID
                        ,OrganizationID
                        ,Created
                        ,CreatedBy
                        ,Date
                        ,EmployeeShiftID
                        ,EmployeeID
                        ,EmployeeSalaryID
                        ,EmployeeFixedSalaryFlag
                        ,RegularHoursWorked
                        ,RegularHoursAmount
                        ,TotalHoursWorked
                        ,OvertimeHoursWorked
                        ,OvertimeHoursAmount
                        ,UndertimeHours
                        ,UndertimeHoursAmount
                        ,NightDifferentialHours
                        ,NightDiffHoursAmount
                        ,NightDifferentialOTHours
                        ,NightDiffOTHoursAmount
                        ,HoursLate
                        ,HoursLateAmount
                        ,LateFlag
                        ,PayRateID
                        ,VacationLeaveHours
                        ,SickLeaveHours
                        ,MaternityLeaveHours
                        ,OtherLeaveHours
                        ,TotalDayPay
                    ) VALUES (
                        etentID
                        ,NEW.OrganizationID
                        ,CURRENT_TIMESTAMP()
                        ,NEW.LastUpdBy
                        ,etent_Date
                        ,eshiftID
                        ,NEW.EmployeeID
                        ,esalID
                        ,'0'
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,(SELECT RowID FROM payrate WHERE Date=dateloop AND OrganizationID=NEW.OrganizationID LIMIT 1)
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                    ) ON
                    DUPLICATE
                    KEY
                    UPDATE
                            LastUpd=CURRENT_TIMESTAMP()
                            ,LastUpdBy=NEW.LastUpdBy
                            ,RegularHoursWorked=0
                            ,RegularHoursAmount=0
                            ,TotalHoursWorked=0
                            ,OvertimeHoursWorked=0
                            ,OvertimeHoursAmount=0
                            ,UndertimeHours=0
                            ,UndertimeHoursAmount=0
                            ,NightDifferentialHours=0
                            ,NightDiffHoursAmount=0
                            ,NightDifferentialOTHours=0
                            ,NightDiffOTHoursAmount=0
                            ,HoursLate=0
                            ,HoursLateAmount=0
                            ,LateFlag='0'
                            ,TotalDayPay=0;

                    SET indx = indx + 1;

                ELSE

                    LEAVE timeentloop;

                END IF;

            END LOOP;



        ELSE

            SET indx = 0;

            timeentloop : LOOP

                IF indx <= new_daycount THEN

                    SET etent_Date = ADDDATE(NEW.DateFrom, INTERVAL indx DAY);



                    SELECT COMPUTE_employeetimeentry(NEW.EmployeeID,NEW.OrganizationID,etent_Date,NEW.LastUpdBy,NEW.LastUpdBy,emp_startdate) INTO COMP_emptimeentry;

                    SET indx = indx + 1;

                ELSE

                    LEAVE timeentloop;

                END IF;

            END LOOP;


        END IF;


    ELSEIF old_daycount = new_daycount THEN

        IF OLD.Action != NEW.Action THEN

            IF NEW.Action IN ('1-3 Days Suspension','4-7 Days Suspension','8-14 Days Suspension') THEN


                SET indx = 0;

                timeentloop : LOOP

                    IF indx <= new_daycount THEN

                        SET etent_Date = ADDDATE(OLD.DateFrom, INTERVAL indx DAY);



                        SELECT RowID FROM employeetimeentry WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND Date=etent_Date INTO etentID;

                        INSERT INTO employeetimeentry
                        (
                            RowID
                            ,OrganizationID
                            ,Created
                            ,CreatedBy
                            ,Date
                            ,EmployeeShiftID
                            ,EmployeeID
                            ,EmployeeSalaryID
                            ,EmployeeFixedSalaryFlag
                            ,RegularHoursWorked
                            ,RegularHoursAmount
                            ,TotalHoursWorked
                            ,OvertimeHoursWorked
                            ,OvertimeHoursAmount
                            ,UndertimeHours
                            ,UndertimeHoursAmount
                            ,NightDifferentialHours
                            ,NightDiffHoursAmount
                            ,NightDifferentialOTHours
                            ,NightDiffOTHoursAmount
                            ,HoursLate
                            ,HoursLateAmount
                            ,LateFlag
                            ,PayRateID
                            ,VacationLeaveHours
                            ,SickLeaveHours
                            ,MaternityLeaveHours
                            ,OtherLeaveHours
                            ,TotalDayPay
                        ) VALUES (
                            etentID
                            ,NEW.OrganizationID
                            ,CURRENT_TIMESTAMP()
                            ,NEW.LastUpdBy
                            ,etent_Date
                            ,eshiftID
                            ,NEW.EmployeeID
                            ,esalID
                            ,'0'
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                            ,(SELECT RowID FROM payrate WHERE Date=dateloop AND OrganizationID=NEW.OrganizationID LIMIT 1)
                            ,0
                            ,0
                            ,0
                            ,0
                            ,0
                        ) ON
                        DUPLICATE
                        KEY
                        UPDATE
                                LastUpd=CURRENT_TIMESTAMP()
                                ,LastUpdBy=NEW.LastUpdBy
                                ,RegularHoursWorked=0
                                ,RegularHoursAmount=0
                                ,TotalHoursWorked=0
                                ,OvertimeHoursWorked=0
                                ,OvertimeHoursAmount=0
                                ,UndertimeHours=0
                                ,UndertimeHoursAmount=0
                                ,NightDifferentialHours=0
                                ,NightDiffHoursAmount=0
                                ,NightDifferentialOTHours=0
                                ,NightDiffOTHoursAmount=0
                                ,HoursLate=0
                                ,HoursLateAmount=0
                                ,LateFlag='0'
                                ,TotalDayPay=0;

                        SET indx = indx + 1;

                    ELSE

                        LEAVE timeentloop;

                    END IF;

                END LOOP;

            ELSE


                SET indx = 0;

                timeentloop : LOOP

                    IF indx <= old_daycount THEN

                        SET etent_Date = ADDDATE(OLD.DateFrom, INTERVAL indx DAY);



                        SELECT COMPUTE_employeetimeentry(NEW.EmployeeID,NEW.OrganizationID,etent_Date,NEW.LastUpdBy,NEW.LastUpdBy,emp_startdate) INTO COMP_emptimeentry;

                        SET indx = indx + 1;

                    ELSE

                        LEAVE timeentloop;

                    END IF;

                END LOOP;


            END IF;

        ELSE

            SET indx = 0;

            timeentloop : LOOP

                IF indx <= old_daycount THEN

                    SET etent_Date = ADDDATE(OLD.DateFrom, INTERVAL indx DAY);



                    SELECT COMPUTE_employeetimeentry(NEW.EmployeeID,NEW.OrganizationID,etent_Date,NEW.LastUpdBy,NEW.LastUpdBy,emp_startdate) INTO COMP_emptimeentry;

                    SET indx = indx + 1;

                ELSE

                    LEAVE timeentloop;

                END IF;

            END LOOP;










            SET indx = 0;

            timeentloop : LOOP

                IF indx <= new_daycount THEN

                    SET etent_Date = ADDDATE(NEW.DateFrom, INTERVAL indx DAY);

                    SELECT RowID FROM employeetimeentry WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND Date=etent_Date INTO etentID;

                    INSERT INTO employeetimeentry
                    (
                        RowID
                        ,OrganizationID
                        ,Created
                        ,CreatedBy
                        ,Date
                        ,EmployeeShiftID
                        ,EmployeeID
                        ,EmployeeSalaryID
                        ,EmployeeFixedSalaryFlag
                        ,RegularHoursWorked
                        ,RegularHoursAmount
                        ,TotalHoursWorked
                        ,OvertimeHoursWorked
                        ,OvertimeHoursAmount
                        ,UndertimeHours
                        ,UndertimeHoursAmount
                        ,NightDifferentialHours
                        ,NightDiffHoursAmount
                        ,NightDifferentialOTHours
                        ,NightDiffOTHoursAmount
                        ,HoursLate
                        ,HoursLateAmount
                        ,LateFlag
                        ,PayRateID
                        ,VacationLeaveHours
                        ,SickLeaveHours
                        ,MaternityLeaveHours
                        ,OtherLeaveHours
                        ,TotalDayPay
                    ) VALUES (
                        etentID
                        ,NEW.OrganizationID
                        ,CURRENT_TIMESTAMP()
                        ,NEW.LastUpdBy
                        ,etent_Date
                        ,eshiftID
                        ,NEW.EmployeeID
                        ,esalID
                        ,'0'
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                        ,(SELECT RowID FROM payrate WHERE Date=dateloop AND OrganizationID=NEW.OrganizationID LIMIT 1)
                        ,0
                        ,0
                        ,0
                        ,0
                        ,0
                    ) ON
                    DUPLICATE
                    KEY
                    UPDATE
                            LastUpd=CURRENT_TIMESTAMP()
                            ,LastUpdBy=NEW.LastUpdBy
                            ,RegularHoursWorked=0
                            ,RegularHoursAmount=0
                            ,TotalHoursWorked=0
                            ,OvertimeHoursWorked=0
                            ,OvertimeHoursAmount=0
                            ,UndertimeHours=0
                            ,UndertimeHoursAmount=0
                            ,NightDifferentialHours=0
                            ,NightDiffHoursAmount=0
                            ,NightDifferentialOTHours=0
                            ,NightDiffOTHoursAmount=0
                            ,HoursLate=0
                            ,HoursLateAmount=0
                            ,LateFlag='0'
                            ,TotalDayPay=0;


                    SET indx = indx + 1;

                ELSE

                    LEAVE timeentloop;

                END IF;

            END LOOP;

        END IF;

    END IF;

END IF;




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeeeducation
DROP TRIGGER IF EXISTS `AFTUPD_employeeeducation`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeeeducation` AFTER UPDATE ON `employeeeducation` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Educational Background' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.DateFrom != NEW.DateFrom THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DateFrom',NEW.RowID,OLD.DateFrom,NEW.DateFrom,'Update');

END IF;

IF OLD.DateTo != NEW.DateTo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DateTo',NEW.RowID,OLD.DateTo,NEW.DateTo,'Update');

END IF;

IF OLD.School != NEW.School THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'School',NEW.RowID,OLD.School,NEW.School,'Update');

END IF;

IF OLD.Degree != NEW.Degree THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Degree',NEW.RowID,OLD.Degree,NEW.Degree,'Update');

END IF;

IF OLD.Course != NEW.Course THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Course',NEW.RowID,OLD.Course,NEW.Course,'Update');

END IF;

IF OLD.Minor != NEW.Minor THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Minor',NEW.RowID,OLD.Minor,NEW.Minor,'Update');

END IF;

IF OLD.EducationType != NEW.EducationType THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EducationType',NEW.RowID,OLD.EducationType,NEW.EducationType,'Update');

END IF;

IF OLD.Remarks != NEW.Remarks THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Remarks',NEW.RowID,OLD.Remarks,NEW.Remarks,'Update');

END IF;



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeefirstweekshift
DROP TRIGGER IF EXISTS `AFTUPD_employeefirstweekshift`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeefirstweekshift` AFTER UPDATE ON `employeefirstweekshift` FOR EACH ROW BEGIN

DECLARE anyintiger INT(11) DEFAULT 0;

DECLARE date_diff INT(11);

DECLARE lastdateof_default_week_format DATE;

DECLARE EndingDate DATE DEFAULT LAST_DAY(DATE_FORMAT(CURDATE(),'%Y-12-01'));

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeeleave_then_employeetimeentry
DROP TRIGGER IF EXISTS `AFTUPD_employeeleave_then_employeetimeentry`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeeleave_then_employeetimeentry` AFTER UPDATE ON `employeeleave` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Leave' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.LeaveType!=NEW.LeaveType THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LeaveType',NEW.RowID,OLD.LeaveType,NEW.LeaveType,'Update');

END IF;

IF OLD.LeaveStartTime!=NEW.LeaveStartTime THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LeaveStartTime',NEW.RowID,OLD.LeaveStartTime,NEW.LeaveStartTime,'Update');

END IF;

IF OLD.LeaveEndTime!=NEW.LeaveEndTime THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LeaveEndTime',NEW.RowID,OLD.LeaveEndTime,NEW.LeaveEndTime,'Update');

END IF;

IF OLD.LeaveStartDate!=NEW.LeaveStartDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LeaveStartDate',NEW.RowID,OLD.LeaveStartDate,NEW.LeaveStartDate,'Update');

END IF;

IF OLD.LeaveEndDate!=NEW.LeaveEndDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LeaveEndDate',NEW.RowID,OLD.LeaveEndDate,NEW.LeaveEndDate,'Update');

END IF;

IF OLD.Reason!=NEW.Reason THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Reason',NEW.RowID,OLD.Reason,NEW.Reason,'Update');

END IF;

IF OLD.Comments!=NEW.Comments THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,OLD.Comments,NEW.Comments,'Update');

END IF;








END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeeloanschedule
DROP TRIGGER IF EXISTS `AFTUPD_employeeloanschedule`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeeloanschedule` AFTER UPDATE ON `employeeloanschedule` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Loan Schedule' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.LoanNumber != NEW.LoanNumber THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LoanNumber',NEW.RowID,OLD.LoanNumber,NEW.LoanNumber,'Update');

END IF;

IF OLD.DedEffectiveDateFrom != NEW.DedEffectiveDateFrom THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DedEffectiveDateFrom',NEW.RowID,OLD.DedEffectiveDateFrom,NEW.DedEffectiveDateFrom,'Update');

END IF;

IF OLD.DedEffectiveDateTo != NEW.DedEffectiveDateTo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DedEffectiveDateTo',NEW.RowID,OLD.DedEffectiveDateTo,NEW.DedEffectiveDateTo,'Update');

END IF;

IF OLD.TotalLoanAmount != NEW.TotalLoanAmount THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'TotalLoanAmount',NEW.RowID,OLD.TotalLoanAmount,NEW.TotalLoanAmount,'Update');

END IF;

IF OLD.DeductionSchedule != NEW.DeductionSchedule THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DeductionSchedule',NEW.RowID,OLD.DeductionSchedule,NEW.DeductionSchedule,'Update');

END IF;

IF OLD.TotalBalanceLeft != NEW.TotalBalanceLeft THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'TotalBalanceLeft',NEW.RowID,OLD.TotalBalanceLeft,NEW.TotalBalanceLeft,'Update');

END IF;

IF OLD.DeductionAmount != NEW.DeductionAmount THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DeductionAmount',NEW.RowID,OLD.DeductionAmount,NEW.DeductionAmount,'Update');

END IF;

IF OLD.Status != NEW.Status THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Status',NEW.RowID,OLD.Status,NEW.Status,'Update');

END IF;

IF OLD.LoanTypeID != NEW.LoanTypeID THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LoanTypeID',NEW.RowID,OLD.LoanTypeID,NEW.LoanTypeID,'Update');

END IF;

IF OLD.DeductionPercentage != NEW.DeductionPercentage THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DeductionPercentage',NEW.RowID,OLD.DeductionPercentage,NEW.DeductionPercentage,'Update');

END IF;

IF OLD.NoOfPayPeriod != NEW.NoOfPayPeriod THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'NoOfPayPeriod',NEW.RowID,OLD.NoOfPayPeriod,NEW.NoOfPayPeriod,'Update');

END IF;

IF OLD.LoanPayPeriodLeft != NEW.LoanPayPeriodLeft THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LoanPayPeriodLeft',NEW.RowID,OLD.LoanPayPeriodLeft,NEW.LoanPayPeriodLeft,'Update');

END IF;

IF OLD.Comments != NEW.Comments THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,OLD.Comments,NEW.Comments,'Update');

END IF;

# SET @is_uncharge_tobonus = (OLD.BonusID IS NOT NULL AND NEW.BonusID IS NULL);
SET @is_uncharge_tobonus = (NEW.BonusID IS NULL);

IF @is_charge_tobonust = TRUE THEN

   UPDATE employeebonus eb
	SET
	# eb.RemainingBalance = (eb.RemainingBalance + NEW.DeductionAmount)
	eb.RemainingBalance = (eb.RemainingBalance + (NEW.DeductionAmount * NEW.LoanPayPeriodLeft))
	,eb.LastUpdBy = IFNULL(eb.LastUpdBy, eb.CreatedBy)
	,eb.LastUpd = CURRENT_TIMESTAMP()
	WHERE eb.RowID = OLD.BonusID
	# AND NEW.BonusPotentialPaymentForLoan = 0
	;

	/*UPDATE employeebonus eb
	SET
	eb.RemainingBalance = (eb.RemainingBalance + (NEW.DeductionAmount * NEW.LoanPayPeriodLeft))
	,eb.LastUpdBy = IFNULL(eb.LastUpdBy, eb.CreatedBy)
	,eb.LastUpd = CURRENT_TIMESTAMP()
	WHERE eb.RowID = OLD.BonusID
	AND NEW.BonusPotentialPaymentForLoan = 1;*/
	
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeemedicalrecord
DROP TRIGGER IF EXISTS `AFTUPD_employeemedicalrecord`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeemedicalrecord` AFTER UPDATE ON `employeemedicalrecord` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Medical Profile' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.DateFrom != NEW.DateFrom THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DateFrom',NEW.RowID,OLD.DateFrom,NEW.DateFrom,'Update');

END IF;

IF OLD.DateTo != NEW.DateTo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DateTo',NEW.RowID,OLD.DateTo,NEW.DateTo,'Update');

END IF;

IF OLD.ProductID != NEW.ProductID THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'ProductID',NEW.RowID,OLD.ProductID,NEW.ProductID,'Update');

END IF;

IF OLD.Finding != NEW.Finding THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Finding',NEW.RowID,OLD.Finding,NEW.Finding,'Update');

END IF;




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeeofficialbusines_then_employeetimeentrydetails
DROP TRIGGER IF EXISTS `AFTUPD_employeeofficialbusines_then_employeetimeentrydetails`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeeofficialbusines_then_employeetimeentrydetails` AFTER UPDATE ON `employeeofficialbusiness` FOR EACH ROW BEGIN



DECLARE eob_dayrange INT(11);

DECLARE prev_dayrange INT(11);

DECLARE i INT(11);

DECLARE viewID INT(11);

DECLARE etetn_RowID INT(11);

DECLARE OLD_OffBusStartDate DATE DEFAULT OLD.OffBusStartDate;

DECLARE one_datetimestamp DATETIME DEFAULT CURRENT_TIMESTAMP();

SET prev_dayrange = COALESCE(DATEDIFF(COALESCE(OLD.OffBusEndDate,OLD.OffBusStartDate),OLD.OffBusStartDate),0) + 1;

SET eob_dayrange = COALESCE(DATEDIFF(COALESCE(NEW.OffBusEndDate,NEW.OffBusStartDate),NEW.OffBusStartDate),0) + 1;

SET i=0;

/*IF (OLD.OffBusStatus != 'Approved' AND NEW.OffBusStatus = 'Approved')
    AND OLD.OffBusStartTime != NEW.OffBusStartTime
    AND OLD.OffBusEndTime != NEW.OffBusEndTime
    AND OLD.OffBusStartDate != NEW.OffBusStartDate
    AND OLD.OffBusEndDate != NEW.OffBusEndDate THEN

    IF NEW.OffBusStatus = 'Approved' THEN

        SELECT CURRENT_TIMESTAMP() INTO one_datetimestamp;

        INSERT INTO employeetimeentrydetails
        (
            RowID
            ,OrganizationID
            ,Created
            ,CreatedBy
            ,EmployeeID
            ,TimeIn
            ,TimeOut
            ,`Date`
            ,TimeScheduleType
            ,TimeEntryStatus
        ) SELECT etd.RowID
            ,NEW.OrganizationID
            ,one_datetimestamp
            ,NEW.CreatedBy
            ,NEW.EmployeeID
            ,NEW.OffBusStartTime
            ,NEW.OffBusEndTime
            ,d.DateValue
            ,''
            ,''
            FROM dates d
            LEFT JOIN employeetimeentrydetails etd ON etd.EmployeeID=NEW.EmployeeID AND etd.OrganizationID=NEW.OrganizationID AND etd.`Date`=d.DateValue
            WHERE d.DateValue BETWEEN NEW.OffBusStartDate AND NEW.OffBusEndDate
        ON
        DUPLICATE
        KEY
        UPDATE
            LastUpd = CURRENT_TIMESTAMP()
            ,LastUpdBy = NEW.CreatedBy
            ,TimeIn = IFNULL(NEW.OffBusStartTime,etd.TimeIn)
            ,TimeOut = IFNULL(NEW.OffBusEndTime,etd.TimeOut);

    END IF;

ELSEIF prev_dayrange > eob_dayrange AND NEW.OffBusStatus = 'Approved' THEN

    simple_loop: LOOP

        IF i >= prev_dayrange THEN
            LEAVE simple_loop;
        ELSE

            SELECT SUM(RowID) FROM employeetimeentrydetails WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND Date=DATE_ADD(NEW.OffBusStartDate, INTERVAL i DAY) LIMIT 1 INTO etetn_RowID;

            IF i < eob_dayrange THEN
                UPDATE employeetimeentrydetails SET
                LastUpd=one_datetimestamp
                ,LastUpdBy=NEW.LastUpdBy
                ,TimeIn=NEW.OffBusStartTime
                ,TimeOut=NEW.OffBusEndTime
                ,Date=DATE_ADD(NEW.OffBusStartDate, INTERVAL i DAY)
                ,TimeScheduleType='F'
                ,TimeEntryStatus=IF(NEW.OffBusStartTime IS NULL,'missing clock in',IF(NEW.OffBusEndTime IS NULL,'missing clock out','')) WHERE RowID=etetn_RowID;
            ELSE
                DELETE FROM employeetimeentrydetails WHERE RowID=etetn_RowID;
            END IF;

        END IF;

        SET i=i+1;

    END LOOP simple_loop;

ELSEIF prev_dayrange = eob_dayrange AND NEW.OffBusStatus = 'Approved' THEN

simple_loop: LOOP

    IF i >= eob_dayrange THEN
        LEAVE simple_loop;
    ELSE

        SELECT SUM(RowID) FROM employeetimeentrydetails WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND Date=DATE_ADD(NEW.OffBusStartDate, INTERVAL i DAY) LIMIT 1 INTO etetn_RowID;

        INSERT INTO employeetimeentrydetails
        (
            RowID
            ,OrganizationID
            ,Created
            ,CreatedBy
            ,EmployeeID
            ,TimeIn
            ,TimeOut
            ,Date
            ,TimeScheduleType
            ,TimeEntryStatus
        ) VALUES (
            COALESCE(etetn_RowID,NULL)
            ,NEW.OrganizationID
            ,one_datetimestamp
            ,NEW.CreatedBy
            ,NEW.EmployeeID
            ,NEW.OffBusStartTime
            ,NEW.OffBusEndTime
            ,DATE_ADD(NEW.OffBusStartDate, INTERVAL i DAY)
            ,'F'
            ,IF(NEW.OffBusStartTime IS NULL,'missing clock in',IF(NEW.OffBusEndTime IS NULL,'missing clock out',''))
        ) ON
        DUPLICATE
        KEY
        UPDATE
            LastUpd=one_datetimestamp
            ,LastUpdBy=NEW.LastUpdBy
            ,TimeIn=NEW.OffBusStartTime
            ,TimeOut=NEW.OffBusEndTime
            ,Date=DATE_ADD(NEW.OffBusStartDate, INTERVAL i DAY)
            ,TimeScheduleType='F'
            ,TimeEntryStatus=IF(NEW.OffBusStartTime IS NULL,'missing clock in',IF(NEW.OffBusEndTime IS NULL,'missing clock out',''));

    END IF;

    SET i=i+1;

END LOOP simple_loop;

END IF;*/





SELECT RowID FROM `view` WHERE ViewName='Official Business filing' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.OffBusStartTime!=NEW.OffBusStartTime THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OffBusStartTime',NEW.RowID,OLD.OffBusStartTime,NEW.OffBusStartTime,'Update');

END IF;

IF OLD.OffBusEndTime!=NEW.OffBusEndTime THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OffBusEndTime',NEW.RowID,OLD.OffBusEndTime,NEW.OffBusEndTime,'Update');

END IF;

IF OLD.OffBusType!=NEW.OffBusType THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OffBusType',NEW.RowID,OLD.OffBusType,NEW.OffBusType,'Update');

END IF;

IF OLD.OffBusStartDate!=NEW.OffBusStartDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OffBusStartDate',NEW.RowID,OLD.OffBusStartDate,NEW.OffBusStartDate,'Update');

END IF;

IF OLD.OffBusEndDate!=NEW.OffBusEndDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OffBusEndDate',NEW.RowID,OLD.OffBusEndDate,NEW.OffBusEndDate,'Update');

END IF;

IF OLD.Reason!=NEW.Reason THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Reason',NEW.RowID,OLD.Reason,NEW.Reason,'Update');

END IF;

IF OLD.Comments!=NEW.Comments THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,OLD.Comments,NEW.Comments,'Update');

END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeeoffset
DROP TRIGGER IF EXISTS `AFTUPD_employeeoffset`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeeoffset` AFTER UPDATE ON `employeeoffset` FOR EACH ROW BEGIN

DECLARE tothoursoffset DECIMAL(11,6);

DECLARE prev_offset_hours DECIMAL(11,6);

DECLARE sec_per_hour INT(11) DEFAULT 3600; # 60 seconds times 60 minutes

DECLARE bef_num_of_days, aft_num_of_days DECIMAL(11,6);

SET prev_offset_hours = TIMESTAMPDIFF(SECOND
                               , CONCAT_DATETIME(OLD.StartDate, OLD.StartTime)
										 , CONCAT_DATETIME(ADDDATE(OLD.StartDate, INTERVAL IS_TIMERANGE_REACHTOMORROW(OLD.StartTime, OLD.EndTime) DAY), OLD.EndTime)) / sec_per_hour;

SET tothoursoffset = TIMESTAMPDIFF(SECOND
                               , CONCAT_DATETIME(NEW.StartDate, NEW.StartTime)
										 , CONCAT_DATETIME(ADDDATE(NEW.StartDate, INTERVAL IS_TIMERANGE_REACHTOMORROW(NEW.StartTime, NEW.EndTime) DAY), NEW.EndTime)) / sec_per_hour;

SET bef_num_of_days = (DATEDIFF(OLD.EndDate, OLD.StartDate) + 1);

IF bef_num_of_days < 0 THEN SET bef_num_of_days=1; END IF;


SET aft_num_of_days = (DATEDIFF(NEW.EndDate, NEW.StartDate) + 1);

IF aft_num_of_days < 0 THEN SET aft_num_of_days=1; END IF;

UPDATE employee e
SET e.OffsetBalance = ( IFNULL(e.OffsetBalance,0) + ( ((IFNULL(tothoursoffset, 0) * aft_num_of_days) - (IFNULL(prev_offset_hours, 0) * bef_num_of_days)) ) )
,e.LastUpdBy=NEW.CreatedBy
WHERE e.RowID = NEW.EmployeeID
AND NEW.`Status` = 'Approved';

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeeovertime
DROP TRIGGER IF EXISTS `AFTUPD_employeeovertime`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeeovertime` AFTER UPDATE ON `employeeovertime` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Overtime' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.OTType != NEW.OTType THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OTType',NEW.RowID,OLD.OTType,NEW.OTType,'Update');

END IF;

IF OLD.OTStatus != NEW.OTStatus THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OTStatus',NEW.RowID,OLD.OTStatus,NEW.OTStatus,'Update');

END IF;

IF OLD.OTStartDate != NEW.OTStartDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OTStartDate',NEW.RowID,OLD.OTStartDate,NEW.OTStartDate,'Update');

END IF;

IF OLD.OTEndDate != NEW.OTEndDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OTEndDate',NEW.RowID,OLD.OTEndDate,NEW.OTEndDate,'Update');

END IF;

IF OLD.OTStartTime != NEW.OTStartTime THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OTStartTime',NEW.RowID,OLD.OTStartTime,NEW.OTStartTime,'Update');

END IF;

IF OLD.OTEndTime != NEW.OTEndTime THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OTEndTime',NEW.RowID,OLD.OTEndTime,NEW.OTEndTime,'Update');

END IF;

IF OLD.Reason != NEW.Reason THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Reason',NEW.RowID,OLD.Reason,NEW.Reason,'Insert');

END IF;

IF OLD.Comments != NEW.Comments THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Comments',NEW.RowID,OLD.Comments,NEW.Comments,'Update');

END IF;




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeepreviousemployer
DROP TRIGGER IF EXISTS `AFTUPD_employeepreviousemployer`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeepreviousemployer` AFTER UPDATE ON `employeepreviousemployer` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Previous Employer' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.MainPhone != NEW.MainPhone THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'MainPhone',NEW.RowID,OLD.MainPhone,NEW.MainPhone,'Update');

END IF;

IF OLD.FaxNumber != NEW.FaxNumber THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'FaxNumber',NEW.RowID,OLD.FaxNumber,NEW.FaxNumber,'Update');

END IF;

IF OLD.JobTitle != NEW.JobTitle THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'JobTitle',NEW.RowID,OLD.JobTitle,NEW.JobTitle,'Update');

END IF;

IF OLD.ExperienceFromTo != NEW.ExperienceFromTo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'ExperienceFromTo',NEW.RowID,OLD.ExperienceFromTo,NEW.ExperienceFromTo,'Update');

END IF;

IF OLD.BusinessAddress != NEW.BusinessAddress THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'BusinessAddress',NEW.RowID,OLD.BusinessAddress,NEW.BusinessAddress,'Update');

END IF;

IF OLD.ContactName != NEW.ContactName THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'ContactName',NEW.RowID,OLD.ContactName,NEW.ContactName,'Update');

END IF;

IF OLD.EmailAddress != NEW.EmailAddress THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EmailAddress',NEW.RowID,OLD.EmailAddress,NEW.EmailAddress,'Update');

END IF;

IF OLD.AltEmailAddress != NEW.AltEmailAddress THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'AltEmailAddress',NEW.RowID,OLD.AltEmailAddress,NEW.AltEmailAddress,'Update');

END IF;

IF OLD.AltPhone != NEW.AltPhone THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'AltPhone',NEW.RowID,OLD.AltPhone,NEW.AltPhone,'Update');

END IF;

IF OLD.URL != NEW.URL THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'URL',NEW.RowID,OLD.URL,NEW.URL,'Update');

END IF;

IF OLD.TINNo != NEW.TINNo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'TINNo',NEW.RowID,OLD.TINNo,NEW.TINNo,'Update');

END IF;

IF OLD.JobFunction != NEW.JobFunction THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'JobFunction',NEW.RowID,OLD.JobFunction,NEW.JobFunction,'Update');

END IF;

IF OLD.OrganizationType != NEW.OrganizationType THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OrganizationType',NEW.RowID,OLD.OrganizationType,NEW.OrganizationType,'Update');

END IF;




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeepromotions
DROP TRIGGER IF EXISTS `AFTUPD_employeepromotions`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeepromotions` AFTER UPDATE ON `employeepromotions` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Promotion' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.PositionFrom != NEW.PositionFrom THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'PositionFrom',NEW.RowID,OLD.PositionFrom,NEW.PositionFrom,'Update');

END IF;

IF OLD.PositionTo != NEW.PositionTo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,New.LastUpdBy,NEW.OrganizationID,viewID,'PositionTo',NEW.RowID,OLD.PositionTo,NEW.PositionTo,'Update');

END IF;

IF OLD.EffectiveDate != NEW.EffectiveDate THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,New.LastUpdBy,NEW.OrganizationID,viewID,'EffectiveDate',NEW.RowID,OLD.EffectiveDate,NEW.EffectiveDate,'Update');

END IF;

IF OLD.CompensationChange != NEW.CompensationChange THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,New.LastUpdBy,NEW.OrganizationID,viewID,'CompensationChange',NEW.RowID,OLD.CompensationChange,NEW.CompensationChange,'Update');

END IF;

IF OLD.EmployeeSalaryID != NEW.EmployeeSalaryID THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,New.LastUpdBy,NEW.OrganizationID,viewID,'EmployeeSalaryID',NEW.RowID,OLD.EmployeeSalaryID,NEW.EmployeeSalaryID,'Update');

END IF;

IF OLD.Reason != NEW.Reason THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Reason',NEW.RowID,OLD.Reason,NEW.Reason,'Update');
END IF;


END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeesalary
DROP TRIGGER IF EXISTS `AFTUPD_employeesalary`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeesalary` AFTER UPDATE ON `employeesalary` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Salary' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.FilingStatusID != NEW.FilingStatusID THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'FilingStatusID',NEW.RowID,OLD.FilingStatusID,NEW.FilingStatusID,'Update');

END IF;

IF OLD.PaySocialSecurityID != NEW.PaySocialSecurityID THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'PaySocialSecurityID',NEW.RowID,OLD.PaySocialSecurityID,NEW.PaySocialSecurityID,'Update');

END IF;

IF OLD.PayPhilhealthID != NEW.PayPhilhealthID THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'PayPhilhealthID',NEW.RowID,OLD.PayPhilhealthID,NEW.PayPhilhealthID,'Update');

END IF;

IF OLD.HDMFAmount != NEW.HDMFAmount THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'HDMFAmount',NEW.RowID,OLD.HDMFAmount,NEW.HDMFAmount,'Update');

END IF;

IF OLD.BasicPay != NEW.BasicPay THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'BasicPay',NEW.RowID,OLD.BasicPay,NEW.BasicPay,'Update');

END IF;

IF OLD.Salary != NEW.Salary THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Salary',NEW.RowID,OLD.Salary,NEW.Salary,'Update');

END IF;

IF OLD.BasicDailyPay != NEW.BasicDailyPay THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'BasicDailyPay',NEW.RowID,OLD.BasicDailyPay,NEW.BasicDailyPay,'Update');

END IF;

IF OLD.BasicHourlyPay != NEW.BasicHourlyPay THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'BasicHourlyPay',NEW.RowID,OLD.BasicHourlyPay,NEW.BasicHourlyPay,'Update');

END IF;

IF OLD.NoofDependents != NEW.NoofDependents THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'NoofDependents',NEW.RowID,OLD.NoofDependents,NEW.NoofDependents,'Update');

END IF;

IF OLD.MaritalStatus != NEW.MaritalStatus THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'MaritalStatus',NEW.RowID,OLD.MaritalStatus,NEW.MaritalStatus,'Update');

END IF;

IF OLD.PositionID != NEW.PositionID THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'PositionID',NEW.RowID,OLD.PositionID,NEW.PositionID,'Update');

END IF;

IF OLD.EffectiveDateFrom != NEW.EffectiveDateFrom THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EffectiveDateFrom',NEW.RowID,OLD.EffectiveDateFrom,NEW.EffectiveDateFrom,'Update');

END IF;

IF OLD.EffectiveDateTo != NEW.EffectiveDateTo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EffectiveDateTo',NEW.RowID,OLD.EffectiveDateTo,NEW.EffectiveDateTo,'Update');

END IF;


UPDATE employeetimeentry ete
SET ete.EmployeeSalaryID=NEW.RowID
WHERE ete.EmployeeID=NEW.EmployeeID
AND ete.OrganizationID=NEW.OrganizationID
AND ete.EmployeeSalaryID IS NULL
AND ete.`Date` BETWEEN NEW.EffectiveDateFrom AND IFNULL(NEW.EffectiveDateTo,ete.`Date`);


END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeeshift
DROP TRIGGER IF EXISTS `AFTUPD_employeeshift`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeeshift` AFTER UPDATE ON `employeeshift` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Employee Shift' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.ShiftID != NEW.ShiftID THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'ShiftID',NEW.RowID,OLD.ShiftID,NEW.ShiftID,'Update');

END IF;

IF OLD.EffectiveFrom != NEW.EffectiveFrom THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EffectiveFrom',NEW.RowID,OLD.EffectiveFrom,NEW.EffectiveFrom,'Update');

END IF;

IF OLD.EffectiveTo != NEW.EffectiveTo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EffectiveTo',NEW.RowID,OLD.EffectiveTo,NEW.EffectiveTo,'Update');

END IF;

IF OLD.NightShift != NEW.NightShift THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'NightShift',NEW.RowID,OLD.NightShift,NEW.NightShift,'Update');

END IF;

IF OLD.RestDay != NEW.RestDay THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'RestDay',NEW.RowID,OLD.RestDay,NEW.RestDay,'Update');

END IF;



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employeetimeentrydetails
DROP TRIGGER IF EXISTS `AFTUPD_employeetimeentrydetails`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employeetimeentrydetails` AFTER UPDATE ON `employeetimeentrydetails` FOR EACH ROW BEGIN

DECLARE emp_group_name VARCHAR(50);

DECLARE anyint INT(11);
DECLARE sh_timefrom TIME;
DECLARE sh_timeto TIME;
DECLARE today_timefrom DATETIME;
DECLARE today_timeto DATETIME;
DECLARE tomorrow_timefrom DATETIME DEFAULT NULL;
DECLARE tomorrow_timeto DATETIME DEFAULT NULL;
DECLARE isShiftRestDay CHAR(1);
DECLARE today_timein DATETIME;
DECLARE today_timeout DATETIME;
DECLARE empOTRowID INT(11);

DECLARE anycomment VARCHAR(200);

DECLARE au_ViewID INT(11);

SELECT d.AutomaticOvertimeFiling
FROM employee e
INNER JOIN position p ON p.RowID=e.PositionID
INNER JOIN `division` d ON d.RowID=p.DivisionId AND d.ParentDivisionID IS NOT NULL
WHERE e.RowID=NEW.EmployeeID
INTO emp_group_name;

SET today_timein = ADDTIME(TIMESTAMP(NEW.`Date`), NEW.TimeIn);

SET today_timeout = ADDTIME(IF(NEW.TimeOut > NEW.TimeIn AND TIME_FORMAT(NEW.TimeIn,'%p') != TIME_FORMAT(NEW.TimeOut,'%p'), TIMESTAMP(NEW.`Date`), TIMESTAMP(ADDDATE(NEW.`Date`, INTERVAL 1 DAY))), NEW.TimeOut);

IF emp_group_name = '1' THEN
    SET @min_ot_time = CURTIME();
    SELECT sh.TimeFrom
    ,sh.TimeTo
    ,esh.RestDay
    ,ADDTIME(TIMESTAMP(NEW.`Date`), sh.TimeFrom)
    ,ADDTIME(IF(sh.TimeTo > sh.TimeFrom, TIMESTAMP(NEW.`Date`), TIMESTAMP(ADDDATE(NEW.`Date`, INTERVAL 1 DAY))), sh.TimeTo)
    ,IFNULL(e.MinimumOvertime, CAST(0 AS TIME))
    FROM employeeshift esh
    INNER JOIN employee e ON e.RowID=esh.EmployeeID AND e.OrganizationID=esh.OrganizationID
    INNER JOIN shift sh ON sh.RowID=esh.ShiftID
    WHERE esh.EmployeeID=NEW.EmployeeID
    AND esh.OrganizationID=NEW.OrganizationID
    AND NEW.`Date` BETWEEN esh.EffectiveFrom AND esh.EffectiveTo LIMIT 1
    INTO sh_timefrom
            ,sh_timeto
            ,isShiftRestDay,today_timefrom,today_timeto, @min_ot_time;

    SET tomorrow_timefrom = TIMESTAMP(TIMESTAMPADD(HOUR,24,today_timefrom));
    SET tomorrow_timeto = TIMESTAMP(TIMESTAMPADD(HOUR,24,today_timeto));
    IF isShiftRestDay IS NOT NULL THEN

        IF isShiftRestDay = '0' THEN

            SELECT RowID
            FROM employeeovertime
            WHERE EmployeeID=NEW.EmployeeID
            AND OrganizationID=NEW.OrganizationID
            AND OTStatus='Approved'
            AND NEW.`Date` BETWEEN OTEndDate AND OTEndDate
            LIMIT 1
            INTO empOTRowID;

            IF TIMESTAMP(today_timeout) BETWEEN ADDTIME(TIMESTAMP(today_timeto), @min_ot_time) AND TIMESTAMP(TIMESTAMPADD(SECOND, -1, tomorrow_timefrom)) THEN

                SET anycomment = 'checking the employees time out here if it is in at least 15 minutes';

                IF empOTRowID IS NOT NULL THEN

                    UPDATE employeeovertime
                    SET OTStatus='Approved', OTStartTime = sh_timeto, OTEndTime = NEW.TimeOut
                    ,Comments=''
                    ,LastUpd=CURRENT_TIMESTAMP()
                    ,LastUpdBy=NEW.LastUpdBy
                    WHERE RowID=empOTRowID
                    AND OTStatus='Approved';

                ELSE

                    SELECT INSUPD_employeeOT(NULL,NEW.OrganizationID,NEW.CreatedBy,NEW.CreatedBy,NEW.EmployeeID,'Overtime',sh_timeto,NEW.TimeOut,NEW.`Date`,NEW.`Date`,'Approved','',today_timeout,NULL) INTO anyint;

                END IF;

            ELSEIF TIMESTAMP(today_timeout) BETWEEN TIMESTAMP(SUBTIME(today_timeto,'00:15:59')) AND TIMESTAMP(today_timeto) THEN
                SET anycomment = 'employees time out here seems an under time';

                IF empOTRowID IS NOT NULL THEN

                    UPDATE employeeovertime
                    SET OTStatus='Pending'
                    ,LastUpd=CURRENT_TIMESTAMP()
                    ,LastUpdBy=NEW.LastUpdBy
                    WHERE RowID=empOTRowID
                    AND OTStatus='Approved';

                END IF;

            END IF;



            IF TIME_FORMAT(sh_timeto,'%p')='PM' THEN

                IF NEW.TimeStampIn < ADDTIME(TIMESTAMP(NEW.`Date`), SUBTIME(sh_timefrom, @min_ot_time)) THEN

                    SELECT 0 INTO anyint;

                ELSE

                    DELETE FROM employeeovertime WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND (NEW.`Date` BETWEEN OTStartDate AND OTEndDate) AND (OTStartTime BETWEEN TIME_FORMAT(NEW.TimeStampIn,@@time_format) AND SUBTIME(sh_timefrom,'00:00:01'));
                END IF;


            END IF;



        END IF;

    END IF;

    UPDATE employeeovertime SET OTStartTime = sh_timeto, OTEndTime = NEW.TimeOut, LastUpd=IFNULL(ADDTIME(LastUpd, '00:00:01'),CURRENT_TIMESTAMP()), LastUpdBy=NEW.CreatedBy WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID AND NEW.`Date` BETWEEN OTStartDate AND OTEndDate AND sh_timeto IS NOT NULL;

END IF;

    SELECT RowID
    FROM `view`
    WHERE ViewName='Employee Time Entry Logs'
    AND OrganizationID=NEW.OrganizationID
    LIMIT 1
    INTO au_ViewID;

    SELECT INS_audittrail_RETRowID(NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,au_ViewID,'TimeIn',NEW.RowID,OLD.TimeIn,NEW.TimeIn,'Update') INTO anyint;

    SELECT INS_audittrail_RETRowID(NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,au_ViewID,'TimeOut',NEW.RowID,OLD.TimeOut,NEW.TimeOut,'Update') INTO anyint;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_employee_then_employeesalary
DROP TRIGGER IF EXISTS `AFTUPD_employee_then_employeesalary`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_employee_then_employeesalary` AFTER UPDATE ON `employee` FOR EACH ROW BEGIN

DECLARE empBasicPay DECIMAL(11,2);

DECLARE marit_stat CHAR(10);

DECLARE lastdate DATE;

DECLARE prevesalRowID INT(11);

DECLARE thebasicpay DECIMAL(11,2) DEFAULT 0;

DECLARE thedailypay DECIMAL(11,2) DEFAULT 0;

DECLARE thehourlypay DECIMAL(11,2) DEFAULT 0;

DECLARE psssID INT(11);

DECLARE phhID INT(11);

DECLARE preEffDateFromEmpSal DATE DEFAULT CURRENT_DATE();

DECLARE preEffDateFromEmpSallatest DATE DEFAULT CURRENT_DATE();

DECLARE preEffDateToEmpSallatest DATE DEFAULT CURRENT_DATE();

DECLARE emp_chklist_ID INT(11);

DECLARE viewID INT(11);

DECLARE emp_fullmonthsalary DECIMAL(11,2) DEFAULT 0;

DECLARE current_salaryeffectivedate DATE DEFAULT CURRENT_DATE();

DECLARE emp_everydayallowance DECIMAL(11,2) DEFAULT 0;

DECLARE NEW_agency_name VARCHAR(100);

DECLARE OLD_agency_name VARCHAR(100);

DECLARE NEW_agfee DECIMAL(11,2) DEFAULT 0;

DECLARE OLD_agfee DECIMAL(11,2) DEFAULT 0;

DECLARE agfee_percent DECIMAL(11,2) DEFAULT 0;

DECLARE anyint INT(11);

DECLARE IsDepartmentChanged CHAR(1);

DECLARE anyintiger INT(11) DEFAULT 0;

SELECT @@default_week_format INTO anyintiger;

SET @salary_count = (SELECT COUNT(RowID) FROM employeesalary WHERE EmployeeID=NEW.RowID AND OrganizationID=NEW.OrganizationID);

IF NEW.NoOfDependents != OLD.NoOfDependents OR NEW.MaritalStatus != COALESCE(OLD.MaritalStatus,'') OR @salary_count = 0 THEN

    IF NEW.EmploymentStatus NOT IN ('Resigned','Terminated') THEN

    SELECT IF(NEW.MaritalStatus IN ('Single','Married'),NEW.MaritalStatus,'Zero') INTO marit_stat;



    SELECT RowID,Salary,EffectiveDateFrom FROM employeesalary WHERE EmployeeID=NEW.RowID AND OrganizationID=NEW.OrganizationID AND EffectiveDateTo IS NULL ORDER BY DATEDIFF(DATE_FORMAT(NOW(),'%Y-%m-%d'),EffectiveDateFrom) LIMIT 1 INTO prevesalRowID,empBasicPay,preEffDateFromEmpSal;

        SELECT RowID FROM payphilhealth WHERE COALESCE(empBasicPay,0) BETWEEN SalaryRangeFrom AND IF(COALESCE(empBasicPay,0) > SalaryRangeTo, COALESCE(empBasicPay,0) + 1, SalaryRangeTo) ORDER BY SalaryBase DESC LIMIT 1 INTO phhID;



    IF NEW.EmployeeType IN ('Fixed','Monthly') THEN
        IF NEW.PayFrequencyID=1 THEN
            SET thebasicpay = empBasicPay / 2;
            SET thedailypay = 0;
            SET thehourlypay = 0;
        ELSE
            SET thebasicpay = empBasicPay;
            SET thedailypay = 0;
            SET thehourlypay = 0;
        END IF;

        SELECT RowID FROM paysocialsecurity WHERE COALESCE(empBasicPay,0) BETWEEN RangeFromAmount AND IF(COALESCE(thebasicpay,0) > RangeToAmount, COALESCE(thebasicpay,0) + 1, RangeToAmount) ORDER BY MonthlySalaryCredit DESC LIMIT 1 INTO psssID;

    ELSEIF NEW.EmployeeType = 'Daily' THEN
            SET thebasicpay = empBasicPay;
            SET thedailypay = empBasicPay;
            SET thehourlypay = 0;

        SELECT RowID FROM paysocialsecurity WHERE COALESCE(thedailypay,0) BETWEEN RangeFromAmount AND IF(COALESCE(thebasicpay,0) > RangeToAmount, COALESCE(thebasicpay,0) + 1, RangeToAmount) ORDER BY MonthlySalaryCredit DESC LIMIT 1 INTO psssID;

    ELSEIF NEW.EmployeeType = 'Hourly' THEN
            SET thebasicpay = empBasicPay;
            SET thedailypay = 0;
            SET thehourlypay = empBasicPay;

        SELECT RowID FROM paysocialsecurity WHERE COALESCE(thehourlypay,0) BETWEEN RangeFromAmount AND IF(COALESCE(thebasicpay,0) > RangeToAmount, COALESCE(thebasicpay,0) + 1, RangeToAmount) ORDER BY MonthlySalaryCredit DESC LIMIT 1 INTO psssID;

    END IF;

    SELECT CAST(CONCAT(YEAR(NOW()),'-12-',DAY(LAST_DAY(CONCAT(YEAR(NOW()),'-12-00')))) AS DATE) INTO lastdate;



SET preEffDateFromEmpSallatest = IF(DATEDIFF(CURRENT_DATE(),preEffDateFromEmpSal) = 0, ADDDATE(CURRENT_DATE(), INTERVAL 1 DAY), IF(DATEDIFF(CURRENT_DATE(),preEffDateFromEmpSal) < 0, ADDDATE(preEffDateFromEmpSal, INTERVAL 1 DAY), ADDDATE(CURRENT_DATE(), INTERVAL -1 DAY)));

    UPDATE employeesalary SET
    LastUpdBy=NEW.LastUpdBy
    ,EffectiveDateTo=preEffDateFromEmpSallatest
    WHERE RowID=prevesalRowID;



    SELECT ADDDATE(EffectiveDateTo, INTERVAL 1 DAY) FROM employeesalary WHERE RowID=prevesalRowID INTO preEffDateToEmpSallatest;
    SET @emp_true_sal = (SELECT TrueSalary FROM employeesalary WHERE RowID=prevesalRowID);
    INSERT INTO employeesalary
    (
        EmployeeID
        ,Created
        ,CreatedBy
        ,OrganizationID
        ,PaySocialSecurityID
        ,PayPhilhealthID
        ,HDMFAmount
        ,Salary
        ,BasicPay
        ,BasicDailyPay
        ,BasicHourlyPay
        ,FilingStatusID
        ,NoofDependents
        ,MaritalStatus
        ,PositionID
        ,EffectiveDateFrom,TrueSalary
    ) VALUES(
        NEW.RowID
        ,CURRENT_TIMESTAMP()
        ,NEW.CreatedBy
        ,NEW.OrganizationID
        ,psssID
        ,phhID
        ,100
        ,COALESCE(empBasicPay,0)
        ,thebasicpay
        ,thedailypay
        ,thehourlypay
        ,(SELECT fs.RowID FROM filingstatus fs INNER JOIN (SELECT RowID, MaritalStatus, MAX(Dependent) `Dependent` FROM filingstatus GROUP BY MaritalStatus) fss ON fss.MaritalStatus=fs.MaritalStatus WHERE fs.MaritalStatus = NEW.MaritalStatus AND fs.Dependent = IF(NEW.NoOfDependents > fss.Dependent, fss.Dependent, NEW.NoOfDependents))
        ,COALESCE(NEW.NoOfDependents,0)
        ,NEW.MaritalStatus
        ,NEW.PositionID
        ,preEffDateToEmpSallatest,IFNULL(@emp_true_sal,0)
    );
    END IF;



ELSEIF NEW.EmploymentStatus = 'Resigned' THEN

    UPDATE employeesalary SET
    LastUpdBy=NEW.LastUpdBy
    ,EffectiveDateTo=CURRENT_DATE()
    WHERE EmployeeID=NEW.RowID
    AND OrganizationID=NEW.OrganizationID
    AND EffectiveDateTo IS NULL;

ELSEIF NEW.EmploymentStatus = 'Terminated' THEN

    UPDATE employeesalary SET
    LastUpdBy=NEW.LastUpdBy
    ,EffectiveDateTo=CURRENT_DATE()
    WHERE EmployeeID=NEW.RowID
    AND OrganizationID=NEW.OrganizationID
    AND EffectiveDateTo IS NULL;



END IF;

SELECT RowID FROM employeechecklist WHERE EmployeeID=NEW.RowID ORDER BY RowID DESC LIMIT 1 INTO emp_chklist_ID;

INSERT INTO employeechecklist
(
    RowID
    ,OrganizationID
    ,Created
    ,CreatedBy
    ,EmployeeID
    ,PerformanceAppraisal
    ,BIRTIN
    ,Diploma
    ,IDInfoSlip
    ,PhilhealthID
    ,HDMFID
    ,SSSNo
    ,TranscriptOfRecord
    ,BirthCertificate
    ,EmployeeContract
    ,MedicalExam
    ,NBIClearance
    ,COEEmployer
    ,MarriageContract
    ,HouseSketch
    ,TrainingAgreement
    ,HealthPermit
    ,ValidID
    ,Resume
) VALUES (
    emp_chklist_ID
    ,NEW.OrganizationID
    ,CURRENT_TIMESTAMP()
    ,NEW.CreatedBy
    ,NEW.RowID
    ,0
    ,IF(COALESCE(NEW.TINNo,'   -   -   -') = '   -   -   -', 0, 1)
    ,0
    ,0
    ,IF(COALESCE(NEW.PhilHealthNo,'    -    -') = '    -    -', 0, 1)
    ,IF(COALESCE(NEW.HDMFNo,'    -    -') = '    -    -', 0, 1)
    ,IF(COALESCE(NEW.SSSNo,'  -       -') = '  -       -', 0, 1)
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
    ,0
) ON
DUPLICATE
KEY
UPDATE
    LastUpd=CURRENT_TIMESTAMP()
    ,LastUpdBy=NEW.LastUpdBy
    ,PerformanceAppraisal=0
    ,BIRTIN=IF(COALESCE(NEW.TINNo,'   -   -   -') = '   -   -   -', 0, 1)
    ,Diploma=0
    ,IDInfoSlip=0
    ,PhilhealthID=IF(COALESCE(NEW.PhilHealthNo,'    -    -') = '    -    -', 0, 1)
    ,HDMFID=IF(COALESCE(NEW.HDMFNo,'    -    -') = '    -    -', 0, 1)
    ,SSSNo=IF(COALESCE(NEW.SSSNo,'  -       -') = '  -       -', 0, 1)
    ,TranscriptOfRecord=0
    ,BirthCertificate=0
    ,EmployeeContract=0
    ,MedicalExam=0
    ,NBIClearance=0
    ,COEEmployer=0
    ,MarriageContract=0
    ,HouseSketch=0
    ,TrainingAgreement=0
    ,HealthPermit=0
    ,ValidID=0
    ,Resume=0;





SELECT RowID FROM `view` WHERE ViewName='Employee Personal Profile' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;


-- IF NEW.WorkDaysPerYear != OLD.WorkDaysPerYear THEN

--     SELECT
--     EffectiveDateFrom
--     ,Salary
--     FROM employeesalary
--     WHERE EmployeeID=NEW.RowID
--     AND OrganizationID=NEW.OrganizationID
--     AND EffectiveDateTo IS NULL
--     INTO current_salaryeffectivedate
--             ,emp_fullmonthsalary;

--     IF NEW.EmployeeType IN ('Fixed','Monthly') THEN

--         SELECT GET_employeeallowancePerDay(NEW.OrganizationID, NEW.RowID, '1', CURDATE()) INTO emp_everydayallowance;

--         SET emp_everydayallowance = (emp_everydayallowance * NEW.WorkDaysPerYear) / 12;

--         SET emp_fullmonthsalary = emp_fullmonthsalary + emp_everydayallowance;

--     ELSEIF NEW.EmployeeType = 'Daily' THEN

--         SELECT GET_employeerateperday(NEW.RowID,NEW.OrganizationID,current_salaryeffectivedate) INTO emp_fullmonthsalary;

--     SELECT GET_employeeallowancePerDay(NEW.OrganizationID, NEW.RowID, '1', CURDATE()) INTO emp_everydayallowance;

--         SET emp_fullmonthsalary = ((emp_fullmonthsalary + emp_everydayallowance) * NEW.WorkDaysPerYear) / 12;



--     END IF;



--     SELECT RowID FROM paysocialsecurity WHERE emp_fullmonthsalary BETWEEN RangeFromAmount AND IF(emp_fullmonthsalary > RangeToAmount, (emp_fullmonthsalary + 1), RangeToAmount) ORDER BY MonthlySalaryCredit DESC LIMIT 1 INTO psssID;

--     SELECT RowID FROM payphilhealth WHERE emp_fullmonthsalary BETWEEN SalaryRangeFrom AND IF(emp_fullmonthsalary > SalaryRangeTo, (emp_fullmonthsalary + 1), SalaryRangeTo) ORDER BY SalaryBase DESC LIMIT 1 INTO phhID;

--     UPDATE employeesalary SET
--     PaySocialSecurityID=psssID
--     ,PayPhilhealthID=phhID
--     ,LastUpdBy=NEW.LastUpdBy
--     WHERE EmployeeID=NEW.RowID
--     AND OrganizationID=NEW.OrganizationID
--     AND EffectiveDateTo IS NULL;

--     INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'WorkDaysPerYear',NEW.RowID,OLD.WorkDaysPerYear,NEW.WorkDaysPerYear,'Update');

-- END IF;

IF OLD.Salutation!=NEW.Salutation THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Salutation',NEW.RowID,OLD.Salutation,NEW.Salutation,'Update'); END IF;

IF OLD.EmployeeID!=NEW.EmployeeID THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EmployeeID',NEW.RowID,OLD.EmployeeID,NEW.Salutation,'Update'); END IF;

IF OLD.FirstName!=NEW.FirstName THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'FirstName',NEW.RowID,OLD.FirstName,NEW.Salutation,'Update'); END IF;

IF OLD.MiddleName!=NEW.MiddleName THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'MiddleName',NEW.RowID,OLD.MiddleName,NEW.Salutation,'Update'); END IF;

IF OLD.LastName!=NEW.LastName THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LastName',NEW.RowID,OLD.LastName,NEW.Salutation,'Update'); END IF;

IF OLD.TINNo!=NEW.TINNo THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'TINNo',NEW.RowID,OLD.TINNo,NEW.Salutation,'Update'); END IF;

IF OLD.SSSNo!=NEW.SSSNo THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'SSSNo',NEW.RowID,OLD.SSSNo,NEW.Salutation,'Update'); END IF;

IF OLD.HDMFNo!=NEW.HDMFNo THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'HDMFNo',NEW.RowID,OLD.HDMFNo,NEW.Salutation,'Update'); END IF;

IF OLD.PhilHealthNo!=NEW.PhilHealthNo THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'PhilHealthNo',NEW.RowID,OLD.PhilHealthNo,NEW.Salutation,'Update'); END IF;

IF OLD.EmploymentStatus!=NEW.EmploymentStatus THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EmploymentStatus',NEW.RowID,OLD.EmploymentStatus,NEW.Salutation,'Update'); END IF;

IF OLD.EmailAddress!=NEW.EmailAddress THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EmailAddress',NEW.RowID,OLD.EmailAddress,NEW.Salutation,'Update'); END IF;

IF OLD.WorkPhone!=NEW.WorkPhone THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'WorkPhone',NEW.RowID,OLD.WorkPhone,NEW.Salutation,'Update'); END IF;

IF OLD.HomePhone!=NEW.HomePhone THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'HomePhone',NEW.RowID,OLD.HomePhone,NEW.Salutation,'Update'); END IF;

IF OLD.MobilePhone!=NEW.MobilePhone THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'MobilePhone',NEW.RowID,OLD.MobilePhone,NEW.Salutation,'Update'); END IF;

IF OLD.HomeAddress!=NEW.HomeAddress THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'HomeAddress',NEW.RowID,OLD.HomeAddress,NEW.Salutation,'Update'); END IF;

IF OLD.Nickname!=NEW.Nickname THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Nickname',NEW.RowID,OLD.Nickname,NEW.Salutation,'Update'); END IF;

IF OLD.JobTitle!=NEW.JobTitle THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'JobTitle',NEW.RowID,OLD.JobTitle,NEW.Salutation,'Update'); END IF;

IF OLD.Gender!=NEW.Gender THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Gender',NEW.RowID,OLD.Gender,NEW.Salutation,'Update'); END IF;

IF OLD.EmployeeType!=NEW.EmployeeType THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'EmployeeType',NEW.RowID,OLD.EmployeeType,NEW.Salutation,'Update'); END IF;

IF OLD.MaritalStatus!=NEW.MaritalStatus THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'MaritalStatus',NEW.RowID,OLD.MaritalStatus,NEW.Salutation,'Update'); END IF;

IF OLD.Birthdate!=NEW.Birthdate THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Birthdate',NEW.RowID,OLD.Birthdate,NEW.Salutation,'Update'); END IF;

IF OLD.StartDate!=NEW.StartDate THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'StartDate',NEW.RowID,OLD.StartDate,NEW.Salutation,'Update'); END IF;

IF OLD.TerminationDate!=NEW.TerminationDate THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'TerminationDate',NEW.RowID,OLD.TerminationDate,NEW.Salutation,'Update'); END IF;

IF OLD.PayFrequencyID!=NEW.PayFrequencyID THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'PayFrequencyID',NEW.RowID,OLD.PayFrequencyID,NEW.Salutation,'Update'); END IF;

IF OLD.NoOfDependents!=NEW.NoOfDependents THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'NoOfDependents',NEW.RowID,OLD.NoOfDependents,NEW.Salutation,'Update'); END IF;

IF OLD.UndertimeOverride!=NEW.UndertimeOverride THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'UndertimeOverride',NEW.RowID,OLD.UndertimeOverride,NEW.Salutation,'Update'); END IF;

IF OLD.OvertimeOverride!=NEW.OvertimeOverride THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'OvertimeOverride',NEW.RowID,OLD.OvertimeOverride,NEW.Salutation,'Update'); END IF;

IF OLD.NewEmployeeFlag!=NEW.NewEmployeeFlag THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'NewEmployeeFlag',NEW.RowID,OLD.NewEmployeeFlag,NEW.Salutation,'Update'); END IF;

IF OLD.LeaveBalance!=NEW.LeaveBalance THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LeaveBalance',NEW.RowID,OLD.LeaveBalance,NEW.Salutation,'Update'); END IF;

IF OLD.SickLeaveBalance!=NEW.SickLeaveBalance THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'SickLeaveBalance',NEW.RowID,OLD.SickLeaveBalance,NEW.Salutation,'Update'); END IF;

IF OLD.MaternityLeaveBalance!=NEW.MaternityLeaveBalance THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'MaternityLeaveBalance',NEW.RowID,OLD.MaternityLeaveBalance,NEW.Salutation,'Update'); END IF;

IF OLD.LeaveAllowance!=NEW.LeaveAllowance THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LeaveAllowance',NEW.RowID,OLD.LeaveAllowance,NEW.Salutation,'Update'); END IF;

IF OLD.SickLeaveAllowance!=NEW.SickLeaveAllowance THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'SickLeaveAllowance',NEW.RowID,OLD.SickLeaveAllowance,NEW.Salutation,'Update'); END IF;

IF OLD.MaternityLeaveAllowance!=NEW.MaternityLeaveAllowance THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'MaternityLeaveAllowance',NEW.RowID,OLD.MaternityLeaveAllowance,NEW.Salutation,'Update'); END IF;

IF OLD.LeavePerPayPeriod!=NEW.LeavePerPayPeriod THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'LeavePerPayPeriod',NEW.RowID,OLD.LeavePerPayPeriod,NEW.Salutation,'Update'); END IF;

IF OLD.SickLeavePerPayPeriod!=NEW.SickLeavePerPayPeriod THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'SickLeavePerPayPeriod',NEW.RowID,OLD.SickLeavePerPayPeriod,NEW.Salutation,'Update'); END IF;

IF OLD.MaternityLeavePerPayPeriod!=NEW.MaternityLeavePerPayPeriod THEN INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'MaternityLeavePerPayPeriod',NEW.RowID,OLD.MaternityLeavePerPayPeriod,NEW.Salutation,'Update'); END IF;


IF OLD.PositionID!=NEW.PositionID THEN

    INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'PositionID',NEW.RowID,OLD.PositionID,NEW.PositionID,'Update');






    SELECT (pos.DivisionId != IFNULL(pot.DivisionId,0))
    FROM position pos
    LEFT JOIN position pot ON pot.RowID=NEW.PositionID
    WHERE pos.RowID=OLD.PositionID
    INTO IsDepartmentChanged;

    IF IsDepartmentChanged = '1' THEN

        SET group_concat_max_len = 1000000;

        SET @esh_RowID = '';



        SELECT EXISTS(
            SELECT (@esh_RowID := GROUP_CONCAT(esh.RowID))
            FROM employeeshift esh

            INNER JOIN (SELECT * FROM employee WHERE RowID=NEW.RowID) e ON e.RowID=esh.EmployeeID AND e.OrganizationID=esh.OrganizationID

            INNER JOIN (SELECT DateValue FROM dates WHERE YEAR(DateValue)=YEAR(CURDATE()) AND DAYOFWEEK(DateValue)=(@@default_week_format + 1) ORDER BY DateValue LIMIT 1) dd ON dd.DateValue IS NOT NULL

            INNER JOIN (SELECT IF(LAST_DAY(DATE_FORMAT(CURDATE(),'%Y-12-01')) > d.DateValue
                                        , ADDDATE(d.DateValue, INTERVAL 1 WEEK)
                                        , LAST_DAY(DATE_FORMAT(CURDATE(),'%Y-12-01'))) AS EndingDate
                            FROM dates d
                            WHERE YEAR(d.DateValue) <= YEAR(CURDATE())
                            AND DAYOFWEEK(d.DateValue) = IF(anyintiger - 1 < 0, 7, anyintiger)
                            AND WEEKOFYEAR(d.DateValue) > 50
                            ORDER BY d.DateValue DESC
                            LIMIT 1) ddd ON ddd.EndingDate IS NOT NULL
            WHERE esh.OrganizationID=NEW.OrganizationID
            AND (esh.EffectiveFrom >= IF(TIMESTAMPDIFF(YEAR,e.StartDate,CURDATE()) > 1, dd.DateValue, e.StartDate)
                    OR esh.EffectiveTo >= IF(TIMESTAMPDIFF(YEAR,e.StartDate,CURDATE()) > 1, dd.DateValue, e.StartDate))
            AND (esh.EffectiveFrom <= ddd.EndingDate OR esh.EffectiveTo <= ddd.EndingDate)
        ) INTO anyint;





        SET group_concat_max_len = 1024;

    END IF;

END IF;








IF IFNULL(OLD.AgencyID,0) != IFNULL(NEW.AgencyID,0) THEN

    SELECT ag.AgencyName,ag.`AgencyFee` FROM agency ag WHERE ag.RowID=OLD.AgencyID INTO OLD_agency_name,OLD_agfee;

    SET OLD_agency_name = IFNULL(OLD_agency_name,'');
    SET OLD_agfee = IFNULL(OLD_agfee,0.0);

    SELECT ag.AgencyName,ag.`AgencyFee` FROM agency ag WHERE ag.RowID=NEW.AgencyID INTO NEW_agency_name,NEW_agfee;

    SET NEW_agency_name = IFNULL(NEW_agency_name,'');
    SET NEW_agfee = IFNULL(NEW_agfee,0.0);

    SET agfee_percent = NEW_agfee / OLD_agfee;



    IF agfee_percent != 1.0 THEN

        UPDATE agencyfee agf
        SET agf.DailyFee = agf.DailyFee * agfee_percent
        WHERE agf.OrganizationID=NEW.OrganizationID
        AND agf.AgencyID=NEW.AgencyID
        AND agf.EmployeeID=NEW.RowID
        AND agf.EmpPositionID=NEW.PositionID;






    END IF;

    INSERT INTO audittrail (LastUpd,LastUpdBy,CreatedBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'Agency',NEW.RowID,OLD_agency_name,NEW_agency_name,'Update');

END IF;










-- IF NEW.AgencyID IS NOT NULL THEN

--     SET agfee_percent = 0.0;

--     UPDATE employeesalary es
--     INNER JOIN payphilhealth phh ON phh.SalaryBracket = -1500 AND phh.HiddenData='1'
--     INNER JOIN paysocialsecurity pss ON pss.MonthlySalaryCredit = -1500 AND pss.HiddenData='1'
--     LEFT JOIN (SELECT * FROM listofval WHERE `Type`='Default Government Contribution' AND `LIC`='HDMF' LIMIT 1) lv ON lv.RowID > 0
--     SET es.PaySocialSecurityID = pss.RowID
--     ,es.PayPhilhealthID = phh.RowID
--     ,es.HDMFAmount = IF(lv.DisplayValue IS NULL, 100.0, (lv.DisplayValue * 1.0))
--     ,es.LastUpd = CURRENT_TIMESTAMP()
--     ,es.LastUpdBy = NEW.LastUpdBy
--     WHERE es.EmployeeID=NEW.RowID
--     AND es.OrganizationID=NEW.OrganizationID;

--     SELECT RowID FROM `view` WHERE ViewName='Employee Salary' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;


-- ELSE





--     SELECT RowID,Salary,EffectiveDateFrom FROM employeesalary WHERE EmployeeID=NEW.RowID AND OrganizationID=NEW.OrganizationID ORDER BY EffectiveDateFrom DESC LIMIT 1 INTO prevesalRowID,empBasicPay,preEffDateFromEmpSal;




--     IF NEW.EmployeeType IN ('Fixed','Monthly') THEN
--         IF NEW.PayFrequencyID=1 THEN
--             SET thebasicpay = empBasicPay / 2.0;
--             SET thedailypay = 0;
--             SET thehourlypay = 0;
--         ELSE
--             SET thebasicpay = empBasicPay;
--             SET thedailypay = 0;
--             SET thehourlypay = 0;
--         END IF;

--         SELECT RowID FROM payphilhealth WHERE IFNULL(empBasicPay,0) BETWEEN SalaryRangeFrom AND SalaryRangeTo ORDER BY SalaryBase DESC LIMIT 1 INTO phhID;

--         SELECT RowID FROM paysocialsecurity WHERE IFNULL(empBasicPay,0) BETWEEN RangeFromAmount AND RangeToAmount ORDER BY MonthlySalaryCredit DESC LIMIT 1 INTO psssID;

--     ELSEIF NEW.EmployeeType = 'Daily' THEN
--             SET thebasicpay = (empBasicPay * NEW.WorkDaysPerYear) / 12;
--             SET thedailypay = empBasicPay;
--             SET thehourlypay = 0;

--         SELECT RowID FROM payphilhealth WHERE IFNULL(thebasicpay,0) BETWEEN SalaryRangeFrom AND SalaryRangeTo ORDER BY SalaryBase DESC LIMIT 1 INTO phhID;

--         SELECT RowID FROM paysocialsecurity WHERE IFNULL(thebasicpay,0) BETWEEN RangeFromAmount AND RangeToAmount ORDER BY MonthlySalaryCredit DESC LIMIT 1 INTO psssID;

--     ELSEIF NEW.EmployeeType = 'Hourly' THEN
--             SET thebasicpay = empBasicPay;
--             SET thedailypay = 0;
--             SET thehourlypay = empBasicPay;

--         SELECT RowID FROM paysocialsecurity WHERE COALESCE(thehourlypay,0) BETWEEN RangeFromAmount AND IF(COALESCE(thebasicpay,0) > RangeToAmount, COALESCE(thebasicpay,0) + 1, RangeToAmount) ORDER BY MonthlySalaryCredit DESC LIMIT 1 INTO psssID;

--     END IF;

--     UPDATE employeesalary es
--     SET es.PaySocialSecurityID = psssID
--     ,es.PayPhilhealthID = phhID
--     ,es.HDMFAmount = 100.0
--     ,es.LastUpd = CURRENT_TIMESTAMP()
--     ,es.LastUpdBy = NEW.LastUpdBy
--     WHERE es.EmployeeID=NEW.RowID
--     AND es.OrganizationID=NEW.OrganizationID;

-- END IF;



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_listofval
DROP TRIGGER IF EXISTS `AFTUPD_listofval`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_listofval` AFTER UPDATE ON `listofval` FOR EACH ROW BEGIN



DECLARE anyvchar VARCHAR(150);

IF SUBSTRING(NEW.`Type`,1,31) = 'Default Government Contribution' THEN

    SET anyvchar = 'Any';

    IF NEW.`LIC` = 'SSS' THEN

        SET anyvchar = 'Any';

        UPDATE payphilhealth
        SET EmployeeShare = CAST(NEW.DisplayValue AS DECIMAL(11,6))
        ,EmployerShare = CAST(NEW.DisplayValue AS DECIMAL(11,6))
        WHERE SalaryRangeFrom = -2000.00
        AND SalaryRangeTo = -1000.00
        AND SalaryBase = -1500.00
        AND HiddenData = '1';


    ELSEIF NEW.`LIC` = 'PhilHealth' THEN

        SET anyvchar = 'Any';

        UPDATE paysocialsecurity
        SET EmployeeContributionAmount = CAST(NEW.DisplayValue AS DECIMAL(11,6))
        ,EmployerContributionAmount = CAST(NEW.DisplayValue AS DECIMAL(11,6))
        WHERE RangeFromAmount = -2000.00
        AND RangeToAmount = -1000.00
        AND MonthlySalaryCredit = -1500.00
        AND HiddenData = '1';

    END IF;

ELSEIF LOCATE('Minimum Wage Rate',NEW.`Type`) > 0 THEN

    SET anyvchar = 'sets the minimum wage rate field/data in the division table';

END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_organization
DROP TRIGGER IF EXISTS `AFTUPD_organization`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_organization` AFTER UPDATE ON `organization` FOR EACH ROW BEGIN

DECLARE view_RowID INT(11);

DECLARE INS_audit_ID INT(11);



    SELECT RowID FROM `view` WHERE ViewName='Organization' AND OrganizationID=NEW.RowID INTO view_RowID;



SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'Name',NEW.RowID,OLD.Name,NEW.Name,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'TradeName',NEW.RowID,OLD.TradeName,NEW.TradeName,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'PrimaryAddressID',NEW.RowID,OLD.PrimaryAddressID,NEW.PrimaryAddressID,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'PrimaryContactID',NEW.RowID,OLD.PrimaryContactID,NEW.PrimaryContactID,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'PremiseAddressID',NEW.RowID,OLD.PremiseAddressID,NEW.PremiseAddressID,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'MainPhone',NEW.RowID,OLD.MainPhone,NEW.MainPhone,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'FaxNumber',NEW.RowID,OLD.FaxNumber,NEW.FaxNumber,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'EmailAddress',NEW.RowID,OLD.EmailAddress,NEW.EmailAddress,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'AltEmailAddress',NEW.RowID,OLD.AltEmailAddress,NEW.AltEmailAddress,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'AltPhone',NEW.RowID,OLD.AltPhone,NEW.AltPhone,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'URL',NEW.RowID,OLD.URL,NEW.URL,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'TINNo',NEW.RowID,OLD.TINNo,NEW.TINNo,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'BankAccountNo',NEW.RowID,OLD.BankAccountNo,NEW.BankAccountNo,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'BankName',NEW.RowID,OLD.BankName,NEW.BankName,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'OrganizationType',NEW.RowID,OLD.OrganizationType,NEW.OrganizationType,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'TotalFloorArea',NEW.RowID,OLD.TotalFloorArea,NEW.TotalFloorArea,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'MinimumWater',NEW.RowID,OLD.MinimumWater,NEW.MinimumWater,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'VacationLeaveDays',NEW.RowID,OLD.VacationLeaveDays,NEW.VacationLeaveDays,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'SickLeaveDays',NEW.RowID,OLD.SickLeaveDays,NEW.SickLeaveDays,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'MaternityLeaveDays',NEW.RowID,OLD.MaternityLeaveDays,NEW.MaternityLeaveDays,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'OthersLeaveDays',NEW.RowID,OLD.OthersLeaveDays,NEW.OthersLeaveDays,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'STPFlag',NEW.RowID,OLD.STPFlag,NEW.STPFlag,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'PayFrequencyID',NEW.RowID,OLD.PayFrequencyID,NEW.PayFrequencyID,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'PhilhealthDeductionSchedule',NEW.RowID,OLD.PhilhealthDeductionSchedule,NEW.PhilhealthDeductionSchedule,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'SSSDeductionSchedule',NEW.RowID,OLD.SSSDeductionSchedule,NEW.SSSDeductionSchedule,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'PagIbigDeductionSchedule',NEW.RowID,OLD.PagIbigDeductionSchedule,NEW.PagIbigDeductionSchedule,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'ReportText',NEW.RowID,OLD.ReportText,NEW.ReportText,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'NightDifferentialTimeFrom',NEW.RowID,OLD.NightDifferentialTimeFrom,NEW.NightDifferentialTimeFrom,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'NightDifferentialTimeTo',NEW.RowID,OLD.NightDifferentialTimeTo,NEW.NightDifferentialTimeTo,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'NightShiftTimeFrom',NEW.RowID,OLD.NightShiftTimeFrom,NEW.NightShiftTimeFrom,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'NightShiftTimeTo',NEW.RowID,OLD.NightShiftTimeTo,NEW.NightShiftTimeTo,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'AllowNegativeLeaves',NEW.RowID,OLD.AllowNegativeLeaves,NEW.AllowNegativeLeaves,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'LimitedAccess',NEW.RowID,OLD.LimitedAccess,NEW.LimitedAccess,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'WorkDaysPerYear',NEW.RowID,OLD.WorkDaysPerYear,NEW.WorkDaysPerYear,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.LastUpdBy,NEW.LastUpdBy,NEW.RowID,view_RowID,'RDOCode',NEW.RowID,OLD.RDOCode,NEW.RDOCode,'Update') INTO INS_audit_ID;

SELECT `INS_audittrail_RETRowID`(NEW.CreatedBy,NEW.CreatedBy,NEW.RowID,view_RowID,'ZIPCode',NEW.RowID,OLD.ZIPCode,NEW.ZIPCode,'Update') INTO INS_audit_ID;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_payphilhealth
DROP TRIGGER IF EXISTS `AFTUPD_payphilhealth`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_payphilhealth` AFTER UPDATE ON `payphilhealth` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

DECLARE OrgRowID INT(11);

SET OrgRowID = 2;

SELECT RowID FROM `view` WHERE ViewName='PhilHealth Contribution Table' AND OrganizationID=OrgRowID LIMIT 1 INTO viewID;

IF OLD.SalaryBracket != NEW.SalaryBracket THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'SalaryBracket',NEW.RowID,OLD.SalaryBracket,NEW.SalaryBracket,'Update');

END IF;

IF OLD.SalaryRangeTo != NEW.SalaryRangeTo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'SalaryRangeTo',NEW.RowID,OLD.SalaryRangeTo,NEW.SalaryRangeTo,'Update');

END IF;

IF OLD.SalaryBase != NEW.SalaryBase THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'SalaryBase',NEW.RowID,OLD.SalaryBase,NEW.SalaryBase,'Update');

END IF;

IF OLD.TotalMonthlyPremium != NEW.TotalMonthlyPremium THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'TotalMonthlyPremium',NEW.RowID,OLD.TotalMonthlyPremium,NEW.TotalMonthlyPremium,'Update');

END IF;

IF OLD.EmployeeShare != NEW.EmployeeShare THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'EmployeeShare',NEW.RowID,OLD.EmployeeShare,NEW.EmployeeShare,'Update');

END IF;

IF OLD.EmployerShare != NEW.EmployerShare THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'EmployerShare',NEW.RowID,OLD.EmployerShare,NEW.EmployerShare,'Update');

END IF;


















END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_payrate
DROP TRIGGER IF EXISTS `AFTUPD_payrate`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_payrate` AFTER UPDATE ON `payrate` FOR EACH ROW BEGIN

DECLARE viewRowID INT(11);

DECLARE auditrowid INT(11);


SELECT RowID FROM `view` WHERE OrganizationID=NEW.OrganizationID AND ViewName='Pay rate' INTO viewRowID;



SELECT INS_audittrail_RETRowID(NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewRowID,'PayType',NEW.RowID,OLD.PayType,NEW.PayType,'Update') INTO auditrowid;

SELECT INS_audittrail_RETRowID(NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewRowID,'DayBefore',NEW.RowID,OLD.DayBefore,NEW.DayBefore,'Update') INTO auditrowid;



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_paysocialsecurity
DROP TRIGGER IF EXISTS `AFTUPD_paysocialsecurity`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_paysocialsecurity` AFTER UPDATE ON `paysocialsecurity` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

DECLARE OrgRowID INT(11);

SET OrgRowID = 2;

SELECT RowID FROM `view` WHERE ViewName='SSS Contribution Table' AND OrganizationID=OrgRowID LIMIT 1 INTO viewID;

IF OLD.RangeFromAmount != NEW.RangeFromAmount THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'RangeFromAmount',NEW.RowID,OLD.RangeFromAmount,NEW.RangeFromAmount,'Update');

END IF;

IF OLD.RangeToAmount != NEW.RangeToAmount THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'RangeToAmount',NEW.RowID,OLD.RangeToAmount,NEW.RangeToAmount,'Update');

END IF;

IF OLD.MonthlySalaryCredit != NEW.MonthlySalaryCredit THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'MonthlySalaryCredit',NEW.RowID,OLD.MonthlySalaryCredit,NEW.MonthlySalaryCredit,'Update');

END IF;

IF OLD.EmployeeContributionAmount != NEW.EmployeeContributionAmount THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'EmployeeContributionAmount',NEW.RowID,OLD.EmployeeContributionAmount,NEW.EmployeeContributionAmount,'Update');

END IF;

IF OLD.EmployerContributionAmount != NEW.EmployerContributionAmount THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'EmployerContributionAmount',NEW.RowID,OLD.EmployerContributionAmount,NEW.EmployerContributionAmount,'Update');

END IF;

IF OLD.EmployeeECAmount != NEW.EmployeeECAmount THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,OrgRowID,viewID,'EmployeeECAmount',NEW.RowID,OLD.EmployeeECAmount,NEW.EmployeeECAmount,'Update');

END IF;


















END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_paystub
DROP TRIGGER IF EXISTS `AFTUPD_paystub`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_paystub` AFTER UPDATE ON `paystub` FOR EACH ROW BEGIN

DECLARE product_rowid INT(11);

DECLARE e_startdate DATE;
DECLARE e_type VARCHAR(50);

DECLARE IsFirstTimeSalary BOOLEAN;

DECLARE totalWorkAmount DECIMAL(15,4);
DECLARE empsalRowID INT(11);

DECLARE actualrate DECIMAL(11,6);
DECLARE actualgross DECIMAL(15,4);

DECLARE pftype VARCHAR(50);

DECLARE basicAmount DECIMAL(15, 4);
DECLARE totalAdditionalPay DECIMAL(15, 4);
DECLARE totalDeductions DECIMAL(15, 4);

DECLARE regularPay DECIMAL(15, 4);
DECLARE overtimePay DECIMAL(15, 4);
DECLARE nightDiffPay DECIMAL(15, 4);
DECLARE nightDiffOvertimePay DECIMAL(15, 4);
DECLARE v_restDayPay DECIMAL(15, 4);
DECLARE v_restDayOTPay DECIMAL(15, 4);
DECLARE leavePay DECIMAL(15, 4);
DECLARE v_specialHolidayPay DECIMAL(15, 4);
DECLARE v_specialHolidayOTPay DECIMAL(15, 4);
DECLARE v_regularHolidayPay DECIMAL(15, 4);
DECLARE v_regularHolidayOTPay DECIMAL(15, 4);
DECLARE holidayPay DECIMAL(15, 4);
DECLARE lateDeduction DECIMAL(15, 4);
DECLARE undertimeDeduction DECIMAL(15, 4);
DECLARE absenceDeduction DECIMAL(15, 4);

SELECT GET_employeeundeclaredsalarypercent(
    NEW.EmployeeID,
    NEW.OrganizationID,
    NEW.PayFromDate,
    NEW.PayToDate
)
INTO actualrate;

SELECT
    e.StartDate,
    e.EmployeeType,
    pf.PayFrequencyType
FROM employee e
INNER JOIN payfrequency pf
    ON pf.RowID = e.PayFrequencyID
WHERE e.RowID = NEW.EmployeeID
    AND e.OrganizationID = NEW.OrganizationID
INTO
    e_startdate,
    e_type,
    pftype;

SELECT (e_startdate BETWEEN NEW.PayFromDate AND NEW.PayToDate)
INTO IsFirstTimeSalary;

SELECT
    SUM(RegularHoursAmount),
    SUM(OvertimeHoursAmount),
    SUM(NightDiffHoursAmount),
    SUM(NightDiffOTHoursAmount),
    SUM(RestDayAmount),
    SUM(RestDayOTPay),
    SUM(SpecialHolidayPay),
    SUM(SpecialHolidayOTPay),
    SUM(RegularHolidayPay),
    SUM(RegularHolidayOTPay),
    SUM(HolidayPayAmount),
    SUM(Leavepayment),
    SUM(HoursLateAmount),
    SUM(UndertimeHoursAmount),
    SUM(Absent),
    SUM(TotalDayPay),
    EmployeeSalaryID
FROM employeetimeentryactual
WHERE OrganizationID = NEW.OrganizationID AND
    EmployeeID = NEW.EmployeeID AND
    `Date` BETWEEN NEW.PayFromDate AND NEW.PayToDate
INTO
    regularPay,
    overtimePay,
    nightDiffPay,
    nightDiffOvertimePay,
    v_restDayPay,
    v_restDayOTPay,
    v_specialHolidayPay,
    v_specialHolidayOTPay,
    v_regularHolidayPay,
    v_regularHolidayOTPay,
    holidayPay,
    leavePay,
    lateDeduction,
    undertimeDeduction,
    absenceDeduction,
    totalWorkAmount,
    empsalRowID;

IF e_type = 'Fixed' THEN

    SELECT es.BasicPay
    FROM employeesalary es
    WHERE es.EmployeeID = NEW.EmployeeID
        AND es.OrganizationID = NEW.OrganizationID
        AND (es.EffectiveDateFrom >= NEW.PayFromDate OR IFNULL(es.EffectiveDateTo,NEW.PayToDate) >= NEW.PayFromDate)
        AND (es.EffectiveDateFrom <= NEW.PayToDate OR IFNULL(es.EffectiveDateTo,NEW.PayToDate) <= NEW.PayToDate)
    ORDER BY es.EffectiveDateFrom DESC
    LIMIT 1
    INTO totalWorkAmount;

    SET totalWorkAmount = IFNULL(totalWorkAmount, 0) * (IF(actualrate < 1, (actualrate + 1), actualrate));
    SET totalWorkAmount = totalWorkAmount + holidayPay;

ELSEIF e_type = 'Monthly' AND IsFirstTimeSalary THEN

    SELECT
        SUM(TotalDayPay),
        EmployeeSalaryID
    FROM employeetimeentryactual
    WHERE OrganizationID = NEW.OrganizationID
        AND EmployeeID = NEW.EmployeeID
        AND `Date` BETWEEN NEW.PayFromDate AND NEW.PayToDate
    INTO
        totalWorkAmount,
        empsalRowID;

    IF totalWorkAmount IS NULL THEN

        SELECT
            SUM(TotalDayPay),
            EmployeeSalaryID
        FROM employeetimeentry
        WHERE OrganizationID = NEW.OrganizationID
            AND EmployeeID = NEW.EmployeeID
            AND `Date` BETWEEN NEW.PayFromDate AND NEW.PayToDate
        INTO
            totalWorkAmount,
            empsalRowID;

        SET totalWorkAmount = IFNULL(totalWorkAmount,0);

        SELECT totalWorkAmount + (totalWorkAmount * actualrate)
        INTO totalWorkAmount;

    END IF;

    SET totalWorkAmount = IFNULL(totalWorkAmount, 0);

ELSEIF e_type = 'Monthly' AND NOT IsFirstTimeSalary THEN

    SELECT (TrueSalary / PAYFREQUENCY_DIVISOR(pftype))
    FROM employeesalary es
    WHERE es.EmployeeID = NEW.EmployeeID AND
        es.OrganizationID = NEW.OrganizationID AND
        (es.EffectiveDateFrom >= NEW.PayFromDate OR IFNULL(es.EffectiveDateTo,CURDATE()) >= NEW.PayFromDate) AND
        (es.EffectiveDateFrom <= NEW.PayToDate OR IFNULL(es.EffectiveDateTo,CURDATE()) <= NEW.PayToDate)
    ORDER BY es.EffectiveDateFrom DESC
    LIMIT 1
    INTO basicAmount;

    SET totalAdditionalPay =
        overtimePay +
        nightDiffPay +
        nightDiffOvertimePay +
        v_restDayPay +
        v_restDayOTPay +
        v_specialHolidayPay +
        v_specialHolidayOTPay +
        v_regularHolidayPay +
        v_regularHolidayOTPay;

    SET totalDeductions = lateDeduction + undertimeDeduction + absenceDeduction;

    SET totalWorkAmount = basicAmount + totalAdditionalPay - totalDeductions;
    SET totalWorkAmount = IFNULL(totalWorkAmount, 0);

ELSE

    IF totalWorkAmount IS NULL THEN

        SELECT
            SUM(TotalDayPay),
            EmployeeSalaryID
        FROM employeetimeentry
        WHERE OrganizationID = NEW.OrganizationID AND
            EmployeeID = NEW.EmployeeID AND
            `Date` BETWEEN NEW.PayFromDate AND NEW.PayToDate
        INTO
            totalWorkAmount,
            empsalRowID;

        SET totalWorkAmount = IFNULL(totalWorkAmount, 0);

        SELECT totalWorkAmount + (totalWorkAmount * actualrate)
        INTO totalWorkAmount;

    END IF;

    SET totalWorkAmount = IFNULL(totalWorkAmount, 0);

END IF;

SET actualgross = totalWorkAmount + NEW.TotalAllowance + NEW.TotalBonus;

SET @totaladjust_actual = IFNULL(
    (
        SELECT SUM(pa.PayAmount)
        FROM paystubadjustmentactual pa
        WHERE pa.PayStubID=NEW.RowID
    ),
    0
);

INSERT INTO paystubactual
(
    RowID,
    OrganizationID,
    PayPeriodID,
    EmployeeID,
    TimeEntryID,
    PayFromDate,
    PayToDate,
    RegularPay,
    OvertimePay,
    NightDiffPay,
    NightDiffOvertimePay,
    RestDayPay,
    RestDayOTPay,
    SpecialHolidayPay,
    SpecialHolidayOTPay,
    RegularHolidayPay,
    RegularHolidayOTPay,
    HolidayPay,
    LeavePay,
    LateDeduction,
    UndertimeDeduction,
    AbsenceDeduction,
    TotalGrossSalary,
    TotalNetSalary,
    TotalTaxableSalary,
    TotalEmpSSS,
    TotalEmpWithholdingTax,
    TotalCompSSS,
    TotalEmpPhilhealth,
    TotalCompPhilhealth,
    TotalEmpHDMF,
    TotalCompHDMF,
    TotalVacationDaysLeft,
    TotalLoans,
    TotalBonus,
    TotalAllowance,
    TotalAdjustments,
    ThirteenthMonthInclusion,
    FirstTimeSalary
)
VALUES (
    NEW.RowID,
    NEW.OrganizationID,
    NEW.PayPeriodID,
    NEW.EmployeeID,
    NEW.TimeEntryID,
    NEW.PayFromDate,
    NEW.PayToDate,
    regularPay,
    overtimePay,
    nightDiffPay,
    nightDiffOvertimePay,
    v_restDayPay,
    restDayOTPay,
    v_specialHolidayPay,
    v_specialHolidayOTPay,
    v_regularHolidayPay,
    v_regularHolidayOTPay,
    holidayPay,
    leavePay,
    lateDeduction,
    undertimeDeduction,
    absenceDeduction,
    actualgross,
    (actualgross - (NEW.TotalEmpSSS + NEW.TotalEmpPhilhealth + NEW.TotalEmpHDMF + NEW.TotalEmpWithholdingTax)) - NEW.TotalLoans + (NEW.TotalAdjustments + @totaladjust_actual),
    NEW.TotalTaxableSalary + ((NEW.TotalTaxableSalary + NEW.TotalEmpSSS + NEW.TotalEmpPhilhealth + NEW.TotalEmpHDMF) * actualrate),
    NEW.TotalEmpSSS,
    NEW.TotalEmpWithholdingTax,
    NEW.TotalCompSSS,
    NEW.TotalEmpPhilhealth,
    NEW.TotalCompPhilhealth,
    NEW.TotalEmpHDMF,
    NEW.TotalCompHDMF,
    NEW.TotalVacationDaysLeft,
    NEW.TotalLoans,
    NEW.TotalBonus,
    NEW.TotalAllowance,
    (NEW.TotalAdjustments + @totaladjust_actual),
    NEW.ThirteenthMonthInclusion,
    NEW.FirstTimeSalary
)
ON DUPLICATE KEY
UPDATE
    OrganizationID = NEW.OrganizationID,
    PayPeriodID = NEW.PayPeriodID,
    EmployeeID = NEW.EmployeeID,
    TimeEntryID = NEW.TimeEntryID,
    PayFromDate = NEW.PayFromDate,
    PayToDate = NEW.PayToDate,
    RegularPay = regularPay,
    OvertimePay = overtimePay,
    NightDiffPay = nightDiffPay,
    NightDiffOvertimePay = nightDiffOvertimePay,
    RestDayPay = v_restDayPay,
    RestDayOTPay = v_restDayOTPay,
    SpecialHolidayPay = v_specialHolidayPay,
    SpecialHolidayOTPay = v_specialHolidayOTPay,
    RegularHolidayPay = v_regularHolidayPay,
    RegularHolidayOTPay = v_regularHolidayOTPay,
    HolidayPay = holidayPay,
    LeavePay = leavePay,
    LateDeduction = lateDeduction,
    UndertimeDeduction = undertimeDeduction,
    AbsenceDeduction = absenceDeduction,
    TotalGrossSalary = actualgross,
    TotalNetSalary = (actualgross - (NEW.TotalEmpSSS + NEW.TotalEmpPhilhealth + NEW.TotalEmpHDMF + NEW.TotalEmpWithholdingTax)) - NEW.TotalLoans + (NEW.TotalAdjustments + @totaladjust_actual),
    TotalTaxableSalary = NEW.TotalTaxableSalary,
    TotalEmpSSS = NEW.TotalEmpSSS,
    TotalEmpWithholdingTax = NEW.TotalEmpWithholdingTax,
    TotalCompSSS = NEW.TotalCompSSS,
    TotalEmpPhilhealth = NEW.TotalEmpPhilhealth,
    TotalCompPhilhealth = NEW.TotalCompPhilhealth,
    TotalEmpHDMF = NEW.TotalEmpHDMF,
    TotalCompHDMF = NEW.TotalCompHDMF,
    TotalVacationDaysLeft = NEW.TotalVacationDaysLeft,
    TotalLoans = NEW.TotalLoans,
    TotalBonus = NEW.TotalBonus,
    TotalAllowance = NEW.TotalAllowance,
    TotalAdjustments = (NEW.TotalAdjustments + @totaladjust_actual),
    ThirteenthMonthInclusion = NEW.ThirteenthMonthInclusion,
    FirstTimeSalary = NEW.FirstTimeSalary;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_paystubbonus
DROP TRIGGER IF EXISTS `AFTUPD_paystubbonus`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_paystubbonus` AFTER UPDATE ON `paystubbonus` FOR EACH ROW BEGIN

 INSERT INTO bonusloandeduction
 (
     OrganizationID
     ,CreatedBy
     ,LoanSchedID
     ,PayPeriodID
     ,DeductionLoanAmount
 ) SELECT NEW.OrganizationID
     ,NEW.CreatedBy
	  ,els.RowID
	  ,NEW.PayPeriodID
	  ,els.BonusPotentialPaymentForLoan
     FROM employeeloanschedule els
     
     INNER JOIN employeebonus eb
             ON eb.RowID = els.BonusID
                AND eb.EmployeeID = els.EmployeeID
                AND eb.OrganizationID = els.OrganizationID
                AND (eb.EffectiveStartDate >= NEW.PayFromDate OR eb.EffectiveEndDate >= NEW.PayFromDate)
                AND (eb.EffectiveStartDate <= NEW.PayToDate OR eb.EffectiveEndDate <= NEW.PayToDate)
      
     WHERE els.OrganizationID=NEW.OrganizationID
     
     AND els.LoanPayPeriodLeft >= 1
     # AND els.`Status`='In Progress'
     AND els.EmployeeID = NEW.EmployeeID
     AND els.OrganizationID = NEW.OrganizationID
     # AND els.EmployeeID IS NULL
     # AND els.DeductionSchedule IN ('First half','Per pay period')
     # AND (els.DedEffectiveDateFrom >= NEW.PayFromDate OR els.DedEffectiveDateTo >= NEW.PayFromDate)
     # AND (els.DedEffectiveDateFrom <= NEW.PayToDate OR els.DedEffectiveDateTo <= NEW.PayToDate)
 ON
 DUPLICATE
 KEY
 UPDATE
     LastUpd=CURRENT_TIMESTAMP()
     ,LastUpdBy=NEW.CreatedBy;
  
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_paystubitem_then_employeeloanhistory
DROP TRIGGER IF EXISTS `AFTUPD_paystubitem_then_employeeloanhistory`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_paystubitem_then_employeeloanhistory` AFTER UPDATE ON `paystubitem` FOR EACH ROW BEGIN

DECLARE categofprod VARCHAR(100);

DECLARE paypID INT(11);

DECLARE empID INT(11);

DECLARE paypDateTo DATE;

DECLARE pay_fromdate DATE;

DECLARE pay_todate DATE;

DECLARE loanRowID INT(11);

DECLARE pay_periodleft DECIMAL(11,2);

DECLARE remainderamout DECIMAL(11,2) DEFAULT 0;

DECLARE amountloan DECIMAL(11,2);

DECLARE deductamount DECIMAL(11,2);

DECLARE numofpayperiod DECIMAL(11,2);

DECLARE selectedEmployeeID VARCHAR(100);

DECLARE elh_RowID INT(11);

DECLARE loan_status VARCHAR(100);

DECLARE ItemName TEXT;



DECLARE prev13monthRowID INT(11);

DECLARE ps_EmployeeID INT(11);

DECLARE newvalue DECIMAL(11,2);

DECLARE divisor DECIMAL(11,6);

DECLARE categoryRowID INT(11);

DECLARE is_LastDateOfMonth CHAR(1);

DECLARE thisdatemonth CHAR(2);

DECLARE fistdatethismonth DATE;

DECLARE isItemLoan CHAR(1);


DECLARE IsrbxpayrollFirstHalfOfMonth CHAR(1);

DECLARE item_categName VARCHAR(150);

DECLARE e_RowID INT(11);

DECLARE pay_datefrom DATE;

DECLARE pay_dateto DATE;

DECLARE productName VARCHAR(50);






SELECT
    PayPeriodID,
    EmployeeID,
    PayToDate,
    PayFromDate
FROM paystub
WHERE RowID = NEW.PayStubID
INTO
    paypID,
    empID,
    paypDateTo,
    pay_fromdate;






SELECT RowID
FROM category
WHERE OrganizationID = NEW.OrganizationID
    AND CategoryName = 'Loan Type'
INTO categoryRowID;

SELECT
    (CategoryID = categoryRowID),
    PartNo
FROM product
WHERE RowID=NEW.ProductID
INTO
    isItemLoan,
    productName;

IF isItemLoan = '1' THEN

    INSERT INTO employeeloanhistory
    (
        OrganizationID
        ,Created
        ,CreatedBy
        ,EmployeeID
        ,PayPeriodID
        ,PayStubID
        ,DeductionDate
        ,DeductionAmount
        ,Comments
    ) VALUES (
        NEW.OrganizationID
        ,CURRENT_TIMESTAMP()
        ,NEW.CreatedBy
        ,empID
        ,paypID
        ,NEW.PayStubID
        ,pay_todate
        ,NEW.PayAmount
        ,productName
    );

END IF;







































































































































END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_position
DROP TRIGGER IF EXISTS `AFTUPD_position`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_position` AFTER UPDATE ON `position` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Position' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.PositionName != NEW.PositionName THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'PositionName',NEW.RowID,OLD.PositionName,NEW.PositionName,'Update');

END IF;

IF OLD.ParentPositionID != NEW.ParentPositionID THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'ParentPositionID',NEW.RowID,OLD.ParentPositionID,NEW.ParentPositionID,'Update');

END IF;

IF OLD.DivisionId != NEW.DivisionId THEN

    INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'DivisionId',NEW.RowID,OLD.DivisionId,NEW.DivisionId,'Update');

    UPDATE employee e
    INNER JOIN `division` d ON d.RowID=NEW.DivisionId
    SET e.PayFrequencyID=d.PayFrequencyID
    ,e.WorkDaysPerYear=d.WorkDaysPerYear
    ,e.LateGracePeriod=d.GracePeriod
    ,e.LastUpdBy=NEW.LastUpdBy
    WHERE e.OrganizationID=NEW.OrganizationID
    AND e.PositionID=NEW.RowID;

END IF;



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_product
DROP TRIGGER IF EXISTS `AFTUPD_product`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO';
DELIMITER //
CREATE TRIGGER `AFTUPD_product` AFTER UPDATE ON `product` FOR EACH ROW BEGIN

IF NEW.`Category` = 'Allowance Type' THEN

    UPDATE employeeallowance ea
    INNER JOIN product p ON p.RowID=ea.ProductID
    SET ea.TaxableFlag=p.`Status`
    ,ea.LastUpdBy=NEW.LastUpdBy
    WHERE ea.ProductID=NEW.RowID;

END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_shift
DROP TRIGGER IF EXISTS `AFTUPD_shift`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_shift` AFTER UPDATE ON `shift` FOR EACH ROW BEGIN

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Duty shifting' AND OrganizationID=NEW.OrganizationID LIMIT 1 INTO viewID;

IF OLD.TimeFrom != NEW.TimeFrom THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'TimeFrom',NEW.RowID,OLD.TimeFrom,NEW.TimeFrom,'Update');

END IF;

IF OLD.TimeTo != NEW.TimeTo THEN

INSERT INTO audittrail (Created,CreatedBy,LastUpdBy,OrganizationID,ViewID,FieldChanged,ChangedRowID,OldValue,NewValue,ActionPerformed
) VALUES (CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.LastUpdBy,NEW.OrganizationID,viewID,'TimeTo',NEW.RowID,OLD.TimeTo,NEW.TimeTo,'Update');

END IF;



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.AFTUPD_user
DROP TRIGGER IF EXISTS `AFTUPD_user`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `AFTUPD_user` AFTER UPDATE ON `user` FOR EACH ROW BEGIN

DECLARE auditRowID INT(11);

DECLARE viewID INT(11);

SELECT RowID FROM `view` WHERE ViewName='Users' AND OrganizationID=NEW.OrganizationID INTO viewID;

IF OLD.UserID != NEW.UserID THEN
    SELECT INS_audittrail_RETRowID(NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'UserID',NEW.RowID,OLD.UserID,NEW.UserID,'Update') INTO auditRowID;

END IF;

IF OLD.`Password` != NEW.`Password` THEN
    SELECT INS_audittrail_RETRowID(NEW.CreatedBy,NEW.CreatedBy,NEW.OrganizationID,viewID,'Password',NEW.RowID,OLD.`Password`,NEW.`Password`,'Update') INTO auditRowID;

END IF;



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFDEL_branch
DROP TRIGGER IF EXISTS `BEFDEL_branch`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFDEL_branch` BEFORE DELETE ON `branch` FOR EACH ROW BEGIN

UPDATE employeetimeentrydetails SET ChargeToDivisionID=NULL WHERE ChargeToDivisionID=OLD.RowID AND OrganizationID=OLD.OrganizationID;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFDEL_divisionminimumwage
DROP TRIGGER IF EXISTS `BEFDEL_divisionminimumwage`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFDEL_divisionminimumwage` BEFORE DELETE ON `divisionminimumwage` FOR EACH ROW BEGIN

DECLARE specialty CONDITION FOR SQLSTATE '45000';

DECLARE count_min_wage INT(11);

SELECT COUNT(RowID) FROM divisionminimumwage WHERE OrganizationID=OLD.OrganizationID AND DivisionID=OLD.DivisionID INTO count_min_wage;

IF count_min_wage <= 1 THEN

    SIGNAL specialty
    SET MESSAGE_TEXT = 'Invalid delete. This department should\nhave at least one minimum wage amount.';

END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFDEL_employeeloanhistory
DROP TRIGGER IF EXISTS `BEFDEL_employeeloanhistory`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFDEL_employeeloanhistory` BEFORE DELETE ON `employeeloanhistory` FOR EACH ROW BEGIN

DELETE FROM employeeloanhistoitem WHERE LoanHistoID=OLD.RowID;



SET GLOBAL event_scheduler = ON;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFDEL_employeesalary
DROP TRIGGER IF EXISTS `BEFDEL_employeesalary`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFDEL_employeesalary` BEFORE DELETE ON `employeesalary` FOR EACH ROW BEGIN

UPDATE employeetimeentry ete
SET ete.EmployeeSalaryID=NULL
,ete.LastUpd='1900-01-01 00:00:01'
,ete.LastUpdBy=OLD.LastUpdBy
WHERE ete.EmployeeSalaryID=OLD.RowID
AND ete.OrganizationID=OLD.OrganizationID;

UPDATE employeepromotions ep
SET ep.EmployeeSalaryID=NULL
,ep.LastUpd=CURRENT_TIMESTAMP()
,ep.LastUpdBy=OLD.LastUpdBy
WHERE ep.EmployeeSalaryID=OLD.RowID
AND ep.OrganizationID=OLD.OrganizationID;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFDEL_employeeshift
DROP TRIGGER IF EXISTS `BEFDEL_employeeshift`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFDEL_employeeshift` BEFORE DELETE ON `employeeshift` FOR EACH ROW BEGIN

UPDATE employeetimeentry SET EmployeeShiftID=NULL WHERE EmployeeShiftID=OLD.RowID AND OrganizationID=OLD.OrganizationID AND EmployeeID=OLD.EmployeeID;

DELETE FROM employeeshiftbyday WHERE EmployeeID=OLD.EmployeeID AND OrganizationID=OLD.OrganizationID;

DELETE FROM employeeshiftbyday_secondary WHERE EmployeeID=OLD.EmployeeID AND OrganizationID=OLD.OrganizationID;

DELETE FROM employeefirstweekshift WHERE EmployeeID=OLD.EmployeeID AND OrganizationID=OLD.OrganizationID;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFDEL_employeetimeentry
DROP TRIGGER IF EXISTS `BEFDEL_employeetimeentry`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFDEL_employeetimeentry` BEFORE DELETE ON `employeetimeentry` FOR EACH ROW BEGIN

UPDATE agencyfee agf SET agf.TimeEntryID=NULL WHERE agf.TimeEntryID=OLD.RowID AND agf.OrganizationID=OLD.OrganizationID;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFDEL_paystubadjustment
DROP TRIGGER IF EXISTS `BEFDEL_paystubadjustment`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFDEL_paystubadjustment` BEFORE DELETE ON `paystubadjustment` FOR EACH ROW BEGIN

DECLARE valuetoreturn DECIMAL(15,6);

SET valuetoreturn = (OLD.PayAmount * -1);
    UPDATE paystub ps
    SET ps.TotalNetSalary=(ps.TotalNetSalary + valuetoreturn),
        ps.TotalAdjustments=(ps.TotalAdjustments + valuetoreturn)
    WHERE ps.RowID=OLD.PayStubID;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFDEL_paystubadjustmentactual
DROP TRIGGER IF EXISTS `BEFDEL_paystubadjustmentactual`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFDEL_paystubadjustmentactual` BEFORE DELETE ON `paystubadjustmentactual` FOR EACH ROW BEGIN
DECLARE valuetoreturn DECIMAL(15,6);
SET valuetoreturn = (OLD.PayAmount * -1);
    UPDATE paystubactual ps



    SET ps.TotalNetSalary=(ps.TotalNetSalary + valuetoreturn)
    ,ps.TotalAdjustments=(ps.TotalAdjustments + valuetoreturn)
    WHERE ps.RowID=OLD.PayStubID;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFDEL_paystubbonus
DROP TRIGGER IF EXISTS `BEFDEL_paystubbonus`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFDEL_paystubbonus` BEFORE DELETE ON `paystubbonus` FOR EACH ROW BEGIN

DECLARE bld_rowid
        ,loan_rowid
        ,v_index
		  ,v_count INT(11);

SET v_index = 0;

SELECT COUNT(bld.RowID)
FROM bonusloandeduction bld
INNER JOIN employeeloanschedule els
        ON els.EmployeeID=OLD.EmployeeID
           AND els.RowID=bld.LoanSchedID
WHERE bld.PayPeriodID=OLD.PayPeriodID
INTO v_count;

WHILE v_index < v_count DO
	
	SELECT bld.RowID
	,els.RowID
	FROM bonusloandeduction bld
	INNER JOIN employeeloanschedule els
	        ON els.EmployeeID=OLD.EmployeeID
	           AND els.RowID=bld.LoanSchedID
	WHERE bld.PayPeriodID=OLD.PayPeriodID
	LIMIT 1
	INTO bld_rowid
	     ,loan_rowid;
	
	DELETE FROM bonusloandeduction WHERE RowID=bld_rowid;
	
	UPDATE employeeloanschedule els
	SET
	els.LoanPayPeriodLeft = (els.LoanPayPeriodLeft + 1)
	,els.TotalBalanceLeft = (els.TotalBalanceLeft + els.DeductionAmount)
	WHERE els.RowID=loan_rowid;

	SET v_index = (v_index + 1);

END WHILE;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_agency
DROP TRIGGER IF EXISTS `BEFINS_agency`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_agency` BEFORE INSERT ON `agency` FOR EACH ROW BEGIN

IF NEW.IsActive IS NULL THEN
    SET NEW.IsActive = 1;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_branch
DROP TRIGGER IF EXISTS `BEFINS_branch`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_branch` BEFORE INSERT ON `branch` FOR EACH ROW BEGIN

IF NEW.BranchName IS NULL THEN
    SET NEW.BranchName = '';
END IF;

IF NEW.AreaID IS NULL THEN
    SET NEW.AreaID = INSUPD_area(NULL,NEW.OrganizationID,'Default Area',NULL,NEW.CreatedBy);
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_division
DROP TRIGGER IF EXISTS `BEFINS_division`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_division` BEFORE INSERT ON `division` FOR EACH ROW BEGIN

DECLARE min_start_date_of_employee DATE;
DECLARE count_min_wage INT(11);
DECLARE anyint INT(11);

SELECT COUNT(RowID)
FROM divisionminimumwage
WHERE OrganizationID = NEW.OrganizationID AND
    DivisionID = NEW.RowID
INTO count_min_wage;

IF count_min_wage = 0 THEN

    SELECT MIN(e.StartDate)
    FROM employee e
    LEFT JOIN position pos
    ON pos.RowID = e.PositionID AND
        pos.DivisionId = NEW.RowID
    WHERE e.OrganizationID = NEW.OrganizationID
    INTO min_start_date_of_employee;

    IF min_start_date_of_employee IS NULL THEN
        SELECT Created
        FROM organization
        WHERE RowID = NEW.OrganizationID
        INTO min_start_date_of_employee;
    END IF;

    SELECT INSUPD_divisionminimumwage(
        NULL,
        NEW.OrganizationID,
        NEW.LastUpdBy,
        NEW.RowID,
        481.0,
        min_start_date_of_employee,
        pp.PayToDate
    )
    FROM payperiod pp
    WHERE min_start_date_of_employee < pp.PayToDate AND
        pp.OrganizationID = NEW.OrganizationID AND
        pp.TotalGrossSalary = 1 AND
        CURDATE() BETWEEN pp.PayFromDate AND pp.PayToDate
    INTO anyint;

END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_employee
DROP TRIGGER IF EXISTS `BEFINS_employee`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_employee` BEFORE INSERT ON `employee` FOR EACH ROW BEGIN

DECLARE marit_stat VARCHAR(50);

SET NEW.Salutation=IFNULL(NEW.Salutation,'');
SET NEW.FirstName=IFNULL(NEW.FirstName,'');
SET NEW.MiddleName=IFNULL(NEW.MiddleName,'');
SET NEW.LastName=IFNULL(NEW.LastName,'');
SET NEW.Surname=IFNULL(NEW.Surname,'');
SET NEW.EmployeeID=IFNULL(NEW.EmployeeID,'');
SET NEW.TINNo=IFNULL(NEW.TINNo,'   -   -   -');
SET NEW.SSSNo=IFNULL(NEW.SSSNo,'  -       -');
SET NEW.HDMFNo=IFNULL(NEW.HDMFNo,'    -    -');
SET NEW.PhilHealthNo=IFNULL(NEW.PhilHealthNo,'    -    -');
SET NEW.EmploymentStatus=IFNULL(NEW.EmploymentStatus,'Probationary');
SET NEW.EmailAddress=IFNULL(NEW.EmailAddress,'');
SET NEW.WorkPhone=IFNULL(NEW.WorkPhone,'');
SET NEW.HomePhone=IFNULL(NEW.HomePhone,'');
SET NEW.MobilePhone=IFNULL(NEW.MobilePhone,'');
SET NEW.HomeAddress=IFNULL(NEW.HomeAddress,'');
SET NEW.Nickname=IFNULL(NEW.Nickname,'');
SET NEW.JobTitle=IFNULL(NEW.JobTitle,'');
SET NEW.Gender=IFNULL(UPPER(SUBSTR(NEW.Gender,1,1)),'M');
SET NEW.EmployeeType=IFNULL(NEW.EmployeeType,'Daily');

SET marit_stat=IFNULL(NEW.MaritalStatus,'Single');
IF marit_stat NOT IN ('Married','Single') THEN
    SET marit_stat='Single';
END IF;
SET NEW.MaritalStatus=marit_stat;

SET NEW.Birthdate=IFNULL(NEW.Birthdate,'1900-01-01');
SET NEW.StartDate=IFNULL(NEW.StartDate,'1900-01-01');

SET NEW.PayFrequencyID=IFNULL(NEW.PayFrequencyID,1);
SET NEW.NoOfDependents=IFNULL(NEW.NoOfDependents,0);
SET NEW.UndertimeOverride=IFNULL(NEW.UndertimeOverride,'1');
SET NEW.OvertimeOverride=IFNULL(NEW.OvertimeOverride,'0');
SET NEW.NewEmployeeFlag=IFNULL(NEW.NewEmployeeFlag,'1');
SET NEW.LeaveBalance=IFNULL(NEW.LeaveBalance,0);
SET NEW.SickLeaveBalance=IFNULL(NEW.SickLeaveBalance,0);
SET NEW.MaternityLeaveBalance=IFNULL(NEW.MaternityLeaveBalance,0);
SET NEW.OtherLeaveBalance=IFNULL(NEW.OtherLeaveBalance,0);
SET NEW.LeaveAllowance=IFNULL(NEW.LeaveAllowance,0);
SET NEW.SickLeaveAllowance=IFNULL(NEW.SickLeaveAllowance,0);
SET NEW.MaternityLeaveAllowance=IFNULL(NEW.MaternityLeaveAllowance,0);
SET NEW.OtherLeaveAllowance=IFNULL(NEW.OtherLeaveAllowance,0);

SET NEW.LeavePerPayPeriod=IFNULL(NEW.LeavePerPayPeriod,0);
SET NEW.SickLeavePerPayPeriod=IFNULL(NEW.SickLeavePerPayPeriod,0);
SET NEW.MaternityLeavePerPayPeriod=IFNULL(NEW.MaternityLeavePerPayPeriod,0);
SET NEW.OtherLeavePerPayPeriod=IFNULL(NEW.OtherLeavePerPayPeriod,0);
SET NEW.AlphaListExempted=IFNULL(NEW.AlphaListExempted,'0');
SET NEW.WorkDaysPerYear=IFNULL(NEW.WorkDaysPerYear,313);

SET NEW.ATMNo=IFNULL(NEW.ATMNo,'');
SET NEW.BankName=IFNULL(NEW.BankName,'');
SET NEW.CalcHoliday=IFNULL(NEW.CalcHoliday,'1');
SET NEW.CalcSpecialHoliday=IFNULL(NEW.CalcSpecialHoliday,'1');
SET NEW.CalcNightDiff=IFNULL(NEW.CalcNightDiff,'1');
SET NEW.CalcNightDiffOT=IFNULL(NEW.CalcNightDiffOT,'1');
SET NEW.CalcRestDay=IFNULL(NEW.CalcRestDay,'1');
SET NEW.CalcRestDayOT=IFNULL(NEW.CalcRestDayOT,'1');

SET NEW.RevealInPayroll=IFNULL(NEW.RevealInPayroll,'1');
SET NEW.LateGracePeriod=IFNULL(NEW.LateGracePeriod,0);

SET NEW.OffsetBalance=IFNULL(NEW.OffsetBalance,'0');

SET NEW.ATMNo=IFNULL(NEW.ATMNo,'');
SET NEW.BankName=IFNULL(NEW.BankName,'');

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_employeeallowance
DROP TRIGGER IF EXISTS `BEFINS_employeeallowance`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_employeeallowance` BEFORE INSERT ON `employeeallowance` FOR EACH ROW BEGIN

DECLARE win_form_datetimepicker_mindate DATE DEFAULT STR_TO_DATE('1753-01-01', @@date_format);

IF NEW.EffectiveStartDate < win_form_datetimepicker_mindate THEN
	SET NEW.EffectiveStartDate = win_form_datetimepicker_mindate;
END IF;

IF NEW.EffectiveEndDate < win_form_datetimepicker_mindate THEN
	SET NEW.EffectiveEndDate = win_form_datetimepicker_mindate;
END IF;

/* If allowance is one time, ensure end date is the same as start date */
IF NEW.AllowanceFrequency = 'One time' THEN
	SET NEW.EffectiveEndDate = NEW.EffectiveStartDate;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_employeebonus
DROP TRIGGER IF EXISTS `BEFINS_employeebonus`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_employeebonus` BEFORE INSERT ON `employeebonus` FOR EACH ROW BEGIN

SET NEW.RemainingBalance = NEW.BonusAmount;

IF NEW.EffectiveEndDate IS NULL THEN
    SET NEW.EffectiveEndDate = NEW.EffectiveStartDate;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_employeeloanschedule
DROP TRIGGER IF EXISTS `BEFINS_employeeloanschedule`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_employeeloanschedule` BEFORE INSERT ON `employeeloanschedule` FOR EACH ROW BEGIN

DECLARE loancategName VARCHAR(50) DEFAULT 'Loan Type';

DECLARE categID INT(11);

DECLARE prod_RowID INT(11);

SELECT RowID FROM category WHERE CategoryName=loancategName AND OrganizationID=NEW.OrganizationID INTO categID;

IF NEW.LoanTypeID IS NULL THEN

    SET NEW.LoanTypeID = INSUPD_product(NULL,NEW.LoanName,NEW.OrganizationID,NEW.LoanName,NEW.CreatedBy,NEW.LastUpdBy,loancategName,categID,'Active',0,0,0,0);

END IF;

SET NEW.LoanPayPeriodLeft = ROUND(NEW.LoanPayPeriodLeft,0);

IF NEW.LoanPayPeriodLeft < 1 THEN
    SET NEW.`Status` = 'Complete';
END IF;

IF NEW.LoanNumber IS NULL THEN
    SET NEW.LoanNumber = '';
END IF;

IF LENGTH(TRIM(NEW.LoanName)) = 0 THEN
    SET NEW.LoanName = IFNULL((SELECT PartNo FROM product WHERE RowID=NEW.LoanTypeID),'');
END IF;

IF LCASE(NEW.DeductionSchedule) = 'end of the month' THEN
	SET NEW.DeductionSchedule = 'End of the month';
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_employeeovertime
DROP TRIGGER IF EXISTS `BEFINS_employeeovertime`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_employeeovertime` BEFORE INSERT ON `employeeovertime` FOR EACH ROW BEGIN

DECLARE eshiftID INT(11);

SELECT esh.ShiftID
FROM employeeshift esh
WHERE esh.OrganizationID = NEW.OrganizationID AND
    esh.EmployeeID = NEW.EmployeeID AND
    (
        esh.EffectiveFrom >= NEW.OTStartDate OR
        esh.EffectiveTo >= NEW.OTStartDate
    ) AND
    (
        esh.EffectiveFrom <= NEW.OTEndDate OR
        esh.EffectiveTo <= NEW.OTEndDate
    )
ORDER BY esh.EffectiveFrom, esh.EffectiveTo
LIMIT 1
INTO eshiftID;

IF eshiftID IS NOT NULL THEN
    SET NEW.OTStartTime = (
        SELECT IF(
            ADDTIME(sh.TimeTo, SEC_TO_TIME(60)) = NEW.OTStartTime OR sh.TimeTo = NEW.OTStartTime,
            sh.TimeTo,
            IF(HOUR(NEW.OTStartTime) = 24, TIME_FORMAT(NEW.OTStartTime, '00:%i:%s'), TIME_FORMAT(NEW.OTStartTime, @@time_format))
        )
        FROM shift sh
        WHERE sh.RowID = eshiftID
    );

    SET eshiftID = NULL;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_employeepromotions
DROP TRIGGER IF EXISTS `BEFINS_employeepromotions`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_employeepromotions` BEFORE INSERT ON `employeepromotions` FOR EACH ROW BEGIN

DECLARE e_salID INT(11);

DECLARE computed_monthlysalary DECIMAL(11,6);

DECLARE emp_type VARCHAR(50);

DECLARE curr_timestamp DATETIME;


IF NEW.CompensationChange = '1' THEN

SELECT IF(e.EmployeeType IN ('Fixed','Monthly'), NEW.CompensationValue, (NEW.CompensationValue * (e.WorkDaysPerYear / 12.0))),e.EmployeeType FROM employee e WHERE e.RowID=NEW.EmployeeID INTO computed_monthlysalary,emp_type;

    SELECT CURRENT_TIMESTAMP() INTO curr_timestamp;

    INSERT INTO employeesalary
    (
        EmployeeID
        ,Created
        ,CreatedBy
        ,OrganizationID
        ,FilingStatusID
        ,PaySocialSecurityID
        ,PayPhilhealthID
        ,HDMFAmount
        ,TrueSalary
        ,BasicPay
        ,Salary
        ,BasicDailyPay
        ,BasicHourlyPay
        ,NoofDependents
        ,MaritalStatus
        ,PositionID
        ,EffectiveDateFrom
        ,EffectiveDateTo
    ) SELECT
        NEW.EmployeeID
        ,curr_timestamp
        ,NEW.CreatedBy
        ,NEW.OrganizationID
        ,fs.RowID
        , pss.RowID
        , phh.RowID
        , 100.0
        , NEW.CompensationValue
        , NEW.CompensationValue / PAYFREQUENCY_DIVISOR(pf.PayFrequencyType)
        , NEW.CompensationValue
        , IF(emp_type='Daily', NEW.CompensationValue, 0)
        , 0
        , e.NoOfDependents
        , e.MaritalStatus
        , pos.RowID
        , NEW.EffectiveDate
        , NULL
    FROM employee e
    INNER JOIN payfrequency pf ON pf.RowID=e.PayFrequencyID
    INNER JOIN filingstatus fs ON fs.MaritalStatus=e.MaritalStatus AND fs.Dependent=e.NoOfDependents
    INNER JOIN (SELECT RowID FROM position WHERE PositionName=NEW.PositionTo AND OrganizationID=NEW.OrganizationID LIMIT 1) pos ON pos.RowID > 0
    INNER JOIN paysocialsecurity pss ON computed_monthlysalary BETWEEN pss.RangeFromAmount AND pss.RangeToAmount
    INNER JOIN payphilhealth phh ON computed_monthlysalary BETWEEN phh.SalaryRangeFrom AND phh.SalaryRangeTo
    WHERE e.RowID=NEW.EmployeeID;SELECT @@Identity AS ID INTO e_salID;

    SET NEW.EmployeeSalaryID = e_salID;





ELSE

    SELECT RowID FROM employeesalary WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID ORDER BY EffectiveDateFrom DESC LIMIT 1 INTO e_salID;

    SET NEW.EmployeeSalaryID = e_salID;

END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_employeesalary
DROP TRIGGER IF EXISTS `BEFINS_employeesalary`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_employeesalary` BEFORE INSERT ON `employeesalary` FOR EACH ROW BEGIN

DECLARE e_type VARCHAR(50);

DECLARE e_workdayyear INT(11);

DECLARE first_salary_count INT(11);

DECLARE employment_date DATE;

SELECT COUNT(RowID) FROM employeesalary WHERE EmployeeID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID INTO first_salary_count;

IF first_salary_count < 1 THEN
    SELECT e.StartDate FROM employee e WHERE e.RowID=NEW.EmployeeID AND e.OrganizationID=NEW.OrganizationID INTO employment_date;

    IF employment_date IS NOT NULL THEN
        SET NEW.EffectiveDateFrom=employment_date;
    END IF;
END IF;

SELECT e.EmployeeType,e.WorkDaysPerYear FROM employee e WHERE e.RowID=NEW.EmployeeID AND e.OrganizationID=NEW.OrganizationID INTO e_type,e_workdayyear;

IF e_type = 'Daily' THEN

    SET NEW.PaySocialSecurityID = (SELECT RowID FROM paysocialsecurity WHERE ((NEW.BasicPay * e_workdayyear) / 12.00) BETWEEN RangeFromAmount AND RangeToAmount AND NEW.OverrideDiscardSSSContrib = 0 LIMIT 1);

    SET NEW.PayPhilhealthID = (SELECT RowID FROM payphilhealth WHERE ((NEW.BasicPay * e_workdayyear) / 12.00) BETWEEN SalaryRangeFrom AND SalaryRangeTo AND NEW.OverrideDiscardPhilHealthContrib = 0 LIMIT 1);

END IF;

IF IFNULL(NEW.UndeclaredSalary,0) = 0 THEN
    SET NEW.UndeclaredSalary = IFNULL(NEW.TrueSalary - NEW.`Salary`,0);
END IF;

IF NEW.PhilHealthDeduction IS NULL THEN
	SET NEW.PhilHealthDeduction = 0;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_employeeshiftbyday
DROP TRIGGER IF EXISTS `BEFINS_employeeshiftbyday`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_employeeshiftbyday` BEFORE INSERT ON `employeeshiftbyday` FOR EACH ROW BEGIN

DECLARE StartingDate DATE DEFAULT NULL;
DECLARE empStartingDate DATE DEFAULT NULL;
DECLARE tooOldYearCount INT(11);

SELECT StartDate FROM employee WHERE RowID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID INTO StartingDate;
SELECT d.DateValue FROM dates d WHERE d.DateValue < StartingDate AND CHAR_TO_DAYOFWEEK(@@default_week_format + 1)=DAYNAME(d.DateValue) ORDER BY d.DateValue DESC LIMIT 1 INTO StartingDate;

IF StartingDate IS NULL THEN

    SELECT d.DateValue FROM dates d WHERE CHAR_TO_DAYOFWEEK(@@default_week_format + 1)=DAYNAME(d.DateValue) HAVING MIN(d.DateValue) INTO StartingDate;
    SELECT StartDate FROM employee WHERE RowID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID INTO empStartingDate;
    SELECT i.Column4
    FROM (SELECT *,DAYNAME(DateValue) AS Column1,DAYOFWEEK(DateValue) AS Column2,(DAYOFWEEK(DateValue) = DAYOFWEEK(empStartingDate)) AS Column3, SUBDATE(empStartingDate, INTERVAL (DAYOFWEEK(DateValue) - 1) DAY) AS Column4 FROM dates WHERE DateValue >= empStartingDate ORDER BY DateValue LIMIT 7) i WHERE i.Column3=1 INTO StartingDate;

END IF;

IF TIMESTAMPDIFF(YEAR,StartingDate,CURDATE()) > 1 THEN


    SELECT DateValue FROM dates WHERE YEAR(DateValue)=YEAR(SUBDATE(CURDATE(),INTERVAL 1 YEAR)) AND DAYOFWEEK(DateValue)=(@@default_week_format + 1) ORDER BY DateValue LIMIT 1 INTO StartingDate;

END IF;

















SET NEW.OriginDay = NEW.OrderByValue + (SELECT DATEDIFF(StartingDate,StartDate) FROM employee WHERE RowID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID);

SET NEW.SampleDate = ADDDATE(StartingDate, INTERVAL NEW.OrderByValue DAY);

INSERT INTO employeeshiftbyday_secondary(OrganizationID,EmployeeID,ShiftID,NameOfDay,SampleDate,NightShift,RestDay,IsEncodedByDay,OrderByValue,OriginDay,UniqueShift) VALUES (NEW.OrganizationID,NEW.EmployeeID,NEW.ShiftID,NEW.NameOfDay,ADDDATE(StartingDate, INTERVAL NEW.OrderByValue DAY),NEW.NightShift,NEW.RestDay,NEW.IsEncodedByDay,NEW.OrderByValue,NEW.OriginDay,NEW.UniqueShift) ON DUPLICATE KEY UPDATE OrganizationID=NEW.OrganizationID;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_employeetimeentry
DROP TRIGGER IF EXISTS `BEFINS_employeetimeentry`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_employeetimeentry` BEFORE INSERT ON `employeetimeentry` FOR EACH ROW BEGIN

DECLARE isRestDay BOOLEAN;
DECLARE hasShift BOOLEAN;

DECLARE dailyRate DECIMAL(11,6);

DECLARE leaveHours DECIMAL(15, 4);

DECLARE isRegularHoliday BOOLEAN;
DECLARE isSpecialNonWorkingHoliday BOOLEAN;
DECLARE isHoliday BOOLEAN;

DECLARE isDefaultRestDay BOOLEAN;
DECLARE isShiftRestDay BOOLEAN;

DECLARE hasWorked BOOLEAN;
DECLARE hasLeave BOOLEAN;

DECLARE requiredToWorkLastWorkingDay BOOLEAN;
DECLARE hasWorkedLastWorkingDay BOOLEAN;
DECLARE isExemptForHoliday BOOLEAN;

SET NEW.VacationLeaveHours = IFNULL(NEW.VacationLeaveHours, 0);
SET NEW.SickLeaveHours = IFNULL(NEW.SickLeaveHours, 0);
SET NEW.MaternityLeaveHours = IFNULL(NEW.MaternityLeaveHours, 0);
SET NEW.OtherLeaveHours = IFNULL(NEW.OtherLeaveHours, 0);
SET NEW.RegularHoursWorked = IFNULL(NEW.RegularHoursWorked, 0);
SET NEW.RegularHoursAmount = IFNULL(NEW.RegularHoursAmount, 0);
SET NEW.TotalHoursWorked = IFNULL(NEW.TotalHoursWorked, 0);
SET NEW.OvertimeHoursWorked = IFNULL(NEW.OvertimeHoursWorked, 0);
SET NEW.OvertimeHoursAmount = IFNULL(NEW.OvertimeHoursAmount, 0);
SET NEW.UndertimeHours = IFNULL(NEW.UndertimeHours, 0);
SET NEW.UndertimeHoursAmount = IFNULL(NEW.UndertimeHoursAmount, 0);
SET NEW.NightDifferentialHours = IFNULL(NEW.NightDifferentialHours, 0);
SET NEW.NightDiffHoursAmount = IFNULL(NEW.NightDiffHoursAmount, 0);
SET NEW.NightDifferentialOTHours = IFNULL(NEW.NightDifferentialOTHours, 0);
SET NEW.NightDiffOTHoursAmount = IFNULL(NEW.NightDiffOTHoursAmount, 0);
SET NEW.HoursLate = IFNULL(NEW.HoursLate, 0);
SET NEW.HoursLateAmount = IFNULL(NEW.HoursLateAmount, 0);

SET hasWorked = NEW.RegularHoursWorked > 0;

SELECT GET_employeerateperday(NEW.EmployeeID, NEW.OrganizationID, NEW.`Date`)
INTO dailyRate;

SELECT
    (pr.PayType = 'Regular Holiday' AND e.CalcHoliday = '1' AND e.StartDate <= NEW.`Date`),
    (pr.PayType = 'Special Non-Working Holiday' AND e.CalcSpecialHoliday = '1' AND e.StartDate <= NEW.`Date`)
FROM payrate pr
INNER JOIN employee e
ON e.RowID = NEW.EmployeeID
INNER JOIN (
    SELECT RowID
    FROM employeesalary
    WHERE EmployeeID = NEW.EmployeeID AND
        OrganizationID = NEW.OrganizationID AND
        NEW.`Date` BETWEEN EffectiveDateFrom AND IFNULL(EffectiveDateTo, NEW.`Date`)
    LIMIT 1
) es
ON es.RowID > 0
WHERE pr.RowID=NEW.PayRateID
INTO
    isRegularHoliday,
    isSpecialNonWorkingHoliday;

SET isHoliday = isRegularHoliday OR isSpecialNonWorkingHoliday;

SET leaveHours = NEW.VacationLeaveHours + NEW.SickLeaveHours + NEW.MaternityLeaveHours + NEW.OtherLeaveHours;
SET hasLeave = leaveHours > 0;

SELECT (e.DayOfRest = DAYOFWEEK(NEW.`Date`))
FROM employee e
WHERE e.RowID = NEW.EmployeeID
INTO isDefaultRestDay;

SELECT
    esh.RowID IS NOT NULL,
    COALESCE(esh.RestDay, FALSE)
FROM employeeshift esh
WHERE esh.EmployeeID = NEW.EmployeeID AND
    esh.OrganizationID = NEW.OrganizationID AND
    NEW.`Date` BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
LIMIT 1
INTO
    hasShift,
    isShiftRestDay;

-- If there is no shift set for the day, assume that it's a rest day.
SET isShiftRestDay = IF(hasShift, isShiftRestDay, TRUE);
SET isRestDay = isShiftRestDay OR isDefaultRestDay;

SET requiredToWorkLastWorkingDay = GetListOfValueOrDefault(
    'Payroll Policy', 'HolidayLastWorkingDayOrAbsent', FALSE
);

SET hasWorkedLastWorkingDay = HasWorkedLastWorkingDay(NEW.EmployeeID, NEW.Date);

SET isExemptForHoliday = (
    (isHoliday AND (NOT requiredToWorkLastWorkingDay)) OR
    (isHoliday AND hasWorkedLastWorkingDay)
);

IF hasWorked OR isRestDay OR isExemptForHoliday OR hasLeave THEN
    SET NEW.Absent = 0;
ELSE
    SET NEW.Absent = dailyRate;
END IF;

SET NEW.Absent = IFNULL(NEW.Absent, 0);

IF isDefaultRestDay = '1' AND COALESCE(NEW.RegularHoursWorked, 0) = 0 THEN
    SET NEW.EmployeeShiftID = NULL;
END IF;

IF NEW.TaxableDailyAllowance IS NULL THEN
    SET NEW.TaxableDailyAllowance = 0;
END IF;

IF NEW.TaxableDailyBonus IS NULL THEN
    SET NEW.TaxableDailyBonus = 0;
END IF;

IF NEW.NonTaxableDailyBonus IS NULL THEN
    SET NEW.NonTaxableDailyBonus = 0;
END IF;

IF NEW.LastUpd != '1900-01-01 00:00:01' THEN

    SET NEW.EmployeeSalaryID = (
        SELECT RowID
        FROM employeesalary
        WHERE EmployeeID=NEW.EmployeeID AND
            OrganizationID=NEW.OrganizationID AND
            NEW.`Date` BETWEEN EffectiveDateFrom AND IFNULL(EffectiveDateTo,NEW.`Date`)
        LIMIT 1
    );

END IF;

IF NEW.Leavepayment < 0 THEN
    SET NEW.Leavepayment = 0;
    SET NEW.TotalDayPay = 0;
    SET NEW.Absent = NEW.Leavepayment * -1;
ELSEIF NEW.Leavepayment > 0 THEN
    SET NEW.Absent = 0;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_employeetimeentrydetails
DROP TRIGGER IF EXISTS `BEFINS_employeetimeentrydetails`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_employeetimeentrydetails` BEFORE INSERT ON `employeetimeentrydetails` FOR EACH ROW BEGIN

DECLARE anyint INT(11);

DECLARE $dateIn DATE;
DECLARE $dateOut DATE;

SET NEW.TimeIn = PROPER_24HOUR(NEW.TimeIn);
SET NEW.TimeOut = PROPER_24HOUR(NEW.TimeOut);

SET $dateIn = NEW.`Date`;
SET $dateOut = NEW.`Date`;

IF NEW.TimeIn IS NOT NULL AND NEW.TimeOut IS NOT NULL THEN

    IF NEW.TimeIn > NEW.TimeOut THEN

        SET $dateIn = NEW.`Date`;
        SET $dateOut = ADDDATE(NEW.`Date`, INTERVAL 1 DAY);

    END IF;

END IF;

IF NEW.TimeStampIn IS NULL THEN
    SET NEW.TimeStampIn = TIMESTAMP($dateIn, NEW.TimeIn);
END IF;

IF NEW.TimeStampOut IS NULL THEN
    SET NEW.TimeStampOut = TIMESTAMP($dateOut, NEW.TimeOut);
END IF;

/*IF NEW.TimeentrylogsImportID = '' THEN
	SET NEW.TimeentrylogsImportID = NEW.Created;
END IF;*/


SELECT INSUPD_timeentrylog(
    NEW.OrganizationID,
    EmployeeID,
    NEW.TimeStampIn,
    1
)
FROM employee
WHERE RowID = NEW.EmployeeID AND
    OrganizationID = NEW.OrganizationID
INTO anyint;

SELECT INSUPD_timeentrylog(
    NEW.OrganizationID,
    EmployeeID,
    NEW.TimeStampOut,
    1)
FROM employee
WHERE RowID = NEW.EmployeeID AND
    OrganizationID = NEW.OrganizationID
INTO anyint;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_paystub
DROP TRIGGER IF EXISTS `BEFINS_paystub`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_paystub` BEFORE INSERT ON `paystub` FOR EACH ROW BEGIN

DECLARE phhschced VARCHAR(50);

DECLARE hdmfschced VARCHAR(50);

DECLARE sssschced VARCHAR(50);

DECLARE wtaxschced VARCHAR(50);


SELECT IF(e.AgencyID IS NULL, d.PhHealthDeductSched, d.PhHealthDeductSchedAgency)
,IF(e.AgencyID IS NULL, d.HDMFDeductSched, d.HDMFDeductSchedAgency)
,IF(e.AgencyID IS NULL, d.SSSDeductSched, d.SSSDeductSchedAgency)
,IF(e.AgencyID IS NULL, d.WTaxDeductSched, d.WTaxDeductSchedAgency)
FROM employee e
INNER JOIN position pos ON pos.RowID=e.PositionID AND pos.OrganizationID=e.OrganizationID
INNER JOIN `division` d ON d.RowID=pos.DivisionId AND d.OrganizationID=e.OrganizationID
WHERE e.RowID=NEW.EmployeeID
AND e.OrganizationID=NEW.OrganizationID
INTO phhschced
    ,hdmfschced
    ,sssschced
    ,wtaxschced;

SET NEW.FirstTimeSalary = (SELECT (StartDate BETWEEN NEW.PayFromDate AND NEW.PayToDate) FROM employee WHERE RowID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID);

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_paystubitem
DROP TRIGGER IF EXISTS `BEFINS_paystubitem`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_paystubitem` BEFORE INSERT ON `paystubitem` FOR EACH ROW BEGIN

SET NEW.PayAmount = IFNULL(NEW.PayAmount,0.0);

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_position
DROP TRIGGER IF EXISTS `BEFINS_position`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_position` BEFORE INSERT ON `position` FOR EACH ROW BEGIN

IF NEW.DivisionId IS NULL THEN

    INSERT INTO `division`(Name,TradeName,OrganizationID,MainPhone,FaxNumber,BusinessAddress,ContactName,EmailAddress,AltEmailAddress,AltPhone,URL,TINNo,Created,CreatedBy,DivisionType,GracePeriod,WorkDaysPerYear,PhHealthDeductSched,HDMFDeductSched,SSSDeductSched,WTaxDeductSched,DefaultVacationLeave,DefaultSickLeave,DefaultMaternityLeave,DefaultPaternityLeave,DefaultOtherLeave,PayFrequencyID,PhHealthDeductSchedAgency,HDMFDeductSchedAgency,SSSDeductSchedAgency,WTaxDeductSchedAgency,DivisionUniqueID,ParentDivisionID) SELECT 'Default Division', '', NEW.OrganizationID, '', '', '', '', '', '', '', '', '', CURRENT_TIMESTAMP(), NEW.CreatedBy, 'Department', 15.00, 313, 'Per pay period', 'Per pay period', 'Per pay period', 'Per pay period', 40.00, 40.00, 40.00, 40.00, 40.00, 1, 'Per pay period', 'Per pay period', 'Per pay period', 'Per pay period',2,d.RowID FROM division d WHERE d.OrganizationID=NEW.OrganizationID AND d.ParentDivisionID IS NOT NULL LIMIT 1 ON DUPLICATE KEY UPDATE LastUpd=CURRENT_TIMESTAMP(), LastUpdBy=NEW.CreatedBy; SELECT @@identity INTO @primkey_id;

    IF IFNULL(@primkey_id,0) = 0 THEN
        SET @primkey_id = (SELECT RowID FROM division d WHERE d.Name='Default Division' AND d.OrganizationID=NEW.OrganizationID AND d.ParentDivisionID IS NOT NULL LIMIT 1);
    END IF;

    SET NEW.DivisionId = @primkey_id;
END IF;

SELECT EXISTS(SELECT d.RowID FROM division d WHERE d.OrganizationID=NEW.OrganizationID AND d.RowID=NEW.DivisionId AND d.ParentDivisionID IS NULL LIMIT 1)
INTO @invalid_divisionid;

IF @invalid_divisionid = 1 THEN
    SET NEW.DivisionId = (SELECT RowID FROM division d WHERE d.OrganizationID=NEW.OrganizationID AND d.ParentDivisionID IS NOT NULL LIMIT 1);
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_position_view
DROP TRIGGER IF EXISTS `BEFINS_position_view`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO';
DELIMITER //
CREATE TRIGGER `BEFINS_position_view` BEFORE INSERT ON `position_view` FOR EACH ROW BEGIN

DECLARE posit_name VARCHAR(50);

SELECT p.PositionName FROM `position` p WHERE p.RowID=NEW.PositionID INTO posit_name;

IF NEW.PositionID = 1
    OR LCASE(TRIM(posit_name)) = 'administrator' THEN
    SET NEW.AllowedToAccess = 'Y';SET NEW.Creates='Y';SET NEW.Updates='Y';SET NEW.Deleting='Y';SET NEW.ReadOnly='N';
ELSE

    IF NEW.Creates='Y' OR NEW.Updates='Y' OR NEW.Deleting='Y' OR NEW.ReadOnly='Y' THEN
        SET NEW.AllowedToAccess = 'Y';
    ELSE
        SET NEW.AllowedToAccess = 'N';
    END IF;

END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_product
DROP TRIGGER IF EXISTS `BEFINS_product`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_product` BEFORE INSERT ON `product` FOR EACH ROW BEGIN

IF NEW.CategoryID IS NULL THEN

    SET NEW.CategoryID = (SELECT RowID FROM category c WHERE c.CategoryName=NEW.`Category` AND c.OrganizationID=NEW.OrganizationID);

END IF;

IF NEW.`Fixed` IS NULL THEN
    SET NEW.`Fixed` = 0;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_shift
DROP TRIGGER IF EXISTS `BEFINS_shift`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_shift` BEFORE INSERT ON `shift` FOR EACH ROW BEGIN

DECLARE default_break_hour INT(11) DEFAULT 1;

DECLARE divisor_to_half INT(11) DEFAULT 2;

DECLARE sec_per_hour INT(11) DEFAULT 3600;

DECLARE shift_timestamp_from
        , sh_timestamp_from DATETIME;

DECLARE shift_total_hours INT(11);

DECLARE is_even BOOL DEFAULT FALSE;

DECLARE sh_hrs, work_hrs, br_hrs DECIMAL(10, 2) DEFAULT 0;

DECLARE is_reach_tomorrow BOOL DEFAULT FALSE;

DECLARE custom_timeformat TEXT DEFAULT '%H:%i:00';

SET NEW.TimeFrom = TIME_FORMAT(NEW.TimeFrom, custom_timeformat);
SET NEW.TimeTo = TIME_FORMAT(NEW.TimeTo, custom_timeformat);
SET NEW.BreakTimeFrom = TIME_FORMAT(NEW.BreakTimeFrom, custom_timeformat);
SET NEW.BreakTimeTo = TIME_FORMAT(NEW.BreakTimeTo, custom_timeformat);

SET shift_timestamp_from = CONCAT_DATETIME(CURDATE(), NEW.TimeFrom);

SET shift_total_hours =
TIMESTAMPDIFF(SECOND
              , shift_timestamp_from
				  , CONCAT_DATETIME(ADDDATE(CURDATE(), INTERVAL IS_TIMERANGE_REACHTOMORROW(NEW.TimeFrom, NEW.TimeTo) DAY), NEW.TimeTo)) / sec_per_hour;

SET shift_total_hours = (shift_total_hours / divisor_to_half);

SET is_even = ( (shift_total_hours MOD 2) = 0 );

IF is_even THEN

	SET sh_timestamp_from = ADDDATE(shift_timestamp_from, INTERVAL shift_total_hours HOUR);
ELSE

	SET sh_timestamp_from = ADDDATE(shift_timestamp_from, INTERVAL (shift_total_hours - default_break_hour) HOUR);
END IF;

SET NEW.BreakTimeFrom = TIME(sh_timestamp_from);

SET NEW.BreakTimeTo = TIME( ADDDATE(sh_timestamp_from, INTERVAL default_break_hour HOUR) );

# ##############################################################################

SET is_reach_tomorrow = IS_TIMERANGE_REACHTOMORROW(NEW.TimeFrom, NEW.TimeTo);

SET sh_hrs = TIMESTAMPDIFF(SECOND
                           , CONCAT_DATETIME(CURDATE(), NEW.TimeFrom)
                           , ADDDATE(CONCAT_DATETIME(CURDATE(), NEW.TimeTo), INTERVAL is_reach_tomorrow DAY)) / sec_per_hour;

SET NEW.ShiftHours = IFNULL(sh_hrs, 0);


SET is_reach_tomorrow = IS_TIMERANGE_REACHTOMORROW(NEW.BreakTimeFrom, NEW.BreakTimeTo);

SET br_hrs = TIMESTAMPDIFF(SECOND
                           , CONCAT_DATETIME(CURDATE(), NEW.BreakTimeFrom)
                           , ADDDATE(CONCAT_DATETIME(CURDATE(), NEW.BreakTimeTo), INTERVAL is_reach_tomorrow DAY)) / sec_per_hour;

SET NEW.WorkHours = NEW.ShiftHours - IFNULL(br_hrs, 0);

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFINS_withholdingtaxreport
DROP TRIGGER IF EXISTS `BEFINS_withholdingtaxreport`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFINS_withholdingtaxreport` BEFORE INSERT ON `withholdingtaxreport` FOR EACH ROW BEGIN

SET NEW.MinimumWagePerDay=IFNULL(NEW.MinimumWagePerDay,0);
SET NEW.MinimumWagePerMonth=IFNULL(NEW.MinimumWagePerMonth,0);
SET NEW.PreviousTaxableIncome=IFNULL(NEW.PreviousTaxableIncome,0);
SET NEW.PremiumPaidOnHealth=IFNULL(NEW.PremiumPaidOnHealth,0);
SET NEW.PreviousTaxWithheld=IFNULL(NEW.PreviousTaxWithheld,0);
SET NEW.HazardPay=IFNULL(NEW.HazardPay,0);
SET NEW.DeMinimisBenefits=IFNULL(NEW.DeMinimisBenefits,0);
SET NEW.SalariesAndOtherCompensation=IFNULL(NEW.SalariesAndOtherCompensation,0);
SET NEW.Representation=IFNULL(NEW.Representation,0);
SET NEW.Transportation=IFNULL(NEW.Transportation,0);
SET NEW.CostOfLivingAllowance=IFNULL(NEW.CostOfLivingAllowance,0);
SET NEW.FixedHousingAllowance=IFNULL(NEW.FixedHousingAllowance,0);
SET NEW.OthersAAmount=IFNULL(NEW.OthersAAmount,0);
SET NEW.OthersBAmount=IFNULL(NEW.OthersBAmount,0);
SET NEW.OthersAName=IFNULL(NEW.OthersAName,'');
SET NEW.OthersBName=IFNULL(NEW.OthersBName,'');
SET NEW.Commission=IFNULL(NEW.Commission,0);
SET NEW.ProfitSharing=IFNULL(NEW.ProfitSharing,0);
SET NEW.FeesInclDirectorsFee=IFNULL(NEW.FeesInclDirectorsFee,0);
SET NEW.Taxable13thMonthPay=IFNULL(NEW.Taxable13thMonthPay,0);
SET NEW.TaxableHazardPay=IFNULL(NEW.TaxableHazardPay,0);
SET NEW.TaxableOvertimePay=IFNULL(NEW.TaxableOvertimePay,0);
SET NEW.SupplementaryAName=IFNULL(NEW.SupplementaryAName,'');
SET NEW.SupplementaryAAmount=IFNULL(NEW.SupplementaryAAmount,0);
SET NEW.SupplementaryBName=IFNULL(NEW.SupplementaryBName,'');
SET NEW.SupplementaryBAmount=IFNULL(NEW.SupplementaryBAmount,0);

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_branch
DROP TRIGGER IF EXISTS `BEFUPD_branch`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_branch` BEFORE UPDATE ON `branch` FOR EACH ROW BEGIN

IF NEW.BranchName IS NULL THEN
    SET NEW.BranchName = '';
END IF;

IF NEW.AreaID IS NULL THEN
    SET NEW.AreaID = INSUPD_area(NULL,NEW.OrganizationID,'Default Area',NULL,NEW.LastUpdBy);
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_division
DROP TRIGGER IF EXISTS `BEFUPD_division`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_division` BEFORE UPDATE ON `division` FOR EACH ROW BEGIN

DECLARE min_start_date_of_employee DATE;
DECLARE count_min_wage INT(11);
DECLARE anyint INT(11);

SELECT COUNT(RowID)
FROM divisionminimumwage
WHERE OrganizationID = NEW.OrganizationID AND
    DivisionID = NEW.RowID
INTO count_min_wage;

IF count_min_wage = 0 THEN

    SELECT MIN(e.StartDate)
    FROM employee e
    LEFT JOIN `position` pos
    ON pos.RowID = e.PositionID AND
        pos.DivisionId = NEW.RowID
    WHERE e.OrganizationID = NEW.OrganizationID
    INTO min_start_date_of_employee;

    IF min_start_date_of_employee IS NULL THEN
        SELECT Created
        FROM organization
        WHERE RowID = NEW.OrganizationID
        INTO min_start_date_of_employee;
    END IF;
    
    SELECT INSUPD_divisionminimumwage(
        NULL,
        NEW.OrganizationID,
        NEW.LastUpdBy,
        NEW.RowID,
        481.0,
        min_start_date_of_employee,
        pp.PayToDate
    )
    FROM payperiod pp
    WHERE min_start_date_of_employee < pp.PayToDate AND
        pp.OrganizationID = NEW.OrganizationID AND
        pp.TotalGrossSalary = 1 AND
        CURDATE() BETWEEN pp.PayFromDate AND pp.PayToDate
    LIMIT 1
    INTO anyint;

END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_employee
DROP TRIGGER IF EXISTS `BEFUPD_employee`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_employee` BEFORE UPDATE ON `employee` FOR EACH ROW BEGIN

DECLARE anyvchar VARCHAR(150);

DECLARE terminate_date DATE;

DECLARE first_date DATE;

DECLARE eom_payp CHAR(1);

DECLARE loan_num INT(11);

DECLARE loan_typeID INT(11);

DECLARE ps_RowID INT(11);

DECLARE payp_ID INT(11);

DECLARE IsDepartmentChanged CHAR(1);
DECLARE hasPrivilege CHAR(1);
SELECT EXISTS(SELECT pv.RowID FROM position_view pv INNER JOIN user u ON u.RowID=NEW.LastUpdBy INNER JOIN position p ON p.RowID=u.PositionID WHERE pv.PositionID=p.RowID AND pv.OrganizationID=NEW.OrganizationID AND pv.Updates='Y') INTO hasPrivilege;
IF hasPrivilege='1' AND OLD.EmploymentStatus NOT IN ('Resigned','Terminated') AND NEW.EmploymentStatus IN ('Resigned','Terminated') AND NEW.TerminationDate IS NOT NULL AND NEW.StartDate < NEW.TerminationDate THEN
    SET anyvchar = '';



    SELECT RowID,PayFromDate,PayToDate,`Half` FROM payperiod WHERE OrganizationID=NEW.OrganizationID AND TotalGrossSalary=NEW.PayFrequencyID AND NEW.TerminationDate BETWEEN PayFromDate AND PayToDate INTO payp_ID,first_date,terminate_date,eom_payp;





    SELECT COUNT(RowID) FROM employeeloanschedule WHERE OrganizationID=NEW.OrganizationID AND EmployeeID=NEW.RowID INTO loan_num;

    SELECT RowID FROM product WHERE OrganizationID=NEW.OrganizationID AND `Category`='Loan Type' AND PartNo='CASH ADVANCE' INTO loan_typeID;

    INSERT INTO employeeloanschedule(OrganizationID,Created,CreatedBy,EmployeeID,LoanNumber,DedEffectiveDateFrom,DedEffectiveDateTo,TotalLoanAmount,DeductionSchedule,TotalBalanceLeft,DeductionAmount,`Status`,LoanTypeID,DeductionPercentage,NoOfPayPeriod,LoanPayPeriodLeft,Comments) VALUES (NEW.OrganizationID,CURRENT_TIMESTAMP(),NEW.LastUpdBy,NEW.RowID,(loan_num + 1),first_date,terminate_date,1500.0,IF(eom_payp='0', 'End of the month', 'First half'),1500.0,1500.0,'In progress',loan_typeID,0.0,1,1,'deposit for transpo allowance') ON DUPLICATE KEY UPDATE LastUpd=CURRENT_TIMESTAMP(),LastUpdBy=NEW.LastUpdBy;

    SELECT RowID FROM paystub WHERE EmployeeID=NEW.RowID AND OrganizationID=NEW.OrganizationID AND PayPeriodID=payp_ID INTO ps_RowID;

    IF ps_RowID > 0 THEN

        UPDATE paystubitem psi
        SET psi.PayAmount=psi.PayAmount + 1500.0
        ,psi.LastUpd=CURRENT_TIMESTAMP()
        ,psi.LastUpdBy=NEW.LastUpdBy
        WHERE psi.ProductID=loan_typeID
        AND psi.OrganizationID=NEW.OrganizationID
        AND psi.PayStubID=ps_RowID;

    END IF;

ELSE

    SET NEW.TerminationDate = NULL;

END IF;

SET NEW.Salutation=IFNULL(NEW.Salutation,'');
SET NEW.FirstName=IFNULL(NEW.FirstName,'');
SET NEW.MiddleName=IFNULL(NEW.MiddleName,'');
SET NEW.LastName=IFNULL(NEW.LastName,'');
SET NEW.Surname=IFNULL(NEW.Surname,'');
SET NEW.EmployeeID=IFNULL(NEW.EmployeeID,'');
SET NEW.TINNo=IFNULL(NEW.TINNo,'   -   -   -');
SET NEW.SSSNo=IFNULL(NEW.SSSNo,'  -       -');
SET NEW.HDMFNo=IFNULL(NEW.HDMFNo,'    -    -');
SET NEW.PhilHealthNo=IFNULL(NEW.PhilHealthNo,'    -    -');
SET NEW.EmploymentStatus=IFNULL(NEW.EmploymentStatus,'Probationary');
SET NEW.EmailAddress=IFNULL(NEW.EmailAddress,'');
SET NEW.WorkPhone=IFNULL(NEW.WorkPhone,'');
SET NEW.HomePhone=IFNULL(NEW.HomePhone,'');
SET NEW.MobilePhone=IFNULL(NEW.MobilePhone,'');
SET NEW.HomeAddress=IFNULL(NEW.HomeAddress,'');
SET NEW.Nickname=IFNULL(NEW.Nickname,'');
SET NEW.JobTitle=IFNULL(NEW.JobTitle,'');
SET NEW.Gender=IFNULL(UPPER(SUBSTR(NEW.Gender,1,1)),'M');
SET NEW.EmployeeType=IFNULL(NEW.EmployeeType,'Daily');
SET NEW.MaritalStatus=IFNULL(NEW.MaritalStatus,'Single');
SET NEW.Birthdate=IFNULL(NEW.Birthdate,'1900-01-01');
SET NEW.StartDate=IFNULL(NEW.StartDate,'1900-01-01');

SET NEW.PayFrequencyID=IFNULL(NEW.PayFrequencyID,1);
SET NEW.NoOfDependents=IFNULL(NEW.NoOfDependents,0);
SET NEW.UndertimeOverride=IFNULL(NEW.UndertimeOverride,'1');
SET NEW.OvertimeOverride=IFNULL(NEW.OvertimeOverride,'1');
SET NEW.NewEmployeeFlag=IFNULL(NEW.NewEmployeeFlag,'1');
SET NEW.LeaveBalance=IFNULL(NEW.LeaveBalance,0);
SET NEW.SickLeaveBalance=IFNULL(NEW.SickLeaveBalance,0);
SET NEW.MaternityLeaveBalance=IFNULL(NEW.MaternityLeaveBalance,0);
SET NEW.OtherLeaveBalance=IFNULL(NEW.OtherLeaveBalance,0);
SET NEW.LeaveAllowance=IFNULL(NEW.LeaveAllowance,0);
SET NEW.SickLeaveAllowance=IFNULL(NEW.SickLeaveAllowance,0);
SET NEW.MaternityLeaveAllowance=IFNULL(NEW.MaternityLeaveAllowance,0);
SET NEW.OtherLeaveAllowance=IFNULL(NEW.OtherLeaveAllowance,0);

SET NEW.LeavePerPayPeriod=IFNULL(NEW.LeavePerPayPeriod,0);
SET NEW.SickLeavePerPayPeriod=IFNULL(NEW.SickLeavePerPayPeriod,0);
SET NEW.MaternityLeavePerPayPeriod=IFNULL(NEW.MaternityLeavePerPayPeriod,0);
SET NEW.OtherLeavePerPayPeriod=IFNULL(NEW.OtherLeavePerPayPeriod,0);
SET NEW.AlphaListExempted=IFNULL(NEW.AlphaListExempted,'0');
SET NEW.WorkDaysPerYear=IFNULL(NEW.WorkDaysPerYear,313);

SET NEW.ATMNo=IFNULL(NEW.ATMNo,'');
SET NEW.BankName=IFNULL(NEW.BankName,'');
SET NEW.CalcHoliday=IFNULL(NEW.CalcHoliday,'1');
SET NEW.CalcSpecialHoliday=IFNULL(NEW.CalcSpecialHoliday,'1');
SET NEW.CalcNightDiff=IFNULL(NEW.CalcNightDiff,'1');
SET NEW.CalcNightDiffOT=IFNULL(NEW.CalcNightDiffOT,'1');
SET NEW.CalcRestDay=IFNULL(NEW.CalcRestDay,'1');
SET NEW.CalcRestDayOT=IFNULL(NEW.CalcRestDayOT,'1');

SET NEW.RevealInPayroll=IFNULL(NEW.RevealInPayroll,'1');
SET NEW.LateGracePeriod=IFNULL(NEW.LateGracePeriod,0);

SET NEW.OffsetBalance=IFNULL(NEW.OffsetBalance,'0');

SET NEW.ATMNo=IFNULL(NEW.ATMNo,'');
SET NEW.BankName=IFNULL(NEW.BankName,'');

IF NEW.PositionID IS NULL THEN SET NEW.PositionID = OLD.PositionID; END IF;

IF OLD.PositionID != NEW.PositionID THEN

    SELECT (pos.DivisionId != IFNULL(pot.DivisionId,0))
    FROM position pos
    LEFT JOIN position pot ON pot.RowID=NEW.PositionID
    WHERE pos.RowID=OLD.PositionID
    INTO IsDepartmentChanged;

    IF IsDepartmentChanged = '1' THEN

        SET IsDepartmentChanged = '1';

    END IF;

END IF;
SET NEW.BranchID = IF(IFNULL(NEW.BranchID,0)=0,NULL,NEW.BranchID);
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_employeeallowance
DROP TRIGGER IF EXISTS `BEFUPD_employeeallowance`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_employeeallowance` BEFORE UPDATE ON `employeeallowance` FOR EACH ROW BEGIN

DECLARE win_form_datetimepicker_mindate DATE DEFAULT STR_TO_DATE('1753-01-01', @@date_format);

IF NEW.EffectiveStartDate < win_form_datetimepicker_mindate THEN
	SET NEW.EffectiveStartDate = win_form_datetimepicker_mindate;
END IF;

IF NEW.EffectiveEndDate < win_form_datetimepicker_mindate THEN
	SET NEW.EffectiveEndDate = win_form_datetimepicker_mindate;
END IF;

/* If allowance is one time, ensure end date is the same as start date */
IF NEW.AllowanceFrequency = 'One time' THEN
	SET NEW.EffectiveEndDate = NEW.EffectiveStartDate;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_employeebonus
DROP TRIGGER IF EXISTS `BEFUPD_employeebonus`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_employeebonus` BEFORE UPDATE ON `employeebonus` FOR EACH ROW BEGIN

DECLARE prevtotaldeduct DECIMAL(11,6);

SET prevtotaldeduct = OLD.BonusAmount - OLD.RemainingBalance;

# SET NEW.RemainingBalance = NEW.BonusAmount - prevtotaldeduct;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_employeeloanschedule
DROP TRIGGER IF EXISTS `BEFUPD_employeeloanschedule`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_employeeloanschedule` BEFORE UPDATE ON `employeeloanschedule` FOR EACH ROW BEGIN

DECLARE loan_amount_update DECIMAL(15, 4);

SET NEW.LoanPayPeriodLeft = IF(NEW.DeductionAmount > NEW.TotalBalanceLeft, 1, FLOOR(NEW.TotalBalanceLeft / NEW.DeductionAmount));

IF OLD.LoanPayPeriodLeft <= 0 AND NEW.LoanPayPeriodLeft = 1 THEN

    IF NEW.`Status` = 'Complete' THEN
        SET NEW.`Status` = 'In progress';
    END IF;

END IF;

IF NEW.TotalBalanceLeft <= 0 THEN
    SET NEW.`Status` = 'Complete';
END IF;

IF NEW.TotalBalanceLeft > NEW.TotalLoanAmount THEN
    SET NEW.TotalBalanceLeft = OLD.TotalLoanAmount;
END IF;

SET @is_charge_tobonust = (OLD.BonusID IS NULL AND NEW.BonusID IS NOT NULL);

IF @is_charge_tobonust = TRUE THEN

    SET NEW.LoanPayPeriodLeftForBonus = NEW.LoanPayPeriodLeft;

END IF;

IF LCASE(NEW.DeductionSchedule) = 'end of the month' THEN
    SET NEW.DeductionSchedule = 'End of the month';
END IF;

IF LCASE(NEW.DeductionSchedule) = 'first half' THEN
    SET NEW.DeductionSchedule = 'First half';
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_employeeovertime
DROP TRIGGER IF EXISTS `BEFUPD_employeeovertime`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_employeeovertime` BEFORE UPDATE ON `employeeovertime` FOR EACH ROW BEGIN

DECLARE eshiftID INT(11);

SELECT esh.ShiftID
FROM employeeshift esh
WHERE esh.OrganizationID = NEW.OrganizationID AND
    esh.EmployeeID = NEW.EmployeeID AND
    (
        esh.EffectiveFrom >= NEW.OTStartDate OR
        esh.EffectiveTo >= NEW.OTStartDate
    ) AND
    (
        esh.EffectiveFrom <= NEW.OTEndDate OR
        esh.EffectiveTo <= NEW.OTEndDate
    )
ORDER BY esh.EffectiveFrom, esh.EffectiveTo
LIMIT 1
INTO eshiftID;

IF eshiftID IS NOT NULL THEN
    SET NEW.OTStartTime = (
        SELECT IF(
            ADDTIME(sh.TimeTo, SEC_TO_TIME(60)) = NEW.OTStartTime OR sh.TimeTo = NEW.OTStartTime,
            sh.TimeTo,
            IF(HOUR(NEW.OTStartTime) = 24, TIME_FORMAT(NEW.OTStartTime, '00:%i:%s'), TIME_FORMAT(NEW.OTStartTime, @@time_format))
        )
        FROM shift sh
        WHERE sh.RowID = eshiftID
    );

    SET eshiftID = NULL;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_employeesalary
DROP TRIGGER IF EXISTS `BEFUPD_employeesalary`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_employeesalary` BEFORE UPDATE ON `employeesalary` FOR EACH ROW BEGIN

DECLARE e_status VARCHAR(50);

DECLARE e_type VARCHAR(50);

DECLARE e_payfreqID INT(11);

DECLARE e_workdayyear INT(11);

DECLARE hasadditionalamount CHAR(1);

DECLARE e_agencyID INT(11);

DECLARE pay_freq_type VARCHAR(50);


SET NEW.FilingStatusID = IFNULL(NEW.FilingStatusID, 1);

SELECT
    e.EmploymentStatus,
    e.EmployeeType,
    e.PayFrequencyID,
    e.WorkDaysPerYear,
    e.AgencyID,
    pf.PayFrequencyType
FROM employee e
INNER JOIN payfrequency pf
ON pf.RowID = e.PayFrequencyID
WHERE e.RowID = NEW.EmployeeID
INTO
    e_status,
    e_type,
    e_payfreqID,
    e_workdayyear,
    e_agencyID,
    pay_freq_type;

SET NEW.BasicPay = NEW.Salary / IF(LOCATE(e_type,CONCAT(pay_freq_type,'Fixed')) > 0, PAYFREQUENCY_DIVISOR(pay_freq_type), PAYFREQUENCY_DIVISOR(e_type));

IF NEW.PhilHealthDeduction IS NULL THEN
	SET NEW.PhilHealthDeduction = 0;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_employeeshiftbyday
DROP TRIGGER IF EXISTS `BEFUPD_employeeshiftbyday`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_employeeshiftbyday` BEFORE UPDATE ON `employeeshiftbyday` FOR EACH ROW BEGIN

DECLARE StartingDate DATE DEFAULT NULL;
DECLARE empStartingDate DATE DEFAULT NULL;
DECLARE tooOldYearCount INT(11);

DECLARE anytime TIMESTAMP;

SELECT StartDate FROM employee WHERE RowID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID INTO StartingDate;
SELECT d.DateValue FROM dates d WHERE d.DateValue < StartingDate AND CHAR_TO_DAYOFWEEK(@@default_week_format + 1)=DAYNAME(d.DateValue) ORDER BY d.DateValue DESC LIMIT 1 INTO StartingDate;

IF StartingDate IS NULL THEN

    SELECT d.DateValue FROM dates d WHERE CHAR_TO_DAYOFWEEK(@@default_week_format + 1)=DAYNAME(d.DateValue) HAVING MIN(d.DateValue) INTO StartingDate;
    SELECT StartDate FROM employee WHERE RowID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID INTO empStartingDate;
    SELECT i.Column4
    FROM (SELECT *,DAYNAME(DateValue) AS Column1,DAYOFWEEK(DateValue) AS Column2,(DAYOFWEEK(DateValue) = DAYOFWEEK(empStartingDate)) AS Column3, SUBDATE(empStartingDate, INTERVAL (DAYOFWEEK(DateValue) - 1) DAY) AS Column4 FROM dates WHERE DateValue >= empStartingDate ORDER BY DateValue LIMIT 7) i WHERE i.Column3=1 INTO StartingDate;

END IF;

IF TIMESTAMPDIFF(YEAR,StartingDate,CURDATE()) > 1 THEN


    SELECT DateValue FROM dates WHERE YEAR(DateValue)=YEAR(SUBDATE(CURDATE(),INTERVAL 1 YEAR)) AND DAYOFWEEK(DateValue)=(@@default_week_format + 1) ORDER BY DateValue LIMIT 1 INTO StartingDate;

END IF;















SET NEW.OriginDay = NEW.OrderByValue + (SELECT DATEDIFF(StartingDate,StartDate) FROM employee WHERE RowID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID);

SET NEW.SampleDate = ADDDATE(StartingDate, INTERVAL NEW.OrderByValue DAY);



END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_employeetimeentry
DROP TRIGGER IF EXISTS `BEFUPD_employeetimeentry`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_employeetimeentry` BEFORE UPDATE ON `employeetimeentry` FOR EACH ROW BEGIN

DECLARE STANDARD_WORKING_HOURS DECIMAL(15, 4) DEFAULT 8.0;

DECLARE isRestDay BOOLEAN;
DECLARE hasShift BOOLEAN;

DECLARE dailyRate DECIMAL(11,6);
DECLARE workingHours DECIMAL(15, 4);

DECLARE leaveHours DECIMAL(15, 4);

DECLARE isRegularHoliday BOOLEAN;
DECLARE isSpecialNonWorkingHoliday BOOLEAN;
DECLARE isHoliday BOOLEAN;

DECLARE isDefaultRestDay BOOLEAN;
DECLARE isShiftRestDay BOOLEAN;

DECLARE hasWorked BOOLEAN;
DECLARE hasLeave BOOLEAN;

DECLARE requiredToWorkLastWorkingDay BOOLEAN;
DECLARE hasWorkedLastWorkingDay BOOLEAN;
DECLARE isExemptForHoliday BOOLEAN;

SET NEW.VacationLeaveHours = IFNULL(NEW.VacationLeaveHours, 0);
SET NEW.SickLeaveHours = IFNULL(NEW.SickLeaveHours, 0);
SET NEW.MaternityLeaveHours = IFNULL(NEW.MaternityLeaveHours, 0);
SET NEW.OtherLeaveHours = IFNULL(NEW.OtherLeaveHours, 0);
SET NEW.RegularHoursWorked = IFNULL(NEW.RegularHoursWorked, 0);
SET NEW.RegularHoursAmount = IFNULL(NEW.RegularHoursAmount, 0);
SET NEW.TotalHoursWorked = IFNULL(NEW.TotalHoursWorked, 0);
SET NEW.OvertimeHoursWorked = IFNULL(NEW.OvertimeHoursWorked, 0);
SET NEW.OvertimeHoursAmount = IFNULL(NEW.OvertimeHoursAmount, 0);
SET NEW.UndertimeHours = IFNULL(NEW.UndertimeHours, 0);
SET NEW.UndertimeHoursAmount = IFNULL(NEW.UndertimeHoursAmount, 0);
SET NEW.NightDifferentialHours = IFNULL(NEW.NightDifferentialHours, 0);
SET NEW.NightDiffHoursAmount = IFNULL(NEW.NightDiffHoursAmount, 0);
SET NEW.NightDifferentialOTHours = IFNULL(NEW.NightDifferentialOTHours, 0);
SET NEW.NightDiffOTHoursAmount = IFNULL(NEW.NightDiffOTHoursAmount, 0);
SET NEW.HoursLate = IFNULL(NEW.HoursLate, 0);
SET NEW.HoursLateAmount = IFNULL(NEW.HoursLateAmount, 0);

IF NEW.TaxableDailyAllowance IS NULL THEN
    SET NEW.TaxableDailyAllowance = 0;
END IF;

IF NEW.TaxableDailyBonus IS NULL THEN
    SET NEW.TaxableDailyBonus = 0;
END IF;

IF NEW.NonTaxableDailyBonus IS NULL THEN
    SET NEW.NonTaxableDailyBonus = 0;
END IF;

IF NEW.LastUpd != '1900-01-01 00:00:01' THEN

    SET NEW.EmployeeSalaryID = (
        SELECT RowID
        FROM employeesalary
        WHERE EmployeeID=NEW.EmployeeID AND
            OrganizationID=NEW.OrganizationID AND
            NEW.`Date` BETWEEN EffectiveDateFrom AND IFNULL(EffectiveDateTo,NEW.`Date`)
        LIMIT 1
    );

END IF;

IF NEW.Leavepayment < 0 THEN
    SET NEW.Leavepayment = 0;
    SET NEW.TotalDayPay = 0;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_employeetimeentrydetails
DROP TRIGGER IF EXISTS `BEFUPD_employeetimeentrydetails`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_employeetimeentrydetails` BEFORE UPDATE ON `employeetimeentrydetails` FOR EACH ROW BEGIN

DECLARE anyint INT(11);

DECLARE $dateIn DATE;
DECLARE $dateOut DATE;

SET NEW.TimeIn = PROPER_24HOUR(NEW.TimeIn);
SET NEW.TimeOut = PROPER_24HOUR(NEW.TimeOut);

SET $dateIn = NEW.`Date`;
SET $dateOut = NEW.`Date`;

IF NEW.TimeIn IS NOT NULL AND NEW.TimeOut IS NOT NULL THEN

    IF NEW.TimeIn > NEW.TimeOut THEN

        SET $dateIn = NEW.`Date`;
        SET $dateOut = ADDDATE(NEW.`Date`, INTERVAL 1 DAY);

    END IF;

END IF;

IF NEW.TimeStampIn IS NULL THEN
    SET NEW.TimeStampIn = TIMESTAMP($dateIn, NEW.TimeIn);
END IF;

IF NEW.TimeStampOut IS NULL THEN
    SET NEW.TimeStampOut = TIMESTAMP($dateOut, NEW.TimeOut);
END IF;

SELECT INSUPD_timeentrylog(NEW.OrganizationID,EmployeeID,NEW.TimeStampIn,1)
FROM employee
WHERE RowID = NEW.EmployeeID AND
    OrganizationID = NEW.OrganizationID
INTO anyint;

SELECT INSUPD_timeentrylog(NEW.OrganizationID, EmployeeID, NEW.TimeStampOut, 1)
FROM employee
WHERE RowID = NEW.EmployeeID AND
    OrganizationID = NEW.OrganizationID
INTO anyint;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_payperiod
DROP TRIGGER IF EXISTS `BEFUPD_payperiod`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_payperiod` BEFORE UPDATE ON `payperiod` FOR EACH ROW BEGIN

DECLARE payfreq_divisor INT(11);

DECLARE min_date
        ,max_date
		  ,last_friday_date DATE;

IF NEW.TotalGrossSalary = 1 THEN

    SELECT PAYFREQUENCY_DIVISOR(pf.PayFrequencyType) FROM payfrequency pf WHERE pf.RowID=NEW.TotalGrossSalary INTO payfreq_divisor;

    SET NEW.OrdinalValue = (NEW.`Month` * payfreq_divisor) - (NEW.`Half` * 1);

ELSEIF NEW.TotalGrossSalary = 4 THEN
   
   
   
	SET NEW.Half = 2; # set this record as a typical week of the month

	SET @week_ordinal_value = 0; SET @week_indx = 0;
	
	SELECT i.`Result`
	FROM (SELECT pp.RowID
			,(@week_indx := @week_indx + 1) `Result`
			FROM payperiod pp
			INNER JOIN payfrequency pf ON pf.PayFrequencyType='WEEKLY'
			INNER JOIN payperiod pyp ON pyp.RowID=NEW.RowID AND pyp.`Month`=pp.`Month` AND pyp.`Year`=pp.`Year` AND pyp.OrganizationID=pp.OrganizationID AND pyp.TotalGrossSalary=pp.TotalGrossSalary
			WHERE pp.TotalGrossSalary=pf.RowID) i
	WHERE i.`RowID`=NEW.RowID
	INTO @week_ordinal_value;
	
	SET NEW.WeekOrdinalValue = @week_ordinal_value;
		
	SET @rec_count = 0;
	SET @indx_firsthalf = 0;
	SET @indx_secondhalf = 0;

	SELECT COUNT(pp.RowID)
	FROM payperiod pp
	INNER JOIN payfrequency pf ON pf.PayFrequencyType='WEEKLY'
	INNER JOIN payperiod pyp ON pyp.RowID=NEW.RowID AND pyp.`Month`=pp.`Month` AND pyp.`Year`=pp.`Year` AND pyp.OrganizationID=pp.OrganizationID AND pyp.TotalGrossSalary=pp.TotalGrossSalary
	WHERE pp.TotalGrossSalary=pf.RowID
	INTO @rec_count;
	
	SET @half_value = ROUND( (@rec_count / 2), 0);
	SET @pp_rowid = 0;

	SELECT i.RowID
	FROM (SELECT pp.RowID
			,(@indx_firsthalf := @indx_firsthalf + 1) `Result`
			FROM payperiod pp
			INNER JOIN payfrequency pf ON pf.PayFrequencyType='WEEKLY'
			INNER JOIN payperiod pyp ON pyp.RowID=NEW.RowID AND pyp.`Month`=pp.`Month` AND pyp.`Year`=pp.`Year` AND pyp.OrganizationID=pp.OrganizationID AND pyp.TotalGrossSalary=pp.TotalGrossSalary
			WHERE pp.TotalGrossSalary=pf.RowID) i
	WHERE i.`Result`=@half_value
	INTO @pp_rowid;
		
	IF NEW.RowID = @pp_rowid THEN
		# SET NEW.Half = 1; # set this record as first half the month
		SET NEW.Half = 0;
		
	END IF;
	
	SET @pp_rowid = 0;
	
	SELECT i.RowID
	FROM (SELECT pp.RowID
			,(@indx_secondhalf := @indx_secondhalf + 1) `Result`
			FROM payperiod pp
			INNER JOIN payfrequency pf ON pf.PayFrequencyType='WEEKLY'
			INNER JOIN payperiod pyp ON pyp.RowID=NEW.RowID AND pyp.`Month`=pp.`Month` AND pyp.`Year`=pp.`Year` AND pyp.OrganizationID=pp.OrganizationID AND pyp.TotalGrossSalary=pp.TotalGrossSalary
			WHERE pp.TotalGrossSalary=pf.RowID) i
	WHERE i.`Result`=@rec_count
	INTO @pp_rowid;
		
	IF NEW.RowID = @pp_rowid THEN
		# SET NEW.Half = 0; # set this record as end of the month
		SET NEW.Half = 1;
		
	END IF;
	
   
   
   # ###########################################################################
   
	SELECT MIN(d.DateValue), MAX(d.DateValue)
	FROM dates d
	WHERE DATE_FORMAT(d.DateValue, '%Y%c') = CONCAT(NEW.`Year`, NEW.`Month`)
	INTO min_date
			,max_date;
	
	SELECT d.DateValue
	FROM dates d
	WHERE d.DateValue BETWEEN min_date AND max_date
	AND DAYNAME(d.DateValue)='Friday'
	ORDER BY d.DateValue DESC
	# LIMIT 1, 1 -- second to the last Friday of the month
	LIMIT 1 -- last Friday of the month
	INTO last_friday_date;
	
	IF OLD.IsLastFridayOfMonthFallsHere != (last_friday_date BETWEEN NEW.PayFromDate AND NEW.PayToDate) THEN
	
		SET NEW.IsLastFridayOfMonthFallsHere = (last_friday_date BETWEEN NEW.PayFromDate AND NEW.PayToDate);
		SET NEW.IsLastFridayOfMonthFallsHere = IFNULL(NEW.IsLastFridayOfMonthFallsHere, 0);
		
	END IF;
	
	SET NEW.IsLastFridayOfMonthFallsHere = IFNULL(NEW.IsLastFridayOfMonthFallsHere, 0);
		
END IF;




END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_payrate
DROP TRIGGER IF EXISTS `BEFUPD_payrate`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_payrate` BEFORE UPDATE ON `payrate` FOR EACH ROW BEGIN

DECLARE default_paytype VARCHAR(50) DEFAULT 'Regular Day';

IF IFNULL(NEW.PayType,'') = '' THEN
    SET NEW.PayType = default_paytype;
END IF;

IF NEW.PayType != default_paytype OR LOCATE('Regular Holi',NEW.PayType) > 0 THEN
    SET NEW.DayBefore = SUBDATE(NEW.`Date`, INTERVAL 1 DAY);
ELSE
    SET NEW.DayBefore = NULL;
END IF;

IF NEW.PayType = default_paytype THEN
    SET NEW.DayBefore = NULL;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_paystub
DROP TRIGGER IF EXISTS `BEFUPD_paystub`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_paystub` BEFORE UPDATE ON `paystub` FOR EACH ROW BEGIN



SET NEW.FirstTimeSalary = (SELECT (StartDate BETWEEN NEW.PayFromDate AND NEW.PayToDate) FROM employee WHERE RowID=NEW.EmployeeID AND OrganizationID=NEW.OrganizationID);

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_paystubadjustment
DROP TRIGGER IF EXISTS `BEFUPD_paystubadjustment`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_paystubadjustment` BEFORE UPDATE ON `paystubadjustment` FOR EACH ROW BEGIN

DECLARE prod_rowID INT(11);

DECLARE isadjamounttaxab TEXT;

DECLARE thevalue DECIMAL(11,6);

SELECT `Status` FROM product WHERE RowID=NEW.ProductID INTO isadjamounttaxab;

SET thevalue = OLD.PayAmount - NEW.PayAmount;


IF isadjamounttaxab = '2' THEN

    SELECT RowID FROM product p WHERE p.PartNo='Taxable Income' AND p.OrganizationID=NEW.OrganizationID INTO prod_rowID;

    UPDATE paystubitem psi
    SET psi.PayAmount=(psi.PayAmount - (OLD.PayAmount)) + NEW.PayAmount
    WHERE psi.PayStubID=NEW.PayStubID
    AND psi.ProductID=prod_rowID
    AND psi.OrganizationID=NEW.OrganizationID;

    UPDATE paystub ps
    INNER JOIN paystubitem psi ON psi.ProductID=prod_rowID AND psi.OrganizationID=NEW.OrganizationID AND psi.PayStubID=NEW.PayStubID
    SET ps.TotalTaxableSalary=psi.PayAmount
    WHERE ps.RowID=NEW.PayStubID;

END IF;


SELECT RowID FROM product p WHERE p.PartNo='Net Income' AND p.OrganizationID=NEW.OrganizationID INTO prod_rowID;










UPDATE paystub ps
SET ps.TotalNetSalary=(ps.TotalNetSalary + (NEW.PayAmount)) - OLD.PayAmount
,ps.TotalAdjustments=(ps.TotalAdjustments + (NEW.PayAmount)) - OLD.PayAmount

WHERE ps.RowID=NEW.PayStubID AND IFNULL(OLD.PayAmount,0) != IFNULL(NEW.PayAmount,0);


END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_paystubadjustmentactual
DROP TRIGGER IF EXISTS `BEFUPD_paystubadjustmentactual`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_paystubadjustmentactual` BEFORE UPDATE ON `paystubadjustmentactual` FOR EACH ROW BEGIN

    UPDATE paystubactual ps
    SET
        ps.TotalNetSalary=(ps.TotalNetSalary + (NEW.PayAmount)) - OLD.PayAmount,
        ps.TotalAdjustments=(ps.TotalAdjustments + (NEW.PayAmount)) - OLD.PayAmount
    WHERE
        ps.RowID=NEW.PayStubID
        AND IFNULL(OLD.PayAmount,0) != IFNULL(NEW.PayAmount,0);

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_paystubitem
DROP TRIGGER IF EXISTS `BEFUPD_paystubitem`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_paystubitem` BEFORE UPDATE ON `paystubitem` FOR EACH ROW BEGIN

SET NEW.PayAmount = IFNULL(NEW.PayAmount,0.0);

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_position
DROP TRIGGER IF EXISTS `BEFUPD_position`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_position` BEFORE UPDATE ON `position` FOR EACH ROW BEGIN

SELECT EXISTS(SELECT RowID FROM `user` WHERE PositionID=NEW.RowID LIMIT 1)
INTO @is_sysuser;

IF NEW.DivisionId IS NULL AND @is_sysuser = 0 THEN
    SET NEW.DivisionId = (SELECT RowID FROM division d WHERE d.OrganizationID=NEW.OrganizationID AND d.ParentDivisionID IS NOT NULL LIMIT 1);
END IF;

SELECT EXISTS(SELECT d.RowID FROM division d WHERE d.OrganizationID=NEW.OrganizationID AND d.RowID=NEW.DivisionId AND d.ParentDivisionID IS NULL AND @is_sysuser = 0 LIMIT 1)
INTO @invalid_divisionid;

IF @invalid_divisionid = 1 THEN
    SET NEW.DivisionId = (SELECT RowID FROM division d WHERE d.OrganizationID=NEW.OrganizationID AND d.ParentDivisionID IS NOT NULL LIMIT 1);
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_position_view
DROP TRIGGER IF EXISTS `BEFUPD_position_view`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO';
DELIMITER //
CREATE TRIGGER `BEFUPD_position_view` BEFORE UPDATE ON `position_view` FOR EACH ROW BEGIN

DECLARE posit_name VARCHAR(50);

SELECT p.PositionName FROM `position` p WHERE p.RowID=NEW.PositionID INTO posit_name;

IF NEW.PositionID = 1
    OR LCASE(TRIM(posit_name)) = 'administrator' THEN
    SET NEW.AllowedToAccess = 'Y';SET NEW.Creates='Y';SET NEW.Updates='Y';SET NEW.Deleting='Y';SET NEW.ReadOnly='N';
ELSE

    IF NEW.Creates='Y' OR NEW.Updates='Y' OR NEW.Deleting='Y' OR NEW.ReadOnly='Y' THEN
        SET NEW.AllowedToAccess = 'Y';
    ELSE
        SET NEW.AllowedToAccess = 'N';
    END IF;

END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_product
DROP TRIGGER IF EXISTS `BEFUPD_product`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_product` BEFORE UPDATE ON `product` FOR EACH ROW BEGIN

IF NEW.CategoryID IS NULL THEN

    SET NEW.CategoryID = (SELECT RowID FROM category c WHERE c.CategoryName=NEW.`Category` AND c.OrganizationID=NEW.OrganizationID);

END IF;

IF NEW.`Fixed` IS NULL THEN
    SET NEW.`Fixed` = 0;
END IF;

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_shift
DROP TRIGGER IF EXISTS `BEFUPD_shift`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_shift` BEFORE UPDATE ON `shift` FOR EACH ROW BEGIN
 

 
DECLARE sec_per_hour DECIMAL(10, 2) DEFAULT 3600;
 

 
DECLARE sh_hrs, work_hrs, br_hrs DECIMAL(10, 2) DEFAULT 0;
 

 
DECLARE is_reach_tomorrow BOOL DEFAULT FALSE;

DECLARE custom_timeformat TEXT DEFAULT '%H:%i:00';

SET NEW.TimeFrom = TIME_FORMAT(NEW.TimeFrom, custom_timeformat);
SET NEW.TimeTo = TIME_FORMAT(NEW.TimeTo, custom_timeformat);
SET NEW.BreakTimeFrom = TIME_FORMAT(NEW.BreakTimeFrom, custom_timeformat);
SET NEW.BreakTimeTo = TIME_FORMAT(NEW.BreakTimeTo, custom_timeformat);

/*
 
 * execute the ff. query to make BEFUPD_shift works :
 
 * UPDATE shift sh SET sh.LastUpd=CURRENT_TIMESTAMP();
 
 */
 
 
 
SET is_reach_tomorrow = IS_TIMERANGE_REACHTOMORROW(NEW.TimeFrom, NEW.TimeTo);
 

 
SET sh_hrs = TIMESTAMPDIFF(SECOND
 
                           , CONCAT_DATETIME(CURDATE(), NEW.TimeFrom)
 
                           , ADDDATE(CONCAT_DATETIME(CURDATE(), NEW.TimeTo), INTERVAL is_reach_tomorrow DAY)) / sec_per_hour;
 

 
SET NEW.ShiftHours = IFNULL(sh_hrs, 0);
 

 

 
SET is_reach_tomorrow = IS_TIMERANGE_REACHTOMORROW(NEW.BreakTimeFrom, NEW.BreakTimeTo);
 

 
SET br_hrs = TIMESTAMPDIFF(SECOND
 
                           , CONCAT_DATETIME(CURDATE(), NEW.BreakTimeFrom)
 
                           , ADDDATE(CONCAT_DATETIME(CURDATE(), NEW.BreakTimeTo), INTERVAL is_reach_tomorrow DAY)) / sec_per_hour;
 

 
SET NEW.WorkHours = NEW.ShiftHours - IFNULL(br_hrs, 0);
 

 
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for trigger accupaydb_cinema2k.BEFUPD_withholdingtaxreport
DROP TRIGGER IF EXISTS `BEFUPD_withholdingtaxreport`;
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BEFUPD_withholdingtaxreport` BEFORE UPDATE ON `withholdingtaxreport` FOR EACH ROW BEGIN

SET NEW.MinimumWagePerDay=IFNULL(NEW.MinimumWagePerDay,0);
SET NEW.MinimumWagePerMonth=IFNULL(NEW.MinimumWagePerMonth,0);
SET NEW.PreviousTaxableIncome=IFNULL(NEW.PreviousTaxableIncome,0);
SET NEW.PremiumPaidOnHealth=IFNULL(NEW.PremiumPaidOnHealth,0);
SET NEW.PreviousTaxWithheld=IFNULL(NEW.PreviousTaxWithheld,0);
SET NEW.HazardPay=IFNULL(NEW.HazardPay,0);
SET NEW.DeMinimisBenefits=IFNULL(NEW.DeMinimisBenefits,0);
SET NEW.SalariesAndOtherCompensation=IFNULL(NEW.SalariesAndOtherCompensation,0);
SET NEW.Representation=IFNULL(NEW.Representation,0);
SET NEW.Transportation=IFNULL(NEW.Transportation,0);
SET NEW.CostOfLivingAllowance=IFNULL(NEW.CostOfLivingAllowance,0);
SET NEW.FixedHousingAllowance=IFNULL(NEW.FixedHousingAllowance,0);
SET NEW.OthersAAmount=IFNULL(NEW.OthersAAmount,0);
SET NEW.OthersBAmount=IFNULL(NEW.OthersBAmount,0);
SET NEW.OthersAName=IFNULL(NEW.OthersAName,'');
SET NEW.OthersBName=IFNULL(NEW.OthersBName,'');
SET NEW.Commission=IFNULL(NEW.Commission,0);
SET NEW.ProfitSharing=IFNULL(NEW.ProfitSharing,0);
SET NEW.FeesInclDirectorsFee=IFNULL(NEW.FeesInclDirectorsFee,0);
SET NEW.Taxable13thMonthPay=IFNULL(NEW.Taxable13thMonthPay,0);
SET NEW.TaxableHazardPay=IFNULL(NEW.TaxableHazardPay,0);
SET NEW.TaxableOvertimePay=IFNULL(NEW.TaxableOvertimePay,0);
SET NEW.SupplementaryAName=IFNULL(NEW.SupplementaryAName,'');
SET NEW.SupplementaryAAmount=IFNULL(NEW.SupplementaryAAmount,0);
SET NEW.SupplementaryBName=IFNULL(NEW.SupplementaryBName,'');
SET NEW.SupplementaryBAmount=IFNULL(NEW.SupplementaryBAmount,0);

END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Dumping structure for view accupaydb_cinema2k.employeeidhistory
DROP VIEW IF EXISTS `employeeidhistory`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `employeeidhistory`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employeeidhistory` AS SELECT 
aut.RowID
, e.RowID `EmployeeRowID`
, v.OrganizationID
, e.EmployeeID
, e.LastName, e.FirstName, e.MiddleName
, pos.PositionName
, aut.OldValue
, aut.NewValue
, aut.ActionPerformed
, aut.Created
FROM audittrail aut
INNER JOIN `view` v
        ON v.ViewName = 'Employee Personal Profile'
		     # AND v.OrganizationID = 3
		     AND aut.ViewID = v.RowID
INNER JOIN employee e
        ON e.RowID=aut.ChangedRowID
		     AND e.OrganizationID=v.OrganizationID
		     AND e.EmploymentStatus NOT IN ('Resigned', 'Terminated')
INNER JOIN `position` pos
        ON pos.RowID=e.PositionID
WHERE aut.FieldChanged = 'EmployeeID'
AND aut.ActionPerformed IN ('Insert', 'Update') ;

-- Dumping structure for view accupaydb_cinema2k.employeesalary_withdailyrate
DROP VIEW IF EXISTS `employeesalary_withdailyrate`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `employeesalary_withdailyrate`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employeesalary_withdailyrate` AS SELECT esa.*
	 ,ROUND(
	 (esa.Salary
	  / (e.WorkDaysPerYear
	     / 12 # count of months per year
		  )), 6) `DailyRate`
	, ROUND(esa.Salary, 6) `MonthlySalary`
	FROM employeesalary esa
	INNER JOIN employee e ON e.RowID=esa.EmployeeID AND e.EmployeeType IN ('Monthly', 'Fixed')
	
UNION
	SELECT esa.*
	, ROUND(esa.BasicPay, 6) `DailyRate`
	, ROUND( (esa.BasicPay * (e.WorkDaysPerYear / 12)) , 6) `MonthlySalary`
	FROM employeesalary esa
	INNER JOIN employee e ON e.RowID=esa.EmployeeID AND e.EmployeeType = 'Daily' ;

-- Dumping structure for view accupaydb_cinema2k.employeeshift_withshiftimestamp
DROP VIEW IF EXISTS `employeeshift_withshiftimestamp`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `employeeshift_withshiftimestamp`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `employeeshift_withshiftimestamp` AS SELECT esh.*

, d.DateValue
, CONCAT_DATETIME(d.DateValue, sh.TimeFrom) `DateTimeFrom`
, CONCAT_DATETIME(ADDDATE(d.DateValue, INTERVAL IS_TIMERANGE_REACHTOMORROW(sh.TimeFrom, sh.TimeTo) DAY), sh.TimeTo) `DateTimeTo`

FROM employeeshift esh
INNER JOIN dates d ON d.DateValue BETWEEN esh.EffectiveFrom AND esh.EffectiveTo
LEFT JOIN shift sh ON sh.RowID=esh.ShiftID ;

-- Dumping structure for view accupaydb_cinema2k.expectedhours
DROP VIEW IF EXISTS `expectedhours`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `expectedhours`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `expectedhours` AS SELECT et.EmployeeID
, et.OrganizationID
, et.`Date`
,	 IF((TIMESTAMPDIFF(SECOND
	                   , CONCAT_DATETIME(et.`Date`, sh.TimeFrom)
							 , CONCAT_DATETIME(ADDDATE(et.`Date`, INTERVAL IS_TIMERANGE_REACHTOMORROW(sh.TimeFrom, sh.TimeTo) DAY), sh.TimeTo)) / 3600)
	    > (et.RegularHoursWorked + (et.HoursLate + et.UndertimeHours))
		   
		 , (et.RegularHoursWorked + (et.HoursLate + et.UndertimeHours))
	   , sh.DivisorToDailyRate)
    `TotalExpectedHours`

FROM employeetimeentry et
INNER JOIN employee ee
       ON ee.RowID=et.EmployeeID
		    AND ee.OrganizationID=et.OrganizationID
			 AND ee.EmploymentStatus NOT IN ('Resigned', 'Terminated')
# INNER JOIN `position` pos ON pos.RowID=ee.PositionID AND pos.DivisionId = div_rowid
INNER JOIN employeeshift esh
       ON esh.RowID=et.EmployeeShiftID
INNER JOIN shift sh
       ON sh.RowID=esh.ShiftID ;

-- Dumping structure for view accupaydb_cinema2k.generator_16
DROP VIEW IF EXISTS `generator_16`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `generator_16`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `generator_16` AS SELECT 0 n UNION ALL SELECT 1  UNION ALL SELECT 2  UNION ALL
   SELECT 3   UNION ALL SELECT 4  UNION ALL SELECT 5  UNION ALL
   SELECT 6   UNION ALL SELECT 7  UNION ALL SELECT 8  UNION ALL
   SELECT 9   UNION ALL SELECT 10 UNION ALL SELECT 11 UNION ALL
   SELECT 12  UNION ALL SELECT 13 UNION ALL SELECT 14 UNION ALL
   SELECT 15 ;

-- Dumping structure for view accupaydb_cinema2k.latestleaveledger
DROP VIEW IF EXISTS `latestleaveledger`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `latestleaveledger`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `latestleaveledger` AS SELECT ll.*
, p.PartNo `LeaveType`

, lt.ReferenceID
, lt.PayPeriodID
, lt.LeaveLedgerID
, lt.TransactionDate
, lt.`Type`
, lt.Balance
, lt.Amount

, pp.PayFromDate
, pp.PayToDate
FROM leaveledger ll
INNER JOIN employee e ON e.RowID=ll.EmployeeID
INNER JOIN product p ON p.RowID=ll.ProductID
INNER JOIN leavetransaction lt ON lt.LeaveLedgerID=ll.RowID
INNER JOIN payperiod pp ON pp.RowID=lt.PayPeriodID ;

-- Dumping structure for view accupaydb_cinema2k.payperiod_totalperiods
DROP VIEW IF EXISTS `payperiod_totalperiods`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `payperiod_totalperiods`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`127.0.0.1` SQL SECURITY DEFINER VIEW `payperiod_totalperiods` AS SELECT *,COUNT(RowID) `ppcount` FROM payperiod pp GROUP BY pp.OrganizationID,pp.TotalGrossSalary,pp.`Year` ;

-- Dumping structure for view accupaydb_cinema2k.paystubadjustwithproductname
DROP VIEW IF EXISTS `paystubadjustwithproductname`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `paystubadjustwithproductname`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `paystubadjustwithproductname` AS SELECT psj.*
,p.PartNo `AdjustmentName`
,FALSE `AsActual`
FROM paystubadjustment psj
INNER JOIN product p ON p.RowID=psj.ProductID AND p.OrganizationID=psj.OrganizationID 

UNION
SELECT psj.*
,p.PartNo `AdjustmentName`
,TRUE `AsActual`
FROM paystubadjustmentactual psj
INNER JOIN product p ON p.RowID=psj.ProductID AND p.OrganizationID=psj.OrganizationID ;

-- Dumping structure for view accupaydb_cinema2k.paystubitem_sum_daily_allowance_group_prodid
DROP VIEW IF EXISTS `paystubitem_sum_daily_allowance_group_prodid`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `paystubitem_sum_daily_allowance_group_prodid`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`127.0.0.1` SQL SECURITY DEFINER VIEW `paystubitem_sum_daily_allowance_group_prodid` AS SELECT
    DISTINCT(et.RowID) AS `etRowID`,
    ea.RowID AS `eaRowID`,
    (ea.ProductID) AS ProductID,
    et.EmployeeID,
    et.OrganizationID,
    et.`Date`,
    0 AS Column1,
    ea.TaxableFlag,
    (
        (
            IF(
                pr.PayType = 'Regular Day',
                (
                    IF(
                        es.RestDay = '0',
                        (
                            LEAST(
                                (et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours + et.RegularHoursWorked),
                                sh.DivisorToDailyRate
                            ) / sh.DivisorToDailyRate
                        ) * ea.AllowanceAmount,
                        IF(
                            et.TotalHoursWorked > 0,
                            ea.AllowanceAmount,
                            0
                        )
                    )
                ),
                IF(
                    pr.PayType = 'Special Non-Working Holiday',
                    (
                        IF(
                            (et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours + et.RegularHoursWorked) > 0,
                            ea.AllowanceAmount,
                            0
                        )
                    ),
                    IF(
                        pr.PayType = 'Regular Holiday',
                        (
                            COALESCE(
                                ((et.RegularHoursWorked / sh.DivisorToDailyRate) * ea.AllowanceAmount),
                                0
                            ) +
                            (
                                IF(
                                    HasWorkedLastWorkingDay(e.RowID, et.Date),
                                    ea.AllowanceAmount,
                                    0
                                )
                            )
                        ),
                        0
                    )
                )
            )
        )
    ) AS TotalAllowanceAmt,
    p.`Fixed`
FROM employeetimeentry et
INNER JOIN employee e
ON e.OrganizationID = et.OrganizationID AND
    e.RowID = et.EmployeeID AND
    e.EmploymentStatus NOT IN ('Resigned','Terminated')
LEFT JOIN employeeshift es
ON es.RowID = et.EmployeeShiftID
LEFT JOIN shift sh
ON sh.RowID = es.ShiftID
INNER JOIN employeeallowance ea
ON ea.AllowanceFrequency = 'Daily' AND
    ea.EmployeeID = e.RowID AND
    ea.OrganizationID = e.OrganizationID AND
    et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
INNER JOIN product p
ON p.RowID = ea.ProductID
INNER JOIN payrate pr
ON pr.RowID = et.PayRateID ;

-- Dumping structure for view accupaydb_cinema2k.paystubitem_sum_daily_allowance_group_prodid_compress
DROP VIEW IF EXISTS `paystubitem_sum_daily_allowance_group_prodid_compress`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `paystubitem_sum_daily_allowance_group_prodid_compress`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `paystubitem_sum_daily_allowance_group_prodid_compress` AS SELECT
    DISTINCT(et.RowID) AS `etRowID`,
    ea.RowID AS `eaRowID`,
    (ea.ProductID) AS ProductID,
    et.EmployeeID,
    et.OrganizationID,
    et.`Date`,
    0 AS Column1,
    ea.TaxableFlag,
    pr.PayType,
    (
        (
            IF(
                pr.PayType = 'Regular Day',
                (
                    IF(
                        es.RestDay = '0',
                        (
                            (et.VacationLeaveHours + et.SickLeaveHours + et.MaternityLeaveHours + et.OtherLeaveHours + et.RegularHoursWorked) / sh.DivisorToDailyRate
                        ) * ea.AllowanceAmount,
                        IF(
                            et.TotalHoursWorked > 0,
                            ea.AllowanceAmount,
                            0
                        )
                    )
                ),
                IF(
                    pr.PayType = 'Special Non-Working Holiday',
                    (
                        IF(e.EmployeeType = 'Daily'
                           , IF(et.RegularHoursWorked > 0,
		                          ea.AllowanceAmount,
		                          0
		                          )
		                     # this serves for Monthly-type employees
									, IF(EXISTS(SELECT RowID
									            FROM listofval
													WHERE LIC = 'EcolaCompressed'
													AND `Type` = 'MiscAllowance'
													AND DisplayValue = '1') = FALSE
									     , IFNULL(sh.DivisorToDailyRate, 8)
										  , IFNULL((TIMESTAMPDIFF(SECOND
										                  , CONCAT_DATETIME(et.`Date`, sh.TimeFrom)
																, CONCAT_DATETIME(ADDDATE(et.`Date`, INTERVAL IS_TIMERANGE_REACHTOMORROW(sh.TimeFrom, sh.TimeTo) DAY), sh.TimeTo)) / 3600
										            )
										           , 8))
								   )
                    ),
                    IF(
                        pr.PayType = 'Regular Holiday',
                        (
                            COALESCE(
                                ((et.RegularHoursWorked / sh.DivisorToDailyRate) * ea.AllowanceAmount),
                                0
                            ) +
                            (
                                IF(
                                    HasWorkedLastWorkingDay(e.RowID, et.Date),
                                    ea.AllowanceAmount,
                                    0
                                )
                            )
                        ),
                        0 
                    )
                )
            )
        )
    ) AS TotalAllowanceAmt,
    p.`Fixed`
FROM employeetimeentry et
INNER JOIN employee e
ON e.OrganizationID = et.OrganizationID AND
    e.RowID = et.EmployeeID AND
    e.EmploymentStatus NOT IN ('Resigned','Terminated')
LEFT JOIN employeeshift es
ON es.RowID = et.EmployeeShiftID
LEFT JOIN shift sh
ON sh.RowID = es.ShiftID
INNER JOIN employeeallowance ea
ON ea.AllowanceFrequency = 'Daily' AND
    ea.EmployeeID = e.RowID AND
    ea.OrganizationID = e.OrganizationID AND
    et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
INNER JOIN product p
ON p.RowID = ea.ProductID
INNER JOIN payrate pr
ON pr.RowID = et.PayRateID ;

-- Dumping structure for view accupaydb_cinema2k.paystubitem_sum_semimon_allowance_group_prodid
DROP VIEW IF EXISTS `paystubitem_sum_semimon_allowance_group_prodid`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `paystubitem_sum_semimon_allowance_group_prodid`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`127.0.0.1` SQL SECURITY DEFINER VIEW `paystubitem_sum_semimon_allowance_group_prodid` AS SELECT
        et.RowID AS `etRowID`,
        ea.RowID `eaRowID`,
        (ea.ProductID) AS ProductID,
        et.EmployeeID,
        et.OrganizationID,
        et.`Date`,
        0 AS Column1,
        IF(
            pr.PayType = 'Special Non-Working Holiday' AND e.CalcSpecialHoliday = TRUE,
            IFNULL(et.RegularHoursWorked * (ea.AllowanceAmount / (e.WorkDaysPerYear / 12 / 2) / sh.DivisorToDailyRate) * (pr.PayRate - 1), 0),
            IF(
                pr.PayType = 'Regular Holiday' AND e.CalcHoliday = TRUE,
                IFNULL(et.RegularHoursWorked * (ea.AllowanceAmount / (e.WorkDaysPerYear / 12 / 2)) * (pr.PayRate - 1), 0),
                0
            )
        ) AS HolidayAllowance,
        ea.TaxableFlag,
        (et.HoursLate + et.UndertimeHours + et.AbsentHours) AS HoursToLess,
        ea.AllowanceAmount,
        e.WorkDaysPerYear,
        p.`Fixed`,
        PAYFREQUENCY_DIVISOR(pf.PayFrequencyType) AS PAYFREQDIV
    FROM employeetimeentry et
    INNER JOIN employee e
    ON e.OrganizationID = et.OrganizationID AND
        e.RowID = et.EmployeeID AND
        e.EmploymentStatus NOT IN ('Resigned','Terminated') AND
        e.EmployeeType != 'Fixed'
    INNER JOIN payfrequency pf
    ON pf.RowID = e.PayFrequencyID
    LEFT JOIN employeeshift es
    ON es.RowID = et.EmployeeShiftID
    LEFT JOIN shift sh
    ON sh.RowID = es.ShiftID
    INNER JOIN employeeallowance ea
    ON ea.AllowanceFrequency = 'Semi-monthly' AND
        ea.EmployeeID = e.RowID AND
        ea.OrganizationID = e.OrganizationID AND
        et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
    INNER JOIN product p
    ON p.RowID = ea.ProductID
    INNER JOIN payrate pr
    ON pr.RowID = et.PayRateID
    
UNION
    SELECT
        et.RowID AS `etRowID`,
        ea.RowID `eaRowID`,
        (ea.ProductID) AS ProductID,
        et.EmployeeID,
        et.OrganizationID,
        et.`Date`,
        0 AS Column1,
        0 AS HolidayAllowance,
        ea.TaxableFlag,
        (et.HoursLate + et.UndertimeHours) AS HoursToLess,
        ea.AllowanceAmount,
        e.WorkDaysPerYear,
        p.`Fixed`,
        PAYFREQUENCY_DIVISOR(pf.PayFrequencyType) AS PAYFREQDIV
    FROM employeetimeentry et
    INNER JOIN employee e ON e.OrganizationID=et.OrganizationID AND e.RowID=et.EmployeeID AND e.EmploymentStatus NOT IN ('Resigned','Terminated') AND e.EmployeeType='Fixed'
    INNER JOIN payfrequency pf ON pf.RowID=e.PayFrequencyID
    INNER JOIN employeeshift es ON es.RowID=et.EmployeeShiftID
    INNER JOIN shift sh ON sh.RowID=es.ShiftID
    INNER JOIN employeeallowance ea ON ea.AllowanceFrequency='Semi-monthly' AND ea.EmployeeID=e.RowID AND ea.OrganizationID=e.OrganizationID AND et.`Date` BETWEEN ea.EffectiveStartDate AND ea.EffectiveEndDate
    INNER JOIN product p ON p.RowID=ea.ProductID
    INNER JOIN payrate pr ON pr.RowID=et.PayRateID ;

-- Dumping structure for view accupaydb_cinema2k.schedloanpercutoff
DROP VIEW IF EXISTS `schedloanpercutoff`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `schedloanpercutoff`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `schedloanpercutoff` AS SELECT 	45	`elsRowId`,	5942 `PayPeriodId`
UNION SELECT 	47	,	5942
UNION SELECT 	48	,	5943
UNION SELECT 	50	,	5942
UNION SELECT 	51	,	5942
UNION SELECT 	52	,	5943
UNION SELECT 	70	,	5558
UNION SELECT 	71	,	5558
UNION SELECT 	72	,	5558
UNION SELECT 	73	,	5558
UNION SELECT 	81	,	3003
UNION SELECT 	82	,	3003
UNION SELECT 	83	,	3003
UNION SELECT 	96	,	5558
UNION SELECT 	97	,	5558
UNION SELECT 	98	,	5558
UNION SELECT 	101	,	5559
UNION SELECT 	102	,	5559
UNION SELECT 	104	,	5559
UNION SELECT 	105	,	3004
UNION SELECT 	106	,	3004
UNION SELECT 	107	,	3004
UNION SELECT 	114	,	5942
UNION SELECT 	116	,	5943
UNION SELECT 	117	,	5943
UNION SELECT 	118	,	5943
UNION SELECT 	122	,	5946
UNION SELECT 	125	,	3007
UNION SELECT 	127	,	3007
UNION SELECT 	128	,	3007
UNION SELECT 	134	,	3007
UNION SELECT 	142	,	5563
UNION SELECT 	148	,	5947
UNION SELECT 	152	,	5947
UNION SELECT 	153	,	5947
UNION SELECT 	155	,	5947
UNION SELECT 	157	,	5947
UNION SELECT 	179	,	3008
UNION SELECT 	187	,	5563
UNION SELECT 	205	,	3009
UNION SELECT 	206	,	3009
UNION SELECT 	207	,	3009
UNION SELECT 	212	,	5948
UNION SELECT 	214	,	5948
UNION SELECT 	215	,	5948
UNION SELECT 	218	,	5948
UNION SELECT 	219	,	5948
UNION SELECT 	220	,	5948
UNION SELECT 	221	,	5948
UNION SELECT 	228	,	5564
UNION SELECT 	230	,	5564
UNION SELECT 	231	,	5565
UNION SELECT 	232	,	5565
UNION SELECT 	233	,	5565
UNION SELECT 	234	,	5564
UNION SELECT 	243	,	5949
UNION SELECT 	245	,	5949
UNION SELECT 	246	,	5949
UNION SELECT 	247	,	5949
UNION SELECT 	248	,	5949
UNION SELECT 	249	,	5949
UNION SELECT 	251	,	5949
UNION SELECT 	259	,	3010
UNION SELECT 	260	,	3010
UNION SELECT 	269	,	5565
UNION SELECT 	270	,	5565
UNION SELECT 	314	,	5950
UNION SELECT 	314	,	5951
UNION SELECT 	315	,	5950
UNION SELECT 	315	,	5954
UNION SELECT 	317	,	5950
UNION SELECT 	317	,	5951
UNION SELECT 	363	,	5950
UNION SELECT 	364	,	5950
UNION SELECT 	364	,	5951
UNION SELECT 	365	,	5950
UNION SELECT 	365	,	5951
UNION SELECT 	385	,	5567
UNION SELECT 	385	,	5568
UNION SELECT 	385	,	5569
UNION SELECT 	385	,	5570
UNION SELECT 	385	,	5571
UNION SELECT 	385	,	5572
UNION SELECT 	385	,	5573
UNION SELECT 	385	,	5574
UNION SELECT 	385	,	5575
UNION SELECT 	385	,	5576
UNION SELECT 	385	,	5577
UNION SELECT 	385	,	5578
UNION SELECT 	405	,	3013
UNION SELECT 	405	,	3015
UNION SELECT 	405	,	3017
UNION SELECT 	405	,	3019
UNION SELECT 	405	,	3021
UNION SELECT 	405	,	3023
UNION SELECT 	405	,	3025
UNION SELECT 	405	,	3027
UNION SELECT 	406	,	3012
UNION SELECT 	406	,	3013
UNION SELECT 	406	,	3014
UNION SELECT 	407	,	3012
UNION SELECT 	407	,	3013
UNION SELECT 	407	,	3014
UNION SELECT 	420	,	5567
UNION SELECT 	420	,	5568
UNION SELECT 	420	,	5569
UNION SELECT 	426	,	5567
UNION SELECT 	426	,	5568
UNION SELECT 	426	,	5569
UNION SELECT 	426	,	5570
UNION SELECT 	426	,	5571
UNION SELECT 	427	,	5567
UNION SELECT 	427	,	5568
UNION SELECT 	427	,	5569
UNION SELECT 	427	,	5570
UNION SELECT 	427	,	5571
UNION SELECT 	428	,	5567
UNION SELECT 	428	,	5568
UNION SELECT 	428	,	5569
UNION SELECT 	428	,	5570
UNION SELECT 	428	,	5571
UNION SELECT 	428	,	5572
UNION SELECT 	428	,	5573
UNION SELECT 	428	,	5574
UNION SELECT 	428	,	5575
UNION SELECT 	428	,	5576
UNION SELECT 	428	,	5577
UNION SELECT 	428	,	5578
UNION SELECT 	428	,	5579
UNION SELECT 	428	,	5580
UNION SELECT 	428	,	5581
UNION SELECT 	428	,	5582
UNION SELECT 	428	,	5583
UNION SELECT 	451	,	5951
UNION SELECT 	469	,	5568
UNION SELECT 	469	,	5570
UNION SELECT 	469	,	5572
UNION SELECT 	469	,	5574
UNION SELECT 	469	,	5576
UNION SELECT 	469	,	5578
UNION SELECT 	469	,	5580
UNION SELECT 	469	,	5582
UNION SELECT 	488	,	5952
UNION SELECT 	489	,	5952
UNION SELECT 	489	,	5954
UNION SELECT 	489	,	5956
UNION SELECT 	489	,	5958
UNION SELECT 	489	,	5960
UNION SELECT 	489	,	5962
UNION SELECT 	489	,	5964
UNION SELECT 	489	,	5966
UNION SELECT 	509	,	5953
UNION SELECT 	509	,	5955
UNION SELECT 	509	,	5957
UNION SELECT 	509	,	5959
UNION SELECT 	509	,	5961
UNION SELECT 	509	,	5963
UNION SELECT 	509	,	5965
UNION SELECT 	509	,	5967
UNION SELECT 	513	,	5953
UNION SELECT 	513	,	5955
UNION SELECT 	513	,	5957
UNION SELECT 	513	,	5959
UNION SELECT 	513	,	5961
UNION SELECT 	513	,	5963
UNION SELECT 	513	,	5965
UNION SELECT 	513	,	5967
UNION SELECT 	530	,	5955
UNION SELECT 	530	,	5956
UNION SELECT 	530	,	5957
UNION SELECT 	530	,	5958
UNION SELECT 	530	,	5959
UNION SELECT 	530	,	5960
UNION SELECT 	530	,	5961
UNION SELECT 	530	,	5962
UNION SELECT 	530	,	5963
UNION SELECT 	530	,	5964
UNION SELECT 	530	,	5965
UNION SELECT 	530	,	5966
UNION SELECT 	530	,	5967
UNION SELECT 	531	,	5955
UNION SELECT 	531	,	5956
UNION SELECT 	531	,	5957
UNION SELECT 	531	,	5958
UNION SELECT 	531	,	5959
UNION SELECT 	531	,	5960
UNION SELECT 	531	,	5961
UNION SELECT 	531	,	5962
UNION SELECT 	531	,	5963
UNION SELECT 	531	,	5964
UNION SELECT 	531	,	5965
UNION SELECT 	531	,	5966
UNION SELECT 	531	,	5967
UNION SELECT 	537	,	5954
UNION SELECT 	537	,	5955
UNION SELECT 	583	,	5955
UNION SELECT 	583	,	5956
UNION SELECT 	583	,	5957
UNION SELECT 	583	,	5958
UNION SELECT 	583	,	5959
UNION SELECT 	583	,	5960
UNION SELECT 	583	,	5961
UNION SELECT 	583	,	5962
UNION SELECT 	583	,	5963
UNION SELECT 	583	,	5964
UNION SELECT 	583	,	5965
UNION SELECT 	583	,	5966
UNION SELECT 	590	,	5571
UNION SELECT 	591	,	5571
UNION SELECT 	592	,	5571
UNION SELECT 	614	,	5572
UNION SELECT 	623	,	5956
UNION SELECT 	666	,	5957
UNION SELECT 	696	,	5575
UNION SELECT 	696	,	5576
UNION SELECT 	696	,	5577
UNION SELECT 	696	,	5578
UNION SELECT 	797	,	5582
UNION SELECT 	797	,	5583
UNION SELECT 	801	,	5965
UNION SELECT 	872	,	5566 ;

-- Dumping structure for view accupaydb_cinema2k.schedloanpercutoff2
DROP VIEW IF EXISTS `schedloanpercutoff2`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `schedloanpercutoff2`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `schedloanpercutoff2` AS SELECT slp.*
, els.TotalLoanAmount
, pp.PayFromDate, pp.PayToDate, pp.OrdinalValue
FROM scheduledloansperpayperiod slp
INNER JOIN employeeloanschedule els ON els.RowID=slp.EmployeeLoanRecordID
INNER JOIN payperiod pp ON pp.RowID=slp.PayPeriodID
INNER JOIN employee e ON e.RowID=slp.EmployeeID AND CONCAT_WS(', ', e.LastName, e.FirstName) IN (
'Artiola, Urbano'
,'Morato, Felipe'
,'Dela Cruz, Victor'
,'Landoy, Anne Richelle'
,'Diamos, Cary'
,'Gabon, Eustiquiano'
,'Samar, Rommel')
ORDER BY slp.EmployeeLoanRecordID, pp.PayFromDate, pp.PayToDate, pp.OrdinalValue ;

-- Dumping structure for view accupaydb_cinema2k.vw_disciplinarymemouserdetails
DROP VIEW IF EXISTS `vw_disciplinarymemouserdetails`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `vw_disciplinarymemouserdetails`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vw_disciplinarymemouserdetails` AS SELECT
    U.RowID AS 'UserID',
    U.FirstName,
    U.MiddleName,
    U.LastName,
    TRIM(O.Name) AS 'CompanyName',
    O.Image,
    P.PositionName,
    CONCAT
    (
        IF(U.FirstName IS NULL OR TRIM(U.FirstName) = '', '', CONCAT
            (
             UPPER(SUBSTRING(TRIM(U.FirstName), 1, 1)),
             LOWER(SUBSTRING(TRIM(U.FirstName), 2)),
              ' ' )
            ),
        IF(U.MiddleName IS NULL OR TRIM(U.MiddleName) = '', '', CONCAT
            (
                UPPER(SUBSTRING(TRIM(U.MiddleName), 1, 1)),
                 '. ')
            ),
        IF(U.LastName IS NULL OR TRIM(U.LastName) = '', '', CONCAT
            (
             UPPER(SUBSTRING(TRIM(U.LastName), 1, 1)),
             LOWER(SUBSTRING(TRIM(U.LastName), 2)),
              ' ' )
            )
    ) AS 'FullName'
FROM
    user AS U
LEFT JOIN
    organization AS O
ON
    U.OrganizationID = O.RowID
LEFT JOIN
    position AS P
ON
    U.PositionID = P.RowID
LIMIT 1 ;

-- Dumping structure for view accupaydb_cinema2k.v_employeetimeentry_numbers
DROP VIEW IF EXISTS `v_employeetimeentry_numbers`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_employeetimeentry_numbers`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_employeetimeentry_numbers` AS SELECT et.RowID
	,et.OrganizationID
	,et.`Date`
	,pp.RowID `PayPeriodID`
	,et.EmployeeID
	#,SUM(et.RegularHoursWorked) `RegularHoursWorked`
	#,SUM(sh.DivisorToDailyRate) `DivisorToDailyRate`
	#,AVG((et.RegularHoursWorked / sh.DivisorToDailyRate)) `AttendancePercentage`
	#,COUNT(esh.RowID) `PerfectAttendance`
	
	,et.RegularHoursWorked
	,sh.DivisorToDailyRate
	,(et.RegularHoursWorked / sh.DivisorToDailyRate) `AttendancePercentage`
	
	,(et.HoursLate + et.UndertimeHours + et.AbsentHours) `HoursDeduct`
	
	FROM employeetimeentry et
	INNER JOIN employeeshift esh ON esh.RowID=et.EmployeeShiftID
	INNER JOIN shift sh ON sh.RowID=esh.ShiftID
	INNER JOIN payrate pr ON pr.RowID=et.PayRateID AND pr.PayType = 'Regular Day'
	INNER JOIN employeesalary esa ON esa.RowID=et.EmployeeSalaryID
	INNER JOIN payperiod pp ON pp.OrganizationID=et.OrganizationID AND et.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate
	
UNION
	SELECT et.RowID
	,et.OrganizationID
	,et.`Date`
	,pp.RowID `PayPeriodID`
	,et.EmployeeID
	,et.RegularHoursWorked
	,sh.DivisorToDailyRate
	,0 `AttendancePercentage`
	
	,(et.HoursLate + et.UndertimeHours + et.AbsentHours) `HoursDeduct`
	
	FROM employeetimeentry et
	INNER JOIN employee e ON e.RowID=et.EmployeeID
	INNER JOIN employeeshift esh ON esh.RowID=et.EmployeeShiftID
	INNER JOIN shift sh ON sh.RowID=esh.ShiftID
	INNER JOIN payrate pr ON pr.RowID=et.PayRateID AND pr.PayType = 'Regular Holiday'
	INNER JOIN employeesalary esa ON esa.RowID=et.EmployeeSalaryID
	INNER JOIN payperiod pp ON pp.OrganizationID=et.OrganizationID AND et.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate
	WHERE et.RegularHoursWorked = 0
	      AND et.TotalDayPay = 0

UNION
	SELECT et.RowID
	,et.OrganizationID
	,et.`Date`
	,pp.RowID `PayPeriodID`
	,et.EmployeeID
	,et.RegularHoursWorked
	,sh.DivisorToDailyRate
	,1 `AttendancePercentage`
	
	,(et.HoursLate + et.UndertimeHours + et.AbsentHours) `HoursDeduct`
	
	FROM employeetimeentry et
	INNER JOIN employee e ON e.RowID=et.EmployeeID
	INNER JOIN employeeshift esh ON esh.RowID=et.EmployeeShiftID
	INNER JOIN shift sh ON sh.RowID=esh.ShiftID
	INNER JOIN payrate pr ON pr.RowID=et.PayRateID AND pr.PayType = 'Regular Holiday'
	INNER JOIN employeesalary esa ON esa.RowID=et.EmployeeSalaryID
	INNER JOIN payperiod pp ON pp.OrganizationID=et.OrganizationID AND et.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate
	WHERE et.RegularHoursWorked = 0
	      AND et.TotalDayPay > 0

UNION
	SELECT et.RowID
	,et.OrganizationID
	,et.`Date`
	,pp.RowID `PayPeriodID`
	,et.EmployeeID
	,et.RegularHoursWorked
	,sh.DivisorToDailyRate
	,(et.RegularHoursAmount >= ( IF(e.EmployeeType = 'Daily'
		                             , esa.BasicPay
											  , ROUND((esa.Salary / (e.WorkDaysPerYear / 12)), 2)) )) `AttendancePercentage`
	
	,(et.HoursLate + et.UndertimeHours + et.AbsentHours) `HoursDeduct`
	
	FROM employeetimeentry et
	INNER JOIN employee e ON e.RowID=et.EmployeeID
	INNER JOIN employeeshift esh ON esh.RowID=et.EmployeeShiftID
	INNER JOIN shift sh ON sh.RowID=esh.ShiftID
	INNER JOIN payrate pr ON pr.RowID=et.PayRateID AND pr.PayType = 'Regular Holiday'
	INNER JOIN employeesalary esa ON esa.RowID=et.EmployeeSalaryID
	INNER JOIN payperiod pp ON pp.OrganizationID=et.OrganizationID AND et.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate
	WHERE et.RegularHoursWorked > 0
	      AND et.TotalDayPay > 0

UNION
	SELECT et.RowID
	,et.OrganizationID
	,et.`Date`
	,pp.RowID `PayPeriodID`
	,et.EmployeeID
	,et.RegularHoursWorked
	,sh.DivisorToDailyRate
	,(et.RegularHoursAmount >= ( IF(e.EmployeeType = 'Daily'
		                             , esa.BasicPay
											  , ROUND((esa.Salary / (e.WorkDaysPerYear / 12)), 2)) )) `AttendancePercentage`
	
	,(et.HoursLate + et.UndertimeHours + et.AbsentHours) `HoursDeduct`
	
	FROM employeetimeentry et
	INNER JOIN employee e ON e.RowID=et.EmployeeID AND e.CalcSpecialHoliday = 0
	INNER JOIN employeeshift esh ON esh.RowID=et.EmployeeShiftID
	INNER JOIN shift sh ON sh.RowID=esh.ShiftID
	INNER JOIN payrate pr ON pr.RowID=et.PayRateID AND pr.PayType = 'Special Non-Working Holiday'
	INNER JOIN employeesalary esa ON esa.RowID=et.EmployeeSalaryID
	INNER JOIN payperiod pp ON pp.OrganizationID=et.OrganizationID AND et.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate

UNION
	SELECT et.RowID
	,et.OrganizationID
	,et.`Date`
	,pp.RowID `PayPeriodID`
	,et.EmployeeID
	,et.RegularHoursWorked
	,sh.DivisorToDailyRate
	,((et.RegularHoursAmount / pr.`PayRate`)
	  >= ( IF(e.EmployeeType = 'Daily'
	          , esa.BasicPay
				 , ROUND((esa.Salary / (e.WorkDaysPerYear / 12)), 2)) )) `AttendancePercentage`
	
	,(et.HoursLate + et.UndertimeHours + et.AbsentHours) `HoursDeduct`
	
	FROM employeetimeentry et
	INNER JOIN employee e ON e.RowID=et.EmployeeID AND e.CalcSpecialHoliday = 1
	INNER JOIN employeeshift esh ON esh.RowID=et.EmployeeShiftID
	INNER JOIN shift sh ON sh.RowID=esh.ShiftID
	INNER JOIN payrate pr ON pr.RowID=et.PayRateID AND pr.PayType = 'Special Non-Working Holiday'
	INNER JOIN employeesalary esa ON esa.RowID=et.EmployeeSalaryID
	INNER JOIN payperiod pp ON pp.OrganizationID=et.OrganizationID AND et.`Date` BETWEEN pp.PayFromDate AND pp.PayToDate ;

-- Dumping structure for view accupaydb_cinema2k.v_emptimeenetryholidaypay
DROP VIEW IF EXISTS `v_emptimeenetryholidaypay`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_emptimeenetryholidaypay`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_emptimeenetryholidaypay` AS SELECT ete.*
,pr.PayType
,pr.`PayRate`
,pr.OvertimeRate
,pr.NightDifferentialRate
,pr.NightDifferentialOTRate
,pr.RestDayRate
,pr.RestDayOvertimeRate
,ete.TotalDayPay - (ete.TotalDayPay / pr.`PayRate`) AS HolidayPay
FROM employeetimeentry ete
INNER JOIN payrate pr ON pr.OrganizationID=ete.OrganizationID AND pr.`Date`=ete.`Date` ;

-- Dumping structure for view accupaydb_cinema2k.v_sumpsitaxableallowance
DROP VIEW IF EXISTS `v_sumpsitaxableallowance`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_sumpsitaxableallowance`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_sumpsitaxableallowance` AS SELECT
psi.RowID AS psiRowID
,psi.PayAmount
,psi.OrganizationID
,psi.PayStubID
,psi.ProductID
,psi.Undeclared
,p.CategoryID
,p.`Status` AS Taxable
,p.PartNo
FROM paystubitem psi
INNER JOIN product p ON p.RowID=psi.ProductID
ORDER BY psi.PayStubID ;

-- Dumping structure for view accupaydb_cinema2k.v_sumthirteenthmonthpay
DROP VIEW IF EXISTS `v_sumthirteenthmonthpay`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_sumthirteenthmonthpay`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_sumthirteenthmonthpay` AS SELECT
tmp.RowID
,tmp.OrganizationID
,tmp.PaystubID
,tmp.Amount
,ps.PayFromDate
,ps.PayToDate
,ps.EmployeeID
,pp.`Half`
,pp.`Month`
,pp.`Year`
FROM thirteenthmonthpay tmp
INNER JOIN paystub ps ON ps.RowID=tmp.PaystubID AND ps.OrganizationID=tmp.OrganizationID
INNER JOIN payperiod pp ON pp.RowID=ps.PayPeriodID AND pp.OrganizationID=tmp.OrganizationID ;

-- Dumping structure for view accupaydb_cinema2k.v_uni_employeetimeentry
DROP VIEW IF EXISTS `v_uni_employeetimeentry`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_uni_employeetimeentry`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_uni_employeetimeentry` AS SELECT RowID,OrganizationID,`Date`,EmployeeShiftID,EmployeeID,EmployeeSalaryID,EmployeeFixedSalaryFlag,RegularHoursWorked,RegularHoursAmount,TotalHoursWorked,OvertimeHoursWorked,OvertimeHoursAmount,UndertimeHours,UndertimeHoursAmount,NightDifferentialHours,NightDiffHoursAmount,NightDifferentialOTHours,NightDiffOTHoursAmount,HoursLate,HoursLateAmount,LateFlag,PayRateID,VacationLeaveHours,SickLeaveHours,MaternityLeaveHours,OtherLeaveHours,TotalDayPay,Absent,ChargeToDivisionID,HolidayPayAmount,0 `AsActual`,RestDayHours,RestDayAmount,RestDayOTHours,RestDayOTPay FROM employeetimeentry
UNION
SELECT RowID,OrganizationID,`Date`,EmployeeShiftID,EmployeeID,EmployeeSalaryID,EmployeeFixedSalaryFlag,RegularHoursWorked,RegularHoursAmount,TotalHoursWorked,OvertimeHoursWorked,OvertimeHoursAmount,UndertimeHours,UndertimeHoursAmount,NightDifferentialHours,NightDiffHoursAmount,NightDifferentialOTHours,NightDiffOTHoursAmount,HoursLate,HoursLateAmount,LateFlag,PayRateID,VacationLeaveHours,SickLeaveHours,MaternityLeaveHours,OtherLeaveHours,TotalDayPay,Absent,ChargeToDivisionID,HolidayPayAmount,1 `AsActual`,RestDayHours,RestDayAmount,RestDayOTHours,RestDayOTPay FROM employeetimeentryactual ;

-- Dumping structure for view accupaydb_cinema2k.v_uni_paystub
DROP VIEW IF EXISTS `v_uni_paystub`;
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_uni_paystub`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_uni_paystub` AS SELECT
        RowID,
        OrganizationID,
        PayPeriodID,
        EmployeeID,
        TimeEntryID,
        PayFromDate,
        PayToDate,
        TotalGrossSalary,
        TotalNetSalary,
        TotalTaxableSalary,
        TotalEmpSSS,
        TotalEmpWithholdingTax,
        TotalCompSSS,
        TotalEmpPhilhealth,
        TotalCompPhilhealth,
        TotalEmpHDMF,
        TotalCompHDMF,
        TotalVacationDaysLeft,
        TotalLoans,
        TotalBonus,
        TotalAllowance,
        TotalAdjustments,
        ThirteenthMonthInclusion,
        FirstTimeSalary,
        0 `AsActual`
    FROM paystub
UNION
    SELECT
        RowID,
        OrganizationID,
        PayPeriodID,
        EmployeeID,
        TimeEntryID,
        PayFromDate,
        PayToDate,
        TotalGrossSalary,
        TotalNetSalary,
        TotalTaxableSalary,
        TotalEmpSSS,
        TotalEmpWithholdingTax,
        TotalCompSSS,
        TotalEmpPhilhealth,
        TotalCompPhilhealth,
        TotalEmpHDMF,
        TotalCompHDMF,
        TotalVacationDaysLeft,
        TotalLoans,
        TotalBonus,
        TotalAllowance,
        TotalAdjustments,
        ThirteenthMonthInclusion,
        FirstTimeSalary,
        1 `AsActual`
    FROM paystubactual ;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
